using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Timers;
using System.IO;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace GridAdventure1
{
    public class Program
    {
        static void Main(string[] args)
        {
            PlayGame game = new PlayGame();
            game.Game();
        }
    }

    public class SaveData
    {
        //[JsonProperty ("playerLevel")]

        //Main Game
        public string currentMapSave { get; set; }
        public string currentLocationSave { get; set; }
        public string textSpeedSave { get; set; }
        //Counters
        public string storyCounterSave { get; set; }
        public string vanyaTalkSave { get; set; }
        public string librarianCounterSave { get; set; }
        public string boatguyCounterSave { get; set; }
        public string librarysketchymanCounterSave { get; set; }
        public string libraryoldmanCounterSave { get; set; }
        public string minerCounterSave { get; set; }
        public string cityVisitorSave { get; set; }
        public string antonCounterSave { get; set; }
        public string boatToKarstbaySave { get; set; }
        public string takeCoinsSave { get; set; }
        public string WaterfallQuestBranch1Save { get; set; }
        public string WaterfallQuestBranch2Save { get; set; }
        public string WaterfallQuestBranch3Save { get; set; }
        //PlayerStats
        public string playerLevelSave { get; set; }
        public string playerCurrentExpSave { get; set; }
        public string playerMoneySave { get; set; }
        public string playerNameSave { get; set; }
        public string playerFavDrinkSave { get; set; }
        public string playerVertExp1Save { get; set; }
        public string playerVertExp2Save { get; set; }
        public string playerSpriteSave { get; set; }
        public string playerArmourSave { get; set; }
        public string playerWeaponSave { get; set; }
        public string playerShieldSave { get; set; }
        public string playerWeaponElementSave { get; set; }
        public string playerArmourElementSave { get; set; }
        public string playerWeaponStatNameSave { get; set; }
        public string playerArmourStatNameSave { get; set; }
        public string playerHitSave { get; set; }
        public string playerArmourDefSave { get; set; }
        public string playerWeaponStrengthSave { get; set; }
        public string playerArmourSpeedSave { get; set; }
        public string playerWeaponSpeedSave { get; set; }
        public string playerWeaponHPSave { get; set; }
        public string playerWeaponHitSave { get; set; }
        public string playerWeaponCharismaSave { get; set; }
        public string playerShieldDefSave { get; set; }
        public string playerShieldSpeedSave { get; set; }
        public string playerShieldHPSave { get; set; }
        public string playerShieldCharismaSave { get; set; }
        public string playerShieldHitSave { get; set; }
        public string playerAccuracySave { get; set; }

        //Meeba
        //Maps...
        //Enemies
        //Interactables
        //Inventory + dictionary
        //questlog
        //computerstorage
        //computerdnaitemstorage
        //weapons e.g. stick, axe, sword etc.
    }

    [JsonObject]
    public class PlayGame
    {
        //PUBLIC VARIABLES - save
        public PlayerStats playerStats = new PlayerStats();
        public int CurrentMap;
        public int CurrentLocation;
        public int textSpeed = 20;
        public WorldMap[][] WorldMapCells;
        public Meeba meeba = new Meeba();
        public Meeba meeba2 = new Meeba();
        public Inventory inventory = new Inventory();
        public Dictionary<string, int> getInvDictionary1()
        {
            return inventory.getInvDictionary();
        }
        public Dictionary<string, int> ComputerStorage = new Dictionary<string, int>(); //Computer Storage
        public Dictionary<string, int> ComputerDNAItemStorage = new Dictionary<string, int>(); //Evolve item Storage
        public List<string> questLog = new List<string> { };
        //Counters
        public int storyCounter = 0; //CHANGE
        public bool vanyaTalk = false;
        public int librarianCounter = 0;
        public int boatguyCounter = 0;
        public int librarysketchymanCounter = 0;
        public int libraryoldmanCounter = 0;
        public int minerCounter = 0;
        public bool useableItem; //in item menu in battle - to check if a useable item has been selected
        public int cityVisitor = 0;
        public int antonCounter = 0;
        public bool boatToKarstbay = true; //false == ToRifton
        public bool takeCoins = false;
        public bool WaterfallQuestBranch1 = false;
        public bool WaterfallQuestBranch2 = false;
        public bool WaterfallQuestBranch3 = false;

        //PUBLIC VARIABLES - don't save
        public ConsoleColor backgroundColour = ConsoleColor.Black;
        public ConsoleColor foregroundColour = ConsoleColor.Gray;
        public Random random = new Random();
        public string itemChoice;
        public Item examItem = new Item();
        public int currentCount;
        public Enemy opponentOne;
        public Enemy opponentTwo;
        public Enemy opponentThree;
        public Meeba currentDNAMeeba;
        public bool torchOn = false;
        public List<string> InvPhrases;
        public string userValue;
        public string userValueItem;
        public string[] GridMap;
        public Dictionary<int, int> Levels;
        public List<int> westernBorder = new List<int> { 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }; //west and east boundaries of grid
        public List<int> easternBorder = new List<int> { 9, 19, 29, 39, 49, 59, 69, 79, 89, 99 };
        //Battle public vars
        public List<Enemy> ThisBattleEnemies = new List<Enemy>() { }; //list for use in battle of chosen enemies
        public List<Meeba> ThisBattleMeebas = new List<Meeba>() { }; //list for use in battle of current meeba
        //meeba damage
        public double damageCalcAllyAttacking;
        public double damageCalcOppAttacking;
        //player damage
        public double damageCalcPlayerAttacking;
        //damage calculation
        public double tempAllyAttack = 1; //in e.g. meeba1 attack - sub in meeba1 values
        public double tempOppDefense = 1;
        public double tempAllyMoveBasePower = 1;
        public double tempAllyItemBonus = 1;
        public double tempAllyHit = 100;
        public double tempOppAttack = 1;
        public double tempAllyDefense = 1;
        public double tempOppMoveBasePower = 1;
        public double tempOppItemBonus = 1;
        public double tempOppHit = 100;
        public double tempAllySTAB = 1;
        public double tempAllyTypeAdv = 1;
        public double tempPlayerTypeAdv = 1;
        public double tempOppSTAB = 1;
        public double tempOppTypeAdv = 1;
        public string[] enemyAdjectives = new string[] { "An Angry", "A Fuming", "A Vehement", "A Grouchy", "A Podgy", "A Placid", "A Debatable", "A Hairy", "An Enormous", "A Tiny", "An Ugly", "A Scary", "A Ravenous", "An Edacious", "A Viking", "A Tantalising", "A Bearded", "A Terrifying" };
        public int randomMember1;
        public int randomMember2;
        public int randomMember3;
        public Enemy currentEnemy;
        public string currentMeeba;
        public bool resetMenu = false;
        //Meeba states
        public FireTier1 FT1 = new FireTier1();
        public FireTier2 FT2 = new FireTier2();
        public FireTier3 FT3 = new FireTier3();
        public FireTier4 FT4 = new FireTier4();
        public PlantTier1 PT1 = new PlantTier1();
        public PlantTier2 PT2 = new PlantTier2();
        public PlantTier3 PT3 = new PlantTier3();
        public PlantTier4 PT4 = new PlantTier4();
        public EarthTier1 ET1 = new EarthTier1();
        public EarthTier2 ET2 = new EarthTier2();
        public EarthTier3 ET3 = new EarthTier3();
        public EarthTier4 ET4 = new EarthTier4();
        public AirTier1 AT1 = new AirTier1();
        public AirTier2 AT2 = new AirTier2();
        public AirTier3 AT3 = new AirTier3();
        public AirTier4 AT4 = new AirTier4();
        public WaterTier1 WT1 = new WaterTier1();
        public WaterTier2 WT2 = new WaterTier2();
        public WaterTier3 WT3 = new WaterTier3();
        public WaterTier4 WT4 = new WaterTier4();
        public FirePlantTier1 CT1 = new FirePlantTier1();
        public FirePlantTier2 CT2 = new FirePlantTier2();
        public FirePlantTier3 CT3 = new FirePlantTier3();
        public FirePlantTier4 CT4 = new FirePlantTier4();
        public PlantEarthTier1 MT1 = new PlantEarthTier1();
        public PlantEarthTier2 MT2 = new PlantEarthTier2();
        public PlantEarthTier3 MT3 = new PlantEarthTier3();
        public PlantEarthTier4 MT4 = new PlantEarthTier4();
        public EarthAirTier1 DT1 = new EarthAirTier1();
        public EarthAirTier2 DT2 = new EarthAirTier2();
        public EarthAirTier3 DT3 = new EarthAirTier3();
        public EarthAirTier4 DT4 = new EarthAirTier4();
        public AirWaterTier1 ST1 = new AirWaterTier1();
        public AirWaterTier2 ST2 = new AirWaterTier2();
        public AirWaterTier3 ST3 = new AirWaterTier3();
        public AirWaterTier4 ST4 = new AirWaterTier4();
        public WaterFireTier1 HT1 = new WaterFireTier1();
        public WaterFireTier2 HT2 = new WaterFireTier2();
        public WaterFireTier3 HT3 = new WaterFireTier3();
        public WaterFireTier4 HT4 = new WaterFireTier4();
        //Items
        public Stick Stick = new Stick();
        public Sword Sword = new Sword();
        public Axe Axe = new Axe();
        public Mace Mace = new Mace();
        public Spear Spear = new Spear();
        public Bow Bow = new Bow();
        public Shield Shield = new Shield();
        public FavDrink FavDrink = new FavDrink();
        public bool meebaEvolved;
        public string currentGraftWeapon;
        public string currentGraftWeaponItem;
        public string message;
        public bool skip = true;
        //Regex
        public string talkPhrases = @"\btalk\b|\bspeak\b|\bhi\b|\bhello\b|\bhey\b|\bask\b|\bgreet\b|\bgreetings\b|\bgood morning\b|\bgood afternoon\b|\bgood evening\b|\bgood day\b|\bgood night\b|\bhowdy\b|\byo\b"; //all possible phrases
        public string equipPhrases = @"\bequip\b|\bwear\b|\bdon\b|\bput on\b";
        public string labcompPhrases = @"\buse computer\b|\bcomputer\b|\bturn on computer\b|\blog on comuter\b|\blog onto computer\b|\blog on to computer\b|\baccess computer\b";
        public string affirmativePhrases = @"\byes\b|\byeah\b|\byep\b|\bok\b|\byes please\b";
        public string negativePhrases = @"\bno\b|\bnope\b|\bnah\b|\bno way\b";
        public string takecoinPhrases = @"\bcoin\b|\bcoins\b|\btake coins\b";
        public QRCodes qrcodes = new QRCodes();
        //NPCCodes
        public string NPCIdentifier = "NPC";
        public string ENDNPCIdentifier = "ENDNPC";
        public string NPCName = "";
        public int NPCConvStage = 0;
        //Quest vars
        public string branchdrop = @"\bdrop branch\b|\bdrop large branch\b|\bput branch in waterfall\b|\bput branch in water\b|\bbuild dam with branch\b|\bblock water with branch\b|\bput branch\b|\bplace branch\b|\bput large branch\b|\bplace large branch\b|\bthrow branch\b|\bthrow large branch\b|\buse branch\b|\buse large branch\b";
        public string libraryoldmanbook = @"\bgive book to man\b|\bgive book to elderly man\b|\bgive book to old man\b|\bgive soil book to old man\b|\bgive soil book to man\b|\bgive soil book to elderly man\b|\bgive soil quality and gardening book to old man\b|\bgive soil quality and gardening book to man\b|\bgive soil quality and gardening book to elderly man\b|\bgive soil quality and gardening to old man\b|\bgive soil quality and gardening to man\b|\bgive soil quality and gardening to elderly man\b";
        public string poolHealPhrases = @"\bdrink\b|\bjump in\b|\bget in\b|\bfall in\b|\bgo in\b|\benter\b|\bpool\b";
        public string helpPhrases = @"\bhelp\b|\bhint\b|\bhints\b|\bclue\b|\bstuck\b|\blost\b";
        public string digPhrases = @"\bdig\b|\bpickaxe\b|\bexcavate\b";
        public string BookMapPhrases = @"\bread\b|\bview\b|\blook at\b|\bopen\b";
        public string MapPhrases = @"\bmap\b";

        enum MainMenuState { MainMenu, Inventory, Stats, Equipment, Monsters, Settings, QuestLog, Help, Save, ExitMenu }
        MainMenuState currentMainMenuState = MainMenuState.MainMenu;

        enum BattleState { Options, Run, Defend, SpeedComparison, EnemyOneMove, EnemyOneAttack, EnemyOneDefend, EnemyOneRun, EnemyTwoMove, EnemyTwoAttack, EnemyTwoDefend, EnemyTwoRun, EnemyThreeMove, EnemyThreeAttack, EnemyThreeDefend, EnemyThreeRun, PlayerMove, PlayerAttack, PlayerItem, PlayerMonster, MeebaOneMove, MeebaOneSpecial, MeebaOneDefend, MeebaTwoMove, MeebaTwoSpecial, MeebaTwoDefend, Win, Lose, Summary, Exit }
        BattleState currentState = BattleState.Options;

        //MAIN GAME METHOD
        public void Game()
        {
            //SETUP VARIABLES BEFORE DO-WHILE LOOP
            WriteLineText("PLEASE MAXIMISE THIS WINDOW THEN PRESS ENTER");
            string ok;
            do
            {
                Console.Write("> ");
                ok = Console.ReadLine();
            } while (ok != "");
            Thread.Sleep(1000);
            Console.Clear();


            CurrentMap = 0; //Starting at Rifton, updates accordingly
            CurrentLocation = 15; //Starting at Your house, updates accordingly

            Levels = new Dictionary<int, int>(); //Dictionary of exp and levels. Key = exp, Value - level. exp = y = 0.034x^3 - 1.096x^2 + 29.892x -16.83
            Levels.Add(0, 1); Levels.Add(12, 2); Levels.Add(51, 3); Levels.Add(115, 4); Levels.Add(202, 5); Levels.Add(311, 6); Levels.Add(441, 7); Levels.Add(591, 8); Levels.Add(761, 9); Levels.Add(949, 10);
            Levels.Add(1155, 11); Levels.Add(1380, 12); Levels.Add(1623, 13); Levels.Add(1884, 14); Levels.Add(2164, 15); Levels.Add(2464, 16); Levels.Add(2784, 17); Levels.Add(3126, 18); Levels.Add(3490, 19); Levels.Add(3879, 20);
            Levels.Add(4294, 21); Levels.Add(4736, 22); Levels.Add(5208, 23); Levels.Add(5713, 24); Levels.Add(6252, 25); Levels.Add(6829, 26); Levels.Add(7446, 27); Levels.Add(8106, 28); Levels.Add(8813, 29); Levels.Add(9571, 30);
            Levels.Add(10383, 31); Levels.Add(11252, 32); Levels.Add(12184, 33); Levels.Add(13182, 34); Levels.Add(14251, 35); Levels.Add(15396, 36); Levels.Add(16621, 37); Levels.Add(17932, 38); Levels.Add(19334, 39); Levels.Add(20833, 40);
            Levels.Add(22434, 41); Levels.Add(24144, 42); Levels.Add(25968, 43); Levels.Add(27913, 44); Levels.Add(29986, 45); Levels.Add(32193, 46); Levels.Add(34541, 47); Levels.Add(37038, 48); Levels.Add(39691, 49); Levels.Add(42507, 50);

            //Rifton map - array of all grid cell classes
            RiftonMap[] RiftonMapCell = new RiftonMap[100];
            RiftonMapCell[0] = new RiftonMap0(); RiftonMapCell[1] = new RiftonMap1(); RiftonMapCell[2] = new RiftonMap2(); RiftonMapCell[3] = new RiftonMap3(); RiftonMapCell[4] = new RiftonMap4(); RiftonMapCell[5] = new RiftonMap5(); RiftonMapCell[6] = new RiftonMap6(); RiftonMapCell[7] = new RiftonMap7(); RiftonMapCell[8] = new RiftonMap8(); RiftonMapCell[9] = new RiftonMap9();
            RiftonMapCell[10] = new RiftonMap10(); RiftonMapCell[11] = new RiftonMap11(); RiftonMapCell[12] = new RiftonMap12(); RiftonMapCell[13] = new RiftonMap13(); RiftonMapCell[14] = new RiftonMap14(); RiftonMapCell[15] = new RiftonMap15(); RiftonMapCell[16] = new RiftonMap16(); RiftonMapCell[17] = new RiftonMap17(); RiftonMapCell[18] = new RiftonMap18(); RiftonMapCell[19] = new RiftonMap19();
            RiftonMapCell[20] = new RiftonMap20(); RiftonMapCell[21] = new RiftonMap21(); RiftonMapCell[22] = new RiftonMap22(); RiftonMapCell[23] = new RiftonMap23(); RiftonMapCell[24] = new RiftonMap24(); RiftonMapCell[25] = new RiftonMap25(); RiftonMapCell[26] = new RiftonMap26(); RiftonMapCell[27] = new RiftonMap27(); RiftonMapCell[28] = new RiftonMap28(); RiftonMapCell[29] = new RiftonMap29();
            RiftonMapCell[30] = new RiftonMap30(); RiftonMapCell[31] = new RiftonMap31(); RiftonMapCell[32] = new RiftonMap32(); RiftonMapCell[33] = new RiftonMap33(); RiftonMapCell[34] = new RiftonMap34(); RiftonMapCell[35] = new RiftonMap35(); RiftonMapCell[36] = new RiftonMap36(); RiftonMapCell[37] = new RiftonMap37(); RiftonMapCell[38] = new RiftonMap38(); RiftonMapCell[39] = new RiftonMap39();
            RiftonMapCell[40] = new RiftonMap40(); RiftonMapCell[41] = new RiftonMap41(); RiftonMapCell[42] = new RiftonMap42(); RiftonMapCell[43] = new RiftonMap43(); RiftonMapCell[44] = new RiftonMap44(); RiftonMapCell[45] = new RiftonMap45(); RiftonMapCell[46] = new RiftonMap46(); RiftonMapCell[47] = new RiftonMap47(); RiftonMapCell[48] = new RiftonMap48(); RiftonMapCell[49] = new RiftonMap49();
            RiftonMapCell[50] = new RiftonMap50(); RiftonMapCell[51] = new RiftonMap51(); RiftonMapCell[52] = new RiftonMap52(); RiftonMapCell[53] = new RiftonMap53(); RiftonMapCell[54] = new RiftonMap54(); RiftonMapCell[55] = new RiftonMap55(); RiftonMapCell[56] = new RiftonMap56(); RiftonMapCell[57] = new RiftonMap57(); RiftonMapCell[58] = new RiftonMap58(); RiftonMapCell[59] = new RiftonMap59();
            RiftonMapCell[60] = new RiftonMap60(); RiftonMapCell[61] = new RiftonMap61(); RiftonMapCell[62] = new RiftonMap62(); RiftonMapCell[63] = new RiftonMap63(); RiftonMapCell[64] = new RiftonMap64(); RiftonMapCell[65] = new RiftonMap65(); RiftonMapCell[66] = new RiftonMap66(); RiftonMapCell[67] = new RiftonMap67(); RiftonMapCell[68] = new RiftonMap68(); RiftonMapCell[69] = new RiftonMap69();
            RiftonMapCell[70] = new RiftonMap70(); RiftonMapCell[71] = new RiftonMap71(); RiftonMapCell[72] = new RiftonMap72(); RiftonMapCell[73] = new RiftonMap73(); RiftonMapCell[74] = new RiftonMap74(); RiftonMapCell[75] = new RiftonMap75(); RiftonMapCell[76] = new RiftonMap76(); RiftonMapCell[77] = new RiftonMap77(); RiftonMapCell[78] = new RiftonMap78(); RiftonMapCell[79] = new RiftonMap79();
            RiftonMapCell[80] = new RiftonMap80(); RiftonMapCell[81] = new RiftonMap81(); RiftonMapCell[82] = new RiftonMap82(); RiftonMapCell[83] = new RiftonMap83(); RiftonMapCell[84] = new RiftonMap84(); RiftonMapCell[85] = new RiftonMap85(); RiftonMapCell[86] = new RiftonMap86(); RiftonMapCell[87] = new RiftonMap87(); RiftonMapCell[88] = new RiftonMap88(); RiftonMapCell[89] = new RiftonMap89();
            RiftonMapCell[90] = new RiftonMap90(); RiftonMapCell[91] = new RiftonMap91(); RiftonMapCell[92] = new RiftonMap92(); RiftonMapCell[93] = new RiftonMap93(); RiftonMapCell[94] = new RiftonMap94(); RiftonMapCell[95] = new RiftonMap95(); RiftonMapCell[96] = new RiftonMap96(); RiftonMapCell[97] = new RiftonMap97(); RiftonMapCell[98] = new RiftonMap98(); RiftonMapCell[99] = new RiftonMap99();

            //Rifton Forest Map - array of all grid cell classes
            RiftonForestMap[] RiftonForestMapCell = new RiftonForestMap[100];
            RiftonForestMapCell[0] = new RiftonForestMap0(); RiftonForestMapCell[1] = new RiftonForestMap1(); RiftonForestMapCell[2] = new RiftonForestMap2(); RiftonForestMapCell[3] = new RiftonForestMap3(); RiftonForestMapCell[4] = new RiftonForestMap4(); RiftonForestMapCell[5] = new RiftonForestMap5(); RiftonForestMapCell[6] = new RiftonForestMap6(); RiftonForestMapCell[7] = new RiftonForestMap7(); RiftonForestMapCell[8] = new RiftonForestMap8(); RiftonForestMapCell[9] = new RiftonForestMap9();
            RiftonForestMapCell[10] = new RiftonForestMap10(); RiftonForestMapCell[11] = new RiftonForestMap11(); RiftonForestMapCell[12] = new RiftonForestMap12(); RiftonForestMapCell[13] = new RiftonForestMap13(); RiftonForestMapCell[14] = new RiftonForestMap14(); RiftonForestMapCell[15] = new RiftonForestMap15(); RiftonForestMapCell[16] = new RiftonForestMap16(); RiftonForestMapCell[17] = new RiftonForestMap17(); RiftonForestMapCell[18] = new RiftonForestMap18(); RiftonForestMapCell[19] = new RiftonForestMap19();
            RiftonForestMapCell[20] = new RiftonForestMap20(); RiftonForestMapCell[21] = new RiftonForestMap21(); RiftonForestMapCell[22] = new RiftonForestMap22(); RiftonForestMapCell[23] = new RiftonForestMap23(); RiftonForestMapCell[24] = new RiftonForestMap24(); RiftonForestMapCell[25] = new RiftonForestMap25(); RiftonForestMapCell[26] = new RiftonForestMap26(); RiftonForestMapCell[27] = new RiftonForestMap27(); RiftonForestMapCell[28] = new RiftonForestMap28(); RiftonForestMapCell[29] = new RiftonForestMap29();
            RiftonForestMapCell[30] = new RiftonForestMap30(); RiftonForestMapCell[31] = new RiftonForestMap31(); RiftonForestMapCell[32] = new RiftonForestMap32(); RiftonForestMapCell[33] = new RiftonForestMap33(); RiftonForestMapCell[34] = new RiftonForestMap34(); RiftonForestMapCell[35] = new RiftonForestMap35(); RiftonForestMapCell[36] = new RiftonForestMap36(); RiftonForestMapCell[37] = new RiftonForestMap37(); RiftonForestMapCell[38] = new RiftonForestMap38(); RiftonForestMapCell[39] = new RiftonForestMap39();
            RiftonForestMapCell[40] = new RiftonForestMap40(); RiftonForestMapCell[41] = new RiftonForestMap41(); RiftonForestMapCell[42] = new RiftonForestMap42(); RiftonForestMapCell[43] = new RiftonForestMap43(); RiftonForestMapCell[44] = new RiftonForestMap44(); RiftonForestMapCell[45] = new RiftonForestMap45(); RiftonForestMapCell[46] = new RiftonForestMap46(); RiftonForestMapCell[47] = new RiftonForestMap47(); RiftonForestMapCell[48] = new RiftonForestMap48(); RiftonForestMapCell[49] = new RiftonForestMap49();
            RiftonForestMapCell[50] = new RiftonForestMap50(); RiftonForestMapCell[51] = new RiftonForestMap51(); RiftonForestMapCell[52] = new RiftonForestMap52(); RiftonForestMapCell[53] = new RiftonForestMap53(); RiftonForestMapCell[54] = new RiftonForestMap54(); RiftonForestMapCell[55] = new RiftonForestMap55(); RiftonForestMapCell[56] = new RiftonForestMap56(); RiftonForestMapCell[57] = new RiftonForestMap57(); RiftonForestMapCell[58] = new RiftonForestMap58(); RiftonForestMapCell[59] = new RiftonForestMap59();
            RiftonForestMapCell[60] = new RiftonForestMap60(); RiftonForestMapCell[61] = new RiftonForestMap61(); RiftonForestMapCell[62] = new RiftonForestMap62(); RiftonForestMapCell[63] = new RiftonForestMap63(); RiftonForestMapCell[64] = new RiftonForestMap64(); RiftonForestMapCell[65] = new RiftonForestMap65(); RiftonForestMapCell[66] = new RiftonForestMap66(); RiftonForestMapCell[67] = new RiftonForestMap67(); RiftonForestMapCell[68] = new RiftonForestMap68(); RiftonForestMapCell[69] = new RiftonForestMap69();
            RiftonForestMapCell[70] = new RiftonForestMap70(); RiftonForestMapCell[71] = new RiftonForestMap71(); RiftonForestMapCell[72] = new RiftonForestMap72(); RiftonForestMapCell[73] = new RiftonForestMap73(); RiftonForestMapCell[74] = new RiftonForestMap74(); RiftonForestMapCell[75] = new RiftonForestMap75(); RiftonForestMapCell[76] = new RiftonForestMap76(); RiftonForestMapCell[77] = new RiftonForestMap77(); RiftonForestMapCell[78] = new RiftonForestMap78(); RiftonForestMapCell[79] = new RiftonForestMap79();
            RiftonForestMapCell[80] = new RiftonForestMap80(); RiftonForestMapCell[81] = new RiftonForestMap81(); RiftonForestMapCell[82] = new RiftonForestMap82(); RiftonForestMapCell[83] = new RiftonForestMap83(); RiftonForestMapCell[84] = new RiftonForestMap84(); RiftonForestMapCell[85] = new RiftonForestMap85(); RiftonForestMapCell[86] = new RiftonForestMap86(); RiftonForestMapCell[87] = new RiftonForestMap87(); RiftonForestMapCell[88] = new RiftonForestMap88(); RiftonForestMapCell[89] = new RiftonForestMap89();
            RiftonForestMapCell[90] = new RiftonForestMap90(); RiftonForestMapCell[91] = new RiftonForestMap91(); RiftonForestMapCell[92] = new RiftonForestMap92(); RiftonForestMapCell[93] = new RiftonForestMap93(); RiftonForestMapCell[94] = new RiftonForestMap94(); RiftonForestMapCell[95] = new RiftonForestMap95(); RiftonForestMapCell[96] = new RiftonForestMap96(); RiftonForestMapCell[97] = new RiftonForestMap97(); RiftonForestMapCell[98] = new RiftonForestMap98(); RiftonForestMapCell[99] = new RiftonForestMap99();

            //Rifton Cave map - array of all grid cell classes
            RiftonCaveMap[] RiftonCaveMapCell = new RiftonCaveMap[100];
            RiftonCaveMapCell[0] = new RiftonCaveMap0(); RiftonCaveMapCell[1] = new RiftonCaveMap1(); RiftonCaveMapCell[2] = new RiftonCaveMap2(); RiftonCaveMapCell[3] = new RiftonCaveMap3(); RiftonCaveMapCell[4] = new RiftonCaveMap4(); RiftonCaveMapCell[5] = new RiftonCaveMap5(); RiftonCaveMapCell[6] = new RiftonCaveMap6(); RiftonCaveMapCell[7] = new RiftonCaveMap7(); RiftonCaveMapCell[8] = new RiftonCaveMap8(); RiftonCaveMapCell[9] = new RiftonCaveMap9();
            RiftonCaveMapCell[10] = new RiftonCaveMap10(); RiftonCaveMapCell[11] = new RiftonCaveMap11(); RiftonCaveMapCell[12] = new RiftonCaveMap12(); RiftonCaveMapCell[13] = new RiftonCaveMap13(); RiftonCaveMapCell[14] = new RiftonCaveMap14(); RiftonCaveMapCell[15] = new RiftonCaveMap15(); RiftonCaveMapCell[16] = new RiftonCaveMap16(); RiftonCaveMapCell[17] = new RiftonCaveMap17(); RiftonCaveMapCell[18] = new RiftonCaveMap18(); RiftonCaveMapCell[19] = new RiftonCaveMap19();
            RiftonCaveMapCell[20] = new RiftonCaveMap20(); RiftonCaveMapCell[21] = new RiftonCaveMap21(); RiftonCaveMapCell[22] = new RiftonCaveMap22(); RiftonCaveMapCell[23] = new RiftonCaveMap23(); RiftonCaveMapCell[24] = new RiftonCaveMap24(); RiftonCaveMapCell[25] = new RiftonCaveMap25(); RiftonCaveMapCell[26] = new RiftonCaveMap26(); RiftonCaveMapCell[27] = new RiftonCaveMap27(); RiftonCaveMapCell[28] = new RiftonCaveMap28(); RiftonCaveMapCell[29] = new RiftonCaveMap29();
            RiftonCaveMapCell[30] = new RiftonCaveMap30(); RiftonCaveMapCell[31] = new RiftonCaveMap31(); RiftonCaveMapCell[32] = new RiftonCaveMap32(); RiftonCaveMapCell[33] = new RiftonCaveMap33(); RiftonCaveMapCell[34] = new RiftonCaveMap34(); RiftonCaveMapCell[35] = new RiftonCaveMap35(); RiftonCaveMapCell[36] = new RiftonCaveMap36(); RiftonCaveMapCell[37] = new RiftonCaveMap37(); RiftonCaveMapCell[38] = new RiftonCaveMap38(); RiftonCaveMapCell[39] = new RiftonCaveMap39();
            RiftonCaveMapCell[40] = new RiftonCaveMap40(); RiftonCaveMapCell[41] = new RiftonCaveMap41(); RiftonCaveMapCell[42] = new RiftonCaveMap42(); RiftonCaveMapCell[43] = new RiftonCaveMap43(); RiftonCaveMapCell[44] = new RiftonCaveMap44(); RiftonCaveMapCell[45] = new RiftonCaveMap45(); RiftonCaveMapCell[46] = new RiftonCaveMap46(); RiftonCaveMapCell[47] = new RiftonCaveMap47(); RiftonCaveMapCell[48] = new RiftonCaveMap48(); RiftonCaveMapCell[49] = new RiftonCaveMap49();
            RiftonCaveMapCell[50] = new RiftonCaveMap50(); RiftonCaveMapCell[51] = new RiftonCaveMap51(); RiftonCaveMapCell[52] = new RiftonCaveMap52(); RiftonCaveMapCell[53] = new RiftonCaveMap53(); RiftonCaveMapCell[54] = new RiftonCaveMap54(); RiftonCaveMapCell[55] = new RiftonCaveMap55(); RiftonCaveMapCell[56] = new RiftonCaveMap56(); RiftonCaveMapCell[57] = new RiftonCaveMap57(); RiftonCaveMapCell[58] = new RiftonCaveMap58(); RiftonCaveMapCell[59] = new RiftonCaveMap59();
            RiftonCaveMapCell[60] = new RiftonCaveMap60(); RiftonCaveMapCell[61] = new RiftonCaveMap61(); RiftonCaveMapCell[62] = new RiftonCaveMap62(); RiftonCaveMapCell[63] = new RiftonCaveMap63(); RiftonCaveMapCell[64] = new RiftonCaveMap64(); RiftonCaveMapCell[65] = new RiftonCaveMap65(); RiftonCaveMapCell[66] = new RiftonCaveMap66(); RiftonCaveMapCell[67] = new RiftonCaveMap67(); RiftonCaveMapCell[68] = new RiftonCaveMap68(); RiftonCaveMapCell[69] = new RiftonCaveMap69();
            RiftonCaveMapCell[70] = new RiftonCaveMap70(); RiftonCaveMapCell[71] = new RiftonCaveMap71(); RiftonCaveMapCell[72] = new RiftonCaveMap72(); RiftonCaveMapCell[73] = new RiftonCaveMap73(); RiftonCaveMapCell[74] = new RiftonCaveMap74(); RiftonCaveMapCell[75] = new RiftonCaveMap75(); RiftonCaveMapCell[76] = new RiftonCaveMap76(); RiftonCaveMapCell[77] = new RiftonCaveMap77(); RiftonCaveMapCell[78] = new RiftonCaveMap78(); RiftonCaveMapCell[79] = new RiftonCaveMap79();
            RiftonCaveMapCell[80] = new RiftonCaveMap80(); RiftonCaveMapCell[81] = new RiftonCaveMap81(); RiftonCaveMapCell[82] = new RiftonCaveMap82(); RiftonCaveMapCell[83] = new RiftonCaveMap83(); RiftonCaveMapCell[84] = new RiftonCaveMap84(); RiftonCaveMapCell[85] = new RiftonCaveMap85(); RiftonCaveMapCell[86] = new RiftonCaveMap86(); RiftonCaveMapCell[87] = new RiftonCaveMap87(); RiftonCaveMapCell[88] = new RiftonCaveMap88(); RiftonCaveMapCell[89] = new RiftonCaveMap89();
            RiftonCaveMapCell[90] = new RiftonCaveMap90(); RiftonCaveMapCell[91] = new RiftonCaveMap91(); RiftonCaveMapCell[92] = new RiftonCaveMap92(); RiftonCaveMapCell[93] = new RiftonCaveMap93(); RiftonCaveMapCell[94] = new RiftonCaveMap94(); RiftonCaveMapCell[95] = new RiftonCaveMap95(); RiftonCaveMapCell[96] = new RiftonCaveMap96(); RiftonCaveMapCell[97] = new RiftonCaveMap97(); RiftonCaveMapCell[98] = new RiftonCaveMap98(); RiftonCaveMapCell[99] = new RiftonCaveMap99();

            //Rifton Beach map - array of all grid cell classes
            RiftonBeachMap[] RiftonBeachMapCell = new RiftonBeachMap[100];
            RiftonBeachMapCell[0] = new RiftonBeachMap0(); RiftonBeachMapCell[1] = new RiftonBeachMap1(); RiftonBeachMapCell[2] = new RiftonBeachMap2(); RiftonBeachMapCell[3] = new RiftonBeachMap3(); RiftonBeachMapCell[4] = new RiftonBeachMap4(); RiftonBeachMapCell[5] = new RiftonBeachMap5(); RiftonBeachMapCell[6] = new RiftonBeachMap6(); RiftonBeachMapCell[7] = new RiftonBeachMap7(); RiftonBeachMapCell[8] = new RiftonBeachMap8(); RiftonBeachMapCell[9] = new RiftonBeachMap9();
            RiftonBeachMapCell[10] = new RiftonBeachMap10(); RiftonBeachMapCell[11] = new RiftonBeachMap11(); RiftonBeachMapCell[12] = new RiftonBeachMap12(); RiftonBeachMapCell[13] = new RiftonBeachMap13(); RiftonBeachMapCell[14] = new RiftonBeachMap14(); RiftonBeachMapCell[15] = new RiftonBeachMap15(); RiftonBeachMapCell[16] = new RiftonBeachMap16(); RiftonBeachMapCell[17] = new RiftonBeachMap17(); RiftonBeachMapCell[18] = new RiftonBeachMap18(); RiftonBeachMapCell[19] = new RiftonBeachMap19();
            RiftonBeachMapCell[20] = new RiftonBeachMap20(); RiftonBeachMapCell[21] = new RiftonBeachMap21(); RiftonBeachMapCell[22] = new RiftonBeachMap22(); RiftonBeachMapCell[23] = new RiftonBeachMap23(); RiftonBeachMapCell[24] = new RiftonBeachMap24(); RiftonBeachMapCell[25] = new RiftonBeachMap25(); RiftonBeachMapCell[26] = new RiftonBeachMap26(); RiftonBeachMapCell[27] = new RiftonBeachMap27(); RiftonBeachMapCell[28] = new RiftonBeachMap28(); RiftonBeachMapCell[29] = new RiftonBeachMap29();
            RiftonBeachMapCell[30] = new RiftonBeachMap30(); RiftonBeachMapCell[31] = new RiftonBeachMap31(); RiftonBeachMapCell[32] = new RiftonBeachMap32(); RiftonBeachMapCell[33] = new RiftonBeachMap33(); RiftonBeachMapCell[34] = new RiftonBeachMap34(); RiftonBeachMapCell[35] = new RiftonBeachMap35(); RiftonBeachMapCell[36] = new RiftonBeachMap36(); RiftonBeachMapCell[37] = new RiftonBeachMap37(); RiftonBeachMapCell[38] = new RiftonBeachMap38(); RiftonBeachMapCell[39] = new RiftonBeachMap39();
            RiftonBeachMapCell[40] = new RiftonBeachMap40(); RiftonBeachMapCell[41] = new RiftonBeachMap41(); RiftonBeachMapCell[42] = new RiftonBeachMap42(); RiftonBeachMapCell[43] = new RiftonBeachMap43(); RiftonBeachMapCell[44] = new RiftonBeachMap44(); RiftonBeachMapCell[45] = new RiftonBeachMap45(); RiftonBeachMapCell[46] = new RiftonBeachMap46(); RiftonBeachMapCell[47] = new RiftonBeachMap47(); RiftonBeachMapCell[48] = new RiftonBeachMap48(); RiftonBeachMapCell[49] = new RiftonBeachMap49();
            RiftonBeachMapCell[50] = new RiftonBeachMap50(); RiftonBeachMapCell[51] = new RiftonBeachMap51(); RiftonBeachMapCell[52] = new RiftonBeachMap52(); RiftonBeachMapCell[53] = new RiftonBeachMap53(); RiftonBeachMapCell[54] = new RiftonBeachMap54(); RiftonBeachMapCell[55] = new RiftonBeachMap55(); RiftonBeachMapCell[56] = new RiftonBeachMap56(); RiftonBeachMapCell[57] = new RiftonBeachMap57(); RiftonBeachMapCell[58] = new RiftonBeachMap58(); RiftonBeachMapCell[59] = new RiftonBeachMap59();
            RiftonBeachMapCell[60] = new RiftonBeachMap60(); RiftonBeachMapCell[61] = new RiftonBeachMap61(); RiftonBeachMapCell[62] = new RiftonBeachMap62(); RiftonBeachMapCell[63] = new RiftonBeachMap63(); RiftonBeachMapCell[64] = new RiftonBeachMap64(); RiftonBeachMapCell[65] = new RiftonBeachMap65(); RiftonBeachMapCell[66] = new RiftonBeachMap66(); RiftonBeachMapCell[67] = new RiftonBeachMap67(); RiftonBeachMapCell[68] = new RiftonBeachMap68(); RiftonBeachMapCell[69] = new RiftonBeachMap69();
            RiftonBeachMapCell[70] = new RiftonBeachMap70(); RiftonBeachMapCell[71] = new RiftonBeachMap71(); RiftonBeachMapCell[72] = new RiftonBeachMap72(); RiftonBeachMapCell[73] = new RiftonBeachMap73(); RiftonBeachMapCell[74] = new RiftonBeachMap74(); RiftonBeachMapCell[75] = new RiftonBeachMap75(); RiftonBeachMapCell[76] = new RiftonBeachMap76(); RiftonBeachMapCell[77] = new RiftonBeachMap77(); RiftonBeachMapCell[78] = new RiftonBeachMap78(); RiftonBeachMapCell[79] = new RiftonBeachMap79();
            RiftonBeachMapCell[80] = new RiftonBeachMap80(); RiftonBeachMapCell[81] = new RiftonBeachMap81(); RiftonBeachMapCell[82] = new RiftonBeachMap82(); RiftonBeachMapCell[83] = new RiftonBeachMap83(); RiftonBeachMapCell[84] = new RiftonBeachMap84(); RiftonBeachMapCell[85] = new RiftonBeachMap85(); RiftonBeachMapCell[86] = new RiftonBeachMap86(); RiftonBeachMapCell[87] = new RiftonBeachMap87(); RiftonBeachMapCell[88] = new RiftonBeachMap88(); RiftonBeachMapCell[89] = new RiftonBeachMap89();
            RiftonBeachMapCell[90] = new RiftonBeachMap90(); RiftonBeachMapCell[91] = new RiftonBeachMap91(); RiftonBeachMapCell[92] = new RiftonBeachMap92(); RiftonBeachMapCell[93] = new RiftonBeachMap93(); RiftonBeachMapCell[94] = new RiftonBeachMap94(); RiftonBeachMapCell[95] = new RiftonBeachMap95(); RiftonBeachMapCell[96] = new RiftonBeachMap96(); RiftonBeachMapCell[97] = new RiftonBeachMap97(); RiftonBeachMapCell[98] = new RiftonBeachMap98(); RiftonBeachMapCell[99] = new RiftonBeachMap99();

            //Boat map - array of all grid cell classes
            BoatMap[] BoatMapCell = new BoatMap[100];
            BoatMapCell[0] = new BoatMap0(); BoatMapCell[1] = new BoatMap1(); BoatMapCell[2] = new BoatMap2(); BoatMapCell[3] = new BoatMap3(); BoatMapCell[4] = new BoatMap4(); BoatMapCell[5] = new BoatMap5(); BoatMapCell[6] = new BoatMap6(); BoatMapCell[7] = new BoatMap7(); BoatMapCell[8] = new BoatMap8(); BoatMapCell[9] = new BoatMap9();
            BoatMapCell[10] = new BoatMap10(); BoatMapCell[11] = new BoatMap11(); BoatMapCell[12] = new BoatMap12(); BoatMapCell[13] = new BoatMap13(); BoatMapCell[14] = new BoatMap14(); BoatMapCell[15] = new BoatMap15(); BoatMapCell[16] = new BoatMap16(); BoatMapCell[17] = new BoatMap17(); BoatMapCell[18] = new BoatMap18(); BoatMapCell[19] = new BoatMap19();
            BoatMapCell[20] = new BoatMap20(); BoatMapCell[21] = new BoatMap21(); BoatMapCell[22] = new BoatMap22(); BoatMapCell[23] = new BoatMap23(); BoatMapCell[24] = new BoatMap24(); BoatMapCell[25] = new BoatMap25(); BoatMapCell[26] = new BoatMap26(); BoatMapCell[27] = new BoatMap27(); BoatMapCell[28] = new BoatMap28(); BoatMapCell[29] = new BoatMap29();
            BoatMapCell[30] = new BoatMap30(); BoatMapCell[31] = new BoatMap31(); BoatMapCell[32] = new BoatMap32(); BoatMapCell[33] = new BoatMap33(); BoatMapCell[34] = new BoatMap34(); BoatMapCell[35] = new BoatMap35(); BoatMapCell[36] = new BoatMap36(); BoatMapCell[37] = new BoatMap37(); BoatMapCell[38] = new BoatMap38(); BoatMapCell[39] = new BoatMap39();
            BoatMapCell[40] = new BoatMap40(); BoatMapCell[41] = new BoatMap41(); BoatMapCell[42] = new BoatMap42(); BoatMapCell[43] = new BoatMap43(); BoatMapCell[44] = new BoatMap44(); BoatMapCell[45] = new BoatMap45(); BoatMapCell[46] = new BoatMap46(); BoatMapCell[47] = new BoatMap47(); BoatMapCell[48] = new BoatMap48(); BoatMapCell[49] = new BoatMap49();
            BoatMapCell[50] = new BoatMap50(); BoatMapCell[51] = new BoatMap51(); BoatMapCell[52] = new BoatMap52(); BoatMapCell[53] = new BoatMap53(); BoatMapCell[54] = new BoatMap54(); BoatMapCell[55] = new BoatMap55(); BoatMapCell[56] = new BoatMap56(); BoatMapCell[57] = new BoatMap57(); BoatMapCell[58] = new BoatMap58(); BoatMapCell[59] = new BoatMap59();
            BoatMapCell[60] = new BoatMap60(); BoatMapCell[61] = new BoatMap61(); BoatMapCell[62] = new BoatMap62(); BoatMapCell[63] = new BoatMap63(); BoatMapCell[64] = new BoatMap64(); BoatMapCell[65] = new BoatMap65(); BoatMapCell[66] = new BoatMap66(); BoatMapCell[67] = new BoatMap67(); BoatMapCell[68] = new BoatMap68(); BoatMapCell[69] = new BoatMap69();
            BoatMapCell[70] = new BoatMap70(); BoatMapCell[71] = new BoatMap71(); BoatMapCell[72] = new BoatMap72(); BoatMapCell[73] = new BoatMap73(); BoatMapCell[74] = new BoatMap74(); BoatMapCell[75] = new BoatMap75(); BoatMapCell[76] = new BoatMap76(); BoatMapCell[77] = new BoatMap77(); BoatMapCell[78] = new BoatMap78(); BoatMapCell[79] = new BoatMap79();
            BoatMapCell[80] = new BoatMap80(); BoatMapCell[81] = new BoatMap81(); BoatMapCell[82] = new BoatMap82(); BoatMapCell[83] = new BoatMap83(); BoatMapCell[84] = new BoatMap84(); BoatMapCell[85] = new BoatMap85(); BoatMapCell[86] = new BoatMap86(); BoatMapCell[87] = new BoatMap87(); BoatMapCell[88] = new BoatMap88(); BoatMapCell[89] = new BoatMap89();
            BoatMapCell[90] = new BoatMap90(); BoatMapCell[91] = new BoatMap91(); BoatMapCell[92] = new BoatMap92(); BoatMapCell[93] = new BoatMap93(); BoatMapCell[94] = new BoatMap94(); BoatMapCell[95] = new BoatMap95(); BoatMapCell[96] = new BoatMap96(); BoatMapCell[97] = new BoatMap97(); BoatMapCell[98] = new BoatMap98(); BoatMapCell[99] = new BoatMap99();

            //Port Town map - array of all grid cell classes
            PortTownMap[] PortTownMapCell = new PortTownMap[100];

            // sort this shit out yo
            //for (int i = 0; i < 100; i++)
            //{
            //    PortTownMapCell[i] = new PortTownMap();
            //}


            PortTownMapCell[0] = new PortTownMap0(); PortTownMapCell[1] = new PortTownMap1(); PortTownMapCell[2] = new PortTownMap2(); PortTownMapCell[3] = new PortTownMap3(); PortTownMapCell[4] = new PortTownMap4(); PortTownMapCell[5] = new PortTownMap5(); PortTownMapCell[6] = new PortTownMap6(); PortTownMapCell[7] = new PortTownMap7(); PortTownMapCell[8] = new PortTownMap8(); PortTownMapCell[9] = new PortTownMap9();
            PortTownMapCell[10] = new PortTownMap10(); PortTownMapCell[11] = new PortTownMap11(); PortTownMapCell[12] = new PortTownMap12(); PortTownMapCell[13] = new PortTownMap13(); PortTownMapCell[14] = new PortTownMap14(); PortTownMapCell[15] = new PortTownMap15(); PortTownMapCell[16] = new PortTownMap16(); PortTownMapCell[17] = new PortTownMap17(); PortTownMapCell[18] = new PortTownMap18(); PortTownMapCell[19] = new PortTownMap19();
            PortTownMapCell[20] = new PortTownMap20(); PortTownMapCell[21] = new PortTownMap21(); PortTownMapCell[22] = new PortTownMap22(); PortTownMapCell[23] = new PortTownMap23(); PortTownMapCell[24] = new PortTownMap24(); PortTownMapCell[25] = new PortTownMap25(); PortTownMapCell[26] = new PortTownMap26(); PortTownMapCell[27] = new PortTownMap27(); PortTownMapCell[28] = new PortTownMap28(); PortTownMapCell[29] = new PortTownMap29();
            PortTownMapCell[30] = new PortTownMap30(); PortTownMapCell[31] = new PortTownMap31(); PortTownMapCell[32] = new PortTownMap32(); PortTownMapCell[33] = new PortTownMap33(); PortTownMapCell[34] = new PortTownMap34(); PortTownMapCell[35] = new PortTownMap35(); PortTownMapCell[36] = new PortTownMap36(); PortTownMapCell[37] = new PortTownMap37(); PortTownMapCell[38] = new PortTownMap38(); PortTownMapCell[39] = new PortTownMap39();
            PortTownMapCell[40] = new PortTownMap40(); PortTownMapCell[41] = new PortTownMap41(); PortTownMapCell[42] = new PortTownMap42(); PortTownMapCell[43] = new PortTownMap43(); PortTownMapCell[44] = new PortTownMap44(); PortTownMapCell[45] = new PortTownMap45(); PortTownMapCell[46] = new PortTownMap46(); PortTownMapCell[47] = new PortTownMap47(); PortTownMapCell[48] = new PortTownMap48(); PortTownMapCell[49] = new PortTownMap49();
            PortTownMapCell[50] = new PortTownMap50(); PortTownMapCell[51] = new PortTownMap51(); PortTownMapCell[52] = new PortTownMap52(); PortTownMapCell[53] = new PortTownMap53(); PortTownMapCell[54] = new PortTownMap54(); PortTownMapCell[55] = new PortTownMap55(); PortTownMapCell[56] = new PortTownMap56(); PortTownMapCell[57] = new PortTownMap57(); PortTownMapCell[58] = new PortTownMap58(); PortTownMapCell[59] = new PortTownMap59();
            PortTownMapCell[60] = new PortTownMap60(); PortTownMapCell[61] = new PortTownMap61(); PortTownMapCell[62] = new PortTownMap62(); PortTownMapCell[63] = new PortTownMap63(); PortTownMapCell[64] = new PortTownMap64(); PortTownMapCell[65] = new PortTownMap65(); PortTownMapCell[66] = new PortTownMap66(); PortTownMapCell[67] = new PortTownMap67(); PortTownMapCell[68] = new PortTownMap68(); PortTownMapCell[69] = new PortTownMap69();
            PortTownMapCell[70] = new PortTownMap70(); PortTownMapCell[71] = new PortTownMap71(); PortTownMapCell[72] = new PortTownMap72(); PortTownMapCell[73] = new PortTownMap73(); PortTownMapCell[74] = new PortTownMap74(); PortTownMapCell[75] = new PortTownMap75(); PortTownMapCell[76] = new PortTownMap76(); PortTownMapCell[77] = new PortTownMap77(); PortTownMapCell[78] = new PortTownMap78(); PortTownMapCell[79] = new PortTownMap79();
            PortTownMapCell[80] = new PortTownMap80(); PortTownMapCell[81] = new PortTownMap81(); PortTownMapCell[82] = new PortTownMap82(); PortTownMapCell[83] = new PortTownMap83(); PortTownMapCell[84] = new PortTownMap84(); PortTownMapCell[85] = new PortTownMap85(); PortTownMapCell[86] = new PortTownMap86(); PortTownMapCell[87] = new PortTownMap87(); PortTownMapCell[88] = new PortTownMap88(); PortTownMapCell[89] = new PortTownMap89();
            PortTownMapCell[90] = new PortTownMap90(); PortTownMapCell[91] = new PortTownMap91(); PortTownMapCell[92] = new PortTownMap92(); PortTownMapCell[93] = new PortTownMap93(); PortTownMapCell[94] = new PortTownMap94(); PortTownMapCell[95] = new PortTownMap95(); PortTownMapCell[96] = new PortTownMap96(); PortTownMapCell[97] = new PortTownMap97(); PortTownMapCell[98] = new PortTownMap98(); PortTownMapCell[99] = new PortTownMap99();

            //Karstbay caves upper map - array of all grid cell classes
            KarstBayCaves1Map[] KarstBayCaves1MapCell = new KarstBayCaves1Map[100];
            KarstBayCaves1MapCell[0] = new KarstBayCaves1Map0(); KarstBayCaves1MapCell[1] = new KarstBayCaves1Map1(); KarstBayCaves1MapCell[2] = new KarstBayCaves1Map2(); KarstBayCaves1MapCell[3] = new KarstBayCaves1Map3(); KarstBayCaves1MapCell[4] = new KarstBayCaves1Map4(); KarstBayCaves1MapCell[5] = new KarstBayCaves1Map5(); KarstBayCaves1MapCell[6] = new KarstBayCaves1Map6(); KarstBayCaves1MapCell[7] = new KarstBayCaves1Map7(); KarstBayCaves1MapCell[8] = new KarstBayCaves1Map8(); KarstBayCaves1MapCell[9] = new KarstBayCaves1Map9();
            KarstBayCaves1MapCell[10] = new KarstBayCaves1Map10(); KarstBayCaves1MapCell[11] = new KarstBayCaves1Map11(); KarstBayCaves1MapCell[12] = new KarstBayCaves1Map12(); KarstBayCaves1MapCell[13] = new KarstBayCaves1Map13(); KarstBayCaves1MapCell[14] = new KarstBayCaves1Map14(); KarstBayCaves1MapCell[15] = new KarstBayCaves1Map15(); KarstBayCaves1MapCell[16] = new KarstBayCaves1Map16(); KarstBayCaves1MapCell[17] = new KarstBayCaves1Map17(); KarstBayCaves1MapCell[18] = new KarstBayCaves1Map18(); KarstBayCaves1MapCell[19] = new KarstBayCaves1Map19();
            KarstBayCaves1MapCell[20] = new KarstBayCaves1Map20(); KarstBayCaves1MapCell[21] = new KarstBayCaves1Map21(); KarstBayCaves1MapCell[22] = new KarstBayCaves1Map22(); KarstBayCaves1MapCell[23] = new KarstBayCaves1Map23(); KarstBayCaves1MapCell[24] = new KarstBayCaves1Map24(); KarstBayCaves1MapCell[25] = new KarstBayCaves1Map25(); KarstBayCaves1MapCell[26] = new KarstBayCaves1Map26(); KarstBayCaves1MapCell[27] = new KarstBayCaves1Map27(); KarstBayCaves1MapCell[28] = new KarstBayCaves1Map28(); KarstBayCaves1MapCell[29] = new KarstBayCaves1Map29();
            KarstBayCaves1MapCell[30] = new KarstBayCaves1Map30(); KarstBayCaves1MapCell[31] = new KarstBayCaves1Map31(); KarstBayCaves1MapCell[32] = new KarstBayCaves1Map32(); KarstBayCaves1MapCell[33] = new KarstBayCaves1Map33(); KarstBayCaves1MapCell[34] = new KarstBayCaves1Map34(); KarstBayCaves1MapCell[35] = new KarstBayCaves1Map35(); KarstBayCaves1MapCell[36] = new KarstBayCaves1Map36(); KarstBayCaves1MapCell[37] = new KarstBayCaves1Map37(); KarstBayCaves1MapCell[38] = new KarstBayCaves1Map38(); KarstBayCaves1MapCell[39] = new KarstBayCaves1Map39();
            KarstBayCaves1MapCell[40] = new KarstBayCaves1Map40(); KarstBayCaves1MapCell[41] = new KarstBayCaves1Map41(); KarstBayCaves1MapCell[42] = new KarstBayCaves1Map42(); KarstBayCaves1MapCell[43] = new KarstBayCaves1Map43(); KarstBayCaves1MapCell[44] = new KarstBayCaves1Map44(); KarstBayCaves1MapCell[45] = new KarstBayCaves1Map45(); KarstBayCaves1MapCell[46] = new KarstBayCaves1Map46(); KarstBayCaves1MapCell[47] = new KarstBayCaves1Map47(); KarstBayCaves1MapCell[48] = new KarstBayCaves1Map48(); KarstBayCaves1MapCell[49] = new KarstBayCaves1Map49();
            KarstBayCaves1MapCell[50] = new KarstBayCaves1Map50(); KarstBayCaves1MapCell[51] = new KarstBayCaves1Map51(); KarstBayCaves1MapCell[52] = new KarstBayCaves1Map52(); KarstBayCaves1MapCell[53] = new KarstBayCaves1Map53(); KarstBayCaves1MapCell[54] = new KarstBayCaves1Map54(); KarstBayCaves1MapCell[55] = new KarstBayCaves1Map55(); KarstBayCaves1MapCell[56] = new KarstBayCaves1Map56(); KarstBayCaves1MapCell[57] = new KarstBayCaves1Map57(); KarstBayCaves1MapCell[58] = new KarstBayCaves1Map58(); KarstBayCaves1MapCell[59] = new KarstBayCaves1Map59();
            KarstBayCaves1MapCell[60] = new KarstBayCaves1Map60(); KarstBayCaves1MapCell[61] = new KarstBayCaves1Map61(); KarstBayCaves1MapCell[62] = new KarstBayCaves1Map62(); KarstBayCaves1MapCell[63] = new KarstBayCaves1Map63(); KarstBayCaves1MapCell[64] = new KarstBayCaves1Map64(); KarstBayCaves1MapCell[65] = new KarstBayCaves1Map65(); KarstBayCaves1MapCell[66] = new KarstBayCaves1Map66(); KarstBayCaves1MapCell[67] = new KarstBayCaves1Map67(); KarstBayCaves1MapCell[68] = new KarstBayCaves1Map68(); KarstBayCaves1MapCell[69] = new KarstBayCaves1Map69();
            KarstBayCaves1MapCell[70] = new KarstBayCaves1Map70(); KarstBayCaves1MapCell[71] = new KarstBayCaves1Map71(); KarstBayCaves1MapCell[72] = new KarstBayCaves1Map72(); KarstBayCaves1MapCell[73] = new KarstBayCaves1Map73(); KarstBayCaves1MapCell[74] = new KarstBayCaves1Map74(); KarstBayCaves1MapCell[75] = new KarstBayCaves1Map75(); KarstBayCaves1MapCell[76] = new KarstBayCaves1Map76(); KarstBayCaves1MapCell[77] = new KarstBayCaves1Map77(); KarstBayCaves1MapCell[78] = new KarstBayCaves1Map78(); KarstBayCaves1MapCell[79] = new KarstBayCaves1Map79();
            KarstBayCaves1MapCell[80] = new KarstBayCaves1Map80(); KarstBayCaves1MapCell[81] = new KarstBayCaves1Map81(); KarstBayCaves1MapCell[82] = new KarstBayCaves1Map82(); KarstBayCaves1MapCell[83] = new KarstBayCaves1Map83(); KarstBayCaves1MapCell[84] = new KarstBayCaves1Map84(); KarstBayCaves1MapCell[85] = new KarstBayCaves1Map85(); KarstBayCaves1MapCell[86] = new KarstBayCaves1Map86(); KarstBayCaves1MapCell[87] = new KarstBayCaves1Map87(); KarstBayCaves1MapCell[88] = new KarstBayCaves1Map88(); KarstBayCaves1MapCell[89] = new KarstBayCaves1Map89();
            KarstBayCaves1MapCell[90] = new KarstBayCaves1Map90(); KarstBayCaves1MapCell[91] = new KarstBayCaves1Map91(); KarstBayCaves1MapCell[92] = new KarstBayCaves1Map92(); KarstBayCaves1MapCell[93] = new KarstBayCaves1Map93(); KarstBayCaves1MapCell[94] = new KarstBayCaves1Map94(); KarstBayCaves1MapCell[95] = new KarstBayCaves1Map95(); KarstBayCaves1MapCell[96] = new KarstBayCaves1Map96(); KarstBayCaves1MapCell[97] = new KarstBayCaves1Map97(); KarstBayCaves1MapCell[98] = new KarstBayCaves1Map98(); KarstBayCaves1MapCell[99] = new KarstBayCaves1Map99();

            //Karstbay caves middle map - array of all grid cell classes
            KarstBayCaves2Map[] KarstBayCaves2MapCell = new KarstBayCaves2Map[100];
            KarstBayCaves2MapCell[0] = new KarstBayCaves2Map0(); KarstBayCaves2MapCell[1] = new KarstBayCaves2Map1(); KarstBayCaves2MapCell[2] = new KarstBayCaves2Map2(); KarstBayCaves2MapCell[3] = new KarstBayCaves2Map3(); KarstBayCaves2MapCell[4] = new KarstBayCaves2Map4(); KarstBayCaves2MapCell[5] = new KarstBayCaves2Map5(); KarstBayCaves2MapCell[6] = new KarstBayCaves2Map6(); KarstBayCaves2MapCell[7] = new KarstBayCaves2Map7(); KarstBayCaves2MapCell[8] = new KarstBayCaves2Map8(); KarstBayCaves2MapCell[9] = new KarstBayCaves2Map9();
            KarstBayCaves2MapCell[10] = new KarstBayCaves2Map10(); KarstBayCaves2MapCell[11] = new KarstBayCaves2Map11(); KarstBayCaves2MapCell[12] = new KarstBayCaves2Map12(); KarstBayCaves2MapCell[13] = new KarstBayCaves2Map13(); KarstBayCaves2MapCell[14] = new KarstBayCaves2Map14(); KarstBayCaves2MapCell[15] = new KarstBayCaves2Map15(); KarstBayCaves2MapCell[16] = new KarstBayCaves2Map16(); KarstBayCaves2MapCell[17] = new KarstBayCaves2Map17(); KarstBayCaves2MapCell[18] = new KarstBayCaves2Map18(); KarstBayCaves2MapCell[19] = new KarstBayCaves2Map19();
            KarstBayCaves2MapCell[20] = new KarstBayCaves2Map20(); KarstBayCaves2MapCell[21] = new KarstBayCaves2Map21(); KarstBayCaves2MapCell[22] = new KarstBayCaves2Map22(); KarstBayCaves2MapCell[23] = new KarstBayCaves2Map23(); KarstBayCaves2MapCell[24] = new KarstBayCaves2Map24(); KarstBayCaves2MapCell[25] = new KarstBayCaves2Map25(); KarstBayCaves2MapCell[26] = new KarstBayCaves2Map26(); KarstBayCaves2MapCell[27] = new KarstBayCaves2Map27(); KarstBayCaves2MapCell[28] = new KarstBayCaves2Map28(); KarstBayCaves2MapCell[29] = new KarstBayCaves2Map29();
            KarstBayCaves2MapCell[30] = new KarstBayCaves2Map30(); KarstBayCaves2MapCell[31] = new KarstBayCaves2Map31(); KarstBayCaves2MapCell[32] = new KarstBayCaves2Map32(); KarstBayCaves2MapCell[33] = new KarstBayCaves2Map33(); KarstBayCaves2MapCell[34] = new KarstBayCaves2Map34(); KarstBayCaves2MapCell[35] = new KarstBayCaves2Map35(); KarstBayCaves2MapCell[36] = new KarstBayCaves2Map36(); KarstBayCaves2MapCell[37] = new KarstBayCaves2Map37(); KarstBayCaves2MapCell[38] = new KarstBayCaves2Map38(); KarstBayCaves2MapCell[39] = new KarstBayCaves2Map39();
            KarstBayCaves2MapCell[40] = new KarstBayCaves2Map40(); KarstBayCaves2MapCell[41] = new KarstBayCaves2Map41(); KarstBayCaves2MapCell[42] = new KarstBayCaves2Map42(); KarstBayCaves2MapCell[43] = new KarstBayCaves2Map43(); KarstBayCaves2MapCell[44] = new KarstBayCaves2Map44(); KarstBayCaves2MapCell[45] = new KarstBayCaves2Map45(); KarstBayCaves2MapCell[46] = new KarstBayCaves2Map46(); KarstBayCaves2MapCell[47] = new KarstBayCaves2Map47(); KarstBayCaves2MapCell[48] = new KarstBayCaves2Map48(); KarstBayCaves2MapCell[49] = new KarstBayCaves2Map49();
            KarstBayCaves2MapCell[50] = new KarstBayCaves2Map50(); KarstBayCaves2MapCell[51] = new KarstBayCaves2Map51(); KarstBayCaves2MapCell[52] = new KarstBayCaves2Map52(); KarstBayCaves2MapCell[53] = new KarstBayCaves2Map53(); KarstBayCaves2MapCell[54] = new KarstBayCaves2Map54(); KarstBayCaves2MapCell[55] = new KarstBayCaves2Map55(); KarstBayCaves2MapCell[56] = new KarstBayCaves2Map56(); KarstBayCaves2MapCell[57] = new KarstBayCaves2Map57(); KarstBayCaves2MapCell[58] = new KarstBayCaves2Map58(); KarstBayCaves2MapCell[59] = new KarstBayCaves2Map59();
            KarstBayCaves2MapCell[60] = new KarstBayCaves2Map60(); KarstBayCaves2MapCell[61] = new KarstBayCaves2Map61(); KarstBayCaves2MapCell[62] = new KarstBayCaves2Map62(); KarstBayCaves2MapCell[63] = new KarstBayCaves2Map63(); KarstBayCaves2MapCell[64] = new KarstBayCaves2Map64(); KarstBayCaves2MapCell[65] = new KarstBayCaves2Map65(); KarstBayCaves2MapCell[66] = new KarstBayCaves2Map66(); KarstBayCaves2MapCell[67] = new KarstBayCaves2Map67(); KarstBayCaves2MapCell[68] = new KarstBayCaves2Map68(); KarstBayCaves2MapCell[69] = new KarstBayCaves2Map69();
            KarstBayCaves2MapCell[70] = new KarstBayCaves2Map70(); KarstBayCaves2MapCell[71] = new KarstBayCaves2Map71(); KarstBayCaves2MapCell[72] = new KarstBayCaves2Map72(); KarstBayCaves2MapCell[73] = new KarstBayCaves2Map73(); KarstBayCaves2MapCell[74] = new KarstBayCaves2Map74(); KarstBayCaves2MapCell[75] = new KarstBayCaves2Map75(); KarstBayCaves2MapCell[76] = new KarstBayCaves2Map76(); KarstBayCaves2MapCell[77] = new KarstBayCaves2Map77(); KarstBayCaves2MapCell[78] = new KarstBayCaves2Map78(); KarstBayCaves2MapCell[79] = new KarstBayCaves2Map79();
            KarstBayCaves2MapCell[80] = new KarstBayCaves2Map80(); KarstBayCaves2MapCell[81] = new KarstBayCaves2Map81(); KarstBayCaves2MapCell[82] = new KarstBayCaves2Map82(); KarstBayCaves2MapCell[83] = new KarstBayCaves2Map83(); KarstBayCaves2MapCell[84] = new KarstBayCaves2Map84(); KarstBayCaves2MapCell[85] = new KarstBayCaves2Map85(); KarstBayCaves2MapCell[86] = new KarstBayCaves2Map86(); KarstBayCaves2MapCell[87] = new KarstBayCaves2Map87(); KarstBayCaves2MapCell[88] = new KarstBayCaves2Map88(); KarstBayCaves2MapCell[89] = new KarstBayCaves2Map89();
            KarstBayCaves2MapCell[90] = new KarstBayCaves2Map90(); KarstBayCaves2MapCell[91] = new KarstBayCaves2Map91(); KarstBayCaves2MapCell[92] = new KarstBayCaves2Map92(); KarstBayCaves2MapCell[93] = new KarstBayCaves2Map93(); KarstBayCaves2MapCell[94] = new KarstBayCaves2Map94(); KarstBayCaves2MapCell[95] = new KarstBayCaves2Map95(); KarstBayCaves2MapCell[96] = new KarstBayCaves2Map96(); KarstBayCaves2MapCell[97] = new KarstBayCaves2Map97(); KarstBayCaves2MapCell[98] = new KarstBayCaves2Map98(); KarstBayCaves2MapCell[99] = new KarstBayCaves2Map99();

            //Karstbay caves lower map - array of all grid cell classes
            KarstBayCaves3Map[] KarstBayCaves3MapCell = new KarstBayCaves3Map[100];
            KarstBayCaves3MapCell[0] = new KarstBayCaves3Map0(); KarstBayCaves3MapCell[1] = new KarstBayCaves3Map1(); KarstBayCaves3MapCell[2] = new KarstBayCaves3Map2(); KarstBayCaves3MapCell[3] = new KarstBayCaves3Map3(); KarstBayCaves3MapCell[4] = new KarstBayCaves3Map4(); KarstBayCaves3MapCell[5] = new KarstBayCaves3Map5(); KarstBayCaves3MapCell[6] = new KarstBayCaves3Map6(); KarstBayCaves3MapCell[7] = new KarstBayCaves3Map7(); KarstBayCaves3MapCell[8] = new KarstBayCaves3Map8(); KarstBayCaves3MapCell[9] = new KarstBayCaves3Map9();
            KarstBayCaves3MapCell[10] = new KarstBayCaves3Map10(); KarstBayCaves3MapCell[11] = new KarstBayCaves3Map11(); KarstBayCaves3MapCell[12] = new KarstBayCaves3Map12(); KarstBayCaves3MapCell[13] = new KarstBayCaves3Map13(); KarstBayCaves3MapCell[14] = new KarstBayCaves3Map14(); KarstBayCaves3MapCell[15] = new KarstBayCaves3Map15(); KarstBayCaves3MapCell[16] = new KarstBayCaves3Map16(); KarstBayCaves3MapCell[17] = new KarstBayCaves3Map17(); KarstBayCaves3MapCell[18] = new KarstBayCaves3Map18(); KarstBayCaves3MapCell[19] = new KarstBayCaves3Map19();
            KarstBayCaves3MapCell[20] = new KarstBayCaves3Map20(); KarstBayCaves3MapCell[21] = new KarstBayCaves3Map21(); KarstBayCaves3MapCell[22] = new KarstBayCaves3Map22(); KarstBayCaves3MapCell[23] = new KarstBayCaves3Map23(); KarstBayCaves3MapCell[24] = new KarstBayCaves3Map24(); KarstBayCaves3MapCell[25] = new KarstBayCaves3Map25(); KarstBayCaves3MapCell[26] = new KarstBayCaves3Map26(); KarstBayCaves3MapCell[27] = new KarstBayCaves3Map27(); KarstBayCaves3MapCell[28] = new KarstBayCaves3Map28(); KarstBayCaves3MapCell[29] = new KarstBayCaves3Map29();
            KarstBayCaves3MapCell[30] = new KarstBayCaves3Map30(); KarstBayCaves3MapCell[31] = new KarstBayCaves3Map31(); KarstBayCaves3MapCell[32] = new KarstBayCaves3Map32(); KarstBayCaves3MapCell[33] = new KarstBayCaves3Map33(); KarstBayCaves3MapCell[34] = new KarstBayCaves3Map34(); KarstBayCaves3MapCell[35] = new KarstBayCaves3Map35(); KarstBayCaves3MapCell[36] = new KarstBayCaves3Map36(); KarstBayCaves3MapCell[37] = new KarstBayCaves3Map37(); KarstBayCaves3MapCell[38] = new KarstBayCaves3Map38(); KarstBayCaves3MapCell[39] = new KarstBayCaves3Map39();
            KarstBayCaves3MapCell[40] = new KarstBayCaves3Map40(); KarstBayCaves3MapCell[41] = new KarstBayCaves3Map41(); KarstBayCaves3MapCell[42] = new KarstBayCaves3Map42(); KarstBayCaves3MapCell[43] = new KarstBayCaves3Map43(); KarstBayCaves3MapCell[44] = new KarstBayCaves3Map44(); KarstBayCaves3MapCell[45] = new KarstBayCaves3Map45(); KarstBayCaves3MapCell[46] = new KarstBayCaves3Map46(); KarstBayCaves3MapCell[47] = new KarstBayCaves3Map47(); KarstBayCaves3MapCell[48] = new KarstBayCaves3Map48(); KarstBayCaves3MapCell[49] = new KarstBayCaves3Map49();
            KarstBayCaves3MapCell[50] = new KarstBayCaves3Map50(); KarstBayCaves3MapCell[51] = new KarstBayCaves3Map51(); KarstBayCaves3MapCell[52] = new KarstBayCaves3Map52(); KarstBayCaves3MapCell[53] = new KarstBayCaves3Map53(); KarstBayCaves3MapCell[54] = new KarstBayCaves3Map54(); KarstBayCaves3MapCell[55] = new KarstBayCaves3Map55(); KarstBayCaves3MapCell[56] = new KarstBayCaves3Map56(); KarstBayCaves3MapCell[57] = new KarstBayCaves3Map57(); KarstBayCaves3MapCell[58] = new KarstBayCaves3Map58(); KarstBayCaves3MapCell[59] = new KarstBayCaves3Map59();
            KarstBayCaves3MapCell[60] = new KarstBayCaves3Map60(); KarstBayCaves3MapCell[61] = new KarstBayCaves3Map61(); KarstBayCaves3MapCell[62] = new KarstBayCaves3Map62(); KarstBayCaves3MapCell[63] = new KarstBayCaves3Map63(); KarstBayCaves3MapCell[64] = new KarstBayCaves3Map64(); KarstBayCaves3MapCell[65] = new KarstBayCaves3Map65(); KarstBayCaves3MapCell[66] = new KarstBayCaves3Map66(); KarstBayCaves3MapCell[67] = new KarstBayCaves3Map67(); KarstBayCaves3MapCell[68] = new KarstBayCaves3Map68(); KarstBayCaves3MapCell[69] = new KarstBayCaves3Map69();
            KarstBayCaves3MapCell[70] = new KarstBayCaves3Map70(); KarstBayCaves3MapCell[71] = new KarstBayCaves3Map71(); KarstBayCaves3MapCell[72] = new KarstBayCaves3Map72(); KarstBayCaves3MapCell[73] = new KarstBayCaves3Map73(); KarstBayCaves3MapCell[74] = new KarstBayCaves3Map74(); KarstBayCaves3MapCell[75] = new KarstBayCaves3Map75(); KarstBayCaves3MapCell[76] = new KarstBayCaves3Map76(); KarstBayCaves3MapCell[77] = new KarstBayCaves3Map77(); KarstBayCaves3MapCell[78] = new KarstBayCaves3Map78(); KarstBayCaves3MapCell[79] = new KarstBayCaves3Map79();
            KarstBayCaves3MapCell[80] = new KarstBayCaves3Map80(); KarstBayCaves3MapCell[81] = new KarstBayCaves3Map81(); KarstBayCaves3MapCell[82] = new KarstBayCaves3Map82(); KarstBayCaves3MapCell[83] = new KarstBayCaves3Map83(); KarstBayCaves3MapCell[84] = new KarstBayCaves3Map84(); KarstBayCaves3MapCell[85] = new KarstBayCaves3Map85(); KarstBayCaves3MapCell[86] = new KarstBayCaves3Map86(); KarstBayCaves3MapCell[87] = new KarstBayCaves3Map87(); KarstBayCaves3MapCell[88] = new KarstBayCaves3Map88(); KarstBayCaves3MapCell[89] = new KarstBayCaves3Map89();
            KarstBayCaves3MapCell[90] = new KarstBayCaves3Map90(); KarstBayCaves3MapCell[91] = new KarstBayCaves3Map91(); KarstBayCaves3MapCell[92] = new KarstBayCaves3Map92(); KarstBayCaves3MapCell[93] = new KarstBayCaves3Map93(); KarstBayCaves3MapCell[94] = new KarstBayCaves3Map94(); KarstBayCaves3MapCell[95] = new KarstBayCaves3Map95(); KarstBayCaves3MapCell[96] = new KarstBayCaves3Map96(); KarstBayCaves3MapCell[97] = new KarstBayCaves3Map97(); KarstBayCaves3MapCell[98] = new KarstBayCaves3Map98(); KarstBayCaves3MapCell[99] = new KarstBayCaves3Map99();

            //FireArea1 map - array of all grid cell classes
            FireArea1Map[] FireArea1MapCell = new FireArea1Map[100];
            FireArea1MapCell[0] = new FireArea1Map0(); FireArea1MapCell[1] = new FireArea1Map1(); FireArea1MapCell[2] = new FireArea1Map2(); FireArea1MapCell[3] = new FireArea1Map3(); FireArea1MapCell[4] = new FireArea1Map4(); FireArea1MapCell[5] = new FireArea1Map5(); FireArea1MapCell[6] = new FireArea1Map6(); FireArea1MapCell[7] = new FireArea1Map7(); FireArea1MapCell[8] = new FireArea1Map8(); FireArea1MapCell[9] = new FireArea1Map9();
            FireArea1MapCell[10] = new FireArea1Map10(); FireArea1MapCell[11] = new FireArea1Map11(); FireArea1MapCell[12] = new FireArea1Map12(); FireArea1MapCell[13] = new FireArea1Map13(); FireArea1MapCell[14] = new FireArea1Map14(); FireArea1MapCell[15] = new FireArea1Map15(); FireArea1MapCell[16] = new FireArea1Map16(); FireArea1MapCell[17] = new FireArea1Map17(); FireArea1MapCell[18] = new FireArea1Map18(); FireArea1MapCell[19] = new FireArea1Map19();
            FireArea1MapCell[20] = new FireArea1Map20(); FireArea1MapCell[21] = new FireArea1Map21(); FireArea1MapCell[22] = new FireArea1Map22(); FireArea1MapCell[23] = new FireArea1Map23(); FireArea1MapCell[24] = new FireArea1Map24(); FireArea1MapCell[25] = new FireArea1Map25(); FireArea1MapCell[26] = new FireArea1Map26(); FireArea1MapCell[27] = new FireArea1Map27(); FireArea1MapCell[28] = new FireArea1Map28(); FireArea1MapCell[29] = new FireArea1Map29();
            FireArea1MapCell[30] = new FireArea1Map30(); FireArea1MapCell[31] = new FireArea1Map31(); FireArea1MapCell[32] = new FireArea1Map32(); FireArea1MapCell[33] = new FireArea1Map33(); FireArea1MapCell[34] = new FireArea1Map34(); FireArea1MapCell[35] = new FireArea1Map35(); FireArea1MapCell[36] = new FireArea1Map36(); FireArea1MapCell[37] = new FireArea1Map37(); FireArea1MapCell[38] = new FireArea1Map38(); FireArea1MapCell[39] = new FireArea1Map39();
            FireArea1MapCell[40] = new FireArea1Map40(); FireArea1MapCell[41] = new FireArea1Map41(); FireArea1MapCell[42] = new FireArea1Map42(); FireArea1MapCell[43] = new FireArea1Map43(); FireArea1MapCell[44] = new FireArea1Map44(); FireArea1MapCell[45] = new FireArea1Map45(); FireArea1MapCell[46] = new FireArea1Map46(); FireArea1MapCell[47] = new FireArea1Map47(); FireArea1MapCell[48] = new FireArea1Map48(); FireArea1MapCell[49] = new FireArea1Map49();
            FireArea1MapCell[50] = new FireArea1Map50(); FireArea1MapCell[51] = new FireArea1Map51(); FireArea1MapCell[52] = new FireArea1Map52(); FireArea1MapCell[53] = new FireArea1Map53(); FireArea1MapCell[54] = new FireArea1Map54(); FireArea1MapCell[55] = new FireArea1Map55(); FireArea1MapCell[56] = new FireArea1Map56(); FireArea1MapCell[57] = new FireArea1Map57(); FireArea1MapCell[58] = new FireArea1Map58(); FireArea1MapCell[59] = new FireArea1Map59();
            FireArea1MapCell[60] = new FireArea1Map60(); FireArea1MapCell[61] = new FireArea1Map61(); FireArea1MapCell[62] = new FireArea1Map62(); FireArea1MapCell[63] = new FireArea1Map63(); FireArea1MapCell[64] = new FireArea1Map64(); FireArea1MapCell[65] = new FireArea1Map65(); FireArea1MapCell[66] = new FireArea1Map66(); FireArea1MapCell[67] = new FireArea1Map67(); FireArea1MapCell[68] = new FireArea1Map68(); FireArea1MapCell[69] = new FireArea1Map69();
            FireArea1MapCell[70] = new FireArea1Map70(); FireArea1MapCell[71] = new FireArea1Map71(); FireArea1MapCell[72] = new FireArea1Map72(); FireArea1MapCell[73] = new FireArea1Map73(); FireArea1MapCell[74] = new FireArea1Map74(); FireArea1MapCell[75] = new FireArea1Map75(); FireArea1MapCell[76] = new FireArea1Map76(); FireArea1MapCell[77] = new FireArea1Map77(); FireArea1MapCell[78] = new FireArea1Map78(); FireArea1MapCell[79] = new FireArea1Map79();
            FireArea1MapCell[80] = new FireArea1Map80(); FireArea1MapCell[81] = new FireArea1Map81(); FireArea1MapCell[82] = new FireArea1Map82(); FireArea1MapCell[83] = new FireArea1Map83(); FireArea1MapCell[84] = new FireArea1Map84(); FireArea1MapCell[85] = new FireArea1Map85(); FireArea1MapCell[86] = new FireArea1Map86(); FireArea1MapCell[87] = new FireArea1Map87(); FireArea1MapCell[88] = new FireArea1Map88(); FireArea1MapCell[89] = new FireArea1Map89();
            FireArea1MapCell[90] = new FireArea1Map90(); FireArea1MapCell[91] = new FireArea1Map91(); FireArea1MapCell[92] = new FireArea1Map92(); FireArea1MapCell[93] = new FireArea1Map93(); FireArea1MapCell[94] = new FireArea1Map94(); FireArea1MapCell[95] = new FireArea1Map95(); FireArea1MapCell[96] = new FireArea1Map96(); FireArea1MapCell[97] = new FireArea1Map97(); FireArea1MapCell[98] = new FireArea1Map98(); FireArea1MapCell[99] = new FireArea1Map99();

            //PlantArea1 map - array of all grid cell classes
            PlantArea1Map[] PlantArea1MapCell = new PlantArea1Map[100];
            PlantArea1MapCell[0] = new PlantArea1Map0(); PlantArea1MapCell[1] = new PlantArea1Map1(); PlantArea1MapCell[2] = new PlantArea1Map2(); PlantArea1MapCell[3] = new PlantArea1Map3(); PlantArea1MapCell[4] = new PlantArea1Map4(); PlantArea1MapCell[5] = new PlantArea1Map5(); PlantArea1MapCell[6] = new PlantArea1Map6(); PlantArea1MapCell[7] = new PlantArea1Map7(); PlantArea1MapCell[8] = new PlantArea1Map8(); PlantArea1MapCell[9] = new PlantArea1Map9();
            PlantArea1MapCell[10] = new PlantArea1Map10(); PlantArea1MapCell[11] = new PlantArea1Map11(); PlantArea1MapCell[12] = new PlantArea1Map12(); PlantArea1MapCell[13] = new PlantArea1Map13(); PlantArea1MapCell[14] = new PlantArea1Map14(); PlantArea1MapCell[15] = new PlantArea1Map15(); PlantArea1MapCell[16] = new PlantArea1Map16(); PlantArea1MapCell[17] = new PlantArea1Map17(); PlantArea1MapCell[18] = new PlantArea1Map18(); PlantArea1MapCell[19] = new PlantArea1Map19();
            PlantArea1MapCell[20] = new PlantArea1Map20(); PlantArea1MapCell[21] = new PlantArea1Map21(); PlantArea1MapCell[22] = new PlantArea1Map22(); PlantArea1MapCell[23] = new PlantArea1Map23(); PlantArea1MapCell[24] = new PlantArea1Map24(); PlantArea1MapCell[25] = new PlantArea1Map25(); PlantArea1MapCell[26] = new PlantArea1Map26(); PlantArea1MapCell[27] = new PlantArea1Map27(); PlantArea1MapCell[28] = new PlantArea1Map28(); PlantArea1MapCell[29] = new PlantArea1Map29();
            PlantArea1MapCell[30] = new PlantArea1Map30(); PlantArea1MapCell[31] = new PlantArea1Map31(); PlantArea1MapCell[32] = new PlantArea1Map32(); PlantArea1MapCell[33] = new PlantArea1Map33(); PlantArea1MapCell[34] = new PlantArea1Map34(); PlantArea1MapCell[35] = new PlantArea1Map35(); PlantArea1MapCell[36] = new PlantArea1Map36(); PlantArea1MapCell[37] = new PlantArea1Map37(); PlantArea1MapCell[38] = new PlantArea1Map38(); PlantArea1MapCell[39] = new PlantArea1Map39();
            PlantArea1MapCell[40] = new PlantArea1Map40(); PlantArea1MapCell[41] = new PlantArea1Map41(); PlantArea1MapCell[42] = new PlantArea1Map42(); PlantArea1MapCell[43] = new PlantArea1Map43(); PlantArea1MapCell[44] = new PlantArea1Map44(); PlantArea1MapCell[45] = new PlantArea1Map45(); PlantArea1MapCell[46] = new PlantArea1Map46(); PlantArea1MapCell[47] = new PlantArea1Map47(); PlantArea1MapCell[48] = new PlantArea1Map48(); PlantArea1MapCell[49] = new PlantArea1Map49();
            PlantArea1MapCell[50] = new PlantArea1Map50(); PlantArea1MapCell[51] = new PlantArea1Map51(); PlantArea1MapCell[52] = new PlantArea1Map52(); PlantArea1MapCell[53] = new PlantArea1Map53(); PlantArea1MapCell[54] = new PlantArea1Map54(); PlantArea1MapCell[55] = new PlantArea1Map55(); PlantArea1MapCell[56] = new PlantArea1Map56(); PlantArea1MapCell[57] = new PlantArea1Map57(); PlantArea1MapCell[58] = new PlantArea1Map58(); PlantArea1MapCell[59] = new PlantArea1Map59();
            PlantArea1MapCell[60] = new PlantArea1Map60(); PlantArea1MapCell[61] = new PlantArea1Map61(); PlantArea1MapCell[62] = new PlantArea1Map62(); PlantArea1MapCell[63] = new PlantArea1Map63(); PlantArea1MapCell[64] = new PlantArea1Map64(); PlantArea1MapCell[65] = new PlantArea1Map65(); PlantArea1MapCell[66] = new PlantArea1Map66(); PlantArea1MapCell[67] = new PlantArea1Map67(); PlantArea1MapCell[68] = new PlantArea1Map68(); PlantArea1MapCell[69] = new PlantArea1Map69();
            PlantArea1MapCell[70] = new PlantArea1Map70(); PlantArea1MapCell[71] = new PlantArea1Map71(); PlantArea1MapCell[72] = new PlantArea1Map72(); PlantArea1MapCell[73] = new PlantArea1Map73(); PlantArea1MapCell[74] = new PlantArea1Map74(); PlantArea1MapCell[75] = new PlantArea1Map75(); PlantArea1MapCell[76] = new PlantArea1Map76(); PlantArea1MapCell[77] = new PlantArea1Map77(); PlantArea1MapCell[78] = new PlantArea1Map78(); PlantArea1MapCell[79] = new PlantArea1Map79();
            PlantArea1MapCell[80] = new PlantArea1Map80(); PlantArea1MapCell[81] = new PlantArea1Map81(); PlantArea1MapCell[82] = new PlantArea1Map82(); PlantArea1MapCell[83] = new PlantArea1Map83(); PlantArea1MapCell[84] = new PlantArea1Map84(); PlantArea1MapCell[85] = new PlantArea1Map85(); PlantArea1MapCell[86] = new PlantArea1Map86(); PlantArea1MapCell[87] = new PlantArea1Map87(); PlantArea1MapCell[88] = new PlantArea1Map88(); PlantArea1MapCell[89] = new PlantArea1Map89();
            PlantArea1MapCell[90] = new PlantArea1Map90(); PlantArea1MapCell[91] = new PlantArea1Map91(); PlantArea1MapCell[92] = new PlantArea1Map92(); PlantArea1MapCell[93] = new PlantArea1Map93(); PlantArea1MapCell[94] = new PlantArea1Map94(); PlantArea1MapCell[95] = new PlantArea1Map95(); PlantArea1MapCell[96] = new PlantArea1Map96(); PlantArea1MapCell[97] = new PlantArea1Map97(); PlantArea1MapCell[98] = new PlantArea1Map98(); PlantArea1MapCell[99] = new PlantArea1Map99();

            //EarthArea1 map - array of all grid cell classes
            EarthArea1Map[] EarthArea1MapCell = new EarthArea1Map[100];
            EarthArea1MapCell[0] = new EarthArea1Map0(); EarthArea1MapCell[1] = new EarthArea1Map1(); EarthArea1MapCell[2] = new EarthArea1Map2(); EarthArea1MapCell[3] = new EarthArea1Map3(); EarthArea1MapCell[4] = new EarthArea1Map4(); EarthArea1MapCell[5] = new EarthArea1Map5(); EarthArea1MapCell[6] = new EarthArea1Map6(); EarthArea1MapCell[7] = new EarthArea1Map7(); EarthArea1MapCell[8] = new EarthArea1Map8(); EarthArea1MapCell[9] = new EarthArea1Map9();
            EarthArea1MapCell[10] = new EarthArea1Map10(); EarthArea1MapCell[11] = new EarthArea1Map11(); EarthArea1MapCell[12] = new EarthArea1Map12(); EarthArea1MapCell[13] = new EarthArea1Map13(); EarthArea1MapCell[14] = new EarthArea1Map14(); EarthArea1MapCell[15] = new EarthArea1Map15(); EarthArea1MapCell[16] = new EarthArea1Map16(); EarthArea1MapCell[17] = new EarthArea1Map17(); EarthArea1MapCell[18] = new EarthArea1Map18(); EarthArea1MapCell[19] = new EarthArea1Map19();
            EarthArea1MapCell[20] = new EarthArea1Map20(); EarthArea1MapCell[21] = new EarthArea1Map21(); EarthArea1MapCell[22] = new EarthArea1Map22(); EarthArea1MapCell[23] = new EarthArea1Map23(); EarthArea1MapCell[24] = new EarthArea1Map24(); EarthArea1MapCell[25] = new EarthArea1Map25(); EarthArea1MapCell[26] = new EarthArea1Map26(); EarthArea1MapCell[27] = new EarthArea1Map27(); EarthArea1MapCell[28] = new EarthArea1Map28(); EarthArea1MapCell[29] = new EarthArea1Map29();
            EarthArea1MapCell[30] = new EarthArea1Map30(); EarthArea1MapCell[31] = new EarthArea1Map31(); EarthArea1MapCell[32] = new EarthArea1Map32(); EarthArea1MapCell[33] = new EarthArea1Map33(); EarthArea1MapCell[34] = new EarthArea1Map34(); EarthArea1MapCell[35] = new EarthArea1Map35(); EarthArea1MapCell[36] = new EarthArea1Map36(); EarthArea1MapCell[37] = new EarthArea1Map37(); EarthArea1MapCell[38] = new EarthArea1Map38(); EarthArea1MapCell[39] = new EarthArea1Map39();
            EarthArea1MapCell[40] = new EarthArea1Map40(); EarthArea1MapCell[41] = new EarthArea1Map41(); EarthArea1MapCell[42] = new EarthArea1Map42(); EarthArea1MapCell[43] = new EarthArea1Map43(); EarthArea1MapCell[44] = new EarthArea1Map44(); EarthArea1MapCell[45] = new EarthArea1Map45(); EarthArea1MapCell[46] = new EarthArea1Map46(); EarthArea1MapCell[47] = new EarthArea1Map47(); EarthArea1MapCell[48] = new EarthArea1Map48(); EarthArea1MapCell[49] = new EarthArea1Map49();
            EarthArea1MapCell[50] = new EarthArea1Map50(); EarthArea1MapCell[51] = new EarthArea1Map51(); EarthArea1MapCell[52] = new EarthArea1Map52(); EarthArea1MapCell[53] = new EarthArea1Map53(); EarthArea1MapCell[54] = new EarthArea1Map54(); EarthArea1MapCell[55] = new EarthArea1Map55(); EarthArea1MapCell[56] = new EarthArea1Map56(); EarthArea1MapCell[57] = new EarthArea1Map57(); EarthArea1MapCell[58] = new EarthArea1Map58(); EarthArea1MapCell[59] = new EarthArea1Map59();
            EarthArea1MapCell[60] = new EarthArea1Map60(); EarthArea1MapCell[61] = new EarthArea1Map61(); EarthArea1MapCell[62] = new EarthArea1Map62(); EarthArea1MapCell[63] = new EarthArea1Map63(); EarthArea1MapCell[64] = new EarthArea1Map64(); EarthArea1MapCell[65] = new EarthArea1Map65(); EarthArea1MapCell[66] = new EarthArea1Map66(); EarthArea1MapCell[67] = new EarthArea1Map67(); EarthArea1MapCell[68] = new EarthArea1Map68(); EarthArea1MapCell[69] = new EarthArea1Map69();
            EarthArea1MapCell[70] = new EarthArea1Map70(); EarthArea1MapCell[71] = new EarthArea1Map71(); EarthArea1MapCell[72] = new EarthArea1Map72(); EarthArea1MapCell[73] = new EarthArea1Map73(); EarthArea1MapCell[74] = new EarthArea1Map74(); EarthArea1MapCell[75] = new EarthArea1Map75(); EarthArea1MapCell[76] = new EarthArea1Map76(); EarthArea1MapCell[77] = new EarthArea1Map77(); EarthArea1MapCell[78] = new EarthArea1Map78(); EarthArea1MapCell[79] = new EarthArea1Map79();
            EarthArea1MapCell[80] = new EarthArea1Map80(); EarthArea1MapCell[81] = new EarthArea1Map81(); EarthArea1MapCell[82] = new EarthArea1Map82(); EarthArea1MapCell[83] = new EarthArea1Map83(); EarthArea1MapCell[84] = new EarthArea1Map84(); EarthArea1MapCell[85] = new EarthArea1Map85(); EarthArea1MapCell[86] = new EarthArea1Map86(); EarthArea1MapCell[87] = new EarthArea1Map87(); EarthArea1MapCell[88] = new EarthArea1Map88(); EarthArea1MapCell[89] = new EarthArea1Map89();
            EarthArea1MapCell[90] = new EarthArea1Map90(); EarthArea1MapCell[91] = new EarthArea1Map91(); EarthArea1MapCell[92] = new EarthArea1Map92(); EarthArea1MapCell[93] = new EarthArea1Map93(); EarthArea1MapCell[94] = new EarthArea1Map94(); EarthArea1MapCell[95] = new EarthArea1Map95(); EarthArea1MapCell[96] = new EarthArea1Map96(); EarthArea1MapCell[97] = new EarthArea1Map97(); EarthArea1MapCell[98] = new EarthArea1Map98(); EarthArea1MapCell[99] = new EarthArea1Map99();

            //AirArea1 map - array of all grid cell classes
            AirArea1Map[] AirArea1MapCell = new AirArea1Map[100];
            AirArea1MapCell[0] = new AirArea1Map0(); AirArea1MapCell[1] = new AirArea1Map1(); AirArea1MapCell[2] = new AirArea1Map2(); AirArea1MapCell[3] = new AirArea1Map3(); AirArea1MapCell[4] = new AirArea1Map4(); AirArea1MapCell[5] = new AirArea1Map5(); AirArea1MapCell[6] = new AirArea1Map6(); AirArea1MapCell[7] = new AirArea1Map7(); AirArea1MapCell[8] = new AirArea1Map8(); AirArea1MapCell[9] = new AirArea1Map9();
            AirArea1MapCell[10] = new AirArea1Map10(); AirArea1MapCell[11] = new AirArea1Map11(); AirArea1MapCell[12] = new AirArea1Map12(); AirArea1MapCell[13] = new AirArea1Map13(); AirArea1MapCell[14] = new AirArea1Map14(); AirArea1MapCell[15] = new AirArea1Map15(); AirArea1MapCell[16] = new AirArea1Map16(); AirArea1MapCell[17] = new AirArea1Map17(); AirArea1MapCell[18] = new AirArea1Map18(); AirArea1MapCell[19] = new AirArea1Map19();
            AirArea1MapCell[20] = new AirArea1Map20(); AirArea1MapCell[21] = new AirArea1Map21(); AirArea1MapCell[22] = new AirArea1Map22(); AirArea1MapCell[23] = new AirArea1Map23(); AirArea1MapCell[24] = new AirArea1Map24(); AirArea1MapCell[25] = new AirArea1Map25(); AirArea1MapCell[26] = new AirArea1Map26(); AirArea1MapCell[27] = new AirArea1Map27(); AirArea1MapCell[28] = new AirArea1Map28(); AirArea1MapCell[29] = new AirArea1Map29();
            AirArea1MapCell[30] = new AirArea1Map30(); AirArea1MapCell[31] = new AirArea1Map31(); AirArea1MapCell[32] = new AirArea1Map32(); AirArea1MapCell[33] = new AirArea1Map33(); AirArea1MapCell[34] = new AirArea1Map34(); AirArea1MapCell[35] = new AirArea1Map35(); AirArea1MapCell[36] = new AirArea1Map36(); AirArea1MapCell[37] = new AirArea1Map37(); AirArea1MapCell[38] = new AirArea1Map38(); AirArea1MapCell[39] = new AirArea1Map39();
            AirArea1MapCell[40] = new AirArea1Map40(); AirArea1MapCell[41] = new AirArea1Map41(); AirArea1MapCell[42] = new AirArea1Map42(); AirArea1MapCell[43] = new AirArea1Map43(); AirArea1MapCell[44] = new AirArea1Map44(); AirArea1MapCell[45] = new AirArea1Map45(); AirArea1MapCell[46] = new AirArea1Map46(); AirArea1MapCell[47] = new AirArea1Map47(); AirArea1MapCell[48] = new AirArea1Map48(); AirArea1MapCell[49] = new AirArea1Map49();
            AirArea1MapCell[50] = new AirArea1Map50(); AirArea1MapCell[51] = new AirArea1Map51(); AirArea1MapCell[52] = new AirArea1Map52(); AirArea1MapCell[53] = new AirArea1Map53(); AirArea1MapCell[54] = new AirArea1Map54(); AirArea1MapCell[55] = new AirArea1Map55(); AirArea1MapCell[56] = new AirArea1Map56(); AirArea1MapCell[57] = new AirArea1Map57(); AirArea1MapCell[58] = new AirArea1Map58(); AirArea1MapCell[59] = new AirArea1Map59();
            AirArea1MapCell[60] = new AirArea1Map60(); AirArea1MapCell[61] = new AirArea1Map61(); AirArea1MapCell[62] = new AirArea1Map62(); AirArea1MapCell[63] = new AirArea1Map63(); AirArea1MapCell[64] = new AirArea1Map64(); AirArea1MapCell[65] = new AirArea1Map65(); AirArea1MapCell[66] = new AirArea1Map66(); AirArea1MapCell[67] = new AirArea1Map67(); AirArea1MapCell[68] = new AirArea1Map68(); AirArea1MapCell[69] = new AirArea1Map69();
            AirArea1MapCell[70] = new AirArea1Map70(); AirArea1MapCell[71] = new AirArea1Map71(); AirArea1MapCell[72] = new AirArea1Map72(); AirArea1MapCell[73] = new AirArea1Map73(); AirArea1MapCell[74] = new AirArea1Map74(); AirArea1MapCell[75] = new AirArea1Map75(); AirArea1MapCell[76] = new AirArea1Map76(); AirArea1MapCell[77] = new AirArea1Map77(); AirArea1MapCell[78] = new AirArea1Map78(); AirArea1MapCell[79] = new AirArea1Map79();
            AirArea1MapCell[80] = new AirArea1Map80(); AirArea1MapCell[81] = new AirArea1Map81(); AirArea1MapCell[82] = new AirArea1Map82(); AirArea1MapCell[83] = new AirArea1Map83(); AirArea1MapCell[84] = new AirArea1Map84(); AirArea1MapCell[85] = new AirArea1Map85(); AirArea1MapCell[86] = new AirArea1Map86(); AirArea1MapCell[87] = new AirArea1Map87(); AirArea1MapCell[88] = new AirArea1Map88(); AirArea1MapCell[89] = new AirArea1Map89();
            AirArea1MapCell[90] = new AirArea1Map90(); AirArea1MapCell[91] = new AirArea1Map91(); AirArea1MapCell[92] = new AirArea1Map92(); AirArea1MapCell[93] = new AirArea1Map93(); AirArea1MapCell[94] = new AirArea1Map94(); AirArea1MapCell[95] = new AirArea1Map95(); AirArea1MapCell[96] = new AirArea1Map96(); AirArea1MapCell[97] = new AirArea1Map97(); AirArea1MapCell[98] = new AirArea1Map98(); AirArea1MapCell[99] = new AirArea1Map99();

            //WaterArea1 map - array of all grid cell classes
            WaterArea1Map[] WaterArea1MapCell = new WaterArea1Map[100];
            WaterArea1MapCell[0] = new WaterArea1Map0(); WaterArea1MapCell[1] = new WaterArea1Map1(); WaterArea1MapCell[2] = new WaterArea1Map2(); WaterArea1MapCell[3] = new WaterArea1Map3(); WaterArea1MapCell[4] = new WaterArea1Map4(); WaterArea1MapCell[5] = new WaterArea1Map5(); WaterArea1MapCell[6] = new WaterArea1Map6(); WaterArea1MapCell[7] = new WaterArea1Map7(); WaterArea1MapCell[8] = new WaterArea1Map8(); WaterArea1MapCell[9] = new WaterArea1Map9();
            WaterArea1MapCell[10] = new WaterArea1Map10(); WaterArea1MapCell[11] = new WaterArea1Map11(); WaterArea1MapCell[12] = new WaterArea1Map12(); WaterArea1MapCell[13] = new WaterArea1Map13(); WaterArea1MapCell[14] = new WaterArea1Map14(); WaterArea1MapCell[15] = new WaterArea1Map15(); WaterArea1MapCell[16] = new WaterArea1Map16(); WaterArea1MapCell[17] = new WaterArea1Map17(); WaterArea1MapCell[18] = new WaterArea1Map18(); WaterArea1MapCell[19] = new WaterArea1Map19();
            WaterArea1MapCell[20] = new WaterArea1Map20(); WaterArea1MapCell[21] = new WaterArea1Map21(); WaterArea1MapCell[22] = new WaterArea1Map22(); WaterArea1MapCell[23] = new WaterArea1Map23(); WaterArea1MapCell[24] = new WaterArea1Map24(); WaterArea1MapCell[25] = new WaterArea1Map25(); WaterArea1MapCell[26] = new WaterArea1Map26(); WaterArea1MapCell[27] = new WaterArea1Map27(); WaterArea1MapCell[28] = new WaterArea1Map28(); WaterArea1MapCell[29] = new WaterArea1Map29();
            WaterArea1MapCell[30] = new WaterArea1Map30(); WaterArea1MapCell[31] = new WaterArea1Map31(); WaterArea1MapCell[32] = new WaterArea1Map32(); WaterArea1MapCell[33] = new WaterArea1Map33(); WaterArea1MapCell[34] = new WaterArea1Map34(); WaterArea1MapCell[35] = new WaterArea1Map35(); WaterArea1MapCell[36] = new WaterArea1Map36(); WaterArea1MapCell[37] = new WaterArea1Map37(); WaterArea1MapCell[38] = new WaterArea1Map38(); WaterArea1MapCell[39] = new WaterArea1Map39();
            WaterArea1MapCell[40] = new WaterArea1Map40(); WaterArea1MapCell[41] = new WaterArea1Map41(); WaterArea1MapCell[42] = new WaterArea1Map42(); WaterArea1MapCell[43] = new WaterArea1Map43(); WaterArea1MapCell[44] = new WaterArea1Map44(); WaterArea1MapCell[45] = new WaterArea1Map45(); WaterArea1MapCell[46] = new WaterArea1Map46(); WaterArea1MapCell[47] = new WaterArea1Map47(); WaterArea1MapCell[48] = new WaterArea1Map48(); WaterArea1MapCell[49] = new WaterArea1Map49();
            WaterArea1MapCell[50] = new WaterArea1Map50(); WaterArea1MapCell[51] = new WaterArea1Map51(); WaterArea1MapCell[52] = new WaterArea1Map52(); WaterArea1MapCell[53] = new WaterArea1Map53(); WaterArea1MapCell[54] = new WaterArea1Map54(); WaterArea1MapCell[55] = new WaterArea1Map55(); WaterArea1MapCell[56] = new WaterArea1Map56(); WaterArea1MapCell[57] = new WaterArea1Map57(); WaterArea1MapCell[58] = new WaterArea1Map58(); WaterArea1MapCell[59] = new WaterArea1Map59();
            WaterArea1MapCell[60] = new WaterArea1Map60(); WaterArea1MapCell[61] = new WaterArea1Map61(); WaterArea1MapCell[62] = new WaterArea1Map62(); WaterArea1MapCell[63] = new WaterArea1Map63(); WaterArea1MapCell[64] = new WaterArea1Map64(); WaterArea1MapCell[65] = new WaterArea1Map65(); WaterArea1MapCell[66] = new WaterArea1Map66(); WaterArea1MapCell[67] = new WaterArea1Map67(); WaterArea1MapCell[68] = new WaterArea1Map68(); WaterArea1MapCell[69] = new WaterArea1Map69();
            WaterArea1MapCell[70] = new WaterArea1Map70(); WaterArea1MapCell[71] = new WaterArea1Map71(); WaterArea1MapCell[72] = new WaterArea1Map72(); WaterArea1MapCell[73] = new WaterArea1Map73(); WaterArea1MapCell[74] = new WaterArea1Map74(); WaterArea1MapCell[75] = new WaterArea1Map75(); WaterArea1MapCell[76] = new WaterArea1Map76(); WaterArea1MapCell[77] = new WaterArea1Map77(); WaterArea1MapCell[78] = new WaterArea1Map78(); WaterArea1MapCell[79] = new WaterArea1Map79();
            WaterArea1MapCell[80] = new WaterArea1Map80(); WaterArea1MapCell[81] = new WaterArea1Map81(); WaterArea1MapCell[82] = new WaterArea1Map82(); WaterArea1MapCell[83] = new WaterArea1Map83(); WaterArea1MapCell[84] = new WaterArea1Map84(); WaterArea1MapCell[85] = new WaterArea1Map85(); WaterArea1MapCell[86] = new WaterArea1Map86(); WaterArea1MapCell[87] = new WaterArea1Map87(); WaterArea1MapCell[88] = new WaterArea1Map88(); WaterArea1MapCell[89] = new WaterArea1Map89();
            WaterArea1MapCell[90] = new WaterArea1Map90(); WaterArea1MapCell[91] = new WaterArea1Map91(); WaterArea1MapCell[92] = new WaterArea1Map92(); WaterArea1MapCell[93] = new WaterArea1Map93(); WaterArea1MapCell[94] = new WaterArea1Map94(); WaterArea1MapCell[95] = new WaterArea1Map95(); WaterArea1MapCell[96] = new WaterArea1Map96(); WaterArea1MapCell[97] = new WaterArea1Map97(); WaterArea1MapCell[98] = new WaterArea1Map98(); WaterArea1MapCell[99] = new WaterArea1Map99();

            //FireArea2 map - array of all grid cell classes
            FireArea2Map[] FireArea2MapCell = new FireArea2Map[100];
            FireArea2MapCell[0] = new FireArea2Map0(); FireArea2MapCell[1] = new FireArea2Map1(); FireArea2MapCell[2] = new FireArea2Map2(); FireArea2MapCell[3] = new FireArea2Map3(); FireArea2MapCell[4] = new FireArea2Map4(); FireArea2MapCell[5] = new FireArea2Map5(); FireArea2MapCell[6] = new FireArea2Map6(); FireArea2MapCell[7] = new FireArea2Map7(); FireArea2MapCell[8] = new FireArea2Map8(); FireArea2MapCell[9] = new FireArea2Map9();
            FireArea2MapCell[10] = new FireArea2Map10(); FireArea2MapCell[11] = new FireArea2Map11(); FireArea2MapCell[12] = new FireArea2Map12(); FireArea2MapCell[13] = new FireArea2Map13(); FireArea2MapCell[14] = new FireArea2Map14(); FireArea2MapCell[15] = new FireArea2Map15(); FireArea2MapCell[16] = new FireArea2Map16(); FireArea2MapCell[17] = new FireArea2Map17(); FireArea2MapCell[18] = new FireArea2Map18(); FireArea2MapCell[19] = new FireArea2Map19();
            FireArea2MapCell[20] = new FireArea2Map20(); FireArea2MapCell[21] = new FireArea2Map21(); FireArea2MapCell[22] = new FireArea2Map22(); FireArea2MapCell[23] = new FireArea2Map23(); FireArea2MapCell[24] = new FireArea2Map24(); FireArea2MapCell[25] = new FireArea2Map25(); FireArea2MapCell[26] = new FireArea2Map26(); FireArea2MapCell[27] = new FireArea2Map27(); FireArea2MapCell[28] = new FireArea2Map28(); FireArea2MapCell[29] = new FireArea2Map29();
            FireArea2MapCell[30] = new FireArea2Map30(); FireArea2MapCell[31] = new FireArea2Map31(); FireArea2MapCell[32] = new FireArea2Map32(); FireArea2MapCell[33] = new FireArea2Map33(); FireArea2MapCell[34] = new FireArea2Map34(); FireArea2MapCell[35] = new FireArea2Map35(); FireArea2MapCell[36] = new FireArea2Map36(); FireArea2MapCell[37] = new FireArea2Map37(); FireArea2MapCell[38] = new FireArea2Map38(); FireArea2MapCell[39] = new FireArea2Map39();
            FireArea2MapCell[40] = new FireArea2Map40(); FireArea2MapCell[41] = new FireArea2Map41(); FireArea2MapCell[42] = new FireArea2Map42(); FireArea2MapCell[43] = new FireArea2Map43(); FireArea2MapCell[44] = new FireArea2Map44(); FireArea2MapCell[45] = new FireArea2Map45(); FireArea2MapCell[46] = new FireArea2Map46(); FireArea2MapCell[47] = new FireArea2Map47(); FireArea2MapCell[48] = new FireArea2Map48(); FireArea2MapCell[49] = new FireArea2Map49();
            FireArea2MapCell[50] = new FireArea2Map50(); FireArea2MapCell[51] = new FireArea2Map51(); FireArea2MapCell[52] = new FireArea2Map52(); FireArea2MapCell[53] = new FireArea2Map53(); FireArea2MapCell[54] = new FireArea2Map54(); FireArea2MapCell[55] = new FireArea2Map55(); FireArea2MapCell[56] = new FireArea2Map56(); FireArea2MapCell[57] = new FireArea2Map57(); FireArea2MapCell[58] = new FireArea2Map58(); FireArea2MapCell[59] = new FireArea2Map59();
            FireArea2MapCell[60] = new FireArea2Map60(); FireArea2MapCell[61] = new FireArea2Map61(); FireArea2MapCell[62] = new FireArea2Map62(); FireArea2MapCell[63] = new FireArea2Map63(); FireArea2MapCell[64] = new FireArea2Map64(); FireArea2MapCell[65] = new FireArea2Map65(); FireArea2MapCell[66] = new FireArea2Map66(); FireArea2MapCell[67] = new FireArea2Map67(); FireArea2MapCell[68] = new FireArea2Map68(); FireArea2MapCell[69] = new FireArea2Map69();
            FireArea2MapCell[70] = new FireArea2Map70(); FireArea2MapCell[71] = new FireArea2Map71(); FireArea2MapCell[72] = new FireArea2Map72(); FireArea2MapCell[73] = new FireArea2Map73(); FireArea2MapCell[74] = new FireArea2Map74(); FireArea2MapCell[75] = new FireArea2Map75(); FireArea2MapCell[76] = new FireArea2Map76(); FireArea2MapCell[77] = new FireArea2Map77(); FireArea2MapCell[78] = new FireArea2Map78(); FireArea2MapCell[79] = new FireArea2Map79();
            FireArea2MapCell[80] = new FireArea2Map80(); FireArea2MapCell[81] = new FireArea2Map81(); FireArea2MapCell[82] = new FireArea2Map82(); FireArea2MapCell[83] = new FireArea2Map83(); FireArea2MapCell[84] = new FireArea2Map84(); FireArea2MapCell[85] = new FireArea2Map85(); FireArea2MapCell[86] = new FireArea2Map86(); FireArea2MapCell[87] = new FireArea2Map87(); FireArea2MapCell[88] = new FireArea2Map88(); FireArea2MapCell[89] = new FireArea2Map89();
            FireArea2MapCell[90] = new FireArea2Map90(); FireArea2MapCell[91] = new FireArea2Map91(); FireArea2MapCell[92] = new FireArea2Map92(); FireArea2MapCell[93] = new FireArea2Map93(); FireArea2MapCell[94] = new FireArea2Map94(); FireArea2MapCell[95] = new FireArea2Map95(); FireArea2MapCell[96] = new FireArea2Map96(); FireArea2MapCell[97] = new FireArea2Map97(); FireArea2MapCell[98] = new FireArea2Map98(); FireArea2MapCell[99] = new FireArea2Map99();

            //FireArea3 map - array of all grid cell classes
            FireArea3Map[] FireArea3MapCell = new FireArea3Map[100];
            FireArea3MapCell[0] = new FireArea3Map0(); FireArea3MapCell[1] = new FireArea3Map1(); FireArea3MapCell[2] = new FireArea3Map2(); FireArea3MapCell[3] = new FireArea3Map3(); FireArea3MapCell[4] = new FireArea3Map4(); FireArea3MapCell[5] = new FireArea3Map5(); FireArea3MapCell[6] = new FireArea3Map6(); FireArea3MapCell[7] = new FireArea3Map7(); FireArea3MapCell[8] = new FireArea3Map8(); FireArea3MapCell[9] = new FireArea3Map9();
            FireArea3MapCell[10] = new FireArea3Map10(); FireArea3MapCell[11] = new FireArea3Map11(); FireArea3MapCell[12] = new FireArea3Map12(); FireArea3MapCell[13] = new FireArea3Map13(); FireArea3MapCell[14] = new FireArea3Map14(); FireArea3MapCell[15] = new FireArea3Map15(); FireArea3MapCell[16] = new FireArea3Map16(); FireArea3MapCell[17] = new FireArea3Map17(); FireArea3MapCell[18] = new FireArea3Map18(); FireArea3MapCell[19] = new FireArea3Map19();
            FireArea3MapCell[20] = new FireArea3Map20(); FireArea3MapCell[21] = new FireArea3Map21(); FireArea3MapCell[22] = new FireArea3Map22(); FireArea3MapCell[23] = new FireArea3Map23(); FireArea3MapCell[24] = new FireArea3Map24(); FireArea3MapCell[25] = new FireArea3Map25(); FireArea3MapCell[26] = new FireArea3Map26(); FireArea3MapCell[27] = new FireArea3Map27(); FireArea3MapCell[28] = new FireArea3Map28(); FireArea3MapCell[29] = new FireArea3Map29();
            FireArea3MapCell[30] = new FireArea3Map30(); FireArea3MapCell[31] = new FireArea3Map31(); FireArea3MapCell[32] = new FireArea3Map32(); FireArea3MapCell[33] = new FireArea3Map33(); FireArea3MapCell[34] = new FireArea3Map34(); FireArea3MapCell[35] = new FireArea3Map35(); FireArea3MapCell[36] = new FireArea3Map36(); FireArea3MapCell[37] = new FireArea3Map37(); FireArea3MapCell[38] = new FireArea3Map38(); FireArea3MapCell[39] = new FireArea3Map39();
            FireArea3MapCell[40] = new FireArea3Map40(); FireArea3MapCell[41] = new FireArea3Map41(); FireArea3MapCell[42] = new FireArea3Map42(); FireArea3MapCell[43] = new FireArea3Map43(); FireArea3MapCell[44] = new FireArea3Map44(); FireArea3MapCell[45] = new FireArea3Map45(); FireArea3MapCell[46] = new FireArea3Map46(); FireArea3MapCell[47] = new FireArea3Map47(); FireArea3MapCell[48] = new FireArea3Map48(); FireArea3MapCell[49] = new FireArea3Map49();
            FireArea3MapCell[50] = new FireArea3Map50(); FireArea3MapCell[51] = new FireArea3Map51(); FireArea3MapCell[52] = new FireArea3Map52(); FireArea3MapCell[53] = new FireArea3Map53(); FireArea3MapCell[54] = new FireArea3Map54(); FireArea3MapCell[55] = new FireArea3Map55(); FireArea3MapCell[56] = new FireArea3Map56(); FireArea3MapCell[57] = new FireArea3Map57(); FireArea3MapCell[58] = new FireArea3Map58(); FireArea3MapCell[59] = new FireArea3Map59();
            FireArea3MapCell[60] = new FireArea3Map60(); FireArea3MapCell[61] = new FireArea3Map61(); FireArea3MapCell[62] = new FireArea3Map62(); FireArea3MapCell[63] = new FireArea3Map63(); FireArea3MapCell[64] = new FireArea3Map64(); FireArea3MapCell[65] = new FireArea3Map65(); FireArea3MapCell[66] = new FireArea3Map66(); FireArea3MapCell[67] = new FireArea3Map67(); FireArea3MapCell[68] = new FireArea3Map68(); FireArea3MapCell[69] = new FireArea3Map69();
            FireArea3MapCell[70] = new FireArea3Map70(); FireArea3MapCell[71] = new FireArea3Map71(); FireArea3MapCell[72] = new FireArea3Map72(); FireArea3MapCell[73] = new FireArea3Map73(); FireArea3MapCell[74] = new FireArea3Map74(); FireArea3MapCell[75] = new FireArea3Map75(); FireArea3MapCell[76] = new FireArea3Map76(); FireArea3MapCell[77] = new FireArea3Map77(); FireArea3MapCell[78] = new FireArea3Map78(); FireArea3MapCell[79] = new FireArea3Map79();
            FireArea3MapCell[80] = new FireArea3Map80(); FireArea3MapCell[81] = new FireArea3Map81(); FireArea3MapCell[82] = new FireArea3Map82(); FireArea3MapCell[83] = new FireArea3Map83(); FireArea3MapCell[84] = new FireArea3Map84(); FireArea3MapCell[85] = new FireArea3Map85(); FireArea3MapCell[86] = new FireArea3Map86(); FireArea3MapCell[87] = new FireArea3Map87(); FireArea3MapCell[88] = new FireArea3Map88(); FireArea3MapCell[89] = new FireArea3Map89();
            FireArea3MapCell[90] = new FireArea3Map90(); FireArea3MapCell[91] = new FireArea3Map91(); FireArea3MapCell[92] = new FireArea3Map92(); FireArea3MapCell[93] = new FireArea3Map93(); FireArea3MapCell[94] = new FireArea3Map94(); FireArea3MapCell[95] = new FireArea3Map95(); FireArea3MapCell[96] = new FireArea3Map96(); FireArea3MapCell[97] = new FireArea3Map97(); FireArea3MapCell[98] = new FireArea3Map98(); FireArea3MapCell[99] = new FireArea3Map99();

            //Laharva map - array of all grid cell classes
            LaharvaMap[] LaharvaMapCell = new LaharvaMap[100];
            LaharvaMapCell[0] = new LaharvaMap0(); LaharvaMapCell[1] = new LaharvaMap1(); LaharvaMapCell[2] = new LaharvaMap2(); LaharvaMapCell[3] = new LaharvaMap3(); LaharvaMapCell[4] = new LaharvaMap4(); LaharvaMapCell[5] = new LaharvaMap5(); LaharvaMapCell[6] = new LaharvaMap6(); LaharvaMapCell[7] = new LaharvaMap7(); LaharvaMapCell[8] = new LaharvaMap8(); LaharvaMapCell[9] = new LaharvaMap9();
            LaharvaMapCell[10] = new LaharvaMap10(); LaharvaMapCell[11] = new LaharvaMap11(); LaharvaMapCell[12] = new LaharvaMap12(); LaharvaMapCell[13] = new LaharvaMap13(); LaharvaMapCell[14] = new LaharvaMap14(); LaharvaMapCell[15] = new LaharvaMap15(); LaharvaMapCell[16] = new LaharvaMap16(); LaharvaMapCell[17] = new LaharvaMap17(); LaharvaMapCell[18] = new LaharvaMap18(); LaharvaMapCell[19] = new LaharvaMap19();
            LaharvaMapCell[20] = new LaharvaMap20(); LaharvaMapCell[21] = new LaharvaMap21(); LaharvaMapCell[22] = new LaharvaMap22(); LaharvaMapCell[23] = new LaharvaMap23(); LaharvaMapCell[24] = new LaharvaMap24(); LaharvaMapCell[25] = new LaharvaMap25(); LaharvaMapCell[26] = new LaharvaMap26(); LaharvaMapCell[27] = new LaharvaMap27(); LaharvaMapCell[28] = new LaharvaMap28(); LaharvaMapCell[29] = new LaharvaMap29();
            LaharvaMapCell[30] = new LaharvaMap30(); LaharvaMapCell[31] = new LaharvaMap31(); LaharvaMapCell[32] = new LaharvaMap32(); LaharvaMapCell[33] = new LaharvaMap33(); LaharvaMapCell[34] = new LaharvaMap34(); LaharvaMapCell[35] = new LaharvaMap35(); LaharvaMapCell[36] = new LaharvaMap36(); LaharvaMapCell[37] = new LaharvaMap37(); LaharvaMapCell[38] = new LaharvaMap38(); LaharvaMapCell[39] = new LaharvaMap39();
            LaharvaMapCell[40] = new LaharvaMap40(); LaharvaMapCell[41] = new LaharvaMap41(); LaharvaMapCell[42] = new LaharvaMap42(); LaharvaMapCell[43] = new LaharvaMap43(); LaharvaMapCell[44] = new LaharvaMap44(); LaharvaMapCell[45] = new LaharvaMap45(); LaharvaMapCell[46] = new LaharvaMap46(); LaharvaMapCell[47] = new LaharvaMap47(); LaharvaMapCell[48] = new LaharvaMap48(); LaharvaMapCell[49] = new LaharvaMap49();
            LaharvaMapCell[50] = new LaharvaMap50(); LaharvaMapCell[51] = new LaharvaMap51(); LaharvaMapCell[52] = new LaharvaMap52(); LaharvaMapCell[53] = new LaharvaMap53(); LaharvaMapCell[54] = new LaharvaMap54(); LaharvaMapCell[55] = new LaharvaMap55(); LaharvaMapCell[56] = new LaharvaMap56(); LaharvaMapCell[57] = new LaharvaMap57(); LaharvaMapCell[58] = new LaharvaMap58(); LaharvaMapCell[59] = new LaharvaMap59();
            LaharvaMapCell[60] = new LaharvaMap60(); LaharvaMapCell[61] = new LaharvaMap61(); LaharvaMapCell[62] = new LaharvaMap62(); LaharvaMapCell[63] = new LaharvaMap63(); LaharvaMapCell[64] = new LaharvaMap64(); LaharvaMapCell[65] = new LaharvaMap65(); LaharvaMapCell[66] = new LaharvaMap66(); LaharvaMapCell[67] = new LaharvaMap67(); LaharvaMapCell[68] = new LaharvaMap68(); LaharvaMapCell[69] = new LaharvaMap69();
            LaharvaMapCell[70] = new LaharvaMap70(); LaharvaMapCell[71] = new LaharvaMap71(); LaharvaMapCell[72] = new LaharvaMap72(); LaharvaMapCell[73] = new LaharvaMap73(); LaharvaMapCell[74] = new LaharvaMap74(); LaharvaMapCell[75] = new LaharvaMap75(); LaharvaMapCell[76] = new LaharvaMap76(); LaharvaMapCell[77] = new LaharvaMap77(); LaharvaMapCell[78] = new LaharvaMap78(); LaharvaMapCell[79] = new LaharvaMap79();
            LaharvaMapCell[80] = new LaharvaMap80(); LaharvaMapCell[81] = new LaharvaMap81(); LaharvaMapCell[82] = new LaharvaMap82(); LaharvaMapCell[83] = new LaharvaMap83(); LaharvaMapCell[84] = new LaharvaMap84(); LaharvaMapCell[85] = new LaharvaMap85(); LaharvaMapCell[86] = new LaharvaMap86(); LaharvaMapCell[87] = new LaharvaMap87(); LaharvaMapCell[88] = new LaharvaMap88(); LaharvaMapCell[89] = new LaharvaMap89();
            LaharvaMapCell[90] = new LaharvaMap90(); LaharvaMapCell[91] = new LaharvaMap91(); LaharvaMapCell[92] = new LaharvaMap92(); LaharvaMapCell[93] = new LaharvaMap93(); LaharvaMapCell[94] = new LaharvaMap94(); LaharvaMapCell[95] = new LaharvaMap95(); LaharvaMapCell[96] = new LaharvaMap96(); LaharvaMapCell[97] = new LaharvaMap97(); LaharvaMapCell[98] = new LaharvaMap98(); LaharvaMapCell[99] = new LaharvaMap99();

            //PlantArea2 map - array of all grid cell classes
            PlantArea2Map[] PlantArea2MapCell = new PlantArea2Map[100];
            PlantArea2MapCell[0] = new PlantArea2Map0(); PlantArea2MapCell[1] = new PlantArea2Map1(); PlantArea2MapCell[2] = new PlantArea2Map2(); PlantArea2MapCell[3] = new PlantArea2Map3(); PlantArea2MapCell[4] = new PlantArea2Map4(); PlantArea2MapCell[5] = new PlantArea2Map5(); PlantArea2MapCell[6] = new PlantArea2Map6(); PlantArea2MapCell[7] = new PlantArea2Map7(); PlantArea2MapCell[8] = new PlantArea2Map8(); PlantArea2MapCell[9] = new PlantArea2Map9();
            PlantArea2MapCell[10] = new PlantArea2Map10(); PlantArea2MapCell[11] = new PlantArea2Map11(); PlantArea2MapCell[12] = new PlantArea2Map12(); PlantArea2MapCell[13] = new PlantArea2Map13(); PlantArea2MapCell[14] = new PlantArea2Map14(); PlantArea2MapCell[15] = new PlantArea2Map15(); PlantArea2MapCell[16] = new PlantArea2Map16(); PlantArea2MapCell[17] = new PlantArea2Map17(); PlantArea2MapCell[18] = new PlantArea2Map18(); PlantArea2MapCell[19] = new PlantArea2Map19();
            PlantArea2MapCell[20] = new PlantArea2Map20(); PlantArea2MapCell[21] = new PlantArea2Map21(); PlantArea2MapCell[22] = new PlantArea2Map22(); PlantArea2MapCell[23] = new PlantArea2Map23(); PlantArea2MapCell[24] = new PlantArea2Map24(); PlantArea2MapCell[25] = new PlantArea2Map25(); PlantArea2MapCell[26] = new PlantArea2Map26(); PlantArea2MapCell[27] = new PlantArea2Map27(); PlantArea2MapCell[28] = new PlantArea2Map28(); PlantArea2MapCell[29] = new PlantArea2Map29();
            PlantArea2MapCell[30] = new PlantArea2Map30(); PlantArea2MapCell[31] = new PlantArea2Map31(); PlantArea2MapCell[32] = new PlantArea2Map32(); PlantArea2MapCell[33] = new PlantArea2Map33(); PlantArea2MapCell[34] = new PlantArea2Map34(); PlantArea2MapCell[35] = new PlantArea2Map35(); PlantArea2MapCell[36] = new PlantArea2Map36(); PlantArea2MapCell[37] = new PlantArea2Map37(); PlantArea2MapCell[38] = new PlantArea2Map38(); PlantArea2MapCell[39] = new PlantArea2Map39();
            PlantArea2MapCell[40] = new PlantArea2Map40(); PlantArea2MapCell[41] = new PlantArea2Map41(); PlantArea2MapCell[42] = new PlantArea2Map42(); PlantArea2MapCell[43] = new PlantArea2Map43(); PlantArea2MapCell[44] = new PlantArea2Map44(); PlantArea2MapCell[45] = new PlantArea2Map45(); PlantArea2MapCell[46] = new PlantArea2Map46(); PlantArea2MapCell[47] = new PlantArea2Map47(); PlantArea2MapCell[48] = new PlantArea2Map48(); PlantArea2MapCell[49] = new PlantArea2Map49();
            PlantArea2MapCell[50] = new PlantArea2Map50(); PlantArea2MapCell[51] = new PlantArea2Map51(); PlantArea2MapCell[52] = new PlantArea2Map52(); PlantArea2MapCell[53] = new PlantArea2Map53(); PlantArea2MapCell[54] = new PlantArea2Map54(); PlantArea2MapCell[55] = new PlantArea2Map55(); PlantArea2MapCell[56] = new PlantArea2Map56(); PlantArea2MapCell[57] = new PlantArea2Map57(); PlantArea2MapCell[58] = new PlantArea2Map58(); PlantArea2MapCell[59] = new PlantArea2Map59();
            PlantArea2MapCell[60] = new PlantArea2Map60(); PlantArea2MapCell[61] = new PlantArea2Map61(); PlantArea2MapCell[62] = new PlantArea2Map62(); PlantArea2MapCell[63] = new PlantArea2Map63(); PlantArea2MapCell[64] = new PlantArea2Map64(); PlantArea2MapCell[65] = new PlantArea2Map65(); PlantArea2MapCell[66] = new PlantArea2Map66(); PlantArea2MapCell[67] = new PlantArea2Map67(); PlantArea2MapCell[68] = new PlantArea2Map68(); PlantArea2MapCell[69] = new PlantArea2Map69();
            PlantArea2MapCell[70] = new PlantArea2Map70(); PlantArea2MapCell[71] = new PlantArea2Map71(); PlantArea2MapCell[72] = new PlantArea2Map72(); PlantArea2MapCell[73] = new PlantArea2Map73(); PlantArea2MapCell[74] = new PlantArea2Map74(); PlantArea2MapCell[75] = new PlantArea2Map75(); PlantArea2MapCell[76] = new PlantArea2Map76(); PlantArea2MapCell[77] = new PlantArea2Map77(); PlantArea2MapCell[78] = new PlantArea2Map78(); PlantArea2MapCell[79] = new PlantArea2Map79();
            PlantArea2MapCell[80] = new PlantArea2Map80(); PlantArea2MapCell[81] = new PlantArea2Map81(); PlantArea2MapCell[82] = new PlantArea2Map82(); PlantArea2MapCell[83] = new PlantArea2Map83(); PlantArea2MapCell[84] = new PlantArea2Map84(); PlantArea2MapCell[85] = new PlantArea2Map85(); PlantArea2MapCell[86] = new PlantArea2Map86(); PlantArea2MapCell[87] = new PlantArea2Map87(); PlantArea2MapCell[88] = new PlantArea2Map88(); PlantArea2MapCell[89] = new PlantArea2Map89();
            PlantArea2MapCell[90] = new PlantArea2Map90(); PlantArea2MapCell[91] = new PlantArea2Map91(); PlantArea2MapCell[92] = new PlantArea2Map92(); PlantArea2MapCell[93] = new PlantArea2Map93(); PlantArea2MapCell[94] = new PlantArea2Map94(); PlantArea2MapCell[95] = new PlantArea2Map95(); PlantArea2MapCell[96] = new PlantArea2Map96(); PlantArea2MapCell[97] = new PlantArea2Map97(); PlantArea2MapCell[98] = new PlantArea2Map98(); PlantArea2MapCell[99] = new PlantArea2Map99();

            //PlantArea3 map - array of all grid cell classes
            PlantArea3Map[] PlantArea3MapCell = new PlantArea3Map[100];
            PlantArea3MapCell[0] = new PlantArea3Map0(); PlantArea3MapCell[1] = new PlantArea3Map1(); PlantArea3MapCell[2] = new PlantArea3Map2(); PlantArea3MapCell[3] = new PlantArea3Map3(); PlantArea3MapCell[4] = new PlantArea3Map4(); PlantArea3MapCell[5] = new PlantArea3Map5(); PlantArea3MapCell[6] = new PlantArea3Map6(); PlantArea3MapCell[7] = new PlantArea3Map7(); PlantArea3MapCell[8] = new PlantArea3Map8(); PlantArea3MapCell[9] = new PlantArea3Map9();
            PlantArea3MapCell[10] = new PlantArea3Map10(); PlantArea3MapCell[11] = new PlantArea3Map11(); PlantArea3MapCell[12] = new PlantArea3Map12(); PlantArea3MapCell[13] = new PlantArea3Map13(); PlantArea3MapCell[14] = new PlantArea3Map14(); PlantArea3MapCell[15] = new PlantArea3Map15(); PlantArea3MapCell[16] = new PlantArea3Map16(); PlantArea3MapCell[17] = new PlantArea3Map17(); PlantArea3MapCell[18] = new PlantArea3Map18(); PlantArea3MapCell[19] = new PlantArea3Map19();
            PlantArea3MapCell[20] = new PlantArea3Map20(); PlantArea3MapCell[21] = new PlantArea3Map21(); PlantArea3MapCell[22] = new PlantArea3Map22(); PlantArea3MapCell[23] = new PlantArea3Map23(); PlantArea3MapCell[24] = new PlantArea3Map24(); PlantArea3MapCell[25] = new PlantArea3Map25(); PlantArea3MapCell[26] = new PlantArea3Map26(); PlantArea3MapCell[27] = new PlantArea3Map27(); PlantArea3MapCell[28] = new PlantArea3Map28(); PlantArea3MapCell[29] = new PlantArea3Map29();
            PlantArea3MapCell[30] = new PlantArea3Map30(); PlantArea3MapCell[31] = new PlantArea3Map31(); PlantArea3MapCell[32] = new PlantArea3Map32(); PlantArea3MapCell[33] = new PlantArea3Map33(); PlantArea3MapCell[34] = new PlantArea3Map34(); PlantArea3MapCell[35] = new PlantArea3Map35(); PlantArea3MapCell[36] = new PlantArea3Map36(); PlantArea3MapCell[37] = new PlantArea3Map37(); PlantArea3MapCell[38] = new PlantArea3Map38(); PlantArea3MapCell[39] = new PlantArea3Map39();
            PlantArea3MapCell[40] = new PlantArea3Map40(); PlantArea3MapCell[41] = new PlantArea3Map41(); PlantArea3MapCell[42] = new PlantArea3Map42(); PlantArea3MapCell[43] = new PlantArea3Map43(); PlantArea3MapCell[44] = new PlantArea3Map44(); PlantArea3MapCell[45] = new PlantArea3Map45(); PlantArea3MapCell[46] = new PlantArea3Map46(); PlantArea3MapCell[47] = new PlantArea3Map47(); PlantArea3MapCell[48] = new PlantArea3Map48(); PlantArea3MapCell[49] = new PlantArea3Map49();
            PlantArea3MapCell[50] = new PlantArea3Map50(); PlantArea3MapCell[51] = new PlantArea3Map51(); PlantArea3MapCell[52] = new PlantArea3Map52(); PlantArea3MapCell[53] = new PlantArea3Map53(); PlantArea3MapCell[54] = new PlantArea3Map54(); PlantArea3MapCell[55] = new PlantArea3Map55(); PlantArea3MapCell[56] = new PlantArea3Map56(); PlantArea3MapCell[57] = new PlantArea3Map57(); PlantArea3MapCell[58] = new PlantArea3Map58(); PlantArea3MapCell[59] = new PlantArea3Map59();
            PlantArea3MapCell[60] = new PlantArea3Map60(); PlantArea3MapCell[61] = new PlantArea3Map61(); PlantArea3MapCell[62] = new PlantArea3Map62(); PlantArea3MapCell[63] = new PlantArea3Map63(); PlantArea3MapCell[64] = new PlantArea3Map64(); PlantArea3MapCell[65] = new PlantArea3Map65(); PlantArea3MapCell[66] = new PlantArea3Map66(); PlantArea3MapCell[67] = new PlantArea3Map67(); PlantArea3MapCell[68] = new PlantArea3Map68(); PlantArea3MapCell[69] = new PlantArea3Map69();
            PlantArea3MapCell[70] = new PlantArea3Map70(); PlantArea3MapCell[71] = new PlantArea3Map71(); PlantArea3MapCell[72] = new PlantArea3Map72(); PlantArea3MapCell[73] = new PlantArea3Map73(); PlantArea3MapCell[74] = new PlantArea3Map74(); PlantArea3MapCell[75] = new PlantArea3Map75(); PlantArea3MapCell[76] = new PlantArea3Map76(); PlantArea3MapCell[77] = new PlantArea3Map77(); PlantArea3MapCell[78] = new PlantArea3Map78(); PlantArea3MapCell[79] = new PlantArea3Map79();
            PlantArea3MapCell[80] = new PlantArea3Map80(); PlantArea3MapCell[81] = new PlantArea3Map81(); PlantArea3MapCell[82] = new PlantArea3Map82(); PlantArea3MapCell[83] = new PlantArea3Map83(); PlantArea3MapCell[84] = new PlantArea3Map84(); PlantArea3MapCell[85] = new PlantArea3Map85(); PlantArea3MapCell[86] = new PlantArea3Map86(); PlantArea3MapCell[87] = new PlantArea3Map87(); PlantArea3MapCell[88] = new PlantArea3Map88(); PlantArea3MapCell[89] = new PlantArea3Map89();
            PlantArea3MapCell[90] = new PlantArea3Map90(); PlantArea3MapCell[91] = new PlantArea3Map91(); PlantArea3MapCell[92] = new PlantArea3Map92(); PlantArea3MapCell[93] = new PlantArea3Map93(); PlantArea3MapCell[94] = new PlantArea3Map94(); PlantArea3MapCell[95] = new PlantArea3Map95(); PlantArea3MapCell[96] = new PlantArea3Map96(); PlantArea3MapCell[97] = new PlantArea3Map97(); PlantArea3MapCell[98] = new PlantArea3Map98(); PlantArea3MapCell[99] = new PlantArea3Map99();

            //Arbelle map - array of all grid cell classes
            ArbelleMap[] ArbelleMapCell = new ArbelleMap[100];
            ArbelleMapCell[0] = new ArbelleMap0(); ArbelleMapCell[1] = new ArbelleMap1(); ArbelleMapCell[2] = new ArbelleMap2(); ArbelleMapCell[3] = new ArbelleMap3(); ArbelleMapCell[4] = new ArbelleMap4(); ArbelleMapCell[5] = new ArbelleMap5(); ArbelleMapCell[6] = new ArbelleMap6(); ArbelleMapCell[7] = new ArbelleMap7(); ArbelleMapCell[8] = new ArbelleMap8(); ArbelleMapCell[9] = new ArbelleMap9();
            ArbelleMapCell[10] = new ArbelleMap10(); ArbelleMapCell[11] = new ArbelleMap11(); ArbelleMapCell[12] = new ArbelleMap12(); ArbelleMapCell[13] = new ArbelleMap13(); ArbelleMapCell[14] = new ArbelleMap14(); ArbelleMapCell[15] = new ArbelleMap15(); ArbelleMapCell[16] = new ArbelleMap16(); ArbelleMapCell[17] = new ArbelleMap17(); ArbelleMapCell[18] = new ArbelleMap18(); ArbelleMapCell[19] = new ArbelleMap19();
            ArbelleMapCell[20] = new ArbelleMap20(); ArbelleMapCell[21] = new ArbelleMap21(); ArbelleMapCell[22] = new ArbelleMap22(); ArbelleMapCell[23] = new ArbelleMap23(); ArbelleMapCell[24] = new ArbelleMap24(); ArbelleMapCell[25] = new ArbelleMap25(); ArbelleMapCell[26] = new ArbelleMap26(); ArbelleMapCell[27] = new ArbelleMap27(); ArbelleMapCell[28] = new ArbelleMap28(); ArbelleMapCell[29] = new ArbelleMap29();
            ArbelleMapCell[30] = new ArbelleMap30(); ArbelleMapCell[31] = new ArbelleMap31(); ArbelleMapCell[32] = new ArbelleMap32(); ArbelleMapCell[33] = new ArbelleMap33(); ArbelleMapCell[34] = new ArbelleMap34(); ArbelleMapCell[35] = new ArbelleMap35(); ArbelleMapCell[36] = new ArbelleMap36(); ArbelleMapCell[37] = new ArbelleMap37(); ArbelleMapCell[38] = new ArbelleMap38(); ArbelleMapCell[39] = new ArbelleMap39();
            ArbelleMapCell[40] = new ArbelleMap40(); ArbelleMapCell[41] = new ArbelleMap41(); ArbelleMapCell[42] = new ArbelleMap42(); ArbelleMapCell[43] = new ArbelleMap43(); ArbelleMapCell[44] = new ArbelleMap44(); ArbelleMapCell[45] = new ArbelleMap45(); ArbelleMapCell[46] = new ArbelleMap46(); ArbelleMapCell[47] = new ArbelleMap47(); ArbelleMapCell[48] = new ArbelleMap48(); ArbelleMapCell[49] = new ArbelleMap49();
            ArbelleMapCell[50] = new ArbelleMap50(); ArbelleMapCell[51] = new ArbelleMap51(); ArbelleMapCell[52] = new ArbelleMap52(); ArbelleMapCell[53] = new ArbelleMap53(); ArbelleMapCell[54] = new ArbelleMap54(); ArbelleMapCell[55] = new ArbelleMap55(); ArbelleMapCell[56] = new ArbelleMap56(); ArbelleMapCell[57] = new ArbelleMap57(); ArbelleMapCell[58] = new ArbelleMap58(); ArbelleMapCell[59] = new ArbelleMap59();
            ArbelleMapCell[60] = new ArbelleMap60(); ArbelleMapCell[61] = new ArbelleMap61(); ArbelleMapCell[62] = new ArbelleMap62(); ArbelleMapCell[63] = new ArbelleMap63(); ArbelleMapCell[64] = new ArbelleMap64(); ArbelleMapCell[65] = new ArbelleMap65(); ArbelleMapCell[66] = new ArbelleMap66(); ArbelleMapCell[67] = new ArbelleMap67(); ArbelleMapCell[68] = new ArbelleMap68(); ArbelleMapCell[69] = new ArbelleMap69();
            ArbelleMapCell[70] = new ArbelleMap70(); ArbelleMapCell[71] = new ArbelleMap71(); ArbelleMapCell[72] = new ArbelleMap72(); ArbelleMapCell[73] = new ArbelleMap73(); ArbelleMapCell[74] = new ArbelleMap74(); ArbelleMapCell[75] = new ArbelleMap75(); ArbelleMapCell[76] = new ArbelleMap76(); ArbelleMapCell[77] = new ArbelleMap77(); ArbelleMapCell[78] = new ArbelleMap78(); ArbelleMapCell[79] = new ArbelleMap79();
            ArbelleMapCell[80] = new ArbelleMap80(); ArbelleMapCell[81] = new ArbelleMap81(); ArbelleMapCell[82] = new ArbelleMap82(); ArbelleMapCell[83] = new ArbelleMap83(); ArbelleMapCell[84] = new ArbelleMap84(); ArbelleMapCell[85] = new ArbelleMap85(); ArbelleMapCell[86] = new ArbelleMap86(); ArbelleMapCell[87] = new ArbelleMap87(); ArbelleMapCell[88] = new ArbelleMap88(); ArbelleMapCell[89] = new ArbelleMap89();
            ArbelleMapCell[90] = new ArbelleMap90(); ArbelleMapCell[91] = new ArbelleMap91(); ArbelleMapCell[92] = new ArbelleMap92(); ArbelleMapCell[93] = new ArbelleMap93(); ArbelleMapCell[94] = new ArbelleMap94(); ArbelleMapCell[95] = new ArbelleMap95(); ArbelleMapCell[96] = new ArbelleMap96(); ArbelleMapCell[97] = new ArbelleMap97(); ArbelleMapCell[98] = new ArbelleMap98(); ArbelleMapCell[99] = new ArbelleMap99();

            //EarthArea2 map - array of all grid cell classes
            EarthArea2Map[] EarthArea2MapCell = new EarthArea2Map[100];
            EarthArea2MapCell[0] = new EarthArea2Map0(); EarthArea2MapCell[1] = new EarthArea2Map1(); EarthArea2MapCell[2] = new EarthArea2Map2(); EarthArea2MapCell[3] = new EarthArea2Map3(); EarthArea2MapCell[4] = new EarthArea2Map4(); EarthArea2MapCell[5] = new EarthArea2Map5(); EarthArea2MapCell[6] = new EarthArea2Map6(); EarthArea2MapCell[7] = new EarthArea2Map7(); EarthArea2MapCell[8] = new EarthArea2Map8(); EarthArea2MapCell[9] = new EarthArea2Map9();
            EarthArea2MapCell[10] = new EarthArea2Map10(); EarthArea2MapCell[11] = new EarthArea2Map11(); EarthArea2MapCell[12] = new EarthArea2Map12(); EarthArea2MapCell[13] = new EarthArea2Map13(); EarthArea2MapCell[14] = new EarthArea2Map14(); EarthArea2MapCell[15] = new EarthArea2Map15(); EarthArea2MapCell[16] = new EarthArea2Map16(); EarthArea2MapCell[17] = new EarthArea2Map17(); EarthArea2MapCell[18] = new EarthArea2Map18(); EarthArea2MapCell[19] = new EarthArea2Map19();
            EarthArea2MapCell[20] = new EarthArea2Map20(); EarthArea2MapCell[21] = new EarthArea2Map21(); EarthArea2MapCell[22] = new EarthArea2Map22(); EarthArea2MapCell[23] = new EarthArea2Map23(); EarthArea2MapCell[24] = new EarthArea2Map24(); EarthArea2MapCell[25] = new EarthArea2Map25(); EarthArea2MapCell[26] = new EarthArea2Map26(); EarthArea2MapCell[27] = new EarthArea2Map27(); EarthArea2MapCell[28] = new EarthArea2Map28(); EarthArea2MapCell[29] = new EarthArea2Map29();
            EarthArea2MapCell[30] = new EarthArea2Map30(); EarthArea2MapCell[31] = new EarthArea2Map31(); EarthArea2MapCell[32] = new EarthArea2Map32(); EarthArea2MapCell[33] = new EarthArea2Map33(); EarthArea2MapCell[34] = new EarthArea2Map34(); EarthArea2MapCell[35] = new EarthArea2Map35(); EarthArea2MapCell[36] = new EarthArea2Map36(); EarthArea2MapCell[37] = new EarthArea2Map37(); EarthArea2MapCell[38] = new EarthArea2Map38(); EarthArea2MapCell[39] = new EarthArea2Map39();
            EarthArea2MapCell[40] = new EarthArea2Map40(); EarthArea2MapCell[41] = new EarthArea2Map41(); EarthArea2MapCell[42] = new EarthArea2Map42(); EarthArea2MapCell[43] = new EarthArea2Map43(); EarthArea2MapCell[44] = new EarthArea2Map44(); EarthArea2MapCell[45] = new EarthArea2Map45(); EarthArea2MapCell[46] = new EarthArea2Map46(); EarthArea2MapCell[47] = new EarthArea2Map47(); EarthArea2MapCell[48] = new EarthArea2Map48(); EarthArea2MapCell[49] = new EarthArea2Map49();
            EarthArea2MapCell[50] = new EarthArea2Map50(); EarthArea2MapCell[51] = new EarthArea2Map51(); EarthArea2MapCell[52] = new EarthArea2Map52(); EarthArea2MapCell[53] = new EarthArea2Map53(); EarthArea2MapCell[54] = new EarthArea2Map54(); EarthArea2MapCell[55] = new EarthArea2Map55(); EarthArea2MapCell[56] = new EarthArea2Map56(); EarthArea2MapCell[57] = new EarthArea2Map57(); EarthArea2MapCell[58] = new EarthArea2Map58(); EarthArea2MapCell[59] = new EarthArea2Map59();
            EarthArea2MapCell[60] = new EarthArea2Map60(); EarthArea2MapCell[61] = new EarthArea2Map61(); EarthArea2MapCell[62] = new EarthArea2Map62(); EarthArea2MapCell[63] = new EarthArea2Map63(); EarthArea2MapCell[64] = new EarthArea2Map64(); EarthArea2MapCell[65] = new EarthArea2Map65(); EarthArea2MapCell[66] = new EarthArea2Map66(); EarthArea2MapCell[67] = new EarthArea2Map67(); EarthArea2MapCell[68] = new EarthArea2Map68(); EarthArea2MapCell[69] = new EarthArea2Map69();
            EarthArea2MapCell[70] = new EarthArea2Map70(); EarthArea2MapCell[71] = new EarthArea2Map71(); EarthArea2MapCell[72] = new EarthArea2Map72(); EarthArea2MapCell[73] = new EarthArea2Map73(); EarthArea2MapCell[74] = new EarthArea2Map74(); EarthArea2MapCell[75] = new EarthArea2Map75(); EarthArea2MapCell[76] = new EarthArea2Map76(); EarthArea2MapCell[77] = new EarthArea2Map77(); EarthArea2MapCell[78] = new EarthArea2Map78(); EarthArea2MapCell[79] = new EarthArea2Map79();
            EarthArea2MapCell[80] = new EarthArea2Map80(); EarthArea2MapCell[81] = new EarthArea2Map81(); EarthArea2MapCell[82] = new EarthArea2Map82(); EarthArea2MapCell[83] = new EarthArea2Map83(); EarthArea2MapCell[84] = new EarthArea2Map84(); EarthArea2MapCell[85] = new EarthArea2Map85(); EarthArea2MapCell[86] = new EarthArea2Map86(); EarthArea2MapCell[87] = new EarthArea2Map87(); EarthArea2MapCell[88] = new EarthArea2Map88(); EarthArea2MapCell[89] = new EarthArea2Map89();
            EarthArea2MapCell[90] = new EarthArea2Map90(); EarthArea2MapCell[91] = new EarthArea2Map91(); EarthArea2MapCell[92] = new EarthArea2Map92(); EarthArea2MapCell[93] = new EarthArea2Map93(); EarthArea2MapCell[94] = new EarthArea2Map94(); EarthArea2MapCell[95] = new EarthArea2Map95(); EarthArea2MapCell[96] = new EarthArea2Map96(); EarthArea2MapCell[97] = new EarthArea2Map97(); EarthArea2MapCell[98] = new EarthArea2Map98(); EarthArea2MapCell[99] = new EarthArea2Map99();

            //EarthArea3 map - array of all grid cell classes
            EarthArea3Map[] EarthArea3MapCell = new EarthArea3Map[100];
            EarthArea3MapCell[0] = new EarthArea3Map0(); EarthArea3MapCell[1] = new EarthArea3Map1(); EarthArea3MapCell[2] = new EarthArea3Map2(); EarthArea3MapCell[3] = new EarthArea3Map3(); EarthArea3MapCell[4] = new EarthArea3Map4(); EarthArea3MapCell[5] = new EarthArea3Map5(); EarthArea3MapCell[6] = new EarthArea3Map6(); EarthArea3MapCell[7] = new EarthArea3Map7(); EarthArea3MapCell[8] = new EarthArea3Map8(); EarthArea3MapCell[9] = new EarthArea3Map9();
            EarthArea3MapCell[10] = new EarthArea3Map10(); EarthArea3MapCell[11] = new EarthArea3Map11(); EarthArea3MapCell[12] = new EarthArea3Map12(); EarthArea3MapCell[13] = new EarthArea3Map13(); EarthArea3MapCell[14] = new EarthArea3Map14(); EarthArea3MapCell[15] = new EarthArea3Map15(); EarthArea3MapCell[16] = new EarthArea3Map16(); EarthArea3MapCell[17] = new EarthArea3Map17(); EarthArea3MapCell[18] = new EarthArea3Map18(); EarthArea3MapCell[19] = new EarthArea3Map19();
            EarthArea3MapCell[20] = new EarthArea3Map20(); EarthArea3MapCell[21] = new EarthArea3Map21(); EarthArea3MapCell[22] = new EarthArea3Map22(); EarthArea3MapCell[23] = new EarthArea3Map23(); EarthArea3MapCell[24] = new EarthArea3Map24(); EarthArea3MapCell[25] = new EarthArea3Map25(); EarthArea3MapCell[26] = new EarthArea3Map26(); EarthArea3MapCell[27] = new EarthArea3Map27(); EarthArea3MapCell[28] = new EarthArea3Map28(); EarthArea3MapCell[29] = new EarthArea3Map29();
            EarthArea3MapCell[30] = new EarthArea3Map30(); EarthArea3MapCell[31] = new EarthArea3Map31(); EarthArea3MapCell[32] = new EarthArea3Map32(); EarthArea3MapCell[33] = new EarthArea3Map33(); EarthArea3MapCell[34] = new EarthArea3Map34(); EarthArea3MapCell[35] = new EarthArea3Map35(); EarthArea3MapCell[36] = new EarthArea3Map36(); EarthArea3MapCell[37] = new EarthArea3Map37(); EarthArea3MapCell[38] = new EarthArea3Map38(); EarthArea3MapCell[39] = new EarthArea3Map39();
            EarthArea3MapCell[40] = new EarthArea3Map40(); EarthArea3MapCell[41] = new EarthArea3Map41(); EarthArea3MapCell[42] = new EarthArea3Map42(); EarthArea3MapCell[43] = new EarthArea3Map43(); EarthArea3MapCell[44] = new EarthArea3Map44(); EarthArea3MapCell[45] = new EarthArea3Map45(); EarthArea3MapCell[46] = new EarthArea3Map46(); EarthArea3MapCell[47] = new EarthArea3Map47(); EarthArea3MapCell[48] = new EarthArea3Map48(); EarthArea3MapCell[49] = new EarthArea3Map49();
            EarthArea3MapCell[50] = new EarthArea3Map50(); EarthArea3MapCell[51] = new EarthArea3Map51(); EarthArea3MapCell[52] = new EarthArea3Map52(); EarthArea3MapCell[53] = new EarthArea3Map53(); EarthArea3MapCell[54] = new EarthArea3Map54(); EarthArea3MapCell[55] = new EarthArea3Map55(); EarthArea3MapCell[56] = new EarthArea3Map56(); EarthArea3MapCell[57] = new EarthArea3Map57(); EarthArea3MapCell[58] = new EarthArea3Map58(); EarthArea3MapCell[59] = new EarthArea3Map59();
            EarthArea3MapCell[60] = new EarthArea3Map60(); EarthArea3MapCell[61] = new EarthArea3Map61(); EarthArea3MapCell[62] = new EarthArea3Map62(); EarthArea3MapCell[63] = new EarthArea3Map63(); EarthArea3MapCell[64] = new EarthArea3Map64(); EarthArea3MapCell[65] = new EarthArea3Map65(); EarthArea3MapCell[66] = new EarthArea3Map66(); EarthArea3MapCell[67] = new EarthArea3Map67(); EarthArea3MapCell[68] = new EarthArea3Map68(); EarthArea3MapCell[69] = new EarthArea3Map69();
            EarthArea3MapCell[70] = new EarthArea3Map70(); EarthArea3MapCell[71] = new EarthArea3Map71(); EarthArea3MapCell[72] = new EarthArea3Map72(); EarthArea3MapCell[73] = new EarthArea3Map73(); EarthArea3MapCell[74] = new EarthArea3Map74(); EarthArea3MapCell[75] = new EarthArea3Map75(); EarthArea3MapCell[76] = new EarthArea3Map76(); EarthArea3MapCell[77] = new EarthArea3Map77(); EarthArea3MapCell[78] = new EarthArea3Map78(); EarthArea3MapCell[79] = new EarthArea3Map79();
            EarthArea3MapCell[80] = new EarthArea3Map80(); EarthArea3MapCell[81] = new EarthArea3Map81(); EarthArea3MapCell[82] = new EarthArea3Map82(); EarthArea3MapCell[83] = new EarthArea3Map83(); EarthArea3MapCell[84] = new EarthArea3Map84(); EarthArea3MapCell[85] = new EarthArea3Map85(); EarthArea3MapCell[86] = new EarthArea3Map86(); EarthArea3MapCell[87] = new EarthArea3Map87(); EarthArea3MapCell[88] = new EarthArea3Map88(); EarthArea3MapCell[89] = new EarthArea3Map89();
            EarthArea3MapCell[90] = new EarthArea3Map90(); EarthArea3MapCell[91] = new EarthArea3Map91(); EarthArea3MapCell[92] = new EarthArea3Map92(); EarthArea3MapCell[93] = new EarthArea3Map93(); EarthArea3MapCell[94] = new EarthArea3Map94(); EarthArea3MapCell[95] = new EarthArea3Map95(); EarthArea3MapCell[96] = new EarthArea3Map96(); EarthArea3MapCell[97] = new EarthArea3Map97(); EarthArea3MapCell[98] = new EarthArea3Map98(); EarthArea3MapCell[99] = new EarthArea3Map99();

            //Graben map - array of all grid cell classes
            GrabenMap[] GrabenMapCell = new GrabenMap[100];
            GrabenMapCell[0] = new GrabenMap0(); GrabenMapCell[1] = new GrabenMap1(); GrabenMapCell[2] = new GrabenMap2(); GrabenMapCell[3] = new GrabenMap3(); GrabenMapCell[4] = new GrabenMap4(); GrabenMapCell[5] = new GrabenMap5(); GrabenMapCell[6] = new GrabenMap6(); GrabenMapCell[7] = new GrabenMap7(); GrabenMapCell[8] = new GrabenMap8(); GrabenMapCell[9] = new GrabenMap9();
            GrabenMapCell[10] = new GrabenMap10(); GrabenMapCell[11] = new GrabenMap11(); GrabenMapCell[12] = new GrabenMap12(); GrabenMapCell[13] = new GrabenMap13(); GrabenMapCell[14] = new GrabenMap14(); GrabenMapCell[15] = new GrabenMap15(); GrabenMapCell[16] = new GrabenMap16(); GrabenMapCell[17] = new GrabenMap17(); GrabenMapCell[18] = new GrabenMap18(); GrabenMapCell[19] = new GrabenMap19();
            GrabenMapCell[20] = new GrabenMap20(); GrabenMapCell[21] = new GrabenMap21(); GrabenMapCell[22] = new GrabenMap22(); GrabenMapCell[23] = new GrabenMap23(); GrabenMapCell[24] = new GrabenMap24(); GrabenMapCell[25] = new GrabenMap25(); GrabenMapCell[26] = new GrabenMap26(); GrabenMapCell[27] = new GrabenMap27(); GrabenMapCell[28] = new GrabenMap28(); GrabenMapCell[29] = new GrabenMap29();
            GrabenMapCell[30] = new GrabenMap30(); GrabenMapCell[31] = new GrabenMap31(); GrabenMapCell[32] = new GrabenMap32(); GrabenMapCell[33] = new GrabenMap33(); GrabenMapCell[34] = new GrabenMap34(); GrabenMapCell[35] = new GrabenMap35(); GrabenMapCell[36] = new GrabenMap36(); GrabenMapCell[37] = new GrabenMap37(); GrabenMapCell[38] = new GrabenMap38(); GrabenMapCell[39] = new GrabenMap39();
            GrabenMapCell[40] = new GrabenMap40(); GrabenMapCell[41] = new GrabenMap41(); GrabenMapCell[42] = new GrabenMap42(); GrabenMapCell[43] = new GrabenMap43(); GrabenMapCell[44] = new GrabenMap44(); GrabenMapCell[45] = new GrabenMap45(); GrabenMapCell[46] = new GrabenMap46(); GrabenMapCell[47] = new GrabenMap47(); GrabenMapCell[48] = new GrabenMap48(); GrabenMapCell[49] = new GrabenMap49();
            GrabenMapCell[50] = new GrabenMap50(); GrabenMapCell[51] = new GrabenMap51(); GrabenMapCell[52] = new GrabenMap52(); GrabenMapCell[53] = new GrabenMap53(); GrabenMapCell[54] = new GrabenMap54(); GrabenMapCell[55] = new GrabenMap55(); GrabenMapCell[56] = new GrabenMap56(); GrabenMapCell[57] = new GrabenMap57(); GrabenMapCell[58] = new GrabenMap58(); GrabenMapCell[59] = new GrabenMap59();
            GrabenMapCell[60] = new GrabenMap60(); GrabenMapCell[61] = new GrabenMap61(); GrabenMapCell[62] = new GrabenMap62(); GrabenMapCell[63] = new GrabenMap63(); GrabenMapCell[64] = new GrabenMap64(); GrabenMapCell[65] = new GrabenMap65(); GrabenMapCell[66] = new GrabenMap66(); GrabenMapCell[67] = new GrabenMap67(); GrabenMapCell[68] = new GrabenMap68(); GrabenMapCell[69] = new GrabenMap69();
            GrabenMapCell[70] = new GrabenMap70(); GrabenMapCell[71] = new GrabenMap71(); GrabenMapCell[72] = new GrabenMap72(); GrabenMapCell[73] = new GrabenMap73(); GrabenMapCell[74] = new GrabenMap74(); GrabenMapCell[75] = new GrabenMap75(); GrabenMapCell[76] = new GrabenMap76(); GrabenMapCell[77] = new GrabenMap77(); GrabenMapCell[78] = new GrabenMap78(); GrabenMapCell[79] = new GrabenMap79();
            GrabenMapCell[80] = new GrabenMap80(); GrabenMapCell[81] = new GrabenMap81(); GrabenMapCell[82] = new GrabenMap82(); GrabenMapCell[83] = new GrabenMap83(); GrabenMapCell[84] = new GrabenMap84(); GrabenMapCell[85] = new GrabenMap85(); GrabenMapCell[86] = new GrabenMap86(); GrabenMapCell[87] = new GrabenMap87(); GrabenMapCell[88] = new GrabenMap88(); GrabenMapCell[89] = new GrabenMap89();
            GrabenMapCell[90] = new GrabenMap90(); GrabenMapCell[91] = new GrabenMap91(); GrabenMapCell[92] = new GrabenMap92(); GrabenMapCell[93] = new GrabenMap93(); GrabenMapCell[94] = new GrabenMap94(); GrabenMapCell[95] = new GrabenMap95(); GrabenMapCell[96] = new GrabenMap96(); GrabenMapCell[97] = new GrabenMap97(); GrabenMapCell[98] = new GrabenMap98(); GrabenMapCell[99] = new GrabenMap99();

            //AirArea2 map - array of all grid cell classes
            AirArea2Map[] AirArea2MapCell = new AirArea2Map[100];
            AirArea2MapCell[0] = new AirArea2Map0(); AirArea2MapCell[1] = new AirArea2Map1(); AirArea2MapCell[2] = new AirArea2Map2(); AirArea2MapCell[3] = new AirArea2Map3(); AirArea2MapCell[4] = new AirArea2Map4(); AirArea2MapCell[5] = new AirArea2Map5(); AirArea2MapCell[6] = new AirArea2Map6(); AirArea2MapCell[7] = new AirArea2Map7(); AirArea2MapCell[8] = new AirArea2Map8(); AirArea2MapCell[9] = new AirArea2Map9();
            AirArea2MapCell[10] = new AirArea2Map10(); AirArea2MapCell[11] = new AirArea2Map11(); AirArea2MapCell[12] = new AirArea2Map12(); AirArea2MapCell[13] = new AirArea2Map13(); AirArea2MapCell[14] = new AirArea2Map14(); AirArea2MapCell[15] = new AirArea2Map15(); AirArea2MapCell[16] = new AirArea2Map16(); AirArea2MapCell[17] = new AirArea2Map17(); AirArea2MapCell[18] = new AirArea2Map18(); AirArea2MapCell[19] = new AirArea2Map19();
            AirArea2MapCell[20] = new AirArea2Map20(); AirArea2MapCell[21] = new AirArea2Map21(); AirArea2MapCell[22] = new AirArea2Map22(); AirArea2MapCell[23] = new AirArea2Map23(); AirArea2MapCell[24] = new AirArea2Map24(); AirArea2MapCell[25] = new AirArea2Map25(); AirArea2MapCell[26] = new AirArea2Map26(); AirArea2MapCell[27] = new AirArea2Map27(); AirArea2MapCell[28] = new AirArea2Map28(); AirArea2MapCell[29] = new AirArea2Map29();
            AirArea2MapCell[30] = new AirArea2Map30(); AirArea2MapCell[31] = new AirArea2Map31(); AirArea2MapCell[32] = new AirArea2Map32(); AirArea2MapCell[33] = new AirArea2Map33(); AirArea2MapCell[34] = new AirArea2Map34(); AirArea2MapCell[35] = new AirArea2Map35(); AirArea2MapCell[36] = new AirArea2Map36(); AirArea2MapCell[37] = new AirArea2Map37(); AirArea2MapCell[38] = new AirArea2Map38(); AirArea2MapCell[39] = new AirArea2Map39();
            AirArea2MapCell[40] = new AirArea2Map40(); AirArea2MapCell[41] = new AirArea2Map41(); AirArea2MapCell[42] = new AirArea2Map42(); AirArea2MapCell[43] = new AirArea2Map43(); AirArea2MapCell[44] = new AirArea2Map44(); AirArea2MapCell[45] = new AirArea2Map45(); AirArea2MapCell[46] = new AirArea2Map46(); AirArea2MapCell[47] = new AirArea2Map47(); AirArea2MapCell[48] = new AirArea2Map48(); AirArea2MapCell[49] = new AirArea2Map49();
            AirArea2MapCell[50] = new AirArea2Map50(); AirArea2MapCell[51] = new AirArea2Map51(); AirArea2MapCell[52] = new AirArea2Map52(); AirArea2MapCell[53] = new AirArea2Map53(); AirArea2MapCell[54] = new AirArea2Map54(); AirArea2MapCell[55] = new AirArea2Map55(); AirArea2MapCell[56] = new AirArea2Map56(); AirArea2MapCell[57] = new AirArea2Map57(); AirArea2MapCell[58] = new AirArea2Map58(); AirArea2MapCell[59] = new AirArea2Map59();
            AirArea2MapCell[60] = new AirArea2Map60(); AirArea2MapCell[61] = new AirArea2Map61(); AirArea2MapCell[62] = new AirArea2Map62(); AirArea2MapCell[63] = new AirArea2Map63(); AirArea2MapCell[64] = new AirArea2Map64(); AirArea2MapCell[65] = new AirArea2Map65(); AirArea2MapCell[66] = new AirArea2Map66(); AirArea2MapCell[67] = new AirArea2Map67(); AirArea2MapCell[68] = new AirArea2Map68(); AirArea2MapCell[69] = new AirArea2Map69();
            AirArea2MapCell[70] = new AirArea2Map70(); AirArea2MapCell[71] = new AirArea2Map71(); AirArea2MapCell[72] = new AirArea2Map72(); AirArea2MapCell[73] = new AirArea2Map73(); AirArea2MapCell[74] = new AirArea2Map74(); AirArea2MapCell[75] = new AirArea2Map75(); AirArea2MapCell[76] = new AirArea2Map76(); AirArea2MapCell[77] = new AirArea2Map77(); AirArea2MapCell[78] = new AirArea2Map78(); AirArea2MapCell[79] = new AirArea2Map79();
            AirArea2MapCell[80] = new AirArea2Map80(); AirArea2MapCell[81] = new AirArea2Map81(); AirArea2MapCell[82] = new AirArea2Map82(); AirArea2MapCell[83] = new AirArea2Map83(); AirArea2MapCell[84] = new AirArea2Map84(); AirArea2MapCell[85] = new AirArea2Map85(); AirArea2MapCell[86] = new AirArea2Map86(); AirArea2MapCell[87] = new AirArea2Map87(); AirArea2MapCell[88] = new AirArea2Map88(); AirArea2MapCell[89] = new AirArea2Map89();
            AirArea2MapCell[90] = new AirArea2Map90(); AirArea2MapCell[91] = new AirArea2Map91(); AirArea2MapCell[92] = new AirArea2Map92(); AirArea2MapCell[93] = new AirArea2Map93(); AirArea2MapCell[94] = new AirArea2Map94(); AirArea2MapCell[95] = new AirArea2Map95(); AirArea2MapCell[96] = new AirArea2Map96(); AirArea2MapCell[97] = new AirArea2Map97(); AirArea2MapCell[98] = new AirArea2Map98(); AirArea2MapCell[99] = new AirArea2Map99();

            //AirArea3 map - array of all grid cell classes
            AirArea3Map[] AirArea3MapCell = new AirArea3Map[100];
            AirArea3MapCell[0] = new AirArea3Map0(); AirArea3MapCell[1] = new AirArea3Map1(); AirArea3MapCell[2] = new AirArea3Map2(); AirArea3MapCell[3] = new AirArea3Map3(); AirArea3MapCell[4] = new AirArea3Map4(); AirArea3MapCell[5] = new AirArea3Map5(); AirArea3MapCell[6] = new AirArea3Map6(); AirArea3MapCell[7] = new AirArea3Map7(); AirArea3MapCell[8] = new AirArea3Map8(); AirArea3MapCell[9] = new AirArea3Map9();
            AirArea3MapCell[10] = new AirArea3Map10(); AirArea3MapCell[11] = new AirArea3Map11(); AirArea3MapCell[12] = new AirArea3Map12(); AirArea3MapCell[13] = new AirArea3Map13(); AirArea3MapCell[14] = new AirArea3Map14(); AirArea3MapCell[15] = new AirArea3Map15(); AirArea3MapCell[16] = new AirArea3Map16(); AirArea3MapCell[17] = new AirArea3Map17(); AirArea3MapCell[18] = new AirArea3Map18(); AirArea3MapCell[19] = new AirArea3Map19();
            AirArea3MapCell[20] = new AirArea3Map20(); AirArea3MapCell[21] = new AirArea3Map21(); AirArea3MapCell[22] = new AirArea3Map22(); AirArea3MapCell[23] = new AirArea3Map23(); AirArea3MapCell[24] = new AirArea3Map24(); AirArea3MapCell[25] = new AirArea3Map25(); AirArea3MapCell[26] = new AirArea3Map26(); AirArea3MapCell[27] = new AirArea3Map27(); AirArea3MapCell[28] = new AirArea3Map28(); AirArea3MapCell[29] = new AirArea3Map29();
            AirArea3MapCell[30] = new AirArea3Map30(); AirArea3MapCell[31] = new AirArea3Map31(); AirArea3MapCell[32] = new AirArea3Map32(); AirArea3MapCell[33] = new AirArea3Map33(); AirArea3MapCell[34] = new AirArea3Map34(); AirArea3MapCell[35] = new AirArea3Map35(); AirArea3MapCell[36] = new AirArea3Map36(); AirArea3MapCell[37] = new AirArea3Map37(); AirArea3MapCell[38] = new AirArea3Map38(); AirArea3MapCell[39] = new AirArea3Map39();
            AirArea3MapCell[40] = new AirArea3Map40(); AirArea3MapCell[41] = new AirArea3Map41(); AirArea3MapCell[42] = new AirArea3Map42(); AirArea3MapCell[43] = new AirArea3Map43(); AirArea3MapCell[44] = new AirArea3Map44(); AirArea3MapCell[45] = new AirArea3Map45(); AirArea3MapCell[46] = new AirArea3Map46(); AirArea3MapCell[47] = new AirArea3Map47(); AirArea3MapCell[48] = new AirArea3Map48(); AirArea3MapCell[49] = new AirArea3Map49();
            AirArea3MapCell[50] = new AirArea3Map50(); AirArea3MapCell[51] = new AirArea3Map51(); AirArea3MapCell[52] = new AirArea3Map52(); AirArea3MapCell[53] = new AirArea3Map53(); AirArea3MapCell[54] = new AirArea3Map54(); AirArea3MapCell[55] = new AirArea3Map55(); AirArea3MapCell[56] = new AirArea3Map56(); AirArea3MapCell[57] = new AirArea3Map57(); AirArea3MapCell[58] = new AirArea3Map58(); AirArea3MapCell[59] = new AirArea3Map59();
            AirArea3MapCell[60] = new AirArea3Map60(); AirArea3MapCell[61] = new AirArea3Map61(); AirArea3MapCell[62] = new AirArea3Map62(); AirArea3MapCell[63] = new AirArea3Map63(); AirArea3MapCell[64] = new AirArea3Map64(); AirArea3MapCell[65] = new AirArea3Map65(); AirArea3MapCell[66] = new AirArea3Map66(); AirArea3MapCell[67] = new AirArea3Map67(); AirArea3MapCell[68] = new AirArea3Map68(); AirArea3MapCell[69] = new AirArea3Map69();
            AirArea3MapCell[70] = new AirArea3Map70(); AirArea3MapCell[71] = new AirArea3Map71(); AirArea3MapCell[72] = new AirArea3Map72(); AirArea3MapCell[73] = new AirArea3Map73(); AirArea3MapCell[74] = new AirArea3Map74(); AirArea3MapCell[75] = new AirArea3Map75(); AirArea3MapCell[76] = new AirArea3Map76(); AirArea3MapCell[77] = new AirArea3Map77(); AirArea3MapCell[78] = new AirArea3Map78(); AirArea3MapCell[79] = new AirArea3Map79();
            AirArea3MapCell[80] = new AirArea3Map80(); AirArea3MapCell[81] = new AirArea3Map81(); AirArea3MapCell[82] = new AirArea3Map82(); AirArea3MapCell[83] = new AirArea3Map83(); AirArea3MapCell[84] = new AirArea3Map84(); AirArea3MapCell[85] = new AirArea3Map85(); AirArea3MapCell[86] = new AirArea3Map86(); AirArea3MapCell[87] = new AirArea3Map87(); AirArea3MapCell[88] = new AirArea3Map88(); AirArea3MapCell[89] = new AirArea3Map89();
            AirArea3MapCell[90] = new AirArea3Map90(); AirArea3MapCell[91] = new AirArea3Map91(); AirArea3MapCell[92] = new AirArea3Map92(); AirArea3MapCell[93] = new AirArea3Map93(); AirArea3MapCell[94] = new AirArea3Map94(); AirArea3MapCell[95] = new AirArea3Map95(); AirArea3MapCell[96] = new AirArea3Map96(); AirArea3MapCell[97] = new AirArea3Map97(); AirArea3MapCell[98] = new AirArea3Map98(); AirArea3MapCell[99] = new AirArea3Map99();

            //Mesetra map - array of all grid cell classes
            MesetraMap[] MesetraMapCell = new MesetraMap[100];
            MesetraMapCell[0] = new MesetraMap0(); MesetraMapCell[1] = new MesetraMap1(); MesetraMapCell[2] = new MesetraMap2(); MesetraMapCell[3] = new MesetraMap3(); MesetraMapCell[4] = new MesetraMap4(); MesetraMapCell[5] = new MesetraMap5(); MesetraMapCell[6] = new MesetraMap6(); MesetraMapCell[7] = new MesetraMap7(); MesetraMapCell[8] = new MesetraMap8(); MesetraMapCell[9] = new MesetraMap9();
            MesetraMapCell[10] = new MesetraMap10(); MesetraMapCell[11] = new MesetraMap11(); MesetraMapCell[12] = new MesetraMap12(); MesetraMapCell[13] = new MesetraMap13(); MesetraMapCell[14] = new MesetraMap14(); MesetraMapCell[15] = new MesetraMap15(); MesetraMapCell[16] = new MesetraMap16(); MesetraMapCell[17] = new MesetraMap17(); MesetraMapCell[18] = new MesetraMap18(); MesetraMapCell[19] = new MesetraMap19();
            MesetraMapCell[20] = new MesetraMap20(); MesetraMapCell[21] = new MesetraMap21(); MesetraMapCell[22] = new MesetraMap22(); MesetraMapCell[23] = new MesetraMap23(); MesetraMapCell[24] = new MesetraMap24(); MesetraMapCell[25] = new MesetraMap25(); MesetraMapCell[26] = new MesetraMap26(); MesetraMapCell[27] = new MesetraMap27(); MesetraMapCell[28] = new MesetraMap28(); MesetraMapCell[29] = new MesetraMap29();
            MesetraMapCell[30] = new MesetraMap30(); MesetraMapCell[31] = new MesetraMap31(); MesetraMapCell[32] = new MesetraMap32(); MesetraMapCell[33] = new MesetraMap33(); MesetraMapCell[34] = new MesetraMap34(); MesetraMapCell[35] = new MesetraMap35(); MesetraMapCell[36] = new MesetraMap36(); MesetraMapCell[37] = new MesetraMap37(); MesetraMapCell[38] = new MesetraMap38(); MesetraMapCell[39] = new MesetraMap39();
            MesetraMapCell[40] = new MesetraMap40(); MesetraMapCell[41] = new MesetraMap41(); MesetraMapCell[42] = new MesetraMap42(); MesetraMapCell[43] = new MesetraMap43(); MesetraMapCell[44] = new MesetraMap44(); MesetraMapCell[45] = new MesetraMap45(); MesetraMapCell[46] = new MesetraMap46(); MesetraMapCell[47] = new MesetraMap47(); MesetraMapCell[48] = new MesetraMap48(); MesetraMapCell[49] = new MesetraMap49();
            MesetraMapCell[50] = new MesetraMap50(); MesetraMapCell[51] = new MesetraMap51(); MesetraMapCell[52] = new MesetraMap52(); MesetraMapCell[53] = new MesetraMap53(); MesetraMapCell[54] = new MesetraMap54(); MesetraMapCell[55] = new MesetraMap55(); MesetraMapCell[56] = new MesetraMap56(); MesetraMapCell[57] = new MesetraMap57(); MesetraMapCell[58] = new MesetraMap58(); MesetraMapCell[59] = new MesetraMap59();
            MesetraMapCell[60] = new MesetraMap60(); MesetraMapCell[61] = new MesetraMap61(); MesetraMapCell[62] = new MesetraMap62(); MesetraMapCell[63] = new MesetraMap63(); MesetraMapCell[64] = new MesetraMap64(); MesetraMapCell[65] = new MesetraMap65(); MesetraMapCell[66] = new MesetraMap66(); MesetraMapCell[67] = new MesetraMap67(); MesetraMapCell[68] = new MesetraMap68(); MesetraMapCell[69] = new MesetraMap69();
            MesetraMapCell[70] = new MesetraMap70(); MesetraMapCell[71] = new MesetraMap71(); MesetraMapCell[72] = new MesetraMap72(); MesetraMapCell[73] = new MesetraMap73(); MesetraMapCell[74] = new MesetraMap74(); MesetraMapCell[75] = new MesetraMap75(); MesetraMapCell[76] = new MesetraMap76(); MesetraMapCell[77] = new MesetraMap77(); MesetraMapCell[78] = new MesetraMap78(); MesetraMapCell[79] = new MesetraMap79();
            MesetraMapCell[80] = new MesetraMap80(); MesetraMapCell[81] = new MesetraMap81(); MesetraMapCell[82] = new MesetraMap82(); MesetraMapCell[83] = new MesetraMap83(); MesetraMapCell[84] = new MesetraMap84(); MesetraMapCell[85] = new MesetraMap85(); MesetraMapCell[86] = new MesetraMap86(); MesetraMapCell[87] = new MesetraMap87(); MesetraMapCell[88] = new MesetraMap88(); MesetraMapCell[89] = new MesetraMap89();
            MesetraMapCell[90] = new MesetraMap90(); MesetraMapCell[91] = new MesetraMap91(); MesetraMapCell[92] = new MesetraMap92(); MesetraMapCell[93] = new MesetraMap93(); MesetraMapCell[94] = new MesetraMap94(); MesetraMapCell[95] = new MesetraMap95(); MesetraMapCell[96] = new MesetraMap96(); MesetraMapCell[97] = new MesetraMap97(); MesetraMapCell[98] = new MesetraMap98(); MesetraMapCell[99] = new MesetraMap99();

            //WaterArea2 map - array of all grid cell classes
            WaterArea2Map[] WaterArea2MapCell = new WaterArea2Map[100];
            WaterArea2MapCell[0] = new WaterArea2Map0(); WaterArea2MapCell[1] = new WaterArea2Map1(); WaterArea2MapCell[2] = new WaterArea2Map2(); WaterArea2MapCell[3] = new WaterArea2Map3(); WaterArea2MapCell[4] = new WaterArea2Map4(); WaterArea2MapCell[5] = new WaterArea2Map5(); WaterArea2MapCell[6] = new WaterArea2Map6(); WaterArea2MapCell[7] = new WaterArea2Map7(); WaterArea2MapCell[8] = new WaterArea2Map8(); WaterArea2MapCell[9] = new WaterArea2Map9();
            WaterArea2MapCell[10] = new WaterArea2Map10(); WaterArea2MapCell[11] = new WaterArea2Map11(); WaterArea2MapCell[12] = new WaterArea2Map12(); WaterArea2MapCell[13] = new WaterArea2Map13(); WaterArea2MapCell[14] = new WaterArea2Map14(); WaterArea2MapCell[15] = new WaterArea2Map15(); WaterArea2MapCell[16] = new WaterArea2Map16(); WaterArea2MapCell[17] = new WaterArea2Map17(); WaterArea2MapCell[18] = new WaterArea2Map18(); WaterArea2MapCell[19] = new WaterArea2Map19();
            WaterArea2MapCell[20] = new WaterArea2Map20(); WaterArea2MapCell[21] = new WaterArea2Map21(); WaterArea2MapCell[22] = new WaterArea2Map22(); WaterArea2MapCell[23] = new WaterArea2Map23(); WaterArea2MapCell[24] = new WaterArea2Map24(); WaterArea2MapCell[25] = new WaterArea2Map25(); WaterArea2MapCell[26] = new WaterArea2Map26(); WaterArea2MapCell[27] = new WaterArea2Map27(); WaterArea2MapCell[28] = new WaterArea2Map28(); WaterArea2MapCell[29] = new WaterArea2Map29();
            WaterArea2MapCell[30] = new WaterArea2Map30(); WaterArea2MapCell[31] = new WaterArea2Map31(); WaterArea2MapCell[32] = new WaterArea2Map32(); WaterArea2MapCell[33] = new WaterArea2Map33(); WaterArea2MapCell[34] = new WaterArea2Map34(); WaterArea2MapCell[35] = new WaterArea2Map35(); WaterArea2MapCell[36] = new WaterArea2Map36(); WaterArea2MapCell[37] = new WaterArea2Map37(); WaterArea2MapCell[38] = new WaterArea2Map38(); WaterArea2MapCell[39] = new WaterArea2Map39();
            WaterArea2MapCell[40] = new WaterArea2Map40(); WaterArea2MapCell[41] = new WaterArea2Map41(); WaterArea2MapCell[42] = new WaterArea2Map42(); WaterArea2MapCell[43] = new WaterArea2Map43(); WaterArea2MapCell[44] = new WaterArea2Map44(); WaterArea2MapCell[45] = new WaterArea2Map45(); WaterArea2MapCell[46] = new WaterArea2Map46(); WaterArea2MapCell[47] = new WaterArea2Map47(); WaterArea2MapCell[48] = new WaterArea2Map48(); WaterArea2MapCell[49] = new WaterArea2Map49();
            WaterArea2MapCell[50] = new WaterArea2Map50(); WaterArea2MapCell[51] = new WaterArea2Map51(); WaterArea2MapCell[52] = new WaterArea2Map52(); WaterArea2MapCell[53] = new WaterArea2Map53(); WaterArea2MapCell[54] = new WaterArea2Map54(); WaterArea2MapCell[55] = new WaterArea2Map55(); WaterArea2MapCell[56] = new WaterArea2Map56(); WaterArea2MapCell[57] = new WaterArea2Map57(); WaterArea2MapCell[58] = new WaterArea2Map58(); WaterArea2MapCell[59] = new WaterArea2Map59();
            WaterArea2MapCell[60] = new WaterArea2Map60(); WaterArea2MapCell[61] = new WaterArea2Map61(); WaterArea2MapCell[62] = new WaterArea2Map62(); WaterArea2MapCell[63] = new WaterArea2Map63(); WaterArea2MapCell[64] = new WaterArea2Map64(); WaterArea2MapCell[65] = new WaterArea2Map65(); WaterArea2MapCell[66] = new WaterArea2Map66(); WaterArea2MapCell[67] = new WaterArea2Map67(); WaterArea2MapCell[68] = new WaterArea2Map68(); WaterArea2MapCell[69] = new WaterArea2Map69();
            WaterArea2MapCell[70] = new WaterArea2Map70(); WaterArea2MapCell[71] = new WaterArea2Map71(); WaterArea2MapCell[72] = new WaterArea2Map72(); WaterArea2MapCell[73] = new WaterArea2Map73(); WaterArea2MapCell[74] = new WaterArea2Map74(); WaterArea2MapCell[75] = new WaterArea2Map75(); WaterArea2MapCell[76] = new WaterArea2Map76(); WaterArea2MapCell[77] = new WaterArea2Map77(); WaterArea2MapCell[78] = new WaterArea2Map78(); WaterArea2MapCell[79] = new WaterArea2Map79();
            WaterArea2MapCell[80] = new WaterArea2Map80(); WaterArea2MapCell[81] = new WaterArea2Map81(); WaterArea2MapCell[82] = new WaterArea2Map82(); WaterArea2MapCell[83] = new WaterArea2Map83(); WaterArea2MapCell[84] = new WaterArea2Map84(); WaterArea2MapCell[85] = new WaterArea2Map85(); WaterArea2MapCell[86] = new WaterArea2Map86(); WaterArea2MapCell[87] = new WaterArea2Map87(); WaterArea2MapCell[88] = new WaterArea2Map88(); WaterArea2MapCell[89] = new WaterArea2Map89();
            WaterArea2MapCell[90] = new WaterArea2Map90(); WaterArea2MapCell[91] = new WaterArea2Map91(); WaterArea2MapCell[92] = new WaterArea2Map92(); WaterArea2MapCell[93] = new WaterArea2Map93(); WaterArea2MapCell[94] = new WaterArea2Map94(); WaterArea2MapCell[95] = new WaterArea2Map95(); WaterArea2MapCell[96] = new WaterArea2Map96(); WaterArea2MapCell[97] = new WaterArea2Map97(); WaterArea2MapCell[98] = new WaterArea2Map98(); WaterArea2MapCell[99] = new WaterArea2Map99();

            //WaterArea3 map - array of all grid cell classes
            WaterArea3Map[] WaterArea3MapCell = new WaterArea3Map[100];
            WaterArea3MapCell[0] = new WaterArea3Map0(); WaterArea3MapCell[1] = new WaterArea3Map1(); WaterArea3MapCell[2] = new WaterArea3Map2(); WaterArea3MapCell[3] = new WaterArea3Map3(); WaterArea3MapCell[4] = new WaterArea3Map4(); WaterArea3MapCell[5] = new WaterArea3Map5(); WaterArea3MapCell[6] = new WaterArea3Map6(); WaterArea3MapCell[7] = new WaterArea3Map7(); WaterArea3MapCell[8] = new WaterArea3Map8(); WaterArea3MapCell[9] = new WaterArea3Map9();
            WaterArea3MapCell[10] = new WaterArea3Map10(); WaterArea3MapCell[11] = new WaterArea3Map11(); WaterArea3MapCell[12] = new WaterArea3Map12(); WaterArea3MapCell[13] = new WaterArea3Map13(); WaterArea3MapCell[14] = new WaterArea3Map14(); WaterArea3MapCell[15] = new WaterArea3Map15(); WaterArea3MapCell[16] = new WaterArea3Map16(); WaterArea3MapCell[17] = new WaterArea3Map17(); WaterArea3MapCell[18] = new WaterArea3Map18(); WaterArea3MapCell[19] = new WaterArea3Map19();
            WaterArea3MapCell[20] = new WaterArea3Map20(); WaterArea3MapCell[21] = new WaterArea3Map21(); WaterArea3MapCell[22] = new WaterArea3Map22(); WaterArea3MapCell[23] = new WaterArea3Map23(); WaterArea3MapCell[24] = new WaterArea3Map24(); WaterArea3MapCell[25] = new WaterArea3Map25(); WaterArea3MapCell[26] = new WaterArea3Map26(); WaterArea3MapCell[27] = new WaterArea3Map27(); WaterArea3MapCell[28] = new WaterArea3Map28(); WaterArea3MapCell[29] = new WaterArea3Map29();
            WaterArea3MapCell[30] = new WaterArea3Map30(); WaterArea3MapCell[31] = new WaterArea3Map31(); WaterArea3MapCell[32] = new WaterArea3Map32(); WaterArea3MapCell[33] = new WaterArea3Map33(); WaterArea3MapCell[34] = new WaterArea3Map34(); WaterArea3MapCell[35] = new WaterArea3Map35(); WaterArea3MapCell[36] = new WaterArea3Map36(); WaterArea3MapCell[37] = new WaterArea3Map37(); WaterArea3MapCell[38] = new WaterArea3Map38(); WaterArea3MapCell[39] = new WaterArea3Map39();
            WaterArea3MapCell[40] = new WaterArea3Map40(); WaterArea3MapCell[41] = new WaterArea3Map41(); WaterArea3MapCell[42] = new WaterArea3Map42(); WaterArea3MapCell[43] = new WaterArea3Map43(); WaterArea3MapCell[44] = new WaterArea3Map44(); WaterArea3MapCell[45] = new WaterArea3Map45(); WaterArea3MapCell[46] = new WaterArea3Map46(); WaterArea3MapCell[47] = new WaterArea3Map47(); WaterArea3MapCell[48] = new WaterArea3Map48(); WaterArea3MapCell[49] = new WaterArea3Map49();
            WaterArea3MapCell[50] = new WaterArea3Map50(); WaterArea3MapCell[51] = new WaterArea3Map51(); WaterArea3MapCell[52] = new WaterArea3Map52(); WaterArea3MapCell[53] = new WaterArea3Map53(); WaterArea3MapCell[54] = new WaterArea3Map54(); WaterArea3MapCell[55] = new WaterArea3Map55(); WaterArea3MapCell[56] = new WaterArea3Map56(); WaterArea3MapCell[57] = new WaterArea3Map57(); WaterArea3MapCell[58] = new WaterArea3Map58(); WaterArea3MapCell[59] = new WaterArea3Map59();
            WaterArea3MapCell[60] = new WaterArea3Map60(); WaterArea3MapCell[61] = new WaterArea3Map61(); WaterArea3MapCell[62] = new WaterArea3Map62(); WaterArea3MapCell[63] = new WaterArea3Map63(); WaterArea3MapCell[64] = new WaterArea3Map64(); WaterArea3MapCell[65] = new WaterArea3Map65(); WaterArea3MapCell[66] = new WaterArea3Map66(); WaterArea3MapCell[67] = new WaterArea3Map67(); WaterArea3MapCell[68] = new WaterArea3Map68(); WaterArea3MapCell[69] = new WaterArea3Map69();
            WaterArea3MapCell[70] = new WaterArea3Map70(); WaterArea3MapCell[71] = new WaterArea3Map71(); WaterArea3MapCell[72] = new WaterArea3Map72(); WaterArea3MapCell[73] = new WaterArea3Map73(); WaterArea3MapCell[74] = new WaterArea3Map74(); WaterArea3MapCell[75] = new WaterArea3Map75(); WaterArea3MapCell[76] = new WaterArea3Map76(); WaterArea3MapCell[77] = new WaterArea3Map77(); WaterArea3MapCell[78] = new WaterArea3Map78(); WaterArea3MapCell[79] = new WaterArea3Map79();
            WaterArea3MapCell[80] = new WaterArea3Map80(); WaterArea3MapCell[81] = new WaterArea3Map81(); WaterArea3MapCell[82] = new WaterArea3Map82(); WaterArea3MapCell[83] = new WaterArea3Map83(); WaterArea3MapCell[84] = new WaterArea3Map84(); WaterArea3MapCell[85] = new WaterArea3Map85(); WaterArea3MapCell[86] = new WaterArea3Map86(); WaterArea3MapCell[87] = new WaterArea3Map87(); WaterArea3MapCell[88] = new WaterArea3Map88(); WaterArea3MapCell[89] = new WaterArea3Map89();
            WaterArea3MapCell[90] = new WaterArea3Map90(); WaterArea3MapCell[91] = new WaterArea3Map91(); WaterArea3MapCell[92] = new WaterArea3Map92(); WaterArea3MapCell[93] = new WaterArea3Map93(); WaterArea3MapCell[94] = new WaterArea3Map94(); WaterArea3MapCell[95] = new WaterArea3Map95(); WaterArea3MapCell[96] = new WaterArea3Map96(); WaterArea3MapCell[97] = new WaterArea3Map97(); WaterArea3MapCell[98] = new WaterArea3Map98(); WaterArea3MapCell[99] = new WaterArea3Map99();

            //Corallos map - array of all grid cell classes
            CorallosMap[] CorallosMapCell = new CorallosMap[100];
            CorallosMapCell[0] = new CorallosMap0(); CorallosMapCell[1] = new CorallosMap1(); CorallosMapCell[2] = new CorallosMap2(); CorallosMapCell[3] = new CorallosMap3(); CorallosMapCell[4] = new CorallosMap4(); CorallosMapCell[5] = new CorallosMap5(); CorallosMapCell[6] = new CorallosMap6(); CorallosMapCell[7] = new CorallosMap7(); CorallosMapCell[8] = new CorallosMap8(); CorallosMapCell[9] = new CorallosMap9();
            CorallosMapCell[10] = new CorallosMap10(); CorallosMapCell[11] = new CorallosMap11(); CorallosMapCell[12] = new CorallosMap12(); CorallosMapCell[13] = new CorallosMap13(); CorallosMapCell[14] = new CorallosMap14(); CorallosMapCell[15] = new CorallosMap15(); CorallosMapCell[16] = new CorallosMap16(); CorallosMapCell[17] = new CorallosMap17(); CorallosMapCell[18] = new CorallosMap18(); CorallosMapCell[19] = new CorallosMap19();
            CorallosMapCell[20] = new CorallosMap20(); CorallosMapCell[21] = new CorallosMap21(); CorallosMapCell[22] = new CorallosMap22(); CorallosMapCell[23] = new CorallosMap23(); CorallosMapCell[24] = new CorallosMap24(); CorallosMapCell[25] = new CorallosMap25(); CorallosMapCell[26] = new CorallosMap26(); CorallosMapCell[27] = new CorallosMap27(); CorallosMapCell[28] = new CorallosMap28(); CorallosMapCell[29] = new CorallosMap29();
            CorallosMapCell[30] = new CorallosMap30(); CorallosMapCell[31] = new CorallosMap31(); CorallosMapCell[32] = new CorallosMap32(); CorallosMapCell[33] = new CorallosMap33(); CorallosMapCell[34] = new CorallosMap34(); CorallosMapCell[35] = new CorallosMap35(); CorallosMapCell[36] = new CorallosMap36(); CorallosMapCell[37] = new CorallosMap37(); CorallosMapCell[38] = new CorallosMap38(); CorallosMapCell[39] = new CorallosMap39();
            CorallosMapCell[40] = new CorallosMap40(); CorallosMapCell[41] = new CorallosMap41(); CorallosMapCell[42] = new CorallosMap42(); CorallosMapCell[43] = new CorallosMap43(); CorallosMapCell[44] = new CorallosMap44(); CorallosMapCell[45] = new CorallosMap45(); CorallosMapCell[46] = new CorallosMap46(); CorallosMapCell[47] = new CorallosMap47(); CorallosMapCell[48] = new CorallosMap48(); CorallosMapCell[49] = new CorallosMap49();
            CorallosMapCell[50] = new CorallosMap50(); CorallosMapCell[51] = new CorallosMap51(); CorallosMapCell[52] = new CorallosMap52(); CorallosMapCell[53] = new CorallosMap53(); CorallosMapCell[54] = new CorallosMap54(); CorallosMapCell[55] = new CorallosMap55(); CorallosMapCell[56] = new CorallosMap56(); CorallosMapCell[57] = new CorallosMap57(); CorallosMapCell[58] = new CorallosMap58(); CorallosMapCell[59] = new CorallosMap59();
            CorallosMapCell[60] = new CorallosMap60(); CorallosMapCell[61] = new CorallosMap61(); CorallosMapCell[62] = new CorallosMap62(); CorallosMapCell[63] = new CorallosMap63(); CorallosMapCell[64] = new CorallosMap64(); CorallosMapCell[65] = new CorallosMap65(); CorallosMapCell[66] = new CorallosMap66(); CorallosMapCell[67] = new CorallosMap67(); CorallosMapCell[68] = new CorallosMap68(); CorallosMapCell[69] = new CorallosMap69();
            CorallosMapCell[70] = new CorallosMap70(); CorallosMapCell[71] = new CorallosMap71(); CorallosMapCell[72] = new CorallosMap72(); CorallosMapCell[73] = new CorallosMap73(); CorallosMapCell[74] = new CorallosMap74(); CorallosMapCell[75] = new CorallosMap75(); CorallosMapCell[76] = new CorallosMap76(); CorallosMapCell[77] = new CorallosMap77(); CorallosMapCell[78] = new CorallosMap78(); CorallosMapCell[79] = new CorallosMap79();
            CorallosMapCell[80] = new CorallosMap80(); CorallosMapCell[81] = new CorallosMap81(); CorallosMapCell[82] = new CorallosMap82(); CorallosMapCell[83] = new CorallosMap83(); CorallosMapCell[84] = new CorallosMap84(); CorallosMapCell[85] = new CorallosMap85(); CorallosMapCell[86] = new CorallosMap86(); CorallosMapCell[87] = new CorallosMap87(); CorallosMapCell[88] = new CorallosMap88(); CorallosMapCell[89] = new CorallosMap89();
            CorallosMapCell[90] = new CorallosMap90(); CorallosMapCell[91] = new CorallosMap91(); CorallosMapCell[92] = new CorallosMap92(); CorallosMapCell[93] = new CorallosMap93(); CorallosMapCell[94] = new CorallosMap94(); CorallosMapCell[95] = new CorallosMap95(); CorallosMapCell[96] = new CorallosMap96(); CorallosMapCell[97] = new CorallosMap97(); CorallosMapCell[98] = new CorallosMap98(); CorallosMapCell[99] = new CorallosMap99();


            //World map - array of all map arrays
            WorldMapCells = new WorldMap[29][];
            WorldMapCells[0] = RiftonMapCell; WorldMapCells[1] = RiftonForestMapCell; WorldMapCells[2] = RiftonCaveMapCell; WorldMapCells[3] = RiftonBeachMapCell; WorldMapCells[4] = BoatMapCell; WorldMapCells[5] = PortTownMapCell; WorldMapCells[6] = FireArea1MapCell; WorldMapCells[7] = PlantArea1MapCell; WorldMapCells[8] = EarthArea1MapCell; WorldMapCells[9] = AirArea1MapCell; WorldMapCells[10] = WaterArea1MapCell; WorldMapCells[11] = KarstBayCaves1MapCell; WorldMapCells[12] = KarstBayCaves2MapCell; WorldMapCells[13] = KarstBayCaves3MapCell; WorldMapCells[14] = FireArea2MapCell; WorldMapCells[15] = FireArea3MapCell; WorldMapCells[16] = LaharvaMapCell; WorldMapCells[17] = PlantArea2MapCell; WorldMapCells[18] = PlantArea3MapCell; WorldMapCells[19] = ArbelleMapCell; WorldMapCells[20] = EarthArea2MapCell; WorldMapCells[21] = EarthArea3MapCell; WorldMapCells[22] = GrabenMapCell; WorldMapCells[23] = AirArea2MapCell; WorldMapCells[24] = AirArea3MapCell; WorldMapCells[25] = MesetraMapCell; WorldMapCells[26] = WaterArea2MapCell; WorldMapCells[27] = WaterArea3MapCell; WorldMapCells[28] = CorallosMapCell;

            WorldMapCells[CurrentMap][CurrentLocation].visited = true; //for map purposes to display |o|

            //Input phrase options
            InvPhrases = new List<string>() { "inventory", "inv", "invent", "check inventory", "bag", "stash", "treasure", "i" };
            List<string> NorthPhrases = new List<string>() { "n", "north", "go north", "head north", "wander north", "move north", "walk north", "up", "go up", "head up", "move up", "walk up", "wander up" };
            List<string> SouthPhrases = new List<string>() { "s", "south", "go south", "head south", "wander south", "move south", "walk south", "down", "go down", "head down", "move down", "walk down", "wander down" };
            List<string> EastPhrases = new List<string>() { "e", "east", "go east", "head east", "wander east", "move east", "walk east", "right", "go right", "head right", "move right", "walk right", "wander right" };
            List<string> WestPhrases = new List<string>() { "w", "west", "go west", "head west", "wander west", "move west", "walk west", "left", "go left", "head left", "move left", "walk left", "wander left" };
            List<string> LookPhrases = new List<string>() { "look", "look around", "inspect", "stare", "observe", "see", "behold", "explore", "l", "look round" };
            List<string> TakePhrases = new List<string>() { "take", "get", "gimme", "grab", "snatch", "steal", "loot", "gnab" };
            List<string> TakeAllPhrases = new List<string>() { "take all", "get all", "gimme all", "grab all", "snatch all", "steal all", "loot all", "gnab all", "take everything", "get everything", "gimme everything", "grab everything", "snatch everything", "steal everything", "loot everything", "gnab everything" };
            List<string> ExaminePhrases = new List<string>() { "examine", "exam", "inspect", "insp", "x" };
            List<string> DropPhrases = new List<string>() { "drop", "lose", "throw", "toss" };
            List<string> DropAllPhrases = new List<string>() { "drop all", "lose all", "throw all", "toss all", "throw away all", "drop everything", "lose everything", "throw everything", "toss everything", "throw away everything" };
            List<string> TorchOnPhrases = new List<string>() { "light", "turn", "use", "ignite" };
            List<string> TorchOffPhrases = new List<string>() { "flashlight off", "turn off flashlight", "turn flashlight off", "end flashlight", "uv flashlight off", "turn off uv flashlight", "end uv flashlight", "put out flashlight" };
            List<string> UsePhrases = new List<string>() { "Use", "use" };
            List<string> EquipPhrases = new List<string>() { "equip", "wear", "use", "don" };
            List<string> UnEquipPhrases = new List<string>() { "unequip", "un-equip", "remove" };
            List<string> EatPhrases = new List<string>() { "eat", "drink", "consume" };

            //inventory.dictionary.Add("apple", 1);
            //inventory.dictionary.Add("flashlight", 1);
            //inventory.dictionary.Add("detector", 1);
            //inventory.dictionary.Add("axe", 1);
            //inventory.dictionary.Add("pickaxe", 1);
            //inventory.dictionary.Add("shield", 1);
            //inventory.dictionary.Add("ellondite", 1);
            //inventory.dictionary.Add("protomeebium book", 1);

            //TAKE OUT AFTER TESTING
            meeba.Moves.Add("Meeba Power");
            meeba.Moves.Add("Leaching Roots");
            meeba.Moves.Add("Phoenix Fire");
            meeba.Moves.Add("Poison Spores");
            meeba.Moves.Add("Snowstorm");
            meeba.Moves.Add("Cyclone");
            meeba.Moves.Add("Pyroclastic Flow");
            meeba.Moves.Add("Tide Pool");
            meeba.Moves.Add("Grainmail");
            meeba2.Moves.Add("Meeba Power");
            meeba2.Moves.Add("Lava Bubble");
            meeba2.Moves.Add("Hydrothermal Blast");
            meeba2.Moves.Add("Hot Spring");
            meeba2.Moves.Add("Hail");
            meeba2.Moves.Add("Landslide");
            meeba2.Moves.Add("Thicket Surge");
            meeba2.Moves.Add("Solar Flare");
            meeba2.Moves.Add("Pyriscent Bullets");
            meeba.name = "Icthymeeba";
            meeba2.name = "Meeberyx";
            meeba.ID = 1;
            meeba2.ID = 2;

            if (skip != true)
            {
                IntroAnimation();
                Thread.Sleep(800);
                Console.Clear();
                Console.Clear();
                Console.ForegroundColor = ConsoleColor.Gray;
                WriteLineText("DECAY OF TERETHIA\n");
                Thread.Sleep(500);
                WriteLineText("\n\nThe world of Terethia is a vibrant expanse of dense forests, clear seas and golden deserts, rich with wildlife.");
                Thread.Sleep(500);
                WriteLineText("\n\nHowever, in recent years the land has been undergoing an environmental crisis.");
                Thread.Sleep(500);
                WriteLineText("\n\nAn unidentified phenomenon from deep within the planet has been polluting the land and oceans with radiation.");
                Thread.Sleep(500);
                WriteLineText("\n\nThe once beautiful landscape and its wildlife have begun showing heavy signs of degeneration and mutation.");
                Thread.Sleep(500);
                WriteLineText("\n\nWith the public desperate to cleanse the pollution from their homes, many have turned to a new enterprise named Eclipse, who promise to provide a clean new energy source that uses the radiation as fuel.");
                Thread.Sleep(500);
                WriteLineText("\n\nHowever, there are doubts surrounding Eclipse's claims and some believe they have alterior motives as their methods have been kept secret.");
                Thread.Sleep(500);
                WriteLineText("\n\nA small lab in Rifton village has just employed their latest member; a young biologist who dreams to find a way to reverse the damage the radiation has done to the wildlife of Terethia.");
                Thread.Sleep(500);
                Console.CursorTop += 3;

                bool validAnswer = false;
                while (validAnswer == false)
                {
                    WriteLineText("What would you like to do?");
                    Thread.Sleep(800);
                    WriteLineText("1: Load game\n2: Start new game\n3: View credits");

                    Console.Write("> ");
                    string choice = Console.ReadLine().ToLower().Trim();
                    if (choice != "1" && choice != "2" && choice != "3")
                    {
                        WriteLineText("Please enter a valid number.");
                        Thread.Sleep(1000);
                        Console.CursorTop -= 1;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 1;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 1;
                    }
                    else if (choice == "1")
                    {
                        WriteLineText("CONTENT TO BE ADDED!");
                        Thread.Sleep(1500);
                        Console.CursorTop -= 1;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 2;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 2;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 2;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 2;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 2;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 1;
                    }
                    else if (choice == "2")
                    {
                        validAnswer = true;
                        break;
                    }
                    else if (choice == "3")
                    {
                        WriteLineText("CREDITS:\n");
                        Thread.Sleep(1000);
                        WriteLineText("\nCLAIRE MORLEY: PROGRAMMING, ART, STORY, GAME DESIGN\n\nDESIREE FISCHER: SCRIPT WRITING\n\nCREATIVE CONSULTANT: DAVID BUTTON\n\nSPECIAL THANKS: SAM CHESTER, ALEX BIRKE, LUKE HAUGH, KERRY WILLIAMS, KARL CLARKE, PATRICK CAHILL, MARK WONNACOTT, MELISSA POWELL");
                        Thread.Sleep(500);
                    }
                }

                Console.Clear();
                Console.ForegroundColor = ConsoleColor.Green;
                Thread.Sleep(800);
                WriteLineText("WELCOME TO THE BIO LAB SYSTEM V. 22.1\n");
                Thread.Sleep(1000);
                WriteLineText("BEFORE YOU BEGIN YOUR RESEARCH WITH US, PLEASE FILL OUT THE FOLLOWING FOR OUR RECORDS\n\n");
                Thread.Sleep(1000);
                WriteLineText("NAME:");
                do
                {
                    Console.Write("> ");
                    playerStats.name = Console.ReadLine();
                    if (playerStats.name.Length > 15)
                    {
                        WriteLineText("THIS NAME EXCEEDS THE MAXIMUM CAPACITY OF 15 CHARACTERS  - PLEASE TRY A SHORTER VERSION:\n");
                    }
                    else if (!string.IsNullOrEmpty(playerStats.name))
                        break;
                    else
                    {
                        Console.CursorTop -= 1;
                    }
                } while (string.IsNullOrEmpty(playerStats.name) || playerStats.name.Length > 12);
                WriteLineText("\nPRIMARY AREA OF BIOLOGICAL EXPERTISE [VERTEBRATE CLASS]:\n1: RAY-FINNED FISHES (ACTINOPTERYGII)\n2: AMPHIBIANS (AMPHIBIA)\n3: BIRDS (AVES)\n4: SHARKS, RAYS AND SKATES (CHONDRICTHYES)\n5: MAMMALS (MAMMALIA)\n6: REPTILES (REPTILIA)\n");
                bool validChoice = false;
                do
                {
                    Console.Write("> ");
                    string choice = Console.ReadLine().ToLower().Trim();
                    if (choice.Length > 80) //makes input max of 80 chars
                    {
                        double textlength = choice.Length;
                        for (int i = 80; i <= textlength; i += 80)
                        {
                            Console.CursorTop -= 1;
                            Console.Write(new string(' ', Console.WindowWidth));
                            Console.CursorTop -= 1;
                        }
                        choice = choice.Remove(80);
                    }
                    if (choice != "1" && choice != "2" && choice != "3" && choice != "4" && choice != "5" && choice != "6" && choice != "ACTINOPTERYGII".ToLower() && choice != "AMPHIBIA".ToLower() && choice != "AVES".ToLower() && choice != "CHONDRICTHYES".ToLower() && choice != "MAMMALIA".ToLower() && choice != "REPTILIA".ToLower())
                    {
                        WriteLineText("PLEASE CHOOSE A VALID OPTION:\n");
                        Thread.Sleep(800);
                        Console.CursorTop -= 1;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 2;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 1;
                    }
                    else if (choice == "1" || choice == "ACTINOPTERYGII".ToLower() || choice == "RAY-FINNED FISHES".ToLower())
                    {
                        playerStats.vertExpertise = "ACTINOPTERYGII".ToLower();
                        validChoice = true;
                        break;
                    }
                    else if (choice == "2" || choice == "AMPHIBIA".ToLower() || choice == "AMPHIBIANS".ToLower())
                    {
                        playerStats.vertExpertise = "AMPHIBIA".ToLower();
                        validChoice = true;
                        break;
                    }
                    else if (choice == "3" || choice == "AVES".ToLower() || choice == "BIRDS".ToLower())
                    {
                        playerStats.vertExpertise = "AVES".ToLower();
                        validChoice = true;
                        break;
                    }
                    else if (choice == "4" || choice == "CHONDRICTHYES".ToLower() || choice == "SHARKS, RAYS AND SKATES".ToLower())
                    {
                        playerStats.vertExpertise = "CHONDRICTHYES".ToLower();
                        validChoice = true;
                        break;
                    }
                    else if (choice == "5" || choice == "MAMMALIA".ToLower() || choice == "MAMMALS".ToLower())
                    {
                        playerStats.vertExpertise = "MAMMALIA".ToLower();
                        validChoice = true;
                        break;
                    }
                    else if (choice == "6" || choice == "REPTILIA".ToLower() || choice == "REPTILES".ToLower())
                    {
                        playerStats.vertExpertise = "REPTILIA".ToLower();
                        validChoice = true;
                        break;
                    }
                    else
                        Console.CursorTop -= 1;
                } while (validChoice == false);
                WriteLineText("SECONDARY AREA OF BIOLOGICAL EXPERTISE [VERTEBRATE CLASS]:");
                WriteLineText("1: RAY-FINNED FISHES (ACTINOPTERYGII)\n2: AMPHIBIANS (AMPHIBIA)\n3: BIRDS (AVES)\n4: SHARKS, RAYS AND SKATES (CHONDRICTHYES)\n5: MAMMALS (MAMMALIA)\n6: REPTILES (REPTILIA)\n");
                bool validChoice2 = false;
                do
                {
                    Console.Write("> ");
                    string choice = Console.ReadLine().ToLower().Trim();
                    if (choice.Length > 80) //makes input max of 80 chars
                    {
                        double textlength = choice.Length;
                        for (int i = 80; i <= textlength; i += 80)
                        {
                            Console.CursorTop -= 1;
                            Console.Write(new string(' ', Console.WindowWidth));
                            Console.CursorTop -= 1;
                        }
                        choice = choice.Remove(80);
                    }
                    if (choice != "1" && choice != "2" && choice != "3" && choice != "4" && choice != "5" && choice != "6" && choice != "ACTINOPTERYGII".ToLower() && choice != "AMPHIBIA".ToLower() && choice != "AVES".ToLower() && choice != "CHONDRICTHYES".ToLower() && choice != "MAMMALIA".ToLower() && choice != "REPTILIA".ToLower())
                    {
                        WriteLineText("PLEASE CHOOSE A VALID OPTION:\n");
                        Thread.Sleep(800);
                        Console.CursorTop -= 1;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 2;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 1;
                    }
                    else if (choice == "1" || choice == "ACTINOPTERYGII".ToLower() || choice == "RAY-FINNED FISHES".ToLower())
                    {
                        playerStats.vertExpertise2 = "ACTINOPTERYGII".ToLower();
                        validChoice2 = true;
                        break;
                    }
                    else if (choice == "2" || choice == "AMPHIBIA".ToLower() || choice == "AMPHIBIANS".ToLower())
                    {
                        playerStats.vertExpertise2 = "AMPHIBIA".ToLower();
                        validChoice2 = true;
                        break;
                    }
                    else if (choice == "3" || choice == "AVES".ToLower() || choice == "BIRDS".ToLower())
                    {
                        playerStats.vertExpertise2 = "AVES".ToLower();
                        validChoice2 = true;
                        break;
                    }
                    else if (choice == "4" || choice == "CHONDRICTHYES".ToLower() || choice == "SHARKS, RAYS AND SKATES".ToLower())
                    {
                        playerStats.vertExpertise2 = "CHONDRICTHYES".ToLower();
                        validChoice2 = true;
                        break;
                    }
                    else if (choice == "5" || choice == "MAMMALIA".ToLower() || choice == "MAMMALS".ToLower())
                    {
                        playerStats.vertExpertise2 = "MAMMALIA".ToLower();
                        validChoice2 = true;
                        break;
                    }
                    else if (choice == "6" || choice == "REPTILIA".ToLower() || choice == "REPTILES".ToLower())
                    {
                        playerStats.vertExpertise2 = "REPTILIA".ToLower();
                        validChoice2 = true;
                        break;
                    }
                    else
                    {
                        Console.CursorTop -= 1;
                    }

                } while (validChoice2 == false);

                Thread.Sleep(1000);
                Console.Beep(400, 100);
                Console.Beep(600, 100);
                Console.Beep(800, 100);
                Thread.Sleep(1000);
                WriteLineText("WELCOME, " + playerStats.name.ToUpper() + "\nWE WOULD LIKE TO WELCOME YOU TO ASSIST OUR RESIDENT BIOCHEMIST, DR.DIGBY, IN HIS CURRENT WORK REGARDING HIGH LEVELS OF RADIATION IN LOCAL ORGANISMS.\n\n");
                Thread.Sleep(1500);
                WriteLineText("PLEASE MAKE YOUR WAY TO THE LAB IN THE NORTH OF THE VILLAGE NOW FOR YOUR OFFICIAL BRIEF.\n");
                Thread.Sleep(1000);
                WriteLineText("FOR NOW PLEASE ACCESS YOUR GUIDE BY TYPING 'MENU' FOR ANY QUERIES.\nACCESS YOUR MAP ANYTIME BY TYPING 'MAP'.\nLOGGING OFF...");
                Console.Beep(800, 100);
                Console.Beep(600, 100);
                Console.Beep(400, 100);
                Thread.Sleep(1000);
                WriteLineText("\nPress ENTER to continue");
                Thread.Sleep(1000);
                do
                {
                    Console.Write("> ");
                    userValue = Console.ReadLine();
                    if (userValue == "")
                        break;
                } while (userValue != "");
                Console.Clear();

                Console.ForegroundColor = ConsoleColor.Gray;
                WriteLineText("GUIDE TO INTERACTING WITH THE WORLD AND ITS INHABITANTS");
                Console.WriteLine("_______________________________________________________\n");
                WriteLineText("COMMAND EXAMPLES: \nMovement: \n'go north' OR 'north' OR 'n'\n'go south' OR 'south' OR 's'\n'go east' OR 'east' OR 'e'\n'go west' OR 'west' OR 'w'\n\nNavigation: \n'map'\n");
                WriteLineText("Interaction: \n'look'\n'examine' OR 'exam' OR 'x'\n'take [item]'\n'take all'\n'drop [item]'\n'talk to [name]'\n");
                WriteLineText("Menu: \n'menu'\n'inventory' OR 'inv'\n'stats'\n'equipment'\n'help'\n\nItem use: \n'Use [item]'\n'Read [item]'\n'Eat [item]'\n'Drink [item]'\n'[Verb] [item]'");
                Thread.Sleep(1000);
                WriteLineText("\nPress Enter when you are ready - type 'help' any time to review these commands");
                string enter;
                do
                {
                    Console.Write("> ");
                    enter = Console.ReadLine();
                } while (enter != "");
                WriteLineText("GUIDE TO NAVIGATING THE WORLD OF TERETHIA");
                Console.WriteLine("_________________________________________");
                Map();
                WriteLineText("\nMAP: \n| | You have not been here \n|x| You have been here \n|o| You are currently here \nAccess to new maps is shown in white\n");
                Thread.Sleep(1000);
                WriteLineText("Press Enter when you are ready - type 'help' any time to review these commands");
                string enter1;
                do
                {
                    Console.Write("> ");
                    enter1 = Console.ReadLine();
                } while (enter1 != "");
            }
            Console.Clear();
            WriteLineText("DECAY OF TERETHIA");
            LookAround();

            //MAIN GAME LOOP - user input
            do
            {
                Console.Title = "CURRENT LOCATION: " + WorldMapCells[CurrentMap][CurrentLocation].mapName.ToUpper() + " - " + WorldMapCells[CurrentMap][CurrentLocation].cellName.ToUpper();
                Console.BackgroundColor = backgroundColour; //updates colours after battles, exiting menus etc.
                Console.ForegroundColor = foregroundColour;
                

                if (playerStats.playerCurrentHP > playerStats.playerMaxHP) //makes sure currentHP never goes above maxHP
                    playerStats.playerCurrentHP = playerStats.playerMaxHP;

                Console.Write("> ");
                userValue = Console.ReadLine().ToLower().Trim(); //removes blank space at start and end
                userValueItem = userValue;
                char[] space = new char[1] { ' ' };
                string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                if (verbItemWholeString.Length > 1)
                    userValueItem = verbItemWholeString[1].Trim(); //If more than one word, takes the second half, so usually the item, e.g. 'crown' or 'pond water'

                if (userValue.Length > 80) //makes input max of 80 chars
                {
                    double textlength = userValue.Length;
                    for (int i = 80; i <= textlength; i += 80)
                    {
                        Console.CursorTop -= 1;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 1;
                    }
                    userValue = userValue.Remove(80);
                }

                if (playerStats.playerLevel >= 5) //allotment side-quest
                    WorldMapCells[0][35].gridDescNumber = 3;
                if (playerStats.playerLevel >= 10)
                {
                    WorldMapCells[0][35].gridDescNumber = 4;
                    WorldMapCells[0][35].digItemsAvailable = true;
                }

                //Testing
                //Qr-code quest
                if (userValue == "quest test")
                {
                    storyCounter = 1;
                }
                //Battle
                else if (userValue == "battle test")
                {
                    storyCounter = 4;
                    CurrentLocation = 15;
                    CurrentMap = 1;
                }
                //Evolution
                else if (userValue == "evo test")
                {
                    CurrentMap = 0;
                    CurrentLocation = 4;
                    storyCounter = 4;
                    inventory.dictionary.Add("ellondite", 2);
                    inventory.dictionary.Add("fire fang", 5);
                    inventory.dictionary.Add("thorn", 5);
                    inventory.dictionary.Add("seed", 5);
                    inventory.dictionary.Add("chitin wing", 5);
                    inventory.dictionary.Add("muddy fur", 5);
                    inventory.dictionary.Add("stick", 1);
                }

                //Movement
                else if (NorthPhrases.Contains(userValue) && CurrentLocation > 9 && WorldMapCells[CurrentMap][CurrentLocation - 10].accessible == true || NorthPhrases.Contains(userValue) && CurrentLocation > 9 && WorldMapCells[CurrentMap][CurrentLocation - 10].Gateway == true)
                {
                    NorthMovement();
                    VisitOrder();
                }
                else if (SouthPhrases.Contains(userValue) && CurrentLocation < 90 && WorldMapCells[CurrentMap][CurrentLocation + 10].accessible == true || SouthPhrases.Contains(userValue) && CurrentLocation < 90 && WorldMapCells[CurrentMap][CurrentLocation + 10].Gateway == true)
                {
                    SouthMovement();
                    VisitOrder();
                }
                else if (WestPhrases.Contains(userValue) && !westernBorder.Contains(CurrentLocation) && WorldMapCells[CurrentMap][CurrentLocation - 1].accessible == true || WestPhrases.Contains(userValue) && !westernBorder.Contains(CurrentLocation) && WorldMapCells[CurrentMap][CurrentLocation - 1].Gateway == true)
                {
                    WestMovement();
                    VisitOrder();
                }
                else if (EastPhrases.Contains(userValue) && !easternBorder.Contains(CurrentLocation) && WorldMapCells[CurrentMap][CurrentLocation + 1].accessible == true || EastPhrases.Contains(userValue) && !easternBorder.Contains(CurrentLocation) && WorldMapCells[CurrentMap][CurrentLocation + 1].Gateway == true)
                {
                    EastMovement();
                    VisitOrder();
                }
                else if (NorthPhrases.Contains(userValue) && CurrentLocation < 10 || NorthPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation - 10].accessible == false || SouthPhrases.Contains(userValue) && CurrentLocation > 89 || SouthPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation + 10].accessible == false || WestPhrases.Contains(userValue) && westernBorder.Contains(CurrentLocation) || WestPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation - 1].accessible == false || EastPhrases.Contains(userValue) && easternBorder.Contains(CurrentLocation) || EastPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation + 1].accessible == false)
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("There is no way to get through in that direction.");
                }

                //Quest-specific
                else if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton forest" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 72 && Regex.IsMatch(userValue, branchdrop, RegexOptions.IgnoreCase) && inventory.dictionary.ContainsKey("large branch") && storyCounter > 2)
                {
                    PlayGame game = this;
                    Waterfall Quest = new Waterfall(game);
                    Quest.Use();
                }
                else if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton cave" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 57 && Regex.IsMatch(userValue, poolHealPhrases, RegexOptions.IgnoreCase))
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You went over to the pool and took a drink from it.");
                    Thread.Sleep(800);
                    WriteLineText("You feel fully revitalised");
                    Thread.Sleep(800);
                    fullHeal();
                }
                else if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 34 && Regex.IsMatch(userValue, takecoinPhrases, RegexOptions.IgnoreCase))
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You took all the coins out of the fountain.");
                    Thread.Sleep(1000);
                    WriteLineText("...");
                    Thread.Sleep(1000);
                    WriteLineText("10Ayu. Was that really worth it?");
                    Thread.Sleep(800);
                    playerStats.playerMoney += 10;
                    takeCoins = true;
                }
                else if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 13 && inventory.dictionary.ContainsKey("soil quality and gardening") && Regex.IsMatch(userValue, libraryoldmanbook, RegexOptions.IgnoreCase))
                {
                    libraryoldmanCounter = 1;
                    PlayGame game = this;
                    NPCElderlyLibraryMan NPC = new NPCElderlyLibraryMan(game);
                    NPC.Use();
                    WorldMapCells[0][35].gridDescNumber = 2;
                }

                //Look around
                else if (LookPhrases.Contains(userValue))
                    LookAround();

                else if (Regex.IsMatch(userValue, WorldMapCells[CurrentMap][CurrentLocation].userValueGridDescL2, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].userValueGridDescL2 != "")
                    LookSecondLevel();

                else if (Regex.IsMatch(userValue, WorldMapCells[CurrentMap][CurrentLocation].regexDeeperLookItems, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].regexDeeperLookItems != "")
                {
                    //if regex = itemnumber 1 in dictionary etc.?-
                    var results = from result in WorldMapCells[CurrentMap][CurrentLocation].deeperLook
                                  where Regex.Match(userValue, result.Key, RegexOptions.Singleline | RegexOptions.IgnoreCase).Success
                                  select result;
                    foreach (var result in results)
                    {
                        Console.ForegroundColor = foregroundColour;
                        WriteLineText(result.Value);
                    }
                }

                //Take Items
                else if (TakePhrases.Contains(Verb))
                {
                    Console.ForegroundColor = foregroundColour;
                    getInvDictionary1();
                    if (verbItemWholeString.Length < 2) //user just types "Take"
                        WriteLineText("Take what?");
                    else if (inventory.dictionary.Keys.Count < 20) //Limit on inventory size
                    {
                        if (TakeAllPhrases.Contains(userValue) && !WorldMapCells[CurrentMap][CurrentLocation].gridItems.All(e => e == "")
                            || TakeAllPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation].secondLook == true && !WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2.All(e => e == "")) //Take All
                            TakeAll();
                        else if (TakeAllPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation].gridItems.All(e => e == "")
                            || TakeAllPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2.All(e => e == "")) //Take All
                            WriteLineText("There is nothing to take");
                        if (TakePhrases.Contains(Verb) && !userValue.Contains("all"))
                        {
                            bool success = false;
                            for (int i = 0; i < WorldMapCells[CurrentMap][CurrentLocation].gridItems.Count; i++)
                            {
                                if (Regex.IsMatch(userValueItem, WorldMapCells[CurrentMap][CurrentLocation].gridItems[i], RegexOptions.IgnoreCase)
                                    || Regex.IsMatch(userValueItem, WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2[i], RegexOptions.IgnoreCase))
                                {
                                    success = true;
                                    TakeIndividual();
                                    break;
                                }
                            }
                            if (success == false)
                                WriteLineText("There is no " + userValueItem + " here");
                        }
                    }
                    else
                        WriteLineText("Your bag is full, drop some items first"); //if inventory limit has been reached
                }

                //Drop Items
                else if (DropPhrases.Contains(Verb))
                {
                    Console.ForegroundColor = foregroundColour;
                    getInvDictionary1();
                    if (verbItemWholeString.Length < 2) // user just types "Drop"
                        WriteLineText("Drop what?");
                    if (DropPhrases.Contains(Verb))
                    {
                        foreach (var item in inventory.dictionary)
                        {
                            if (Regex.IsMatch(userValueItem, item.Key, RegexOptions.IgnoreCase))
                            {
                                DropIndividual();
                                break;
                            }
                        }
                    }
                }

                //Use shovel/dig
                else if (Regex.IsMatch(userValue, digPhrases, RegexOptions.IgnoreCase) && inventory.dictionary.ContainsKey("pickaxe"))
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You dug at the ground with the pickaxe...");
                    Thread.Sleep(1000);
                    if (WorldMapCells[CurrentMap][CurrentLocation].digItemsAvailable == true)
                    {
                        if (inventory.dictionary.Count < 20)
                        {
                            foreach (var item in WorldMapCells[CurrentMap][CurrentLocation].digItems)
                            {
                                WriteLineText("You found a " + item);
                                Thread.Sleep(800);
                                if (inventory.dictionary.ContainsKey(item))
                                    inventory.dictionary[item] += 1;
                                else
                                    inventory.dictionary.Add(item, 1);
                            }
                            WorldMapCells[CurrentMap][CurrentLocation].digItems.Clear();
                            WorldMapCells[CurrentMap][CurrentLocation].digItemsAvailable = false;
                            if (WorldMapCells[CurrentMap][CurrentLocation].mapLocation == 13 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 26 && storyCounter == 5)
                                storyCounter = 6;
                        }
                        else
                        {
                            WriteLineText("There is something here, but you don't have any space to hold more items.");
                            Thread.Sleep(800);
                        }
                    }
                    else
                    {
                        WriteLineText("But nothing could be found");
                        Thread.Sleep(800);
                    }
                }

                //Examine Items
                else if (ExaminePhrases.Contains(Verb))
                {
                    Console.ForegroundColor = foregroundColour;
                    getInvDictionary1();
                    if (verbItemWholeString.Length < 2)
                        WriteLineText("Examine what?"); //user just types "Examine" etc.
                    itemChoice = userValueItem;
                    if (inventory.dictionary.ContainsKey(itemChoice) || WorldMapCells[CurrentMap][CurrentLocation].gridItems.Contains(itemChoice))
                        Examine(); //gives name and description of item based on its stats
                }

                //Access Inventory outside of menu
                else if (InvPhrases.Contains(userValue))
                    AccessInventory();

                //Access Stats outside of menu
                else if (userValue == "stats")
                    AccessStats();

                //Access Equipment outside of menu
                else if (userValue == "equipment")
                    AccessEquipment();

                //Access Help outside of menu
                else if (Regex.IsMatch(userValue, helpPhrases, RegexOptions.IgnoreCase))
                    AccessHelp();

                //Access QuestLog outside of menu
                else if (Regex.IsMatch(userValue, "quest log", RegexOptions.IgnoreCase) || Regex.IsMatch(userValue, "quest", RegexOptions.IgnoreCase))
                    AccessQuestLog();

                else if (Regex.IsMatch(userValue, "save", RegexOptions.IgnoreCase))
                    Save();

                else if (Regex.IsMatch(userValue, "saveTest", RegexOptions.IgnoreCase))
                {
                    playerStats.name = "blob";
                    playerStats.playerLevel = 20;
                    playerStats.playerMoney = 3000;
                    playerStats.armour = "bra";
                }

                else if (Regex.IsMatch(userValue, "load", RegexOptions.IgnoreCase))
                    LoadSaveData();

                //Menu - Inventory, Stats, Equipment, Meeba, Settings, Help, Save, Exit to Game
                else if (userValue == "menu")
                {
                    currentMainMenuState = MainMenuState.MainMenu;
                    MainMenu();
                }

                //Lab computer
                else if (Regex.IsMatch(userValue, labcompPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 4
                    || Regex.IsMatch(userValue, labcompPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "karstbay" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 64)
                {
                    PlayGame game = this;
                    Computer LabComputer = new Computer(game); //dependency injection
                    LabComputer.Use();
                }

                //Personal computer
                else if (Regex.IsMatch(userValue, labcompPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 15)
                {
                    PlayGame game = this;
                    PersonalComputer PersonalComputer = new PersonalComputer(game); //dependency injection
                    PersonalComputer.Use();
                }

                //NPCs
                else if (Regex.IsMatch(userValue, talkPhrases, RegexOptions.IgnoreCase)) //Talk/speak/greet
                {
                    string rufusPhrases = @"\brufus\b|\bdr.digby\b|\bdr. digby\b|\bdr digby\b|\brufus digby\b|\bdigby\b"; //all possible phrases
                    string blacksmithPhrases = @"\bblacksmith\b|\bblack smith\b|\banton\b|\banton kuznetsov\b|\bmr kuznetsov\b|\bmr. kuznetsov\b|\bmr.kuznetsov\b"; //all possible phrases
                    string drtanakaPhrases = @"\basuka\b|\bdr.tanaka\b|\bdr. tanaka\b|\bdr tanaka\b|\basuka tanaka\b|\bresearcher\b|\btanaka\b";
                    string librarianPhrases = @"\blibrarian\b|\breceptionist\b";
                    string libraryelderlymanPhrases = @"\belderly man\b|\bold man\b|\bstraw hat man\b";
                    string librarydarkhairwomanPhrases = @"\bwoman\b|\bdark-haired woman\b|\bdark haired woman\b|\bwoman with dark hair";
                    string librarysketchymanPhrases = @"\bsuit man\b|\bsuited man\b|\bman in suit\b|\bman with oiled hair\b|\bman with oily hair\b|\boiled hair man\b|\boily man\b|\boiled hair\b|\boily hair\b";
                    string cottageelderlywomanPhrases = @"\belderly woman\b|\bold woman\b|\bwoman\b";
                    string drinksvendorPhrases = @"\bdrinks vendor\b|\bdrinks\b|\bvendor\b";
                    string boatguyPhrases = @"\bsailor\b|\bboat guy\b|\bfisherman\b|\bman on quay\b";
                    string brigittePhrases = @"\bbrigitte\b|\bfournier\b|\bprofessor\b";
                    string weaponwomanPhrases = @"\byoung woman\b|\bwoman\b|\bassistant\b|\bstaff\b";
                    string riftonshopkeeperphrases = @"\bshopkeeper\b|\bassistant\b|\bstaff\b";
                    string fountainmanphrases = @"\bman\b|\bwoman\b";
                    //Dr Rufus Digby
                    if (Regex.IsMatch(userValue.ToLower(), rufusPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 4)
                    {
                        PlayGame game = this;
                        NPCRufusDigby NPC = new NPCRufusDigby(game);
                        NPC.Use();
                    }
                    //Vanya - Room-mate
                    else if (Regex.IsMatch(userValue.ToLower(), "vanya".ToLower(), RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 15)
                    {
                        PlayGame game = this;
                        NPCVanyaPetrov NPC = new NPCVanyaPetrov(game);
                        NPC.Use();
                    }
                    //Asuka - Visitng lab researcher
                    else if (Regex.IsMatch(userValue.ToLower(), drtanakaPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 4)
                    {
                        PlayGame game = this;
                        NPCDrTanaka NPC = new NPCDrTanaka(game);
                        NPC.Use();
                    }
                    //Librarian - rifton
                    else if (Regex.IsMatch(userValue.ToLower(), librarianPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 13)
                    {
                        PlayGame game = this;
                        NPCLibrarian NPC = new NPCLibrarian(game);
                        NPC.Use();
                    }
                    else if (Regex.IsMatch(userValue.ToLower(), libraryelderlymanPhrases, RegexOptions.IgnoreCase) && librarianCounter > 0 && libraryoldmanCounter < 1 && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 13)
                    {
                        PlayGame game = this;
                        NPCElderlyLibraryMan NPC = new NPCElderlyLibraryMan(game);
                        NPC.Use();
                    }
                    else if (Regex.IsMatch(userValue.ToLower(), librarydarkhairwomanPhrases, RegexOptions.IgnoreCase) && librarianCounter > 0 && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 13)
                    {
                        PlayGame game = this;
                        NPCDarkHairedLibraryWoman NPC = new NPCDarkHairedLibraryWoman(game);
                        NPC.Use();
                    }
                    else if (Regex.IsMatch(userValue.ToLower(), librarysketchymanPhrases, RegexOptions.IgnoreCase) && librarianCounter > 0 && librarysketchymanCounter < 3 && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 13)
                    {
                        PlayGame game = this;
                        NPCSketchyLibraryMan NPC = new NPCSketchyLibraryMan(game);
                        NPC.Use();
                    }
                    //Cottage elderly lady
                    else if (Regex.IsMatch(userValue.ToLower(), cottageelderlywomanPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 24)
                    {
                        PlayGame game = this;
                        NPCElderlyCottageWoman NPC = new NPCElderlyCottageWoman(game);
                        NPC.Use();
                    }
                    //Allotment
                    else if (Regex.IsMatch(userValue.ToLower(), libraryelderlymanPhrases, RegexOptions.IgnoreCase) && librarianCounter > 0 && libraryoldmanCounter >= 3 && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 35)
                    {
                        PlayGame game = this;
                        NPCElderlyLibraryMan NPC = new NPCElderlyLibraryMan(game);
                        NPC.Use();
                    }
                    //Village square
                    else if (Regex.IsMatch(userValue.ToLower(), fountainmanphrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 34)
                    {
                        PlayGame game = this;
                        NPCFountainMan NPC = new NPCFountainMan(game);
                        NPC.Use();
                    }
                    //Weapons shop
                    else if (Regex.IsMatch(userValue.ToLower(), weaponwomanPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 21)
                    {
                        PlayGame game = this;
                        NPCWeaponsWoman NPC = new NPCWeaponsWoman(game);
                        NPC.Use();
                    }
                    //Rifton shop
                    else if (Regex.IsMatch(userValue.ToLower(), riftonshopkeeperphrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 30)
                    {
                        PlayGame game = this;
                        NPCRiftonShopKeeper NPC = new NPCRiftonShopKeeper(game);
                        NPC.Use();
                    }
                    //Drinks vendor
                    else if (Regex.IsMatch(userValue.ToLower(), drinksvendorPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 43)
                    {
                        PlayGame game = this;
                        NPCDrinksVendor NPC = new NPCDrinksVendor(game);
                        NPC.Use();
                    }
                    //Guto - miner
                    else if (Regex.IsMatch(userValue.ToLower(), "guto".ToLower(), RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 11)
                    {
                        PlayGame game = this;
                        NPCGutoMiner NPC = new NPCGutoMiner(game);
                        NPC.Use();
                    }
                    //Bart - miner
                    else if (Regex.IsMatch(userValue.ToLower(), "bart".ToLower(), RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 11)
                    {
                        PlayGame game = this;
                        NPCBartMiner NPC = new NPCBartMiner(game);
                        NPC.Use();
                    }
                    //Boat guy
                    else if (Regex.IsMatch(userValue.ToLower(), boatguyPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton beach" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 17)
                    {
                        PlayGame game = this;
                        NPCBoatGuy NPC = new NPCBoatGuy(game);
                        NPC.Use();
                    }
                    //Prof. Fournier
                    else if (Regex.IsMatch(userValue.ToLower(), brigittePhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "karstbay" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 64)
                    {
                        PlayGame game = this;
                        NPCBrigitteFournier NPC = new NPCBrigitteFournier(game);
                        NPC.Use();
                    }
                    //Anton - blacksmith
                    else if (Regex.IsMatch(userValue.ToLower(), blacksmithPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "karstbay" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 37)
                    {
                        PlayGame game = this;
                        NPCAntonBlacksmith NPC = new NPCAntonBlacksmith(game);
                        NPC.Use();
                    }
                    else
                    {
                        WriteLineText("Who are you talking to?");
                        Thread.Sleep(800);
                    }
                }

                //Use Items
                else if (UsePhrases.Contains(Verb) && verbItemWholeString.Length < 2)
                    WriteLineText(UppercaseFirst(Verb) + " what?");

                //Turn off/stop using items
                else if (TorchOffPhrases.Contains(userValue) || userValue == "flashlight" && torchOn == true)
                    TurnOffTorch();

                //Torches
                else if (TorchOnPhrases.Contains(Verb) && userValueItem == "flashlight" && inventory.dictionary.ContainsKey("flashlight") || userValue == "flashlight" && inventory.dictionary.ContainsKey("flashlight") || userValue == "turn on flashlight" && inventory.dictionary.ContainsKey("flashlight"))
                    useTorch();
                else if (TorchOnPhrases.Contains(Verb) && userValueItem == "detector" && inventory.dictionary.ContainsKey("detector") || userValue == "detector" && inventory.dictionary.ContainsKey("detector") || userValue == "turn on detector" && inventory.dictionary.ContainsKey("detector"))
                    useDetector();

                //Map
                else if (Regex.IsMatch(userValue, BookMapPhrases, RegexOptions.IgnoreCase) && Regex.IsMatch(userValue, MapPhrases, RegexOptions.IgnoreCase)
                    || userValue == "map" || userValue == "m") //maybe torch only shows up certain things? && only if in inventory
                    Map();

                //Books
                else if (Verb == "read" && inventory.dictionary.ContainsKey(userValueItem.ToLower()))
                {
                    itemChoice = userValueItem;
                    referenceCurrentItem();
                    if (examItem.itemType == "book")
                    {
                        WriteLineText(examItem.itemDescription);
                        Thread.Sleep(1000);
                    }
                    else
                    {
                        Console.ForegroundColor = foregroundColour;
                        WriteLineText("There's nothing to read.");
                    }
                }

                //Access Quest Log
                else if (userValue == "q" || userValue == "quest log")
                    AccessQuestLog();

                //Equip items
                else if (Regex.IsMatch(userValue, equipPhrases, RegexOptions.IgnoreCase))
                {
                    Console.ForegroundColor = foregroundColour;
                    getInvDictionary1();
                    if (EquipPhrases.Contains(Verb) && verbItemWholeString.Length < 2) //if user just types "Equip"
                        WriteLineText(UppercaseFirst(userValue) + " what?");
                    else if (Regex.IsMatch(userValue, equipPhrases, RegexOptions.IgnoreCase))
                    {
                        itemChoice = userValueItem;
                        EquipItems();
                    }
                }

                //UnEquip items
                else if (UnEquipPhrases.Contains(Verb))
                {
                    Console.ForegroundColor = foregroundColour;
                    getInvDictionary1();
                    if (UnEquipPhrases.Contains(Verb) && verbItemWholeString.Length < 2) //if user just types "Equip"
                        WriteLineText(UppercaseFirst(userValue) + " what?");
                    else if (UnEquipPhrases.Contains(Verb) && verbItemWholeString.Length > 1) //if item is equippable
                    {
                        itemChoice = userValueItem;
                        UnequipItems();
                    }
                }

                //Eat/drink something
                else if (EatPhrases.Contains(Verb.ToLower()))
                {
                    Console.ForegroundColor = foregroundColour;
                    if (EatPhrases.Contains(Verb) && verbItemWholeString.Length < 2) //if user just types "Eat"
                        WriteLineText(UppercaseFirst(userValue) + " what?");
                    else if (EatPhrases.Contains(Verb) && verbItemWholeString.Length > 1) //if item is edible
                        EatDrinkSomething();
                }

                //Use other items -needs to go after all other verb phrase options that also contain 'use' as a phrase
                else if (UsePhrases.Contains(Verb) && inventory.dictionary.ContainsKey(userValueItem))
                {
                    itemChoice = userValueItem;
                    referenceCurrentItem();
                    UseItem();
                }

                //Summon Cthulhu
                else if (userValue == "summon cthulhu".ToLower())
                {
                    summonCthulhu();
                    Game();
                }
                //Konami Code
                else if (userValue == "up up down down left left right right b a")
                    DiscoRoom();

                //Unknown input
                else if (!string.IsNullOrEmpty(userValue))
                    unknownInput();
                else if (string.IsNullOrEmpty(userValue))
                    Console.CursorTop -= 1;
            }
            while (userValue != "exit game".ToLower());
        }

        //METHODS
        static string UppercaseFirst(string s)
        {
            if (string.IsNullOrEmpty(s))
            {
                return string.Empty;
            }
            char[] a = s.ToCharArray();
            a[0] = char.ToUpper(a[0]);
            return new string(a);
        }

        public void IntroAnimation()
        {

            //Console.WindowWidth = 130;
            //Console.BufferWidth = 130;
            Thread.Sleep(500);
            //Original font: Mega-relief by Nick Bryant 12/9, dmc1@st-and.ac.uk
            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"   ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"   _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"    _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"     _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"      _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"       _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"        _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"         _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"          _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(3800);
            Console.Clear();

            //first shakes
            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"    _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"     _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"       _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"         _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"           _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"    _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"    _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"     _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"      _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"       _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"        _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"         _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"          _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"           _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(100);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"   ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"   _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"    _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"     _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"      _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"       _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"        _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"         _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"          _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(100);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"    _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"     _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"       _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"         _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"           _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"    _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"    _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"     _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"      _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"       _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"        _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"         _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"          _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"           _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(100);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"   ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"   _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"    _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"     _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"      _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"       _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"        _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"         _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"          _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(100);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"    _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"     _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"       _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"         _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"           _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"    _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"    _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"     _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"      _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"       _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"        _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"         _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"          _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"           _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(100);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"   ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"   _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"    _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"     _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"      _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"       _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"        _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"         _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"          _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(100);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"    _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"     _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"       _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"         _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"           _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"    _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"    _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"     _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"      _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"       _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"        _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"         _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"          _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"           _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(100);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"   ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"   _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"    _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"     _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"      _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"       _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"        _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"         _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"          _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(200);
            Console.Clear();

            //second shakes
            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"    _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"    _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"     _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"       _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"       _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"         _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"         _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"           _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"   ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"   _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"    _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"     _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"      _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"       _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"        _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"         _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"          _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"  _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"   _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"     _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"       _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"         _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"  _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"    _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"   _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"      _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"     _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"        _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"       _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"          _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"         _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"   ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"   _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"    _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"     _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"      _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"       _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"        _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"         _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"          _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@" _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"  _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"    _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"      _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"        _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@" _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"    _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"  _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"      _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"    _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"        _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"      _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"          _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"        _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"   ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"   _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"    _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"     _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"      _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"       _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"        _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"         _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"          _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"_/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@" _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"   _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"     _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"       _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"_/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"    _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@" _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"      _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"   _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"        _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"     _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"          _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"       _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"   ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"   _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"    _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"     _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"      _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"       _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"        _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"         _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"          _______\///_________\//////////_\///___________\//////////_____\/////___\///____\///_\///__\////////\//__           ");
            Thread.Sleep(80);
            Console.Clear();

            //third shakes/decay
            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"_/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@" _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"   _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"     _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"       _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"_/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"    _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@" _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"      _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"   _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"        _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"     _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"          _______\/\\\_______\//\\\\\\\\\\\/\\\_________\//\\\\\\\\\\___\//\\\\\__\/\\\___\/\\\\/\\\\//\\\\\\\\/\\_            ");
            Console.WriteLine(@"       _______\///_________\//// /////_\/ /___________\/// ////// ____\/// /___\///  __\///_\///__\//// ///\/ __           ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"   ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"   _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"    _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"     _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"      _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"       _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"        _______\/\\\______\//\\///////__\/\\\________\//\\///////_____\/\\\_/\\_\/\\\___\/\\\\/\\\_/\\\/////\\\__             ");
            Console.WriteLine(@"         _ __ __\/\\\__  ___\//\\\\\ \\\\\/\\\_________\//\\\\\  \\\___\//\\\\\__\/ \\_ _\/\\\\/\  \//\\\\\ \\/\\_            ");
            Console.WriteLine(@"          ___ ___\///__ __ ___\//// /// /_\/ /__ ___ ____\/// //// / ____\/// /___\/    __\///_\///__\/ // // \/ __           ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"_/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@" _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"   _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"     _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"       _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"_/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"    _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@" _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"      _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"   _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"        _______\/\\\_______/\\\\^^^^^\\_\/\\\___\///__/\\\\^^^^^\\____\/\\\_____\/\\\/////\\\\/\\\__/\^^^^^\\\\__              ");
            Console.WriteLine(@"     ___ ___  \\\_  ___\// \/// ///__ /\\  _____ _\//\\/  ////___ _ / \\_/\\_\  \\__ \/\\\  \\\_/ \\//  /\\\__             ");
            Console.WriteLine(@"          _ __ __\/  \__  _ _\/  \\\\ \\  \/\\  ________ //\  \\  \\\___\//\ \\\__\/ \\_ _\ \\\\    \//\\ \\ \  \\_            ");
            Console.WriteLine(@"         _ __ \///__ __ ___  /// /// /_\  /__   _ ____\  / ///  / ____\  / /___\/    __ ///_\/ /__\/    // \  __           ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"   ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"   _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"    _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"     _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"      _______\/\\\________/\\\/////\\\\/\\\/////\\\__/\\\/////\\\\////\\\////_\/\\\^^^^^^\__/\^\\////////\\\___               ");
            Console.WriteLine(@"       ___ ___  \\\_ ___ _/\\ \^^^  \\_\/ \\__ \//  _/\\\\^^^ ^\\__  \/\\\___ _\/\\\ /// \\\\  \\__/ ^^^^^ \\\_               ");
            Console.WriteLine(@"        _ _ __  \   _  ___\/  \///   /__ /\\   ____ _\//\ /  ////  _ _ / \  /\\_\  \ __ \/\\\   \\_/ \\/   /\\ __             ");
            Console.WriteLine(@"            _ __\/  \    _ _\/  \\   \\  \/\   ____ ___ //\  \   \ \___\//\ \\  _\/ \\_ _\ \  \    \/  \ \\    \\_            ");
            Console.WriteLine(@"            _    \/  __ __   _  ///   / /_\  / _   _ _  _\  / /    / ___    / /_ _\/    __  //_\   __\/    /     __           ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"_/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@" _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"   _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"     _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"       _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"_/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"    _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@" _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"      _______\/\\\__________/\^^^^^^\__/\\/^^^^^^\_____/\^^^^^^\__/\^^\\\^^^^\\/\\\________\///__/\^^^^^^^\____                ");
            Console.WriteLine(@"   _ ____  \\ __ ___ _  \\ /// \\\\  \ /// /\\\_  \\\/ /// \\\////\\ //  _\/ \\ ^^^ ^   \^\\ //////   \\\ _                ");
            Console.WriteLine(@"         _  ___    \_ _ _ _/\  \^^^  \ _\/ \\ _ \/   _/  \\^ ^ ^\\__  \ \ \___ _\ \\\ /   \ \\  \\__/   ^^^ \ \_               ");
            Console.WriteLine(@"     _   __      _  _ _\   \  /    __ /\      __ _\ /\ /    //  _ _ /    / \_\    __ \  \\   \ _/ \ /    \\  _             ");
            Console.WriteLine(@"             _ _  /       _   /   \       \/\   _ __  _ //   \     \__  /  \\  _     \\_ _  \       \/  \       \ _            ");
            Console.WriteLine(@"              \    _ __      //       _\  /     _    _   /        ___      /_ _      __    _\   __\     /                  ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"   ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"   _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@"    _______\/\\\___________________________________________________/\^\_____\/\\\_________/\^\_______________                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"     ___ ___\  \\_____ __ _ ^^^^ \__ \\/  ^  ^\  ___    ^^^ ^^\_ /\^ \\\^^ ^\   \\__ __ __\/ /__  ^^ ^^ ^\_ __                ");
            Console.WriteLine(@"      _ _  _   \  _  __ _  \\   / \ \\    /// /\ \_   \\/   / \\ // /\\     _\  \\    ^^   \ \\ // //    \   _                ");
            Console.WriteLine(@"        _    _       _   _/   \^ ^  \ _\     _ \    _/  \   ^ ^\\__    \ \_ _ _\ \ \ /      \  \ __/   ^ ^ \  _               ");
            Console.WriteLine(@"        _           _    _\      /    __ /\       _ _\    /     /  _   /      \_\    _  \   \     _/   /     \                ");
            Console.WriteLine(@"             _   /           /           \     _ _   _  /         \_   /   \  _     \\  _  \        /  \         _            ");
            Console.WriteLine(@"                      _ _       /        _\        _        /          _       _ _            _\   _                          ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"_/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@" _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"   _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"     _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"       _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"_/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"    _\///////\\\/////_______________________________________________________\/\\\____________________________                  ");
            Console.WriteLine(@" _ ___ _\/\  __ ___  _____ ___ _________ ___  _____ ____ _______  ^\_ ___\/ \\___ ___  _/\ \__ __ ______ __                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"       __ _ _\  \  __ _ __ _ ^  ^ \ _ \    ^   \  ___    ^ ^ ^  _ /\^  \\^^      \\ _ __ __ / /    ^^ ^  ^\_                   ");
            Console.WriteLine(@"   _    _   \  _  __     \   / \  \    //  /  \_   \ /   / \  //   \         \\     ^     \\    //        _                ");
            Console.WriteLine(@"         _            _        \^ ^    _\     _ \     /  \   ^   \__      \_ _    \ \        \  \   /   ^   \  _               ");
            Console.WriteLine(@"     _                _\      /    __          _ _\    /     /      /      \      _  \         _/         \                ");
            Console.WriteLine(@"              _               /                 _ _   _                 /   \  _         _  \        /            _            ");
            Console.WriteLine(@"                             /        _         _                   _                      _    _                          ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"   ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"   _/\^^^^^^^^^^^^^\_______________________________________________________/\^\____________________________                   ");
            Console.WriteLine(@"    \  /// /\\\/  //_ ______ _______ _ ____  _____ ________ ___ ________ __\  \\_ ________ _____ ___ ___ ___                  ");
            Console.WriteLine(@"    _ _   _\/   __ _ _  _  __ _ _ ___ _____ _ _  ____  ___  _____ _  ^\  ___\  \\ __ __   _/\ \ _ __ _  ___ __                ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"       _ _ _   \   _ _ __      ^ \ _      ^   \   __    ^   ^  _  \^  \  ^      \\ _  _ __ / /    ^  ^    _                   ");
            Console.WriteLine(@"           _   \     __         / \  \        /   _   \ /     \  /    \          \     ^           //        _                ");
            Console.WriteLine(@"        _                        ^    _\     _ \        \   ^   \ _         _    \          \  \           \  _               ");
            Console.WriteLine(@"                         _       /    __            _\    /            /             _  \          /         \                ");
            Console.WriteLine(@"             _                                 _     _                 /      _         _           /                         ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"_/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@" _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"   _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"     _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"       _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___________________________________________________________________________________________________________________________");
            Console.WriteLine(@"_/ ^^ ^^^  ^^^ ^\__ ____ ____  ____ ______ ___ ____  ___ _________ _____/\ \__ ___  ____ _____ ______ __                   ");
            Console.WriteLine(@"     \  //  /\\\   //_  _____   _____ _ _ __  _ _ _ ____ ___   _ ____ ___ __   \\_ _  _____ _ ___ ___ _   ___                  ");
            Console.WriteLine(@"   _   _\    __   _     __ _ _ _ _ ___ _ _ _  __ _  ___  __  _ _      ___\  \\  _ __   _/  \ _ _  _  ___ _                 ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"        _       \   _ _  _      ^   _      ^   \         ^   ^  _      \  ^       \ _  _ _  /      ^       _                   ");
            Console.WriteLine(@"            \     _          /    \            _   \       \  /               \                           _                ");
            Console.WriteLine(@"         _                             _      _ \            ^   \           _               \  \           \                  ");
            Console.WriteLine(@"                      _            __             \                               _  \                                     ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"          _\////////////______\//////////____\////////__\////////\//__\////________________\/////_______\///_________________ ");
            Console.WriteLine(@"    ___ ___ ___  ___ _______ ___ ____  ___ ____   _____ _____  ______ ________ ________  __ ___ _______ ______  __ ______ ____");
            Console.WriteLine(@"   _/ ^^   ^  ^^^ ^ __ __ _ _ __  ____   ____ ___ _ __  ___   _____ _ _ ___/\   _ ___  _ __ _ ___ _  ___ __                   ");
            Console.WriteLine(@"       //    \\   / _  _ ___   ___   _ _  _  _ _   ____ _ _   _   __ ___ __    \_ _  _  __ _ __  ___ _     _                  ");
            Console.WriteLine(@"      _         __   _        _ _ _ _ __  _   _  __    ___   _  _        ___   \   _  _   _/    _ _  _  __                    ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"       _       \   _ _    _          _      ^             ^   ^  _      \          \ _  _ _         ^                         ");
            Console.WriteLine(@"                     _               \            _           \                  \                           _                ");
            Console.WriteLine(@"                                      _        \            ^               _                  \                              ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"_/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@" _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"   _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"     _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"          _\/\\\\\\\\\\\\/___\//\\\\\\\\\\_\///\\\\\\\\\//\\\\\\\\/\\\//\\\\/____________\///\\\\\/_____\/\\\________________  ");
            Console.WriteLine(@"       _\/  // //// /____ _\///  // //_ __\//  /// __\/ //// /\//__\//// ____ ________ _\///// _   __\///_ ____ ______  __ ");
            Console.WriteLine(@"       _ __  _ _  _ _ _____   _ _ ____   __ ____   _  __ ____   __ ___ ______ _ _____  _  __ _ _  ______ __  __  __  _____ _ __");
            Console.WriteLine(@"   ^^   ^  ^ ^ ^ __ __   _ __  _  _   _ __   _ _ __  __    ___   _ _ _ _/    _ _ _  _ __    __ _  _ _  _                   ");
            Console.WriteLine(@"         /    \    /    _ _ _   ___    _      _ _   __   _ _       _  ___ __    \_    _  _  _  _  __  _     _                  ");
            Console.WriteLine(@"   _         _    _        _   _ _  _  _    _  _      _   _           ___       _      _/      _  _                        ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"                \   _ _    _          _                    ^   ^  _      \          \ _   _                                    ");
            Console.WriteLine(@"                  _                                        \                                              _                ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"       _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"        _\/\\\_______/\\\_\//\\///////__\//\\\________/\\\/////\\\__/\\_/\\\__________\//\\\__/\\\____\/\\\________________   ");
            Console.WriteLine(@"         _ /\ \\\\ \\\\  ___ //\ \\  \\\\_\ //\\\ \\ \\//\  \\\\\ \\\/ \  \/_ ____  ____ /// \\\\/___ _\/\ \_ ___  ______ __  ");
            Console.WriteLine(@"           \/  // // / /_  _ _ ///  //  /_  _\//  / / __ / / //  \/  _\/ //  ___   ___ __ _ // // _   _ \  /_ __ _ __ __    _ ");
            Console.WriteLine(@"      _  _    _  _   _  __     _  ___   _  __ _   _  _  __ _    _ ___   ____ _ _  __  _  _  _ _  ____   _   _   __  __ __ _ _ ");
            Console.WriteLine(@"           ^    ^ ^ __ _    _ _      _   _ _    _    _   _      _     _ _ _       _ _    __    __ _    _  _                   ");
            Console.WriteLine(@"        /         /        _   ___           _ _   __     _       _  _   __    \     _     _  _      _     _                  ");
            Console.WriteLine(@"                _             _     _     _    _         _   _           _         _              _                           ");
            Console.ForegroundColor = ConsoleColor.White;
            Console.WriteLine(@"                   _      _                               ^      _                 \     _                                    ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"_/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@" _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"   _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"        _\/\\\_______\/\\\_/\\\\^^^^^\\__/\\\__________/\^^^^^\\\\_____\//\\\__________/\\\__\//\\\___\/\\\________________    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"      \  \\___ ___/ \\_\// \// ////_ \//  \__ ___  /\\\  / /\\\ _/\ _/\  _ ____ __ \// \\_ /\\ __ _\/ \\____  ____ ___ _   ");
            Console.WriteLine(@"          _ /  \\\\ \  \  ___ / \ \\  \\\ _\ //  \ \\ \\ /\   \\ \ \\ / \  \/  ____  ___  /// \  \/__  _\ \ \_ __   ___ __  _  ");
            Console.WriteLine(@"         /  //  / /     _   / /  //   _  _\ /  / /  _ /   //  \   _\  //   __   ___ _  _ //    _     \  /_    _  _ __    _ ");
            Console.WriteLine(@"          _    _      _  __     _  __    _  _  _      _  __      _ __     ___ _    __  _     _ _   ___   _       __  __ __     ");
            Console.WriteLine(@"        ^      ^ __ _    _ _      _   _      _    _   _            _ _ _       _      __    _  _    _  _                   ");
            Console.WriteLine(@"         /                  _   _             _     __     _       _      __    \           _         _                        ");
            Console.WriteLine(@"                           _           _              _               _                        _                           ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"      _\/\\\_______\/\\\__/\\\/////\\\__/\\\//////_\////////\\\_____\//\\\\\__________/\\\///\\\_\////\\\//______________     ");
            Console.WriteLine(@"         /\\\_ _____\/  \_/ \\\  ^^^\\_ /\\\ ____ ___ /\^  ^^ \\\__ __\//  \___ ___ __/  \__\ /\\\ __\/ \\_ ______ ___  __    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"         \  \ ___ _ _/  \_\ / \// / //_ \ /  \_  ___  / \\  /   \\  /\ _/\  _ __ _ __ \/  \\_ /\\ __ _\/ \\ ___   ___  __ _   ");
            Console.WriteLine(@"         _     \\\    \   __ / \ \   \ \ _\  /  \ \  \\ /\    \ \ \    \  \/  __ _  __   / / \  \/ _  _\ \ \_  _    __ __  _  ");
            Console.WriteLine(@"               /      / /     _   / /  /    _  _\ /  /    _ /   //      _\    __   ___    _ //    _     \   _    _  _  _    _ ");
            Console.WriteLine(@"                     _  _         __    _  _         _   _      _ _      ___      __  _       _   ___           __  _  __     ");
            Console.WriteLine(@"                  ^ _  _      _          _      _        _              _ _       _       _    _  _       _                   ");
            Console.WriteLine(@"        /                      _             _            _              __    \                     _                        ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"_/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@" _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"      _\/\\\_______\/\\\____/\^^^^^^\_____/\^^^^^^\_/\^^^^^^^\_____\//\\^/\\\___________/\^^^\____/\^^\\\^^\_____________      ");
            Console.WriteLine(@"   _\/\ \__ ___ \/\ \__/\  // //\ \_ /\ \/// //_  /// /// \\_ ___   \\\\\ __ ___ __/\ \  /\\ _\ // \  // _  _ _______      ");
            Console.WriteLine(@"          /  \_ __ __ /  \_/ \ \  ^^  \_ /\   __ _ __  /\^  ^^ \  __ __ //  \_ _ _ __  /  \__  /\ \ __ / \   __ ___ _ _   _    ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"      \    __  _     \_  / \   / / _ \     _   __  /     /   \   /   /\  _  _ _ _  \/  \ _ /\\  _ _\/ \    _   _ _   _ _   ");
            Console.WriteLine(@"                \      \   __   \     \   _\     \ \     /\    \   \           _  _   _   /   \  \  _       \_       __ _   _  ");
            Console.WriteLine(@"            /        /         / /       _     /       _     //       \     _   _ _    _  /          \        _     _      ");
            Console.WriteLine(@"                      _            __    _            _   _      _        _ _      __  _       _   _              _  _   _     ");
            Console.WriteLine(@"               ^    _                        _                       _         _            _          _                   ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"   _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@"    _\/\\\______\//\\\____________________________________________/\^\__/\^\_______________________/\\\________________       ");
            Console.WriteLine(@"     _ /\\\ ___ __\ \\\_  _/\^^^ ^  ___ _/\^ ^^ ^\_ \^^ ^^  \  ___\/ \\^/ \\ __  ____ _/\^ ^\_ _ /\  \\\ ^\__  ____ ____      ");
            Console.WriteLine(@"      _\/\ \__ ___ \/\ \__/\  // //\ \_ /\ \/// //_  /// /// \\_ ___   \\\\\ __ ___ __/\ \  /\\ _\  / \  // _  _ __ __ _      ");
            Console.WriteLine(@"         /     __ _  /  \_  \    ^   \_  \    _ _  _  /    ^^ \  _  __  /  \_ _   __     \__  /  \ __   \   _  ___ _ _        ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"         \     _  _      _    \     / _ \         _   /         \       /\  _    _ _  \   \ _ / \        \        _       _   ");
            Console.WriteLine(@"                      \    _   \     \    \     \             \               _  _           \  \           _        _ _   _  ");
            Console.WriteLine(@"               /                  /               /       _              \         _      _             \              _      ");
            Console.WriteLine(@"                     _                  _                _                 _                  _                  _  _         ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"_/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"    _\/\\\////////\\\_______________________________________________________________________________/\^\///____________        ");
            Console.WriteLine(@" _ /\\\_  _ _\ /\\ _  __ ______ ___ ____  ___ ____ _________ __ \^\__ \^\ ___  ___ _____ ____  _/ \\_ ____  __ __ __       ");
            Console.WriteLine(@"      _ /  \ ___ __\ \ \_  _/ ^   ^  _ _ _ \^  ^  \_ \^   ^     ___ / \ ^/  \  _  __ _ _ \^   _ _  \    \ ^\ _  __ _   __      ");
            Console.WriteLine(@"     /\ \ _ _ _ \ \ \__ \   /   \ \_  \ \  /  /_   //  /  \\_  __   \  \\ __ __ _ _ /\\  / \ _   /    //    _    __        ");
            Console.WriteLine(@"          /     __    /   _  \        \_       _ _           ^ \  _  _   /   _ _   _      \ _     \  _       _  _ _ _          ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"      \        _           \       _ \             /                 /\       _ _      \     \                 _       _   ");
            Console.WriteLine(@"                       \    _   \                \             \                  _              \                    _ _      ");
            Console.WriteLine(@"            /                                  /                                _                    \                     ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _/\^^^^^^^^^^\___________________________________________________________________________________/\^^^\___________         ");
            Console.WriteLine(@"     /\\\/ //  // \\ _ _____ ___  ____ ________ __ _____  __ ___ ___ _______  ___ ___ ___ ________  \^\/ /_ ____  __ _        ");
            Console.WriteLine(@"      /  \_  _  \   \ _  __ ____ _ __  _  _  __  _  _ _____ __  __  ^\__ \   __   __  __ __ _  _  _/ \ _ ___   __ _ _         ");
            Console.WriteLine(@"     _       __ _ \ \ \_   /     ^  _   _  ^  ^  \       ^     __  / \  /  \  _  _  _ _        _  \    \  \ _   _     _       ");
            Console.WriteLine(@"        /  \ _   _   \  __ \       \ \   \    /   _   /   /    _  _    \   \ __ _  _   /\   / \     /    /     _    _         ");
            Console.WriteLine(@"               __        _  \        \        _               \  _  _         _   _        _        _          _ _            ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"         \                    \         \             /                 /        _ _      \                       _           ");
            Console.WriteLine(@"                      \    _                                  \                                 \                      _      ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"_ \^^^ ^^^  ^^\ ___ ____ ___  __ ________ _____ ____   ____ _____ _____ ___________ __  ____ ____  ^^ \__  __ ____         ");
            Console.WriteLine(@"      /\\   //   / \  _ _   _ __   _  _ __ _____ __ __ __  __ _ _   _ ___ _ _  __  ___ __     ___ _  \^   /_ __ _      _        ");
            Console.WriteLine(@"   /      _  \     _   _ _  _ _  _     _   _  _    ___   __  _     __ \         _  __ _  _     _/     _ _   _  _           ");
            Console.WriteLine(@"      _          _ \   \_   /     ^  _       ^  ^          ^     _   /    /     _  _    _        _  \             _     _       ");
            Console.WriteLine(@"     /        _   \   _         \ \            _       /       _    \     _  _           / \          /          _         ");
            Console.WriteLine(@"                __        _           \                        \  _            _   _                 _          _              ");
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.WriteLine(@"                           \                       /                            _      \                                   ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _  ^^^  ^^    \ ___  ___ _ _  __ __ __  _ ___ _ __     __ _ ___ _ ___   ____ _    _ __  __   ___   ^^   _   _ _ __         ");
            Console.WriteLine(@"      \   /    /      _   _ _    _    __   __  __  _  _  __   _   _ _ _   _   _  __  __     _   _   ^      ___       _        ");
            Console.WriteLine(@"      /      _        _     _  _    _     _   _       __    __  _        \         _  __    _     _/     _     _              ");
            Console.WriteLine(@"    _            \        /        _       ^             ^     _              _       _        _  \                   _       ");
            Console.WriteLine(@"                 _   \   _                                /       _    \        _                        /          _         ");
            Console.WriteLine(@"               _                     \                           _            _                                _              ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"_  ^    ^^    \ _ _  _   _ _   _ __     _  __ _ __      _ _   _ _ __    _ __ _    _  _  __    __   ^    _     _ __         ");
            Console.WriteLine(@"           /           _   _      _     _   __   _     _   _       _ _     _   _  __   _     _               __       _        ");
            Console.WriteLine(@"   /               _        _          _           __    _   _                  _  _     _            _                    ");
            Console.WriteLine(@"     _                              _       ^                   _                      _           \                   _       ");
            Console.WriteLine(@"                  \   _                                        _             _                        /                    ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _  ^          \ _    _     _   _        _  __ _         _ _   _   __    _    _    _     __     _   ^    _     _            ");
            Console.WriteLine(@"          /           _          _         __             _       _       _   _             _               _        _        ");
            Console.WriteLine(@"      /                        _                      __    _                         _                  _                    ");
            Console.WriteLine(@"                                   _       ^                                          _                                       ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"_             \      _                  _  __ _               _   __    _         _            _        _     _            ");
            Console.WriteLine(@"           /                      _                        _               _   _                             _        _        ");
            Console.WriteLine(@"                            _                            _                                            _                    ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"   _                    _                  _  __                 _         _                      _        _                  ");
            Console.WriteLine(@"                                 _                                        _                                          _        ");
            Thread.Sleep(80);
            Console.Clear();

            Console.ForegroundColor = ConsoleColor.DarkGray;
            Console.WriteLine(@"                     _                  _                     _                                _                           ");
            Thread.Sleep(80);
            Console.Clear();
        }

        public void WriteLineText(string message)
        {
            string[] words = message.Split(' ');
            string line = "";

            //if the message exceeds the window width
            if (message.Length > Console.WindowWidth)
            {
                foreach (var word in words)
                {
                    //for each word in the message, if it makes the message so far less than the window width..   
                    if (line.Length + word.Length + 1 < Console.WindowWidth)
                    {
                        line += word + " ";
                        for (int i = 0; i < word.Length; i++)
                        {
                            Console.Write(word[i]);
                            Thread.Sleep(textSpeed);
                        }
                        Console.Write(" ");
                        Thread.Sleep(textSpeed);
                    }
                    else //if the word makes the line go over the window width, print what we have so far
                    {
                        Console.Write("\n");
                        for (int i = 0; i < word.Length; i++)
                        {
                            Console.Write(word[i]);
                            Thread.Sleep(textSpeed);
                        }
                        Console.Write(" ");
                        Thread.Sleep(textSpeed);
                        line = word + " ";
                    }
                }
            }
            else //if the message is within the window width
            {
                for (int i = 0; i < message.Length; i++)
                {
                    Console.Write(message[i]);
                    Thread.Sleep(textSpeed);
                }
            }
            Console.Write(Environment.NewLine);
        }

        public void WriteText(string message)
        {
            string[] words = message.Split(' ');
            string line = "";

            //if the message exceeds the window width
            if (message.Length > Console.WindowWidth)
            {
                foreach (var word in words)
                {
                    //for each word in the message, if it makes the message so far less than the window width..   
                    if (line.Length + word.Length + 1 < Console.WindowWidth)
                    {
                        line += word + " ";
                        for (int i = 0; i < word.Length; i++)
                        {
                            Console.Write(word[i]);
                            Thread.Sleep(textSpeed);
                        }
                        Console.Write(" ");
                        Thread.Sleep(textSpeed);
                    }
                    else //if the word makes the line go over the window width, print what we have so far
                    {
                        Console.Write("\n");
                        for (int i = 0; i < word.Length; i++)
                        {
                            Console.Write(word[i]);
                            Thread.Sleep(textSpeed);
                        }
                        Console.Write(" ");
                        Thread.Sleep(textSpeed);
                        line = word + " ";
                    }
                }
            }
            else //if the message is within the window width
            {
                for (int i = 0; i < message.Length; i++)
                {
                    Console.Write(message[i]);
                    Thread.Sleep(textSpeed);
                }
            }
        }

        public void NorthMovement()
        {
            int randomMember = random.Next(WorldMapCells[CurrentMap][CurrentLocation].encounterRate);
            if (randomMember == 1)
            {
                battle(); //battle starts if random generated number falls between min 0 and max encounterRate of area
                LookAround();
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "boat" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 14)
            {
                if (torchOn == false)
                    Console.ForegroundColor = ConsoleColor.DarkCyan;
                else if (torchOn == true)
                    Console.ForegroundColor = ConsoleColor.DarkBlue;
                WriteLineText("Would you like to disembark now?");
                Thread.Sleep(800);
                bool validChoice = false;
                do
                {
                    Console.Write("> ");
                    string choice = Console.ReadLine().ToLower().Trim();
                    if (choice.Length > 80) //makes input max of 80 chars
                    {
                        double textlength = choice.Length;
                        for (int i = 80; i <= textlength; i += 80)
                        {
                            Console.CursorTop -= 1;
                            Console.Write(new string(' ', Console.WindowWidth));
                            Console.CursorTop -= 1;
                        }
                        choice = choice.Remove(80);
                    }
                    if (choice == "yes" || choice == "y")
                    {
                        if (torchOn == false)
                            Console.ForegroundColor = ConsoleColor.DarkCyan;
                        else if (torchOn == true)
                            Console.ForegroundColor = ConsoleColor.DarkBlue;
                        WriteLineText("Ok, thanks for travelling with us!");
                        Thread.Sleep(800);
                        Console.ForegroundColor = foregroundColour;
                        if (boatToKarstbay == true)
                        {
                            CurrentMap = 5;
                            CurrentLocation = 41;
                            Console.ForegroundColor = foregroundColour;
                            WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                            WriteLineText("Type 'map' to see the current map.");
                            LookAround();
                        }
                        else if (boatToKarstbay == false)
                        {
                            CurrentMap = 3;
                            CurrentLocation = 18;
                            Console.ForegroundColor = foregroundColour;
                            WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                            WriteLineText("Type 'map' to see the current map.");
                            LookAround();
                        }
                        validChoice = true;
                    }
                    else if (choice == "no" || choice == "n")
                    {
                        if (torchOn == false)
                            Console.ForegroundColor = ConsoleColor.DarkCyan;
                        else if (torchOn == true)
                            Console.ForegroundColor = ConsoleColor.DarkBlue;
                        WriteLineText("Let me know when you are ready.");
                        Thread.Sleep(1000);
                        Console.ForegroundColor = foregroundColour;
                        validChoice = true;
                    }
                    else
                    {
                        Console.CursorTop -= 1;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 1;
                    }
                } while (validChoice == false);
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation - 10].Gateway == true) //If you are moving to a new map
            {
                int tempMap = WorldMapCells[CurrentMap][CurrentLocation - 10].newMap; //Creates a temporary int value so it can assign location and map at same time
                int tempLocation = WorldMapCells[CurrentMap][CurrentLocation - 10].newLocation;
                CurrentMap = tempMap;
                CurrentLocation = tempLocation;
                WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "boat")
                {
                    Console.ForegroundColor = foregroundColour;
                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 31 || WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 38)
                    {
                        WriteLineText("You have entered the Middle Deck");
                        Thread.Sleep(1000);
                        WriteLineText("Type 'map' to see the current map.");
                        Thread.Sleep(800);
                        LookAround();
                    }
                    else if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 81)
                    {
                        WriteLineText("You have entered the Lower Deck");
                        Thread.Sleep(1000);
                        WriteLineText("Type 'map' to see the current map.");
                        Thread.Sleep(800);
                        LookAround();
                    }
                    else if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 88)
                    {
                        WriteLineText("You have entered the Upper Deck");
                        Thread.Sleep(1000);
                        WriteLineText("Type 'map' to see the current map.");
                        Thread.Sleep(800);
                        LookAround();
                    }
                }
                else
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                    Thread.Sleep(1000);
                    WriteLineText("Type 'map' to see the current map.");
                    Thread.Sleep(800);
                    LookAround();
                }
            }
            else //Normal movement
            {
                CurrentLocation -= 10;
                WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                LookAround();
            }
        }

        public void SouthMovement()
        {
            int randomMember = random.Next(WorldMapCells[CurrentMap][CurrentLocation].encounterRate);
            if (randomMember == 1)
            {
                battle();
                LookAround();
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapLocation == 0 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 15 && vanyaTalk == false)
            {
                Console.ForegroundColor = foregroundColour;
                WriteLineText("Vanya wants to talk to you before you leave");
                Thread.Sleep(800);
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation + 10].Gateway == true)
            {
                if (WorldMapCells[CurrentMap][CurrentLocation + 10].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation + 10].cellLocation == 64 && storyCounter < 2)
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You should probably go to Dr. Digby's Lab before you leave the village.");
                    Thread.Sleep(800);
                }
                else if (WorldMapCells[CurrentMap][CurrentLocation + 10].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation + 10].cellLocation == 64 && storyCounter >= 2 && playerStats.weapon == "fists")
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You should find a weapon to use before you go outside the village.");
                    Thread.Sleep(800);
                }
                else
                {
                    int tempMap = WorldMapCells[CurrentMap][CurrentLocation + 10].newMap;
                    int tempLocation = WorldMapCells[CurrentMap][CurrentLocation + 10].newLocation;
                    CurrentMap = tempMap;
                    CurrentLocation = tempLocation;
                    WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                    if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "boat")
                    {
                        Console.ForegroundColor = foregroundColour;
                        if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 31 || WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 38)
                        {
                            WriteLineText("You have entered the Middle Deck");
                            Thread.Sleep(1000);
                            WriteLineText("Type 'map' to see the current map.");
                            Thread.Sleep(800);
                            LookAround();
                        }
                        else if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 81)
                        {
                            WriteLineText("You have entered the Lower Deck");
                            Thread.Sleep(1000);
                            WriteLineText("Type 'map' to see the current map.");
                            Thread.Sleep(800);
                            LookAround();
                        }
                        else if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 88)
                        {
                            WriteLineText("You have entered the Upper Deck");
                            Thread.Sleep(1000);
                            WriteLineText("Type 'map' to see the current map.");
                            Thread.Sleep(800);
                            LookAround();
                        }
                    }
                    else
                    {
                        Console.ForegroundColor = foregroundColour;
                        WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                        Thread.Sleep(1000);
                        WriteLineText("Type 'map' to see the current map.");
                        Thread.Sleep(800);
                        LookAround();
                    }
                }
            }
            else
            {
                CurrentLocation += 10;
                WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                LookAround();
            }
        }

        public void WestMovement()
        {
            int randomMember = random.Next(WorldMapCells[CurrentMap][CurrentLocation].encounterRate);
            if (randomMember == 1)
            {
                battle();
                LookAround();
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapLocation == 0 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 11 && !inventory.dictionary.ContainsKey("flashlight"))
            {
                Console.ForegroundColor = foregroundColour;
                WriteLineText("You should get a flashlight from Dr.Digby first");
                Thread.Sleep(800);
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapLocation == 0 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 15 && vanyaTalk == false)
            {
                Console.ForegroundColor = foregroundColour;
                WriteLineText("Vanya wants to talk to you before you leave");
                Thread.Sleep(800);
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation - 1].mapName == "karstbay" && WorldMapCells[CurrentMap][CurrentLocation - 1].cellLocation == 40 && boatguyCounter >= 2)
            {
                Console.ForegroundColor = foregroundColour;
                WriteLineText("You boarded the ship. Would you like to look around or wait for the ship to reach its destination?");
                Thread.Sleep(800);
                boatToKarstbay = false;
                bool validChoice = false;
                do
                {
                    Console.Write("> ");
                    string choice = Console.ReadLine().ToLower().Trim();
                    if (choice.Length > 80) //makes input max of 80 chars
                    {
                        double textlength = choice.Length;
                        for (int i = 80; i <= textlength; i += 80)
                        {
                            Console.CursorTop -= 1;
                            Console.Write(new string(' ', Console.WindowWidth));
                            Console.CursorTop -= 1;
                        }
                        choice = choice.Remove(80);
                    }
                    if (choice == "look around" || choice == "look" || choice == "l")
                    {
                        WriteLineText("There is a ticket officer standing by the exit door");
                        Thread.Sleep(00);
                        if (torchOn == false)
                            Console.ForegroundColor = ConsoleColor.DarkCyan;
                        else if (torchOn == true)
                            Console.ForegroundColor = ConsoleColor.DarkBlue;
                        WriteLineText("Feel free to explore the upper, middle and lower decks of the ship while we travel.\nPlease let me know when you are ready to disembark.");
                        Thread.Sleep(1000);
                        Console.ForegroundColor = foregroundColour;
                        CurrentMap = 4;
                        CurrentLocation = 14;
                        WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                        LookAround();
                        validChoice = true;
                    }
                    else if (choice == "wait" || choice == "wait for ship")
                    {
                        Console.ForegroundColor = foregroundColour;
                        WriteLineText("The ship departed for Rifton Beach");
                        Thread.Sleep(1500);
                        Console.Clear();
                        BoatAnimation();
                        CurrentMap = 3;
                        CurrentLocation = 18;
                        WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                        WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                        Thread.Sleep(1000);
                        WriteLineText("Type 'map' to see the current map.");
                        Thread.Sleep(800);
                        LookAround();
                        validChoice = true;
                    }
                    else
                    {
                        Console.CursorTop -= 1;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 1;
                    }
                } while (validChoice == false);
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation - 1].Gateway == true)
            {
                int tempMap = WorldMapCells[CurrentMap][CurrentLocation - 1].newMap;
                int tempLocation = WorldMapCells[CurrentMap][CurrentLocation - 1].newLocation;
                CurrentMap = tempMap;
                CurrentLocation = tempLocation;
                WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "boat")
                {
                    Console.ForegroundColor = foregroundColour;
                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 31 || WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 38)
                    {
                        WriteLineText("You have entered the Middle Deck");
                        Thread.Sleep(1000);
                        WriteLineText("Type 'map' to see the current map.");
                        Thread.Sleep(800);
                        LookAround();
                    }
                    else if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 81)
                    {
                        WriteLineText("You have entered the Lower Deck");
                        Thread.Sleep(1000);
                        WriteLineText("Type 'map' to see the current map.");
                        Thread.Sleep(800);
                        LookAround();
                    }
                    else if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 88)
                    {
                        WriteLineText("You have entered the Upper Deck");
                        Thread.Sleep(1000);
                        WriteLineText("Type 'map' to see the current map.");
                        Thread.Sleep(800);
                        LookAround();
                    }
                }
                else
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                    Thread.Sleep(1000);
                    WriteLineText("Type 'map' to see the current map.");
                    Thread.Sleep(800);
                    LookAround();
                }
            }
            else
            {
                CurrentLocation -= 1;
                WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                LookAround();
            }
        }

        public void EastMovement()
        {
            int randomMember = random.Next(WorldMapCells[CurrentMap][CurrentLocation].encounterRate);
            if (randomMember == 1)
            {
                battle();
                LookAround();
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation + 1].mapName == "rifton beach" && WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation == 1 && WaterfallQuestBranch3 == false)
            {
                Console.ForegroundColor = foregroundColour;
                WriteLineText("The waterfall is too powerful to cross.");
                Thread.Sleep(800);
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation + 1].mapName == "rifton beach" && WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation == 19 && boatguyCounter < 2)
            {
                Console.ForegroundColor = foregroundColour;
                WriteLineText("You need a ticket to board the ship.");
                Thread.Sleep(800);
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation + 1].mapName == "rifton beach" && WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation == 19 && boatguyCounter >=2)
            {
                Console.ForegroundColor = foregroundColour;
                WriteLineText("You boarded the ship. Would you like to look around or wait for the ship to reach its destination?");
                Thread.Sleep(800);
                boatToKarstbay = true;
                bool validChoice = false;
                do
                {
                    Console.Write("> ");
                    string choice = Console.ReadLine().ToLower().Trim();
                    if (choice.Length > 80) //makes input max of 80 chars
                    {
                        double textlength = choice.Length;
                        for (int i = 80; i <= textlength; i += 80)
                        {
                            Console.CursorTop -= 1;
                            Console.Write(new string(' ', Console.WindowWidth));
                            Console.CursorTop -= 1;
                        }
                        choice = choice.Remove(80);
                    }
                    if (choice == "look around" || choice == "look" || choice == "l")
                    {
                        Console.ForegroundColor = foregroundColour;
                        WriteLineText("There is a ticket officer standing by the exit door");
                        Thread.Sleep(800);
                        if (torchOn == false)
                            Console.ForegroundColor = ConsoleColor.DarkCyan;
                        else if (torchOn == true)
                            Console.ForegroundColor = ConsoleColor.DarkBlue;
                        WriteLineText("Feel free to explore the upper, middle and lower decks of the ship while we travel.\nPlease let me know when you are ready to disembark.");
                        Thread.Sleep(1000);
                        Console.ForegroundColor = foregroundColour;
                        CurrentMap = 4;
                        CurrentLocation = 14;
                        WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                        LookAround();
                        validChoice = true;
                    }
                    else if (choice == "wait" || choice == "wait for ship")
                    {
                        Console.ForegroundColor = foregroundColour;
                        WriteLineText("The ship departed for Karstbay");
                        Thread.Sleep(1500);
                        Console.Clear();
                        BoatAnimation();
                        CurrentMap = 5;
                        CurrentLocation = 41;
                        WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                        WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                        Thread.Sleep(1000);
                        WriteLineText("Type 'map' to see the current map.");
                        Thread.Sleep(800);
                        LookAround();
                        validChoice = true;
                    }
                    else
                    {
                        Console.CursorTop -= 1;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 1;
                    }
                } while (validChoice == false);
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation + 1].Gateway == true)
            {
                int tempMap = WorldMapCells[CurrentMap][CurrentLocation + 1].newMap;
                int tempLocation = WorldMapCells[CurrentMap][CurrentLocation + 1].newLocation;
                CurrentMap = tempMap;
                CurrentLocation = tempLocation;
                WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "boat")
                {
                    Console.ForegroundColor = foregroundColour;
                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 31 || WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 38)
                    {
                        WriteLineText("You have entered the Middle Deck");
                        Thread.Sleep(1000);
                        WriteLineText("Type 'map' to see the current map.");
                        Thread.Sleep(800);
                        LookAround();
                    }
                    else if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 81)
                    {
                        WriteLineText("You have entered the Lower Deck");
                        Thread.Sleep(1000);
                        WriteLineText("Type 'map' to see the current map.");
                        Thread.Sleep(800);
                        LookAround();
                    }
                    else if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 88)
                    {
                        WriteLineText("You have entered the Upper Deck");
                        Thread.Sleep(1000);
                        WriteLineText("Type 'map' to see the current map.");
                        Thread.Sleep(800);
                        LookAround();
                    }
                }
                else
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                    Thread.Sleep(1000);
                    WriteLineText("Type 'map' to see the current map.");
                    Thread.Sleep(800);
                    LookAround();
                }
            }
            else
            {
                CurrentLocation += 1;
                WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                LookAround();
            }
        }

        public void VisitOrder()
        {
            if (WorldMapCells[CurrentMap][CurrentLocation].mapName == WorldMapCells[6][85].mapName && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == WorldMapCells[6][85].cellLocation && WorldMapCells[6][85].firstVisit == true) //fire
            {
                WorldMapCells[6][85].firstVisit = false;
                if (WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false)
                {
                    WorldMapCells[6][0].visitNumber = WorldMapCells[6][1].visitNumber = WorldMapCells[6][2].visitNumber = WorldMapCells[6][3].visitNumber = WorldMapCells[6][4].visitNumber = WorldMapCells[6][5].visitNumber = WorldMapCells[6][6].visitNumber = WorldMapCells[6][7].visitNumber = WorldMapCells[6][8].visitNumber = WorldMapCells[6][9].visitNumber = WorldMapCells[6][10].visitNumber = WorldMapCells[6][11].visitNumber = WorldMapCells[6][12].visitNumber = WorldMapCells[6][13].visitNumber = WorldMapCells[6][14].visitNumber = WorldMapCells[6][15].visitNumber = WorldMapCells[6][16].visitNumber = WorldMapCells[6][17].visitNumber = WorldMapCells[6][18].visitNumber = WorldMapCells[6][19].visitNumber = WorldMapCells[6][20].visitNumber = WorldMapCells[6][21].visitNumber = WorldMapCells[6][22].visitNumber = WorldMapCells[6][23].visitNumber = WorldMapCells[6][24].visitNumber = WorldMapCells[6][25].visitNumber = WorldMapCells[6][26].visitNumber = WorldMapCells[6][27].visitNumber = WorldMapCells[6][28].visitNumber = WorldMapCells[6][29].visitNumber = WorldMapCells[6][30].visitNumber = WorldMapCells[6][31].visitNumber = WorldMapCells[6][32].visitNumber = WorldMapCells[6][33].visitNumber = WorldMapCells[6][34].visitNumber = WorldMapCells[6][35].visitNumber = WorldMapCells[6][36].visitNumber = WorldMapCells[6][37].visitNumber = WorldMapCells[6][38].visitNumber = WorldMapCells[6][39].visitNumber = WorldMapCells[6][40].visitNumber = WorldMapCells[6][41].visitNumber = WorldMapCells[6][42].visitNumber = WorldMapCells[6][43].visitNumber = WorldMapCells[6][44].visitNumber = WorldMapCells[6][45].visitNumber = WorldMapCells[6][46].visitNumber = WorldMapCells[6][47].visitNumber = WorldMapCells[6][48].visitNumber = WorldMapCells[6][49].visitNumber = WorldMapCells[6][50].visitNumber = WorldMapCells[6][51].visitNumber = WorldMapCells[6][52].visitNumber = WorldMapCells[6][53].visitNumber = WorldMapCells[6][54].visitNumber = WorldMapCells[6][55].visitNumber = WorldMapCells[6][56].visitNumber = WorldMapCells[6][57].visitNumber = WorldMapCells[6][58].visitNumber = WorldMapCells[6][59].visitNumber = WorldMapCells[6][60].visitNumber = WorldMapCells[6][61].visitNumber = WorldMapCells[6][62].visitNumber = WorldMapCells[6][63].visitNumber = WorldMapCells[6][64].visitNumber = WorldMapCells[6][65].visitNumber = WorldMapCells[6][66].visitNumber = WorldMapCells[6][67].visitNumber = WorldMapCells[6][68].visitNumber = WorldMapCells[6][69].visitNumber = WorldMapCells[6][70].visitNumber = WorldMapCells[6][71].visitNumber = WorldMapCells[6][72].visitNumber = WorldMapCells[6][73].visitNumber = WorldMapCells[6][74].visitNumber = WorldMapCells[6][75].visitNumber = WorldMapCells[6][76].visitNumber = WorldMapCells[6][77].visitNumber = WorldMapCells[6][78].visitNumber = WorldMapCells[6][79].visitNumber = WorldMapCells[6][80].visitNumber = WorldMapCells[6][81].visitNumber = WorldMapCells[6][82].visitNumber = WorldMapCells[6][83].visitNumber = WorldMapCells[6][84].visitNumber = WorldMapCells[6][85].visitNumber = WorldMapCells[6][86].visitNumber = WorldMapCells[6][87].visitNumber = WorldMapCells[6][88].visitNumber = WorldMapCells[6][89].visitNumber = WorldMapCells[6][90].visitNumber = WorldMapCells[6][91].visitNumber = WorldMapCells[6][92].visitNumber = WorldMapCells[6][93].visitNumber = WorldMapCells[6][94].visitNumber = WorldMapCells[6][95].visitNumber = WorldMapCells[6][96].visitNumber = WorldMapCells[6][97].visitNumber = WorldMapCells[6][98].visitNumber = WorldMapCells[6][99].visitNumber = 1;
                    WorldMapCells[14][0].visitNumber = WorldMapCells[14][1].visitNumber = WorldMapCells[14][2].visitNumber = WorldMapCells[14][3].visitNumber = WorldMapCells[14][4].visitNumber = WorldMapCells[14][5].visitNumber = WorldMapCells[14][6].visitNumber = WorldMapCells[14][7].visitNumber = WorldMapCells[14][8].visitNumber = WorldMapCells[14][9].visitNumber = WorldMapCells[14][10].visitNumber = WorldMapCells[14][11].visitNumber = WorldMapCells[14][12].visitNumber = WorldMapCells[14][13].visitNumber = WorldMapCells[14][14].visitNumber = WorldMapCells[14][15].visitNumber = WorldMapCells[14][16].visitNumber = WorldMapCells[14][17].visitNumber = WorldMapCells[14][18].visitNumber = WorldMapCells[14][19].visitNumber = WorldMapCells[14][20].visitNumber = WorldMapCells[14][21].visitNumber = WorldMapCells[14][22].visitNumber = WorldMapCells[14][23].visitNumber = WorldMapCells[14][24].visitNumber = WorldMapCells[14][25].visitNumber = WorldMapCells[14][26].visitNumber = WorldMapCells[14][27].visitNumber = WorldMapCells[14][28].visitNumber = WorldMapCells[14][29].visitNumber = WorldMapCells[14][30].visitNumber = WorldMapCells[14][31].visitNumber = WorldMapCells[14][32].visitNumber = WorldMapCells[14][33].visitNumber = WorldMapCells[14][34].visitNumber = WorldMapCells[14][35].visitNumber = WorldMapCells[14][36].visitNumber = WorldMapCells[14][37].visitNumber = WorldMapCells[14][38].visitNumber = WorldMapCells[14][39].visitNumber = WorldMapCells[14][40].visitNumber = WorldMapCells[14][41].visitNumber = WorldMapCells[14][42].visitNumber = WorldMapCells[14][43].visitNumber = WorldMapCells[14][44].visitNumber = WorldMapCells[14][45].visitNumber = WorldMapCells[14][46].visitNumber = WorldMapCells[14][47].visitNumber = WorldMapCells[14][48].visitNumber = WorldMapCells[14][49].visitNumber = WorldMapCells[14][50].visitNumber = WorldMapCells[14][51].visitNumber = WorldMapCells[14][52].visitNumber = WorldMapCells[14][53].visitNumber = WorldMapCells[14][54].visitNumber = WorldMapCells[14][55].visitNumber = WorldMapCells[14][56].visitNumber = WorldMapCells[14][57].visitNumber = WorldMapCells[14][58].visitNumber = WorldMapCells[14][59].visitNumber = WorldMapCells[14][60].visitNumber = WorldMapCells[14][61].visitNumber = WorldMapCells[14][62].visitNumber = WorldMapCells[14][63].visitNumber = WorldMapCells[14][64].visitNumber = WorldMapCells[14][65].visitNumber = WorldMapCells[14][66].visitNumber = WorldMapCells[14][67].visitNumber = WorldMapCells[14][68].visitNumber = WorldMapCells[14][69].visitNumber = WorldMapCells[14][70].visitNumber = WorldMapCells[14][71].visitNumber = WorldMapCells[14][72].visitNumber = WorldMapCells[14][73].visitNumber = WorldMapCells[14][74].visitNumber = WorldMapCells[14][75].visitNumber = WorldMapCells[14][76].visitNumber = WorldMapCells[14][77].visitNumber = WorldMapCells[14][78].visitNumber = WorldMapCells[14][79].visitNumber = WorldMapCells[14][80].visitNumber = WorldMapCells[14][81].visitNumber = WorldMapCells[14][82].visitNumber = WorldMapCells[14][83].visitNumber = WorldMapCells[14][84].visitNumber = WorldMapCells[14][85].visitNumber = WorldMapCells[14][86].visitNumber = WorldMapCells[14][87].visitNumber = WorldMapCells[14][88].visitNumber = WorldMapCells[14][89].visitNumber = WorldMapCells[14][90].visitNumber = WorldMapCells[14][91].visitNumber = WorldMapCells[14][92].visitNumber = WorldMapCells[14][93].visitNumber = WorldMapCells[14][94].visitNumber = WorldMapCells[14][95].visitNumber = WorldMapCells[14][96].visitNumber = WorldMapCells[14][97].visitNumber = WorldMapCells[14][98].visitNumber = WorldMapCells[14][99].visitNumber = 1;
                    WorldMapCells[15][0].visitNumber = WorldMapCells[15][1].visitNumber = WorldMapCells[15][2].visitNumber = WorldMapCells[15][3].visitNumber = WorldMapCells[15][4].visitNumber = WorldMapCells[15][5].visitNumber = WorldMapCells[15][6].visitNumber = WorldMapCells[15][7].visitNumber = WorldMapCells[15][8].visitNumber = WorldMapCells[15][9].visitNumber = WorldMapCells[15][10].visitNumber = WorldMapCells[15][11].visitNumber = WorldMapCells[15][12].visitNumber = WorldMapCells[15][13].visitNumber = WorldMapCells[15][14].visitNumber = WorldMapCells[15][15].visitNumber = WorldMapCells[15][16].visitNumber = WorldMapCells[15][17].visitNumber = WorldMapCells[15][18].visitNumber = WorldMapCells[15][19].visitNumber = WorldMapCells[15][20].visitNumber = WorldMapCells[15][21].visitNumber = WorldMapCells[15][22].visitNumber = WorldMapCells[15][23].visitNumber = WorldMapCells[15][24].visitNumber = WorldMapCells[15][25].visitNumber = WorldMapCells[15][26].visitNumber = WorldMapCells[15][27].visitNumber = WorldMapCells[15][28].visitNumber = WorldMapCells[15][29].visitNumber = WorldMapCells[15][30].visitNumber = WorldMapCells[15][31].visitNumber = WorldMapCells[15][32].visitNumber = WorldMapCells[15][33].visitNumber = WorldMapCells[15][34].visitNumber = WorldMapCells[15][35].visitNumber = WorldMapCells[15][36].visitNumber = WorldMapCells[15][37].visitNumber = WorldMapCells[15][38].visitNumber = WorldMapCells[15][39].visitNumber = WorldMapCells[15][40].visitNumber = WorldMapCells[15][41].visitNumber = WorldMapCells[15][42].visitNumber = WorldMapCells[15][43].visitNumber = WorldMapCells[15][44].visitNumber = WorldMapCells[15][45].visitNumber = WorldMapCells[15][46].visitNumber = WorldMapCells[15][47].visitNumber = WorldMapCells[15][48].visitNumber = WorldMapCells[15][49].visitNumber = WorldMapCells[15][50].visitNumber = WorldMapCells[15][51].visitNumber = WorldMapCells[15][52].visitNumber = WorldMapCells[15][53].visitNumber = WorldMapCells[15][54].visitNumber = WorldMapCells[15][55].visitNumber = WorldMapCells[15][56].visitNumber = WorldMapCells[15][57].visitNumber = WorldMapCells[15][58].visitNumber = WorldMapCells[15][59].visitNumber = WorldMapCells[15][60].visitNumber = WorldMapCells[15][61].visitNumber = WorldMapCells[15][62].visitNumber = WorldMapCells[15][63].visitNumber = WorldMapCells[15][64].visitNumber = WorldMapCells[15][65].visitNumber = WorldMapCells[15][66].visitNumber = WorldMapCells[15][67].visitNumber = WorldMapCells[15][68].visitNumber = WorldMapCells[15][69].visitNumber = WorldMapCells[15][70].visitNumber = WorldMapCells[15][71].visitNumber = WorldMapCells[15][72].visitNumber = WorldMapCells[15][73].visitNumber = WorldMapCells[15][74].visitNumber = WorldMapCells[15][75].visitNumber = WorldMapCells[15][76].visitNumber = WorldMapCells[15][77].visitNumber = WorldMapCells[15][78].visitNumber = WorldMapCells[15][79].visitNumber = WorldMapCells[15][80].visitNumber = WorldMapCells[15][81].visitNumber = WorldMapCells[15][82].visitNumber = WorldMapCells[15][83].visitNumber = WorldMapCells[15][84].visitNumber = WorldMapCells[15][85].visitNumber = WorldMapCells[15][86].visitNumber = WorldMapCells[15][87].visitNumber = WorldMapCells[15][88].visitNumber = WorldMapCells[15][89].visitNumber = WorldMapCells[15][90].visitNumber = WorldMapCells[15][91].visitNumber = WorldMapCells[15][92].visitNumber = WorldMapCells[15][93].visitNumber = WorldMapCells[15][94].visitNumber = WorldMapCells[15][95].visitNumber = WorldMapCells[15][96].visitNumber = WorldMapCells[15][97].visitNumber = WorldMapCells[15][98].visitNumber = WorldMapCells[15][99].visitNumber = 1;
                }
                else if (WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false)
                {
                    WorldMapCells[6][0].visitNumber = WorldMapCells[6][1].visitNumber = WorldMapCells[6][2].visitNumber = WorldMapCells[6][3].visitNumber = WorldMapCells[6][4].visitNumber = WorldMapCells[6][5].visitNumber = WorldMapCells[6][6].visitNumber = WorldMapCells[6][7].visitNumber = WorldMapCells[6][8].visitNumber = WorldMapCells[6][9].visitNumber = WorldMapCells[6][10].visitNumber = WorldMapCells[6][11].visitNumber = WorldMapCells[6][12].visitNumber = WorldMapCells[6][13].visitNumber = WorldMapCells[6][14].visitNumber = WorldMapCells[6][15].visitNumber = WorldMapCells[6][16].visitNumber = WorldMapCells[6][17].visitNumber = WorldMapCells[6][18].visitNumber = WorldMapCells[6][19].visitNumber = WorldMapCells[6][20].visitNumber = WorldMapCells[6][21].visitNumber = WorldMapCells[6][22].visitNumber = WorldMapCells[6][23].visitNumber = WorldMapCells[6][24].visitNumber = WorldMapCells[6][25].visitNumber = WorldMapCells[6][26].visitNumber = WorldMapCells[6][27].visitNumber = WorldMapCells[6][28].visitNumber = WorldMapCells[6][29].visitNumber = WorldMapCells[6][30].visitNumber = WorldMapCells[6][31].visitNumber = WorldMapCells[6][32].visitNumber = WorldMapCells[6][33].visitNumber = WorldMapCells[6][34].visitNumber = WorldMapCells[6][35].visitNumber = WorldMapCells[6][36].visitNumber = WorldMapCells[6][37].visitNumber = WorldMapCells[6][38].visitNumber = WorldMapCells[6][39].visitNumber = WorldMapCells[6][40].visitNumber = WorldMapCells[6][41].visitNumber = WorldMapCells[6][42].visitNumber = WorldMapCells[6][43].visitNumber = WorldMapCells[6][44].visitNumber = WorldMapCells[6][45].visitNumber = WorldMapCells[6][46].visitNumber = WorldMapCells[6][47].visitNumber = WorldMapCells[6][48].visitNumber = WorldMapCells[6][49].visitNumber = WorldMapCells[6][50].visitNumber = WorldMapCells[6][51].visitNumber = WorldMapCells[6][52].visitNumber = WorldMapCells[6][53].visitNumber = WorldMapCells[6][54].visitNumber = WorldMapCells[6][55].visitNumber = WorldMapCells[6][56].visitNumber = WorldMapCells[6][57].visitNumber = WorldMapCells[6][58].visitNumber = WorldMapCells[6][59].visitNumber = WorldMapCells[6][60].visitNumber = WorldMapCells[6][61].visitNumber = WorldMapCells[6][62].visitNumber = WorldMapCells[6][63].visitNumber = WorldMapCells[6][64].visitNumber = WorldMapCells[6][65].visitNumber = WorldMapCells[6][66].visitNumber = WorldMapCells[6][67].visitNumber = WorldMapCells[6][68].visitNumber = WorldMapCells[6][69].visitNumber = WorldMapCells[6][70].visitNumber = WorldMapCells[6][71].visitNumber = WorldMapCells[6][72].visitNumber = WorldMapCells[6][73].visitNumber = WorldMapCells[6][74].visitNumber = WorldMapCells[6][75].visitNumber = WorldMapCells[6][76].visitNumber = WorldMapCells[6][77].visitNumber = WorldMapCells[6][78].visitNumber = WorldMapCells[6][79].visitNumber = WorldMapCells[6][80].visitNumber = WorldMapCells[6][81].visitNumber = WorldMapCells[6][82].visitNumber = WorldMapCells[6][83].visitNumber = WorldMapCells[6][84].visitNumber = WorldMapCells[6][85].visitNumber = WorldMapCells[6][86].visitNumber = WorldMapCells[6][87].visitNumber = WorldMapCells[6][88].visitNumber = WorldMapCells[6][89].visitNumber = WorldMapCells[6][90].visitNumber = WorldMapCells[6][91].visitNumber = WorldMapCells[6][92].visitNumber = WorldMapCells[6][93].visitNumber = WorldMapCells[6][94].visitNumber = WorldMapCells[6][95].visitNumber = WorldMapCells[6][96].visitNumber = WorldMapCells[6][97].visitNumber = WorldMapCells[6][98].visitNumber = WorldMapCells[6][99].visitNumber = 2;
                    WorldMapCells[14][0].visitNumber = WorldMapCells[14][1].visitNumber = WorldMapCells[14][2].visitNumber = WorldMapCells[14][3].visitNumber = WorldMapCells[14][4].visitNumber = WorldMapCells[14][5].visitNumber = WorldMapCells[14][6].visitNumber = WorldMapCells[14][7].visitNumber = WorldMapCells[14][8].visitNumber = WorldMapCells[14][9].visitNumber = WorldMapCells[14][10].visitNumber = WorldMapCells[14][11].visitNumber = WorldMapCells[14][12].visitNumber = WorldMapCells[14][13].visitNumber = WorldMapCells[14][14].visitNumber = WorldMapCells[14][15].visitNumber = WorldMapCells[14][16].visitNumber = WorldMapCells[14][17].visitNumber = WorldMapCells[14][18].visitNumber = WorldMapCells[14][19].visitNumber = WorldMapCells[14][20].visitNumber = WorldMapCells[14][21].visitNumber = WorldMapCells[14][22].visitNumber = WorldMapCells[14][23].visitNumber = WorldMapCells[14][24].visitNumber = WorldMapCells[14][25].visitNumber = WorldMapCells[14][26].visitNumber = WorldMapCells[14][27].visitNumber = WorldMapCells[14][28].visitNumber = WorldMapCells[14][29].visitNumber = WorldMapCells[14][30].visitNumber = WorldMapCells[14][31].visitNumber = WorldMapCells[14][32].visitNumber = WorldMapCells[14][33].visitNumber = WorldMapCells[14][34].visitNumber = WorldMapCells[14][35].visitNumber = WorldMapCells[14][36].visitNumber = WorldMapCells[14][37].visitNumber = WorldMapCells[14][38].visitNumber = WorldMapCells[14][39].visitNumber = WorldMapCells[14][40].visitNumber = WorldMapCells[14][41].visitNumber = WorldMapCells[14][42].visitNumber = WorldMapCells[14][43].visitNumber = WorldMapCells[14][44].visitNumber = WorldMapCells[14][45].visitNumber = WorldMapCells[14][46].visitNumber = WorldMapCells[14][47].visitNumber = WorldMapCells[14][48].visitNumber = WorldMapCells[14][49].visitNumber = WorldMapCells[14][50].visitNumber = WorldMapCells[14][51].visitNumber = WorldMapCells[14][52].visitNumber = WorldMapCells[14][53].visitNumber = WorldMapCells[14][54].visitNumber = WorldMapCells[14][55].visitNumber = WorldMapCells[14][56].visitNumber = WorldMapCells[14][57].visitNumber = WorldMapCells[14][58].visitNumber = WorldMapCells[14][59].visitNumber = WorldMapCells[14][60].visitNumber = WorldMapCells[14][61].visitNumber = WorldMapCells[14][62].visitNumber = WorldMapCells[14][63].visitNumber = WorldMapCells[14][64].visitNumber = WorldMapCells[14][65].visitNumber = WorldMapCells[14][66].visitNumber = WorldMapCells[14][67].visitNumber = WorldMapCells[14][68].visitNumber = WorldMapCells[14][69].visitNumber = WorldMapCells[14][70].visitNumber = WorldMapCells[14][71].visitNumber = WorldMapCells[14][72].visitNumber = WorldMapCells[14][73].visitNumber = WorldMapCells[14][74].visitNumber = WorldMapCells[14][75].visitNumber = WorldMapCells[14][76].visitNumber = WorldMapCells[14][77].visitNumber = WorldMapCells[14][78].visitNumber = WorldMapCells[14][79].visitNumber = WorldMapCells[14][80].visitNumber = WorldMapCells[14][81].visitNumber = WorldMapCells[14][82].visitNumber = WorldMapCells[14][83].visitNumber = WorldMapCells[14][84].visitNumber = WorldMapCells[14][85].visitNumber = WorldMapCells[14][86].visitNumber = WorldMapCells[14][87].visitNumber = WorldMapCells[14][88].visitNumber = WorldMapCells[14][89].visitNumber = WorldMapCells[14][90].visitNumber = WorldMapCells[14][91].visitNumber = WorldMapCells[14][92].visitNumber = WorldMapCells[14][93].visitNumber = WorldMapCells[14][94].visitNumber = WorldMapCells[14][95].visitNumber = WorldMapCells[14][96].visitNumber = WorldMapCells[14][97].visitNumber = WorldMapCells[14][98].visitNumber = WorldMapCells[14][99].visitNumber = 2;
                    WorldMapCells[15][0].visitNumber = WorldMapCells[15][1].visitNumber = WorldMapCells[15][2].visitNumber = WorldMapCells[15][3].visitNumber = WorldMapCells[15][4].visitNumber = WorldMapCells[15][5].visitNumber = WorldMapCells[15][6].visitNumber = WorldMapCells[15][7].visitNumber = WorldMapCells[15][8].visitNumber = WorldMapCells[15][9].visitNumber = WorldMapCells[15][10].visitNumber = WorldMapCells[15][11].visitNumber = WorldMapCells[15][12].visitNumber = WorldMapCells[15][13].visitNumber = WorldMapCells[15][14].visitNumber = WorldMapCells[15][15].visitNumber = WorldMapCells[15][16].visitNumber = WorldMapCells[15][17].visitNumber = WorldMapCells[15][18].visitNumber = WorldMapCells[15][19].visitNumber = WorldMapCells[15][20].visitNumber = WorldMapCells[15][21].visitNumber = WorldMapCells[15][22].visitNumber = WorldMapCells[15][23].visitNumber = WorldMapCells[15][24].visitNumber = WorldMapCells[15][25].visitNumber = WorldMapCells[15][26].visitNumber = WorldMapCells[15][27].visitNumber = WorldMapCells[15][28].visitNumber = WorldMapCells[15][29].visitNumber = WorldMapCells[15][30].visitNumber = WorldMapCells[15][31].visitNumber = WorldMapCells[15][32].visitNumber = WorldMapCells[15][33].visitNumber = WorldMapCells[15][34].visitNumber = WorldMapCells[15][35].visitNumber = WorldMapCells[15][36].visitNumber = WorldMapCells[15][37].visitNumber = WorldMapCells[15][38].visitNumber = WorldMapCells[15][39].visitNumber = WorldMapCells[15][40].visitNumber = WorldMapCells[15][41].visitNumber = WorldMapCells[15][42].visitNumber = WorldMapCells[15][43].visitNumber = WorldMapCells[15][44].visitNumber = WorldMapCells[15][45].visitNumber = WorldMapCells[15][46].visitNumber = WorldMapCells[15][47].visitNumber = WorldMapCells[15][48].visitNumber = WorldMapCells[15][49].visitNumber = WorldMapCells[15][50].visitNumber = WorldMapCells[15][51].visitNumber = WorldMapCells[15][52].visitNumber = WorldMapCells[15][53].visitNumber = WorldMapCells[15][54].visitNumber = WorldMapCells[15][55].visitNumber = WorldMapCells[15][56].visitNumber = WorldMapCells[15][57].visitNumber = WorldMapCells[15][58].visitNumber = WorldMapCells[15][59].visitNumber = WorldMapCells[15][60].visitNumber = WorldMapCells[15][61].visitNumber = WorldMapCells[15][62].visitNumber = WorldMapCells[15][63].visitNumber = WorldMapCells[15][64].visitNumber = WorldMapCells[15][65].visitNumber = WorldMapCells[15][66].visitNumber = WorldMapCells[15][67].visitNumber = WorldMapCells[15][68].visitNumber = WorldMapCells[15][69].visitNumber = WorldMapCells[15][70].visitNumber = WorldMapCells[15][71].visitNumber = WorldMapCells[15][72].visitNumber = WorldMapCells[15][73].visitNumber = WorldMapCells[15][74].visitNumber = WorldMapCells[15][75].visitNumber = WorldMapCells[15][76].visitNumber = WorldMapCells[15][77].visitNumber = WorldMapCells[15][78].visitNumber = WorldMapCells[15][79].visitNumber = WorldMapCells[15][80].visitNumber = WorldMapCells[15][81].visitNumber = WorldMapCells[15][82].visitNumber = WorldMapCells[15][83].visitNumber = WorldMapCells[15][84].visitNumber = WorldMapCells[15][85].visitNumber = WorldMapCells[15][86].visitNumber = WorldMapCells[15][87].visitNumber = WorldMapCells[15][88].visitNumber = WorldMapCells[15][89].visitNumber = WorldMapCells[15][90].visitNumber = WorldMapCells[15][91].visitNumber = WorldMapCells[15][92].visitNumber = WorldMapCells[15][93].visitNumber = WorldMapCells[15][94].visitNumber = WorldMapCells[15][95].visitNumber = WorldMapCells[15][96].visitNumber = WorldMapCells[15][97].visitNumber = WorldMapCells[15][98].visitNumber = WorldMapCells[15][99].visitNumber = 2;
                }
                else if (WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true)
                {
                    WorldMapCells[6][0].visitNumber = WorldMapCells[6][1].visitNumber = WorldMapCells[6][2].visitNumber = WorldMapCells[6][3].visitNumber = WorldMapCells[6][4].visitNumber = WorldMapCells[6][5].visitNumber = WorldMapCells[6][6].visitNumber = WorldMapCells[6][7].visitNumber = WorldMapCells[6][8].visitNumber = WorldMapCells[6][9].visitNumber = WorldMapCells[6][10].visitNumber = WorldMapCells[6][11].visitNumber = WorldMapCells[6][12].visitNumber = WorldMapCells[6][13].visitNumber = WorldMapCells[6][14].visitNumber = WorldMapCells[6][15].visitNumber = WorldMapCells[6][16].visitNumber = WorldMapCells[6][17].visitNumber = WorldMapCells[6][18].visitNumber = WorldMapCells[6][19].visitNumber = WorldMapCells[6][20].visitNumber = WorldMapCells[6][21].visitNumber = WorldMapCells[6][22].visitNumber = WorldMapCells[6][23].visitNumber = WorldMapCells[6][24].visitNumber = WorldMapCells[6][25].visitNumber = WorldMapCells[6][26].visitNumber = WorldMapCells[6][27].visitNumber = WorldMapCells[6][28].visitNumber = WorldMapCells[6][29].visitNumber = WorldMapCells[6][30].visitNumber = WorldMapCells[6][31].visitNumber = WorldMapCells[6][32].visitNumber = WorldMapCells[6][33].visitNumber = WorldMapCells[6][34].visitNumber = WorldMapCells[6][35].visitNumber = WorldMapCells[6][36].visitNumber = WorldMapCells[6][37].visitNumber = WorldMapCells[6][38].visitNumber = WorldMapCells[6][39].visitNumber = WorldMapCells[6][40].visitNumber = WorldMapCells[6][41].visitNumber = WorldMapCells[6][42].visitNumber = WorldMapCells[6][43].visitNumber = WorldMapCells[6][44].visitNumber = WorldMapCells[6][45].visitNumber = WorldMapCells[6][46].visitNumber = WorldMapCells[6][47].visitNumber = WorldMapCells[6][48].visitNumber = WorldMapCells[6][49].visitNumber = WorldMapCells[6][50].visitNumber = WorldMapCells[6][51].visitNumber = WorldMapCells[6][52].visitNumber = WorldMapCells[6][53].visitNumber = WorldMapCells[6][54].visitNumber = WorldMapCells[6][55].visitNumber = WorldMapCells[6][56].visitNumber = WorldMapCells[6][57].visitNumber = WorldMapCells[6][58].visitNumber = WorldMapCells[6][59].visitNumber = WorldMapCells[6][60].visitNumber = WorldMapCells[6][61].visitNumber = WorldMapCells[6][62].visitNumber = WorldMapCells[6][63].visitNumber = WorldMapCells[6][64].visitNumber = WorldMapCells[6][65].visitNumber = WorldMapCells[6][66].visitNumber = WorldMapCells[6][67].visitNumber = WorldMapCells[6][68].visitNumber = WorldMapCells[6][69].visitNumber = WorldMapCells[6][70].visitNumber = WorldMapCells[6][71].visitNumber = WorldMapCells[6][72].visitNumber = WorldMapCells[6][73].visitNumber = WorldMapCells[6][74].visitNumber = WorldMapCells[6][75].visitNumber = WorldMapCells[6][76].visitNumber = WorldMapCells[6][77].visitNumber = WorldMapCells[6][78].visitNumber = WorldMapCells[6][79].visitNumber = WorldMapCells[6][80].visitNumber = WorldMapCells[6][81].visitNumber = WorldMapCells[6][82].visitNumber = WorldMapCells[6][83].visitNumber = WorldMapCells[6][84].visitNumber = WorldMapCells[6][85].visitNumber = WorldMapCells[6][86].visitNumber = WorldMapCells[6][87].visitNumber = WorldMapCells[6][88].visitNumber = WorldMapCells[6][89].visitNumber = WorldMapCells[6][90].visitNumber = WorldMapCells[6][91].visitNumber = WorldMapCells[6][92].visitNumber = WorldMapCells[6][93].visitNumber = WorldMapCells[6][94].visitNumber = WorldMapCells[6][95].visitNumber = WorldMapCells[6][96].visitNumber = WorldMapCells[6][97].visitNumber = WorldMapCells[6][98].visitNumber = WorldMapCells[6][99].visitNumber = 3;
                    WorldMapCells[14][0].visitNumber = WorldMapCells[14][1].visitNumber = WorldMapCells[14][2].visitNumber = WorldMapCells[14][3].visitNumber = WorldMapCells[14][4].visitNumber = WorldMapCells[14][5].visitNumber = WorldMapCells[14][6].visitNumber = WorldMapCells[14][7].visitNumber = WorldMapCells[14][8].visitNumber = WorldMapCells[14][9].visitNumber = WorldMapCells[14][10].visitNumber = WorldMapCells[14][11].visitNumber = WorldMapCells[14][12].visitNumber = WorldMapCells[14][13].visitNumber = WorldMapCells[14][14].visitNumber = WorldMapCells[14][15].visitNumber = WorldMapCells[14][16].visitNumber = WorldMapCells[14][17].visitNumber = WorldMapCells[14][18].visitNumber = WorldMapCells[14][19].visitNumber = WorldMapCells[14][20].visitNumber = WorldMapCells[14][21].visitNumber = WorldMapCells[14][22].visitNumber = WorldMapCells[14][23].visitNumber = WorldMapCells[14][24].visitNumber = WorldMapCells[14][25].visitNumber = WorldMapCells[14][26].visitNumber = WorldMapCells[14][27].visitNumber = WorldMapCells[14][28].visitNumber = WorldMapCells[14][29].visitNumber = WorldMapCells[14][30].visitNumber = WorldMapCells[14][31].visitNumber = WorldMapCells[14][32].visitNumber = WorldMapCells[14][33].visitNumber = WorldMapCells[14][34].visitNumber = WorldMapCells[14][35].visitNumber = WorldMapCells[14][36].visitNumber = WorldMapCells[14][37].visitNumber = WorldMapCells[14][38].visitNumber = WorldMapCells[14][39].visitNumber = WorldMapCells[14][40].visitNumber = WorldMapCells[14][41].visitNumber = WorldMapCells[14][42].visitNumber = WorldMapCells[14][43].visitNumber = WorldMapCells[14][44].visitNumber = WorldMapCells[14][45].visitNumber = WorldMapCells[14][46].visitNumber = WorldMapCells[14][47].visitNumber = WorldMapCells[14][48].visitNumber = WorldMapCells[14][49].visitNumber = WorldMapCells[14][50].visitNumber = WorldMapCells[14][51].visitNumber = WorldMapCells[14][52].visitNumber = WorldMapCells[14][53].visitNumber = WorldMapCells[14][54].visitNumber = WorldMapCells[14][55].visitNumber = WorldMapCells[14][56].visitNumber = WorldMapCells[14][57].visitNumber = WorldMapCells[14][58].visitNumber = WorldMapCells[14][59].visitNumber = WorldMapCells[14][60].visitNumber = WorldMapCells[14][61].visitNumber = WorldMapCells[14][62].visitNumber = WorldMapCells[14][63].visitNumber = WorldMapCells[14][64].visitNumber = WorldMapCells[14][65].visitNumber = WorldMapCells[14][66].visitNumber = WorldMapCells[14][67].visitNumber = WorldMapCells[14][68].visitNumber = WorldMapCells[14][69].visitNumber = WorldMapCells[14][70].visitNumber = WorldMapCells[14][71].visitNumber = WorldMapCells[14][72].visitNumber = WorldMapCells[14][73].visitNumber = WorldMapCells[14][74].visitNumber = WorldMapCells[14][75].visitNumber = WorldMapCells[14][76].visitNumber = WorldMapCells[14][77].visitNumber = WorldMapCells[14][78].visitNumber = WorldMapCells[14][79].visitNumber = WorldMapCells[14][80].visitNumber = WorldMapCells[14][81].visitNumber = WorldMapCells[14][82].visitNumber = WorldMapCells[14][83].visitNumber = WorldMapCells[14][84].visitNumber = WorldMapCells[14][85].visitNumber = WorldMapCells[14][86].visitNumber = WorldMapCells[14][87].visitNumber = WorldMapCells[14][88].visitNumber = WorldMapCells[14][89].visitNumber = WorldMapCells[14][90].visitNumber = WorldMapCells[14][91].visitNumber = WorldMapCells[14][92].visitNumber = WorldMapCells[14][93].visitNumber = WorldMapCells[14][94].visitNumber = WorldMapCells[14][95].visitNumber = WorldMapCells[14][96].visitNumber = WorldMapCells[14][97].visitNumber = WorldMapCells[14][98].visitNumber = WorldMapCells[14][99].visitNumber = 3;
                    WorldMapCells[15][0].visitNumber = WorldMapCells[15][1].visitNumber = WorldMapCells[15][2].visitNumber = WorldMapCells[15][3].visitNumber = WorldMapCells[15][4].visitNumber = WorldMapCells[15][5].visitNumber = WorldMapCells[15][6].visitNumber = WorldMapCells[15][7].visitNumber = WorldMapCells[15][8].visitNumber = WorldMapCells[15][9].visitNumber = WorldMapCells[15][10].visitNumber = WorldMapCells[15][11].visitNumber = WorldMapCells[15][12].visitNumber = WorldMapCells[15][13].visitNumber = WorldMapCells[15][14].visitNumber = WorldMapCells[15][15].visitNumber = WorldMapCells[15][16].visitNumber = WorldMapCells[15][17].visitNumber = WorldMapCells[15][18].visitNumber = WorldMapCells[15][19].visitNumber = WorldMapCells[15][20].visitNumber = WorldMapCells[15][21].visitNumber = WorldMapCells[15][22].visitNumber = WorldMapCells[15][23].visitNumber = WorldMapCells[15][24].visitNumber = WorldMapCells[15][25].visitNumber = WorldMapCells[15][26].visitNumber = WorldMapCells[15][27].visitNumber = WorldMapCells[15][28].visitNumber = WorldMapCells[15][29].visitNumber = WorldMapCells[15][30].visitNumber = WorldMapCells[15][31].visitNumber = WorldMapCells[15][32].visitNumber = WorldMapCells[15][33].visitNumber = WorldMapCells[15][34].visitNumber = WorldMapCells[15][35].visitNumber = WorldMapCells[15][36].visitNumber = WorldMapCells[15][37].visitNumber = WorldMapCells[15][38].visitNumber = WorldMapCells[15][39].visitNumber = WorldMapCells[15][40].visitNumber = WorldMapCells[15][41].visitNumber = WorldMapCells[15][42].visitNumber = WorldMapCells[15][43].visitNumber = WorldMapCells[15][44].visitNumber = WorldMapCells[15][45].visitNumber = WorldMapCells[15][46].visitNumber = WorldMapCells[15][47].visitNumber = WorldMapCells[15][48].visitNumber = WorldMapCells[15][49].visitNumber = WorldMapCells[15][50].visitNumber = WorldMapCells[15][51].visitNumber = WorldMapCells[15][52].visitNumber = WorldMapCells[15][53].visitNumber = WorldMapCells[15][54].visitNumber = WorldMapCells[15][55].visitNumber = WorldMapCells[15][56].visitNumber = WorldMapCells[15][57].visitNumber = WorldMapCells[15][58].visitNumber = WorldMapCells[15][59].visitNumber = WorldMapCells[15][60].visitNumber = WorldMapCells[15][61].visitNumber = WorldMapCells[15][62].visitNumber = WorldMapCells[15][63].visitNumber = WorldMapCells[15][64].visitNumber = WorldMapCells[15][65].visitNumber = WorldMapCells[15][66].visitNumber = WorldMapCells[15][67].visitNumber = WorldMapCells[15][68].visitNumber = WorldMapCells[15][69].visitNumber = WorldMapCells[15][70].visitNumber = WorldMapCells[15][71].visitNumber = WorldMapCells[15][72].visitNumber = WorldMapCells[15][73].visitNumber = WorldMapCells[15][74].visitNumber = WorldMapCells[15][75].visitNumber = WorldMapCells[15][76].visitNumber = WorldMapCells[15][77].visitNumber = WorldMapCells[15][78].visitNumber = WorldMapCells[15][79].visitNumber = WorldMapCells[15][80].visitNumber = WorldMapCells[15][81].visitNumber = WorldMapCells[15][82].visitNumber = WorldMapCells[15][83].visitNumber = WorldMapCells[15][84].visitNumber = WorldMapCells[15][85].visitNumber = WorldMapCells[15][86].visitNumber = WorldMapCells[15][87].visitNumber = WorldMapCells[15][88].visitNumber = WorldMapCells[15][89].visitNumber = WorldMapCells[15][90].visitNumber = WorldMapCells[15][91].visitNumber = WorldMapCells[15][92].visitNumber = WorldMapCells[15][93].visitNumber = WorldMapCells[15][94].visitNumber = WorldMapCells[15][95].visitNumber = WorldMapCells[15][96].visitNumber = WorldMapCells[15][97].visitNumber = WorldMapCells[15][98].visitNumber = WorldMapCells[15][99].visitNumber = 3;
                }
                else if (WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true)
                {
                    WorldMapCells[6][0].visitNumber = WorldMapCells[6][1].visitNumber = WorldMapCells[6][2].visitNumber = WorldMapCells[6][3].visitNumber = WorldMapCells[6][4].visitNumber = WorldMapCells[6][5].visitNumber = WorldMapCells[6][6].visitNumber = WorldMapCells[6][7].visitNumber = WorldMapCells[6][8].visitNumber = WorldMapCells[6][9].visitNumber = WorldMapCells[6][10].visitNumber = WorldMapCells[6][11].visitNumber = WorldMapCells[6][12].visitNumber = WorldMapCells[6][13].visitNumber = WorldMapCells[6][14].visitNumber = WorldMapCells[6][15].visitNumber = WorldMapCells[6][16].visitNumber = WorldMapCells[6][17].visitNumber = WorldMapCells[6][18].visitNumber = WorldMapCells[6][19].visitNumber = WorldMapCells[6][20].visitNumber = WorldMapCells[6][21].visitNumber = WorldMapCells[6][22].visitNumber = WorldMapCells[6][23].visitNumber = WorldMapCells[6][24].visitNumber = WorldMapCells[6][25].visitNumber = WorldMapCells[6][26].visitNumber = WorldMapCells[6][27].visitNumber = WorldMapCells[6][28].visitNumber = WorldMapCells[6][29].visitNumber = WorldMapCells[6][30].visitNumber = WorldMapCells[6][31].visitNumber = WorldMapCells[6][32].visitNumber = WorldMapCells[6][33].visitNumber = WorldMapCells[6][34].visitNumber = WorldMapCells[6][35].visitNumber = WorldMapCells[6][36].visitNumber = WorldMapCells[6][37].visitNumber = WorldMapCells[6][38].visitNumber = WorldMapCells[6][39].visitNumber = WorldMapCells[6][40].visitNumber = WorldMapCells[6][41].visitNumber = WorldMapCells[6][42].visitNumber = WorldMapCells[6][43].visitNumber = WorldMapCells[6][44].visitNumber = WorldMapCells[6][45].visitNumber = WorldMapCells[6][46].visitNumber = WorldMapCells[6][47].visitNumber = WorldMapCells[6][48].visitNumber = WorldMapCells[6][49].visitNumber = WorldMapCells[6][50].visitNumber = WorldMapCells[6][51].visitNumber = WorldMapCells[6][52].visitNumber = WorldMapCells[6][53].visitNumber = WorldMapCells[6][54].visitNumber = WorldMapCells[6][55].visitNumber = WorldMapCells[6][56].visitNumber = WorldMapCells[6][57].visitNumber = WorldMapCells[6][58].visitNumber = WorldMapCells[6][59].visitNumber = WorldMapCells[6][60].visitNumber = WorldMapCells[6][61].visitNumber = WorldMapCells[6][62].visitNumber = WorldMapCells[6][63].visitNumber = WorldMapCells[6][64].visitNumber = WorldMapCells[6][65].visitNumber = WorldMapCells[6][66].visitNumber = WorldMapCells[6][67].visitNumber = WorldMapCells[6][68].visitNumber = WorldMapCells[6][69].visitNumber = WorldMapCells[6][70].visitNumber = WorldMapCells[6][71].visitNumber = WorldMapCells[6][72].visitNumber = WorldMapCells[6][73].visitNumber = WorldMapCells[6][74].visitNumber = WorldMapCells[6][75].visitNumber = WorldMapCells[6][76].visitNumber = WorldMapCells[6][77].visitNumber = WorldMapCells[6][78].visitNumber = WorldMapCells[6][79].visitNumber = WorldMapCells[6][80].visitNumber = WorldMapCells[6][81].visitNumber = WorldMapCells[6][82].visitNumber = WorldMapCells[6][83].visitNumber = WorldMapCells[6][84].visitNumber = WorldMapCells[6][85].visitNumber = WorldMapCells[6][86].visitNumber = WorldMapCells[6][87].visitNumber = WorldMapCells[6][88].visitNumber = WorldMapCells[6][89].visitNumber = WorldMapCells[6][90].visitNumber = WorldMapCells[6][91].visitNumber = WorldMapCells[6][92].visitNumber = WorldMapCells[6][93].visitNumber = WorldMapCells[6][94].visitNumber = WorldMapCells[6][95].visitNumber = WorldMapCells[6][96].visitNumber = WorldMapCells[6][97].visitNumber = WorldMapCells[6][98].visitNumber = WorldMapCells[6][99].visitNumber = 4;
                    WorldMapCells[14][0].visitNumber = WorldMapCells[14][1].visitNumber = WorldMapCells[14][2].visitNumber = WorldMapCells[14][3].visitNumber = WorldMapCells[14][4].visitNumber = WorldMapCells[14][5].visitNumber = WorldMapCells[14][6].visitNumber = WorldMapCells[14][7].visitNumber = WorldMapCells[14][8].visitNumber = WorldMapCells[14][9].visitNumber = WorldMapCells[14][10].visitNumber = WorldMapCells[14][11].visitNumber = WorldMapCells[14][12].visitNumber = WorldMapCells[14][13].visitNumber = WorldMapCells[14][14].visitNumber = WorldMapCells[14][15].visitNumber = WorldMapCells[14][16].visitNumber = WorldMapCells[14][17].visitNumber = WorldMapCells[14][18].visitNumber = WorldMapCells[14][19].visitNumber = WorldMapCells[14][20].visitNumber = WorldMapCells[14][21].visitNumber = WorldMapCells[14][22].visitNumber = WorldMapCells[14][23].visitNumber = WorldMapCells[14][24].visitNumber = WorldMapCells[14][25].visitNumber = WorldMapCells[14][26].visitNumber = WorldMapCells[14][27].visitNumber = WorldMapCells[14][28].visitNumber = WorldMapCells[14][29].visitNumber = WorldMapCells[14][30].visitNumber = WorldMapCells[14][31].visitNumber = WorldMapCells[14][32].visitNumber = WorldMapCells[14][33].visitNumber = WorldMapCells[14][34].visitNumber = WorldMapCells[14][35].visitNumber = WorldMapCells[14][36].visitNumber = WorldMapCells[14][37].visitNumber = WorldMapCells[14][38].visitNumber = WorldMapCells[14][39].visitNumber = WorldMapCells[14][40].visitNumber = WorldMapCells[14][41].visitNumber = WorldMapCells[14][42].visitNumber = WorldMapCells[14][43].visitNumber = WorldMapCells[14][44].visitNumber = WorldMapCells[14][45].visitNumber = WorldMapCells[14][46].visitNumber = WorldMapCells[14][47].visitNumber = WorldMapCells[14][48].visitNumber = WorldMapCells[14][49].visitNumber = WorldMapCells[14][50].visitNumber = WorldMapCells[14][51].visitNumber = WorldMapCells[14][52].visitNumber = WorldMapCells[14][53].visitNumber = WorldMapCells[14][54].visitNumber = WorldMapCells[14][55].visitNumber = WorldMapCells[14][56].visitNumber = WorldMapCells[14][57].visitNumber = WorldMapCells[14][58].visitNumber = WorldMapCells[14][59].visitNumber = WorldMapCells[14][60].visitNumber = WorldMapCells[14][61].visitNumber = WorldMapCells[14][62].visitNumber = WorldMapCells[14][63].visitNumber = WorldMapCells[14][64].visitNumber = WorldMapCells[14][65].visitNumber = WorldMapCells[14][66].visitNumber = WorldMapCells[14][67].visitNumber = WorldMapCells[14][68].visitNumber = WorldMapCells[14][69].visitNumber = WorldMapCells[14][70].visitNumber = WorldMapCells[14][71].visitNumber = WorldMapCells[14][72].visitNumber = WorldMapCells[14][73].visitNumber = WorldMapCells[14][74].visitNumber = WorldMapCells[14][75].visitNumber = WorldMapCells[14][76].visitNumber = WorldMapCells[14][77].visitNumber = WorldMapCells[14][78].visitNumber = WorldMapCells[14][79].visitNumber = WorldMapCells[14][80].visitNumber = WorldMapCells[14][81].visitNumber = WorldMapCells[14][82].visitNumber = WorldMapCells[14][83].visitNumber = WorldMapCells[14][84].visitNumber = WorldMapCells[14][85].visitNumber = WorldMapCells[14][86].visitNumber = WorldMapCells[14][87].visitNumber = WorldMapCells[14][88].visitNumber = WorldMapCells[14][89].visitNumber = WorldMapCells[14][90].visitNumber = WorldMapCells[14][91].visitNumber = WorldMapCells[14][92].visitNumber = WorldMapCells[14][93].visitNumber = WorldMapCells[14][94].visitNumber = WorldMapCells[14][95].visitNumber = WorldMapCells[14][96].visitNumber = WorldMapCells[14][97].visitNumber = WorldMapCells[14][98].visitNumber = WorldMapCells[14][99].visitNumber = 4;
                    WorldMapCells[15][0].visitNumber = WorldMapCells[15][1].visitNumber = WorldMapCells[15][2].visitNumber = WorldMapCells[15][3].visitNumber = WorldMapCells[15][4].visitNumber = WorldMapCells[15][5].visitNumber = WorldMapCells[15][6].visitNumber = WorldMapCells[15][7].visitNumber = WorldMapCells[15][8].visitNumber = WorldMapCells[15][9].visitNumber = WorldMapCells[15][10].visitNumber = WorldMapCells[15][11].visitNumber = WorldMapCells[15][12].visitNumber = WorldMapCells[15][13].visitNumber = WorldMapCells[15][14].visitNumber = WorldMapCells[15][15].visitNumber = WorldMapCells[15][16].visitNumber = WorldMapCells[15][17].visitNumber = WorldMapCells[15][18].visitNumber = WorldMapCells[15][19].visitNumber = WorldMapCells[15][20].visitNumber = WorldMapCells[15][21].visitNumber = WorldMapCells[15][22].visitNumber = WorldMapCells[15][23].visitNumber = WorldMapCells[15][24].visitNumber = WorldMapCells[15][25].visitNumber = WorldMapCells[15][26].visitNumber = WorldMapCells[15][27].visitNumber = WorldMapCells[15][28].visitNumber = WorldMapCells[15][29].visitNumber = WorldMapCells[15][30].visitNumber = WorldMapCells[15][31].visitNumber = WorldMapCells[15][32].visitNumber = WorldMapCells[15][33].visitNumber = WorldMapCells[15][34].visitNumber = WorldMapCells[15][35].visitNumber = WorldMapCells[15][36].visitNumber = WorldMapCells[15][37].visitNumber = WorldMapCells[15][38].visitNumber = WorldMapCells[15][39].visitNumber = WorldMapCells[15][40].visitNumber = WorldMapCells[15][41].visitNumber = WorldMapCells[15][42].visitNumber = WorldMapCells[15][43].visitNumber = WorldMapCells[15][44].visitNumber = WorldMapCells[15][45].visitNumber = WorldMapCells[15][46].visitNumber = WorldMapCells[15][47].visitNumber = WorldMapCells[15][48].visitNumber = WorldMapCells[15][49].visitNumber = WorldMapCells[15][50].visitNumber = WorldMapCells[15][51].visitNumber = WorldMapCells[15][52].visitNumber = WorldMapCells[15][53].visitNumber = WorldMapCells[15][54].visitNumber = WorldMapCells[15][55].visitNumber = WorldMapCells[15][56].visitNumber = WorldMapCells[15][57].visitNumber = WorldMapCells[15][58].visitNumber = WorldMapCells[15][59].visitNumber = WorldMapCells[15][60].visitNumber = WorldMapCells[15][61].visitNumber = WorldMapCells[15][62].visitNumber = WorldMapCells[15][63].visitNumber = WorldMapCells[15][64].visitNumber = WorldMapCells[15][65].visitNumber = WorldMapCells[15][66].visitNumber = WorldMapCells[15][67].visitNumber = WorldMapCells[15][68].visitNumber = WorldMapCells[15][69].visitNumber = WorldMapCells[15][70].visitNumber = WorldMapCells[15][71].visitNumber = WorldMapCells[15][72].visitNumber = WorldMapCells[15][73].visitNumber = WorldMapCells[15][74].visitNumber = WorldMapCells[15][75].visitNumber = WorldMapCells[15][76].visitNumber = WorldMapCells[15][77].visitNumber = WorldMapCells[15][78].visitNumber = WorldMapCells[15][79].visitNumber = WorldMapCells[15][80].visitNumber = WorldMapCells[15][81].visitNumber = WorldMapCells[15][82].visitNumber = WorldMapCells[15][83].visitNumber = WorldMapCells[15][84].visitNumber = WorldMapCells[15][85].visitNumber = WorldMapCells[15][86].visitNumber = WorldMapCells[15][87].visitNumber = WorldMapCells[15][88].visitNumber = WorldMapCells[15][89].visitNumber = WorldMapCells[15][90].visitNumber = WorldMapCells[15][91].visitNumber = WorldMapCells[15][92].visitNumber = WorldMapCells[15][93].visitNumber = WorldMapCells[15][94].visitNumber = WorldMapCells[15][95].visitNumber = WorldMapCells[15][96].visitNumber = WorldMapCells[15][97].visitNumber = WorldMapCells[15][98].visitNumber = WorldMapCells[15][99].visitNumber = 4;
                }
                else if (WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true)
                {
                    WorldMapCells[6][0].visitNumber = WorldMapCells[6][1].visitNumber = WorldMapCells[6][2].visitNumber = WorldMapCells[6][3].visitNumber = WorldMapCells[6][4].visitNumber = WorldMapCells[6][5].visitNumber = WorldMapCells[6][6].visitNumber = WorldMapCells[6][7].visitNumber = WorldMapCells[6][8].visitNumber = WorldMapCells[6][9].visitNumber = WorldMapCells[6][10].visitNumber = WorldMapCells[6][11].visitNumber = WorldMapCells[6][12].visitNumber = WorldMapCells[6][13].visitNumber = WorldMapCells[6][14].visitNumber = WorldMapCells[6][15].visitNumber = WorldMapCells[6][16].visitNumber = WorldMapCells[6][17].visitNumber = WorldMapCells[6][18].visitNumber = WorldMapCells[6][19].visitNumber = WorldMapCells[6][20].visitNumber = WorldMapCells[6][21].visitNumber = WorldMapCells[6][22].visitNumber = WorldMapCells[6][23].visitNumber = WorldMapCells[6][24].visitNumber = WorldMapCells[6][25].visitNumber = WorldMapCells[6][26].visitNumber = WorldMapCells[6][27].visitNumber = WorldMapCells[6][28].visitNumber = WorldMapCells[6][29].visitNumber = WorldMapCells[6][30].visitNumber = WorldMapCells[6][31].visitNumber = WorldMapCells[6][32].visitNumber = WorldMapCells[6][33].visitNumber = WorldMapCells[6][34].visitNumber = WorldMapCells[6][35].visitNumber = WorldMapCells[6][36].visitNumber = WorldMapCells[6][37].visitNumber = WorldMapCells[6][38].visitNumber = WorldMapCells[6][39].visitNumber = WorldMapCells[6][40].visitNumber = WorldMapCells[6][41].visitNumber = WorldMapCells[6][42].visitNumber = WorldMapCells[6][43].visitNumber = WorldMapCells[6][44].visitNumber = WorldMapCells[6][45].visitNumber = WorldMapCells[6][46].visitNumber = WorldMapCells[6][47].visitNumber = WorldMapCells[6][48].visitNumber = WorldMapCells[6][49].visitNumber = WorldMapCells[6][50].visitNumber = WorldMapCells[6][51].visitNumber = WorldMapCells[6][52].visitNumber = WorldMapCells[6][53].visitNumber = WorldMapCells[6][54].visitNumber = WorldMapCells[6][55].visitNumber = WorldMapCells[6][56].visitNumber = WorldMapCells[6][57].visitNumber = WorldMapCells[6][58].visitNumber = WorldMapCells[6][59].visitNumber = WorldMapCells[6][60].visitNumber = WorldMapCells[6][61].visitNumber = WorldMapCells[6][62].visitNumber = WorldMapCells[6][63].visitNumber = WorldMapCells[6][64].visitNumber = WorldMapCells[6][65].visitNumber = WorldMapCells[6][66].visitNumber = WorldMapCells[6][67].visitNumber = WorldMapCells[6][68].visitNumber = WorldMapCells[6][69].visitNumber = WorldMapCells[6][70].visitNumber = WorldMapCells[6][71].visitNumber = WorldMapCells[6][72].visitNumber = WorldMapCells[6][73].visitNumber = WorldMapCells[6][74].visitNumber = WorldMapCells[6][75].visitNumber = WorldMapCells[6][76].visitNumber = WorldMapCells[6][77].visitNumber = WorldMapCells[6][78].visitNumber = WorldMapCells[6][79].visitNumber = WorldMapCells[6][80].visitNumber = WorldMapCells[6][81].visitNumber = WorldMapCells[6][82].visitNumber = WorldMapCells[6][83].visitNumber = WorldMapCells[6][84].visitNumber = WorldMapCells[6][85].visitNumber = WorldMapCells[6][86].visitNumber = WorldMapCells[6][87].visitNumber = WorldMapCells[6][88].visitNumber = WorldMapCells[6][89].visitNumber = WorldMapCells[6][90].visitNumber = WorldMapCells[6][91].visitNumber = WorldMapCells[6][92].visitNumber = WorldMapCells[6][93].visitNumber = WorldMapCells[6][94].visitNumber = WorldMapCells[6][95].visitNumber = WorldMapCells[6][96].visitNumber = WorldMapCells[6][97].visitNumber = WorldMapCells[6][98].visitNumber = WorldMapCells[6][99].visitNumber = 5;
                    WorldMapCells[14][0].visitNumber = WorldMapCells[14][1].visitNumber = WorldMapCells[14][2].visitNumber = WorldMapCells[14][3].visitNumber = WorldMapCells[14][4].visitNumber = WorldMapCells[14][5].visitNumber = WorldMapCells[14][6].visitNumber = WorldMapCells[14][7].visitNumber = WorldMapCells[14][8].visitNumber = WorldMapCells[14][9].visitNumber = WorldMapCells[14][10].visitNumber = WorldMapCells[14][11].visitNumber = WorldMapCells[14][12].visitNumber = WorldMapCells[14][13].visitNumber = WorldMapCells[14][14].visitNumber = WorldMapCells[14][15].visitNumber = WorldMapCells[14][16].visitNumber = WorldMapCells[14][17].visitNumber = WorldMapCells[14][18].visitNumber = WorldMapCells[14][19].visitNumber = WorldMapCells[14][20].visitNumber = WorldMapCells[14][21].visitNumber = WorldMapCells[14][22].visitNumber = WorldMapCells[14][23].visitNumber = WorldMapCells[14][24].visitNumber = WorldMapCells[14][25].visitNumber = WorldMapCells[14][26].visitNumber = WorldMapCells[14][27].visitNumber = WorldMapCells[14][28].visitNumber = WorldMapCells[14][29].visitNumber = WorldMapCells[14][30].visitNumber = WorldMapCells[14][31].visitNumber = WorldMapCells[14][32].visitNumber = WorldMapCells[14][33].visitNumber = WorldMapCells[14][34].visitNumber = WorldMapCells[14][35].visitNumber = WorldMapCells[14][36].visitNumber = WorldMapCells[14][37].visitNumber = WorldMapCells[14][38].visitNumber = WorldMapCells[14][39].visitNumber = WorldMapCells[14][40].visitNumber = WorldMapCells[14][41].visitNumber = WorldMapCells[14][42].visitNumber = WorldMapCells[14][43].visitNumber = WorldMapCells[14][44].visitNumber = WorldMapCells[14][45].visitNumber = WorldMapCells[14][46].visitNumber = WorldMapCells[14][47].visitNumber = WorldMapCells[14][48].visitNumber = WorldMapCells[14][49].visitNumber = WorldMapCells[14][50].visitNumber = WorldMapCells[14][51].visitNumber = WorldMapCells[14][52].visitNumber = WorldMapCells[14][53].visitNumber = WorldMapCells[14][54].visitNumber = WorldMapCells[14][55].visitNumber = WorldMapCells[14][56].visitNumber = WorldMapCells[14][57].visitNumber = WorldMapCells[14][58].visitNumber = WorldMapCells[14][59].visitNumber = WorldMapCells[14][60].visitNumber = WorldMapCells[14][61].visitNumber = WorldMapCells[14][62].visitNumber = WorldMapCells[14][63].visitNumber = WorldMapCells[14][64].visitNumber = WorldMapCells[14][65].visitNumber = WorldMapCells[14][66].visitNumber = WorldMapCells[14][67].visitNumber = WorldMapCells[14][68].visitNumber = WorldMapCells[14][69].visitNumber = WorldMapCells[14][70].visitNumber = WorldMapCells[14][71].visitNumber = WorldMapCells[14][72].visitNumber = WorldMapCells[14][73].visitNumber = WorldMapCells[14][74].visitNumber = WorldMapCells[14][75].visitNumber = WorldMapCells[14][76].visitNumber = WorldMapCells[14][77].visitNumber = WorldMapCells[14][78].visitNumber = WorldMapCells[14][79].visitNumber = WorldMapCells[14][80].visitNumber = WorldMapCells[14][81].visitNumber = WorldMapCells[14][82].visitNumber = WorldMapCells[14][83].visitNumber = WorldMapCells[14][84].visitNumber = WorldMapCells[14][85].visitNumber = WorldMapCells[14][86].visitNumber = WorldMapCells[14][87].visitNumber = WorldMapCells[14][88].visitNumber = WorldMapCells[14][89].visitNumber = WorldMapCells[14][90].visitNumber = WorldMapCells[14][91].visitNumber = WorldMapCells[14][92].visitNumber = WorldMapCells[14][93].visitNumber = WorldMapCells[14][94].visitNumber = WorldMapCells[14][95].visitNumber = WorldMapCells[14][96].visitNumber = WorldMapCells[14][97].visitNumber = WorldMapCells[14][98].visitNumber = WorldMapCells[14][99].visitNumber = 5;
                    WorldMapCells[15][0].visitNumber = WorldMapCells[15][1].visitNumber = WorldMapCells[15][2].visitNumber = WorldMapCells[15][3].visitNumber = WorldMapCells[15][4].visitNumber = WorldMapCells[15][5].visitNumber = WorldMapCells[15][6].visitNumber = WorldMapCells[15][7].visitNumber = WorldMapCells[15][8].visitNumber = WorldMapCells[15][9].visitNumber = WorldMapCells[15][10].visitNumber = WorldMapCells[15][11].visitNumber = WorldMapCells[15][12].visitNumber = WorldMapCells[15][13].visitNumber = WorldMapCells[15][14].visitNumber = WorldMapCells[15][15].visitNumber = WorldMapCells[15][16].visitNumber = WorldMapCells[15][17].visitNumber = WorldMapCells[15][18].visitNumber = WorldMapCells[15][19].visitNumber = WorldMapCells[15][20].visitNumber = WorldMapCells[15][21].visitNumber = WorldMapCells[15][22].visitNumber = WorldMapCells[15][23].visitNumber = WorldMapCells[15][24].visitNumber = WorldMapCells[15][25].visitNumber = WorldMapCells[15][26].visitNumber = WorldMapCells[15][27].visitNumber = WorldMapCells[15][28].visitNumber = WorldMapCells[15][29].visitNumber = WorldMapCells[15][30].visitNumber = WorldMapCells[15][31].visitNumber = WorldMapCells[15][32].visitNumber = WorldMapCells[15][33].visitNumber = WorldMapCells[15][34].visitNumber = WorldMapCells[15][35].visitNumber = WorldMapCells[15][36].visitNumber = WorldMapCells[15][37].visitNumber = WorldMapCells[15][38].visitNumber = WorldMapCells[15][39].visitNumber = WorldMapCells[15][40].visitNumber = WorldMapCells[15][41].visitNumber = WorldMapCells[15][42].visitNumber = WorldMapCells[15][43].visitNumber = WorldMapCells[15][44].visitNumber = WorldMapCells[15][45].visitNumber = WorldMapCells[15][46].visitNumber = WorldMapCells[15][47].visitNumber = WorldMapCells[15][48].visitNumber = WorldMapCells[15][49].visitNumber = WorldMapCells[15][50].visitNumber = WorldMapCells[15][51].visitNumber = WorldMapCells[15][52].visitNumber = WorldMapCells[15][53].visitNumber = WorldMapCells[15][54].visitNumber = WorldMapCells[15][55].visitNumber = WorldMapCells[15][56].visitNumber = WorldMapCells[15][57].visitNumber = WorldMapCells[15][58].visitNumber = WorldMapCells[15][59].visitNumber = WorldMapCells[15][60].visitNumber = WorldMapCells[15][61].visitNumber = WorldMapCells[15][62].visitNumber = WorldMapCells[15][63].visitNumber = WorldMapCells[15][64].visitNumber = WorldMapCells[15][65].visitNumber = WorldMapCells[15][66].visitNumber = WorldMapCells[15][67].visitNumber = WorldMapCells[15][68].visitNumber = WorldMapCells[15][69].visitNumber = WorldMapCells[15][70].visitNumber = WorldMapCells[15][71].visitNumber = WorldMapCells[15][72].visitNumber = WorldMapCells[15][73].visitNumber = WorldMapCells[15][74].visitNumber = WorldMapCells[15][75].visitNumber = WorldMapCells[15][76].visitNumber = WorldMapCells[15][77].visitNumber = WorldMapCells[15][78].visitNumber = WorldMapCells[15][79].visitNumber = WorldMapCells[15][80].visitNumber = WorldMapCells[15][81].visitNumber = WorldMapCells[15][82].visitNumber = WorldMapCells[15][83].visitNumber = WorldMapCells[15][84].visitNumber = WorldMapCells[15][85].visitNumber = WorldMapCells[15][86].visitNumber = WorldMapCells[15][87].visitNumber = WorldMapCells[15][88].visitNumber = WorldMapCells[15][89].visitNumber = WorldMapCells[15][90].visitNumber = WorldMapCells[15][91].visitNumber = WorldMapCells[15][92].visitNumber = WorldMapCells[15][93].visitNumber = WorldMapCells[15][94].visitNumber = WorldMapCells[15][95].visitNumber = WorldMapCells[15][96].visitNumber = WorldMapCells[15][97].visitNumber = WorldMapCells[15][98].visitNumber = WorldMapCells[15][99].visitNumber = 5;
                }
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapName == WorldMapCells[7][41].mapName && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == WorldMapCells[7][41].cellLocation && WorldMapCells[7][41].firstVisit == true) //plant
            {
                WorldMapCells[7][41].firstVisit = false;
                if (WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false)
                {
                    WorldMapCells[7][0].visitNumber = WorldMapCells[7][1].visitNumber = WorldMapCells[7][2].visitNumber = WorldMapCells[7][3].visitNumber = WorldMapCells[7][4].visitNumber = WorldMapCells[7][5].visitNumber = WorldMapCells[7][6].visitNumber = WorldMapCells[7][7].visitNumber = WorldMapCells[7][8].visitNumber = WorldMapCells[7][9].visitNumber = WorldMapCells[7][10].visitNumber = WorldMapCells[7][11].visitNumber = WorldMapCells[7][12].visitNumber = WorldMapCells[7][13].visitNumber = WorldMapCells[7][14].visitNumber = WorldMapCells[7][15].visitNumber = WorldMapCells[7][16].visitNumber = WorldMapCells[7][17].visitNumber = WorldMapCells[7][18].visitNumber = WorldMapCells[7][19].visitNumber = WorldMapCells[7][20].visitNumber = WorldMapCells[7][21].visitNumber = WorldMapCells[7][22].visitNumber = WorldMapCells[7][23].visitNumber = WorldMapCells[7][24].visitNumber = WorldMapCells[7][25].visitNumber = WorldMapCells[7][26].visitNumber = WorldMapCells[7][27].visitNumber = WorldMapCells[7][28].visitNumber = WorldMapCells[7][29].visitNumber = WorldMapCells[7][30].visitNumber = WorldMapCells[7][31].visitNumber = WorldMapCells[7][32].visitNumber = WorldMapCells[7][33].visitNumber = WorldMapCells[7][34].visitNumber = WorldMapCells[7][35].visitNumber = WorldMapCells[7][36].visitNumber = WorldMapCells[7][37].visitNumber = WorldMapCells[7][38].visitNumber = WorldMapCells[7][39].visitNumber = WorldMapCells[7][40].visitNumber = WorldMapCells[7][41].visitNumber = WorldMapCells[7][42].visitNumber = WorldMapCells[7][43].visitNumber = WorldMapCells[7][44].visitNumber = WorldMapCells[7][45].visitNumber = WorldMapCells[7][46].visitNumber = WorldMapCells[7][47].visitNumber = WorldMapCells[7][48].visitNumber = WorldMapCells[7][49].visitNumber = WorldMapCells[7][50].visitNumber = WorldMapCells[7][51].visitNumber = WorldMapCells[7][52].visitNumber = WorldMapCells[7][53].visitNumber = WorldMapCells[7][54].visitNumber = WorldMapCells[7][55].visitNumber = WorldMapCells[7][56].visitNumber = WorldMapCells[7][57].visitNumber = WorldMapCells[7][58].visitNumber = WorldMapCells[7][59].visitNumber = WorldMapCells[7][60].visitNumber = WorldMapCells[7][61].visitNumber = WorldMapCells[7][62].visitNumber = WorldMapCells[7][63].visitNumber = WorldMapCells[7][64].visitNumber = WorldMapCells[7][65].visitNumber = WorldMapCells[7][66].visitNumber = WorldMapCells[7][67].visitNumber = WorldMapCells[7][68].visitNumber = WorldMapCells[7][69].visitNumber = WorldMapCells[7][70].visitNumber = WorldMapCells[7][71].visitNumber = WorldMapCells[7][72].visitNumber = WorldMapCells[7][73].visitNumber = WorldMapCells[7][74].visitNumber = WorldMapCells[7][75].visitNumber = WorldMapCells[7][76].visitNumber = WorldMapCells[7][77].visitNumber = WorldMapCells[7][78].visitNumber = WorldMapCells[7][79].visitNumber = WorldMapCells[7][80].visitNumber = WorldMapCells[7][81].visitNumber = WorldMapCells[7][82].visitNumber = WorldMapCells[7][83].visitNumber = WorldMapCells[7][84].visitNumber = WorldMapCells[7][85].visitNumber = WorldMapCells[7][86].visitNumber = WorldMapCells[7][87].visitNumber = WorldMapCells[7][88].visitNumber = WorldMapCells[7][89].visitNumber = WorldMapCells[7][90].visitNumber = WorldMapCells[7][91].visitNumber = WorldMapCells[7][92].visitNumber = WorldMapCells[7][93].visitNumber = WorldMapCells[7][94].visitNumber = WorldMapCells[7][95].visitNumber = WorldMapCells[7][96].visitNumber = WorldMapCells[7][97].visitNumber = WorldMapCells[7][98].visitNumber = WorldMapCells[7][99].visitNumber = 1;
                    WorldMapCells[17][0].visitNumber = WorldMapCells[17][1].visitNumber = WorldMapCells[17][2].visitNumber = WorldMapCells[17][3].visitNumber = WorldMapCells[17][4].visitNumber = WorldMapCells[17][5].visitNumber = WorldMapCells[17][6].visitNumber = WorldMapCells[17][7].visitNumber = WorldMapCells[17][8].visitNumber = WorldMapCells[17][9].visitNumber = WorldMapCells[17][10].visitNumber = WorldMapCells[17][11].visitNumber = WorldMapCells[17][12].visitNumber = WorldMapCells[17][13].visitNumber = WorldMapCells[17][14].visitNumber = WorldMapCells[17][15].visitNumber = WorldMapCells[17][16].visitNumber = WorldMapCells[17][17].visitNumber = WorldMapCells[17][18].visitNumber = WorldMapCells[17][19].visitNumber = WorldMapCells[17][20].visitNumber = WorldMapCells[17][21].visitNumber = WorldMapCells[17][22].visitNumber = WorldMapCells[17][23].visitNumber = WorldMapCells[17][24].visitNumber = WorldMapCells[17][25].visitNumber = WorldMapCells[17][26].visitNumber = WorldMapCells[17][27].visitNumber = WorldMapCells[17][28].visitNumber = WorldMapCells[17][29].visitNumber = WorldMapCells[17][30].visitNumber = WorldMapCells[17][31].visitNumber = WorldMapCells[17][32].visitNumber = WorldMapCells[17][33].visitNumber = WorldMapCells[17][34].visitNumber = WorldMapCells[17][35].visitNumber = WorldMapCells[17][36].visitNumber = WorldMapCells[17][37].visitNumber = WorldMapCells[17][38].visitNumber = WorldMapCells[17][39].visitNumber = WorldMapCells[17][40].visitNumber = WorldMapCells[17][41].visitNumber = WorldMapCells[17][42].visitNumber = WorldMapCells[17][43].visitNumber = WorldMapCells[17][44].visitNumber = WorldMapCells[17][45].visitNumber = WorldMapCells[17][46].visitNumber = WorldMapCells[17][47].visitNumber = WorldMapCells[17][48].visitNumber = WorldMapCells[17][49].visitNumber = WorldMapCells[17][50].visitNumber = WorldMapCells[17][51].visitNumber = WorldMapCells[17][52].visitNumber = WorldMapCells[17][53].visitNumber = WorldMapCells[17][54].visitNumber = WorldMapCells[17][55].visitNumber = WorldMapCells[17][56].visitNumber = WorldMapCells[17][57].visitNumber = WorldMapCells[17][58].visitNumber = WorldMapCells[17][59].visitNumber = WorldMapCells[17][60].visitNumber = WorldMapCells[17][61].visitNumber = WorldMapCells[17][62].visitNumber = WorldMapCells[17][63].visitNumber = WorldMapCells[17][64].visitNumber = WorldMapCells[17][65].visitNumber = WorldMapCells[17][66].visitNumber = WorldMapCells[17][67].visitNumber = WorldMapCells[17][68].visitNumber = WorldMapCells[17][69].visitNumber = WorldMapCells[17][70].visitNumber = WorldMapCells[17][71].visitNumber = WorldMapCells[17][72].visitNumber = WorldMapCells[17][73].visitNumber = WorldMapCells[17][74].visitNumber = WorldMapCells[17][75].visitNumber = WorldMapCells[17][76].visitNumber = WorldMapCells[17][77].visitNumber = WorldMapCells[17][78].visitNumber = WorldMapCells[17][79].visitNumber = WorldMapCells[17][80].visitNumber = WorldMapCells[17][81].visitNumber = WorldMapCells[17][82].visitNumber = WorldMapCells[17][83].visitNumber = WorldMapCells[17][84].visitNumber = WorldMapCells[17][85].visitNumber = WorldMapCells[17][86].visitNumber = WorldMapCells[17][87].visitNumber = WorldMapCells[17][88].visitNumber = WorldMapCells[17][89].visitNumber = WorldMapCells[17][90].visitNumber = WorldMapCells[17][91].visitNumber = WorldMapCells[17][92].visitNumber = WorldMapCells[17][93].visitNumber = WorldMapCells[17][94].visitNumber = WorldMapCells[17][95].visitNumber = WorldMapCells[17][96].visitNumber = WorldMapCells[17][97].visitNumber = WorldMapCells[17][98].visitNumber = WorldMapCells[17][99].visitNumber = 1;
                    WorldMapCells[18][0].visitNumber = WorldMapCells[18][1].visitNumber = WorldMapCells[18][2].visitNumber = WorldMapCells[18][3].visitNumber = WorldMapCells[18][4].visitNumber = WorldMapCells[18][5].visitNumber = WorldMapCells[18][6].visitNumber = WorldMapCells[18][7].visitNumber = WorldMapCells[18][8].visitNumber = WorldMapCells[18][9].visitNumber = WorldMapCells[18][10].visitNumber = WorldMapCells[18][11].visitNumber = WorldMapCells[18][12].visitNumber = WorldMapCells[18][13].visitNumber = WorldMapCells[18][14].visitNumber = WorldMapCells[18][15].visitNumber = WorldMapCells[18][16].visitNumber = WorldMapCells[18][17].visitNumber = WorldMapCells[18][18].visitNumber = WorldMapCells[18][19].visitNumber = WorldMapCells[18][20].visitNumber = WorldMapCells[18][21].visitNumber = WorldMapCells[18][22].visitNumber = WorldMapCells[18][23].visitNumber = WorldMapCells[18][24].visitNumber = WorldMapCells[18][25].visitNumber = WorldMapCells[18][26].visitNumber = WorldMapCells[18][27].visitNumber = WorldMapCells[18][28].visitNumber = WorldMapCells[18][29].visitNumber = WorldMapCells[18][30].visitNumber = WorldMapCells[18][31].visitNumber = WorldMapCells[18][32].visitNumber = WorldMapCells[18][33].visitNumber = WorldMapCells[18][34].visitNumber = WorldMapCells[18][35].visitNumber = WorldMapCells[18][36].visitNumber = WorldMapCells[18][37].visitNumber = WorldMapCells[18][38].visitNumber = WorldMapCells[18][39].visitNumber = WorldMapCells[18][40].visitNumber = WorldMapCells[18][41].visitNumber = WorldMapCells[18][42].visitNumber = WorldMapCells[18][43].visitNumber = WorldMapCells[18][44].visitNumber = WorldMapCells[18][45].visitNumber = WorldMapCells[18][46].visitNumber = WorldMapCells[18][47].visitNumber = WorldMapCells[18][48].visitNumber = WorldMapCells[18][49].visitNumber = WorldMapCells[18][50].visitNumber = WorldMapCells[18][51].visitNumber = WorldMapCells[18][52].visitNumber = WorldMapCells[18][53].visitNumber = WorldMapCells[18][54].visitNumber = WorldMapCells[18][55].visitNumber = WorldMapCells[18][56].visitNumber = WorldMapCells[18][57].visitNumber = WorldMapCells[18][58].visitNumber = WorldMapCells[18][59].visitNumber = WorldMapCells[18][60].visitNumber = WorldMapCells[18][61].visitNumber = WorldMapCells[18][62].visitNumber = WorldMapCells[18][63].visitNumber = WorldMapCells[18][64].visitNumber = WorldMapCells[18][65].visitNumber = WorldMapCells[18][66].visitNumber = WorldMapCells[18][67].visitNumber = WorldMapCells[18][68].visitNumber = WorldMapCells[18][69].visitNumber = WorldMapCells[18][70].visitNumber = WorldMapCells[18][71].visitNumber = WorldMapCells[18][72].visitNumber = WorldMapCells[18][73].visitNumber = WorldMapCells[18][74].visitNumber = WorldMapCells[18][75].visitNumber = WorldMapCells[18][76].visitNumber = WorldMapCells[18][77].visitNumber = WorldMapCells[18][78].visitNumber = WorldMapCells[18][79].visitNumber = WorldMapCells[18][80].visitNumber = WorldMapCells[18][81].visitNumber = WorldMapCells[18][82].visitNumber = WorldMapCells[18][83].visitNumber = WorldMapCells[18][84].visitNumber = WorldMapCells[18][85].visitNumber = WorldMapCells[18][86].visitNumber = WorldMapCells[18][87].visitNumber = WorldMapCells[18][88].visitNumber = WorldMapCells[18][89].visitNumber = WorldMapCells[18][90].visitNumber = WorldMapCells[18][91].visitNumber = WorldMapCells[18][92].visitNumber = WorldMapCells[18][93].visitNumber = WorldMapCells[18][94].visitNumber = WorldMapCells[18][95].visitNumber = WorldMapCells[18][96].visitNumber = WorldMapCells[18][97].visitNumber = WorldMapCells[18][98].visitNumber = WorldMapCells[18][99].visitNumber = 1;
                }
                else if (WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
                    || WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false
                    || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false)
                {
                    WorldMapCells[7][0].visitNumber = WorldMapCells[7][1].visitNumber = WorldMapCells[7][2].visitNumber = WorldMapCells[7][3].visitNumber = WorldMapCells[7][4].visitNumber = WorldMapCells[7][5].visitNumber = WorldMapCells[7][6].visitNumber = WorldMapCells[7][7].visitNumber = WorldMapCells[7][8].visitNumber = WorldMapCells[7][9].visitNumber = WorldMapCells[7][10].visitNumber = WorldMapCells[7][11].visitNumber = WorldMapCells[7][12].visitNumber = WorldMapCells[7][13].visitNumber = WorldMapCells[7][14].visitNumber = WorldMapCells[7][15].visitNumber = WorldMapCells[7][16].visitNumber = WorldMapCells[7][17].visitNumber = WorldMapCells[7][18].visitNumber = WorldMapCells[7][19].visitNumber = WorldMapCells[7][20].visitNumber = WorldMapCells[7][21].visitNumber = WorldMapCells[7][22].visitNumber = WorldMapCells[7][23].visitNumber = WorldMapCells[7][24].visitNumber = WorldMapCells[7][25].visitNumber = WorldMapCells[7][26].visitNumber = WorldMapCells[7][27].visitNumber = WorldMapCells[7][28].visitNumber = WorldMapCells[7][29].visitNumber = WorldMapCells[7][30].visitNumber = WorldMapCells[7][31].visitNumber = WorldMapCells[7][32].visitNumber = WorldMapCells[7][33].visitNumber = WorldMapCells[7][34].visitNumber = WorldMapCells[7][35].visitNumber = WorldMapCells[7][36].visitNumber = WorldMapCells[7][37].visitNumber = WorldMapCells[7][38].visitNumber = WorldMapCells[7][39].visitNumber = WorldMapCells[7][40].visitNumber = WorldMapCells[7][41].visitNumber = WorldMapCells[7][42].visitNumber = WorldMapCells[7][43].visitNumber = WorldMapCells[7][44].visitNumber = WorldMapCells[7][45].visitNumber = WorldMapCells[7][46].visitNumber = WorldMapCells[7][47].visitNumber = WorldMapCells[7][48].visitNumber = WorldMapCells[7][49].visitNumber = WorldMapCells[7][50].visitNumber = WorldMapCells[7][51].visitNumber = WorldMapCells[7][52].visitNumber = WorldMapCells[7][53].visitNumber = WorldMapCells[7][54].visitNumber = WorldMapCells[7][55].visitNumber = WorldMapCells[7][56].visitNumber = WorldMapCells[7][57].visitNumber = WorldMapCells[7][58].visitNumber = WorldMapCells[7][59].visitNumber = WorldMapCells[7][60].visitNumber = WorldMapCells[7][61].visitNumber = WorldMapCells[7][62].visitNumber = WorldMapCells[7][63].visitNumber = WorldMapCells[7][64].visitNumber = WorldMapCells[7][65].visitNumber = WorldMapCells[7][66].visitNumber = WorldMapCells[7][67].visitNumber = WorldMapCells[7][68].visitNumber = WorldMapCells[7][69].visitNumber = WorldMapCells[7][70].visitNumber = WorldMapCells[7][71].visitNumber = WorldMapCells[7][72].visitNumber = WorldMapCells[7][73].visitNumber = WorldMapCells[7][74].visitNumber = WorldMapCells[7][75].visitNumber = WorldMapCells[7][76].visitNumber = WorldMapCells[7][77].visitNumber = WorldMapCells[7][78].visitNumber = WorldMapCells[7][79].visitNumber = WorldMapCells[7][80].visitNumber = WorldMapCells[7][81].visitNumber = WorldMapCells[7][82].visitNumber = WorldMapCells[7][83].visitNumber = WorldMapCells[7][84].visitNumber = WorldMapCells[7][85].visitNumber = WorldMapCells[7][86].visitNumber = WorldMapCells[7][87].visitNumber = WorldMapCells[7][88].visitNumber = WorldMapCells[7][89].visitNumber = WorldMapCells[7][90].visitNumber = WorldMapCells[7][91].visitNumber = WorldMapCells[7][92].visitNumber = WorldMapCells[7][93].visitNumber = WorldMapCells[7][94].visitNumber = WorldMapCells[7][95].visitNumber = WorldMapCells[7][96].visitNumber = WorldMapCells[7][97].visitNumber = WorldMapCells[7][98].visitNumber = WorldMapCells[7][99].visitNumber = 2;
                    WorldMapCells[17][0].visitNumber = WorldMapCells[17][1].visitNumber = WorldMapCells[17][2].visitNumber = WorldMapCells[17][3].visitNumber = WorldMapCells[17][4].visitNumber = WorldMapCells[17][5].visitNumber = WorldMapCells[17][6].visitNumber = WorldMapCells[17][7].visitNumber = WorldMapCells[17][8].visitNumber = WorldMapCells[17][9].visitNumber = WorldMapCells[17][10].visitNumber = WorldMapCells[17][11].visitNumber = WorldMapCells[17][12].visitNumber = WorldMapCells[17][13].visitNumber = WorldMapCells[17][14].visitNumber = WorldMapCells[17][15].visitNumber = WorldMapCells[17][16].visitNumber = WorldMapCells[17][17].visitNumber = WorldMapCells[17][18].visitNumber = WorldMapCells[17][19].visitNumber = WorldMapCells[17][20].visitNumber = WorldMapCells[17][21].visitNumber = WorldMapCells[17][22].visitNumber = WorldMapCells[17][23].visitNumber = WorldMapCells[17][24].visitNumber = WorldMapCells[17][25].visitNumber = WorldMapCells[17][26].visitNumber = WorldMapCells[17][27].visitNumber = WorldMapCells[17][28].visitNumber = WorldMapCells[17][29].visitNumber = WorldMapCells[17][30].visitNumber = WorldMapCells[17][31].visitNumber = WorldMapCells[17][32].visitNumber = WorldMapCells[17][33].visitNumber = WorldMapCells[17][34].visitNumber = WorldMapCells[17][35].visitNumber = WorldMapCells[17][36].visitNumber = WorldMapCells[17][37].visitNumber = WorldMapCells[17][38].visitNumber = WorldMapCells[17][39].visitNumber = WorldMapCells[17][40].visitNumber = WorldMapCells[17][41].visitNumber = WorldMapCells[17][42].visitNumber = WorldMapCells[17][43].visitNumber = WorldMapCells[17][44].visitNumber = WorldMapCells[17][45].visitNumber = WorldMapCells[17][46].visitNumber = WorldMapCells[17][47].visitNumber = WorldMapCells[17][48].visitNumber = WorldMapCells[17][49].visitNumber = WorldMapCells[17][50].visitNumber = WorldMapCells[17][51].visitNumber = WorldMapCells[17][52].visitNumber = WorldMapCells[17][53].visitNumber = WorldMapCells[17][54].visitNumber = WorldMapCells[17][55].visitNumber = WorldMapCells[17][56].visitNumber = WorldMapCells[17][57].visitNumber = WorldMapCells[17][58].visitNumber = WorldMapCells[17][59].visitNumber = WorldMapCells[17][60].visitNumber = WorldMapCells[17][61].visitNumber = WorldMapCells[17][62].visitNumber = WorldMapCells[17][63].visitNumber = WorldMapCells[17][64].visitNumber = WorldMapCells[17][65].visitNumber = WorldMapCells[17][66].visitNumber = WorldMapCells[17][67].visitNumber = WorldMapCells[17][68].visitNumber = WorldMapCells[17][69].visitNumber = WorldMapCells[17][70].visitNumber = WorldMapCells[17][71].visitNumber = WorldMapCells[17][72].visitNumber = WorldMapCells[17][73].visitNumber = WorldMapCells[17][74].visitNumber = WorldMapCells[17][75].visitNumber = WorldMapCells[17][76].visitNumber = WorldMapCells[17][77].visitNumber = WorldMapCells[17][78].visitNumber = WorldMapCells[17][79].visitNumber = WorldMapCells[17][80].visitNumber = WorldMapCells[17][81].visitNumber = WorldMapCells[17][82].visitNumber = WorldMapCells[17][83].visitNumber = WorldMapCells[17][84].visitNumber = WorldMapCells[17][85].visitNumber = WorldMapCells[17][86].visitNumber = WorldMapCells[17][87].visitNumber = WorldMapCells[17][88].visitNumber = WorldMapCells[17][89].visitNumber = WorldMapCells[17][90].visitNumber = WorldMapCells[17][91].visitNumber = WorldMapCells[17][92].visitNumber = WorldMapCells[17][93].visitNumber = WorldMapCells[17][94].visitNumber = WorldMapCells[17][95].visitNumber = WorldMapCells[17][96].visitNumber = WorldMapCells[17][97].visitNumber = WorldMapCells[17][98].visitNumber = WorldMapCells[17][99].visitNumber = 2;
                    WorldMapCells[18][0].visitNumber = WorldMapCells[18][1].visitNumber = WorldMapCells[18][2].visitNumber = WorldMapCells[18][3].visitNumber = WorldMapCells[18][4].visitNumber = WorldMapCells[18][5].visitNumber = WorldMapCells[18][6].visitNumber = WorldMapCells[18][7].visitNumber = WorldMapCells[18][8].visitNumber = WorldMapCells[18][9].visitNumber = WorldMapCells[18][10].visitNumber = WorldMapCells[18][11].visitNumber = WorldMapCells[18][12].visitNumber = WorldMapCells[18][13].visitNumber = WorldMapCells[18][14].visitNumber = WorldMapCells[18][15].visitNumber = WorldMapCells[18][16].visitNumber = WorldMapCells[18][17].visitNumber = WorldMapCells[18][18].visitNumber = WorldMapCells[18][19].visitNumber = WorldMapCells[18][20].visitNumber = WorldMapCells[18][21].visitNumber = WorldMapCells[18][22].visitNumber = WorldMapCells[18][23].visitNumber = WorldMapCells[18][24].visitNumber = WorldMapCells[18][25].visitNumber = WorldMapCells[18][26].visitNumber = WorldMapCells[18][27].visitNumber = WorldMapCells[18][28].visitNumber = WorldMapCells[18][29].visitNumber = WorldMapCells[18][30].visitNumber = WorldMapCells[18][31].visitNumber = WorldMapCells[18][32].visitNumber = WorldMapCells[18][33].visitNumber = WorldMapCells[18][34].visitNumber = WorldMapCells[18][35].visitNumber = WorldMapCells[18][36].visitNumber = WorldMapCells[18][37].visitNumber = WorldMapCells[18][38].visitNumber = WorldMapCells[18][39].visitNumber = WorldMapCells[18][40].visitNumber = WorldMapCells[18][41].visitNumber = WorldMapCells[18][42].visitNumber = WorldMapCells[18][43].visitNumber = WorldMapCells[18][44].visitNumber = WorldMapCells[18][45].visitNumber = WorldMapCells[18][46].visitNumber = WorldMapCells[18][47].visitNumber = WorldMapCells[18][48].visitNumber = WorldMapCells[18][49].visitNumber = WorldMapCells[18][50].visitNumber = WorldMapCells[18][51].visitNumber = WorldMapCells[18][52].visitNumber = WorldMapCells[18][53].visitNumber = WorldMapCells[18][54].visitNumber = WorldMapCells[18][55].visitNumber = WorldMapCells[18][56].visitNumber = WorldMapCells[18][57].visitNumber = WorldMapCells[18][58].visitNumber = WorldMapCells[18][59].visitNumber = WorldMapCells[18][60].visitNumber = WorldMapCells[18][61].visitNumber = WorldMapCells[18][62].visitNumber = WorldMapCells[18][63].visitNumber = WorldMapCells[18][64].visitNumber = WorldMapCells[18][65].visitNumber = WorldMapCells[18][66].visitNumber = WorldMapCells[18][67].visitNumber = WorldMapCells[18][68].visitNumber = WorldMapCells[18][69].visitNumber = WorldMapCells[18][70].visitNumber = WorldMapCells[18][71].visitNumber = WorldMapCells[18][72].visitNumber = WorldMapCells[18][73].visitNumber = WorldMapCells[18][74].visitNumber = WorldMapCells[18][75].visitNumber = WorldMapCells[18][76].visitNumber = WorldMapCells[18][77].visitNumber = WorldMapCells[18][78].visitNumber = WorldMapCells[18][79].visitNumber = WorldMapCells[18][80].visitNumber = WorldMapCells[18][81].visitNumber = WorldMapCells[18][82].visitNumber = WorldMapCells[18][83].visitNumber = WorldMapCells[18][84].visitNumber = WorldMapCells[18][85].visitNumber = WorldMapCells[18][86].visitNumber = WorldMapCells[18][87].visitNumber = WorldMapCells[18][88].visitNumber = WorldMapCells[18][89].visitNumber = WorldMapCells[18][90].visitNumber = WorldMapCells[18][91].visitNumber = WorldMapCells[18][92].visitNumber = WorldMapCells[18][93].visitNumber = WorldMapCells[18][94].visitNumber = WorldMapCells[18][95].visitNumber = WorldMapCells[18][96].visitNumber = WorldMapCells[18][97].visitNumber = WorldMapCells[18][98].visitNumber = WorldMapCells[18][99].visitNumber = 2;
                }
                else if (WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true
                    || WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
                    || WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false
                    || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true)
                {
                    WorldMapCells[7][0].visitNumber = WorldMapCells[7][1].visitNumber = WorldMapCells[7][2].visitNumber = WorldMapCells[7][3].visitNumber = WorldMapCells[7][4].visitNumber = WorldMapCells[7][5].visitNumber = WorldMapCells[7][6].visitNumber = WorldMapCells[7][7].visitNumber = WorldMapCells[7][8].visitNumber = WorldMapCells[7][9].visitNumber = WorldMapCells[7][10].visitNumber = WorldMapCells[7][11].visitNumber = WorldMapCells[7][12].visitNumber = WorldMapCells[7][13].visitNumber = WorldMapCells[7][14].visitNumber = WorldMapCells[7][15].visitNumber = WorldMapCells[7][16].visitNumber = WorldMapCells[7][17].visitNumber = WorldMapCells[7][18].visitNumber = WorldMapCells[7][19].visitNumber = WorldMapCells[7][20].visitNumber = WorldMapCells[7][21].visitNumber = WorldMapCells[7][22].visitNumber = WorldMapCells[7][23].visitNumber = WorldMapCells[7][24].visitNumber = WorldMapCells[7][25].visitNumber = WorldMapCells[7][26].visitNumber = WorldMapCells[7][27].visitNumber = WorldMapCells[7][28].visitNumber = WorldMapCells[7][29].visitNumber = WorldMapCells[7][30].visitNumber = WorldMapCells[7][31].visitNumber = WorldMapCells[7][32].visitNumber = WorldMapCells[7][33].visitNumber = WorldMapCells[7][34].visitNumber = WorldMapCells[7][35].visitNumber = WorldMapCells[7][36].visitNumber = WorldMapCells[7][37].visitNumber = WorldMapCells[7][38].visitNumber = WorldMapCells[7][39].visitNumber = WorldMapCells[7][40].visitNumber = WorldMapCells[7][41].visitNumber = WorldMapCells[7][42].visitNumber = WorldMapCells[7][43].visitNumber = WorldMapCells[7][44].visitNumber = WorldMapCells[7][45].visitNumber = WorldMapCells[7][46].visitNumber = WorldMapCells[7][47].visitNumber = WorldMapCells[7][48].visitNumber = WorldMapCells[7][49].visitNumber = WorldMapCells[7][50].visitNumber = WorldMapCells[7][51].visitNumber = WorldMapCells[7][52].visitNumber = WorldMapCells[7][53].visitNumber = WorldMapCells[7][54].visitNumber = WorldMapCells[7][55].visitNumber = WorldMapCells[7][56].visitNumber = WorldMapCells[7][57].visitNumber = WorldMapCells[7][58].visitNumber = WorldMapCells[7][59].visitNumber = WorldMapCells[7][60].visitNumber = WorldMapCells[7][61].visitNumber = WorldMapCells[7][62].visitNumber = WorldMapCells[7][63].visitNumber = WorldMapCells[7][64].visitNumber = WorldMapCells[7][65].visitNumber = WorldMapCells[7][66].visitNumber = WorldMapCells[7][67].visitNumber = WorldMapCells[7][68].visitNumber = WorldMapCells[7][69].visitNumber = WorldMapCells[7][70].visitNumber = WorldMapCells[7][71].visitNumber = WorldMapCells[7][72].visitNumber = WorldMapCells[7][73].visitNumber = WorldMapCells[7][74].visitNumber = WorldMapCells[7][75].visitNumber = WorldMapCells[7][76].visitNumber = WorldMapCells[7][77].visitNumber = WorldMapCells[7][78].visitNumber = WorldMapCells[7][79].visitNumber = WorldMapCells[7][80].visitNumber = WorldMapCells[7][81].visitNumber = WorldMapCells[7][82].visitNumber = WorldMapCells[7][83].visitNumber = WorldMapCells[7][84].visitNumber = WorldMapCells[7][85].visitNumber = WorldMapCells[7][86].visitNumber = WorldMapCells[7][87].visitNumber = WorldMapCells[7][88].visitNumber = WorldMapCells[7][89].visitNumber = WorldMapCells[7][90].visitNumber = WorldMapCells[7][91].visitNumber = WorldMapCells[7][92].visitNumber = WorldMapCells[7][93].visitNumber = WorldMapCells[7][94].visitNumber = WorldMapCells[7][95].visitNumber = WorldMapCells[7][96].visitNumber = WorldMapCells[7][97].visitNumber = WorldMapCells[7][98].visitNumber = WorldMapCells[7][99].visitNumber = 3;
                    WorldMapCells[17][0].visitNumber = WorldMapCells[17][1].visitNumber = WorldMapCells[17][2].visitNumber = WorldMapCells[17][3].visitNumber = WorldMapCells[17][4].visitNumber = WorldMapCells[17][5].visitNumber = WorldMapCells[17][6].visitNumber = WorldMapCells[17][7].visitNumber = WorldMapCells[17][8].visitNumber = WorldMapCells[17][9].visitNumber = WorldMapCells[17][10].visitNumber = WorldMapCells[17][11].visitNumber = WorldMapCells[17][12].visitNumber = WorldMapCells[17][13].visitNumber = WorldMapCells[17][14].visitNumber = WorldMapCells[17][15].visitNumber = WorldMapCells[17][16].visitNumber = WorldMapCells[17][17].visitNumber = WorldMapCells[17][18].visitNumber = WorldMapCells[17][19].visitNumber = WorldMapCells[17][20].visitNumber = WorldMapCells[17][21].visitNumber = WorldMapCells[17][22].visitNumber = WorldMapCells[17][23].visitNumber = WorldMapCells[17][24].visitNumber = WorldMapCells[17][25].visitNumber = WorldMapCells[17][26].visitNumber = WorldMapCells[17][27].visitNumber = WorldMapCells[17][28].visitNumber = WorldMapCells[17][29].visitNumber = WorldMapCells[17][30].visitNumber = WorldMapCells[17][31].visitNumber = WorldMapCells[17][32].visitNumber = WorldMapCells[17][33].visitNumber = WorldMapCells[17][34].visitNumber = WorldMapCells[17][35].visitNumber = WorldMapCells[17][36].visitNumber = WorldMapCells[17][37].visitNumber = WorldMapCells[17][38].visitNumber = WorldMapCells[17][39].visitNumber = WorldMapCells[17][40].visitNumber = WorldMapCells[17][41].visitNumber = WorldMapCells[17][42].visitNumber = WorldMapCells[17][43].visitNumber = WorldMapCells[17][44].visitNumber = WorldMapCells[17][45].visitNumber = WorldMapCells[17][46].visitNumber = WorldMapCells[17][47].visitNumber = WorldMapCells[17][48].visitNumber = WorldMapCells[17][49].visitNumber = WorldMapCells[17][50].visitNumber = WorldMapCells[17][51].visitNumber = WorldMapCells[17][52].visitNumber = WorldMapCells[17][53].visitNumber = WorldMapCells[17][54].visitNumber = WorldMapCells[17][55].visitNumber = WorldMapCells[17][56].visitNumber = WorldMapCells[17][57].visitNumber = WorldMapCells[17][58].visitNumber = WorldMapCells[17][59].visitNumber = WorldMapCells[17][60].visitNumber = WorldMapCells[17][61].visitNumber = WorldMapCells[17][62].visitNumber = WorldMapCells[17][63].visitNumber = WorldMapCells[17][64].visitNumber = WorldMapCells[17][65].visitNumber = WorldMapCells[17][66].visitNumber = WorldMapCells[17][67].visitNumber = WorldMapCells[17][68].visitNumber = WorldMapCells[17][69].visitNumber = WorldMapCells[17][70].visitNumber = WorldMapCells[17][71].visitNumber = WorldMapCells[17][72].visitNumber = WorldMapCells[17][73].visitNumber = WorldMapCells[17][74].visitNumber = WorldMapCells[17][75].visitNumber = WorldMapCells[17][76].visitNumber = WorldMapCells[17][77].visitNumber = WorldMapCells[17][78].visitNumber = WorldMapCells[17][79].visitNumber = WorldMapCells[17][80].visitNumber = WorldMapCells[17][81].visitNumber = WorldMapCells[17][82].visitNumber = WorldMapCells[17][83].visitNumber = WorldMapCells[17][84].visitNumber = WorldMapCells[17][85].visitNumber = WorldMapCells[17][86].visitNumber = WorldMapCells[17][87].visitNumber = WorldMapCells[17][88].visitNumber = WorldMapCells[17][89].visitNumber = WorldMapCells[17][90].visitNumber = WorldMapCells[17][91].visitNumber = WorldMapCells[17][92].visitNumber = WorldMapCells[17][93].visitNumber = WorldMapCells[17][94].visitNumber = WorldMapCells[17][95].visitNumber = WorldMapCells[17][96].visitNumber = WorldMapCells[17][97].visitNumber = WorldMapCells[17][98].visitNumber = WorldMapCells[17][99].visitNumber = 3;
                    WorldMapCells[18][0].visitNumber = WorldMapCells[18][1].visitNumber = WorldMapCells[18][2].visitNumber = WorldMapCells[18][3].visitNumber = WorldMapCells[18][4].visitNumber = WorldMapCells[18][5].visitNumber = WorldMapCells[18][6].visitNumber = WorldMapCells[18][7].visitNumber = WorldMapCells[18][8].visitNumber = WorldMapCells[18][9].visitNumber = WorldMapCells[18][10].visitNumber = WorldMapCells[18][11].visitNumber = WorldMapCells[18][12].visitNumber = WorldMapCells[18][13].visitNumber = WorldMapCells[18][14].visitNumber = WorldMapCells[18][15].visitNumber = WorldMapCells[18][16].visitNumber = WorldMapCells[18][17].visitNumber = WorldMapCells[18][18].visitNumber = WorldMapCells[18][19].visitNumber = WorldMapCells[18][20].visitNumber = WorldMapCells[18][21].visitNumber = WorldMapCells[18][22].visitNumber = WorldMapCells[18][23].visitNumber = WorldMapCells[18][24].visitNumber = WorldMapCells[18][25].visitNumber = WorldMapCells[18][26].visitNumber = WorldMapCells[18][27].visitNumber = WorldMapCells[18][28].visitNumber = WorldMapCells[18][29].visitNumber = WorldMapCells[18][30].visitNumber = WorldMapCells[18][31].visitNumber = WorldMapCells[18][32].visitNumber = WorldMapCells[18][33].visitNumber = WorldMapCells[18][34].visitNumber = WorldMapCells[18][35].visitNumber = WorldMapCells[18][36].visitNumber = WorldMapCells[18][37].visitNumber = WorldMapCells[18][38].visitNumber = WorldMapCells[18][39].visitNumber = WorldMapCells[18][40].visitNumber = WorldMapCells[18][41].visitNumber = WorldMapCells[18][42].visitNumber = WorldMapCells[18][43].visitNumber = WorldMapCells[18][44].visitNumber = WorldMapCells[18][45].visitNumber = WorldMapCells[18][46].visitNumber = WorldMapCells[18][47].visitNumber = WorldMapCells[18][48].visitNumber = WorldMapCells[18][49].visitNumber = WorldMapCells[18][50].visitNumber = WorldMapCells[18][51].visitNumber = WorldMapCells[18][52].visitNumber = WorldMapCells[18][53].visitNumber = WorldMapCells[18][54].visitNumber = WorldMapCells[18][55].visitNumber = WorldMapCells[18][56].visitNumber = WorldMapCells[18][57].visitNumber = WorldMapCells[18][58].visitNumber = WorldMapCells[18][59].visitNumber = WorldMapCells[18][60].visitNumber = WorldMapCells[18][61].visitNumber = WorldMapCells[18][62].visitNumber = WorldMapCells[18][63].visitNumber = WorldMapCells[18][64].visitNumber = WorldMapCells[18][65].visitNumber = WorldMapCells[18][66].visitNumber = WorldMapCells[18][67].visitNumber = WorldMapCells[18][68].visitNumber = WorldMapCells[18][69].visitNumber = WorldMapCells[18][70].visitNumber = WorldMapCells[18][71].visitNumber = WorldMapCells[18][72].visitNumber = WorldMapCells[18][73].visitNumber = WorldMapCells[18][74].visitNumber = WorldMapCells[18][75].visitNumber = WorldMapCells[18][76].visitNumber = WorldMapCells[18][77].visitNumber = WorldMapCells[18][78].visitNumber = WorldMapCells[18][79].visitNumber = WorldMapCells[18][80].visitNumber = WorldMapCells[18][81].visitNumber = WorldMapCells[18][82].visitNumber = WorldMapCells[18][83].visitNumber = WorldMapCells[18][84].visitNumber = WorldMapCells[18][85].visitNumber = WorldMapCells[18][86].visitNumber = WorldMapCells[18][87].visitNumber = WorldMapCells[18][88].visitNumber = WorldMapCells[18][89].visitNumber = WorldMapCells[18][90].visitNumber = WorldMapCells[18][91].visitNumber = WorldMapCells[18][92].visitNumber = WorldMapCells[18][93].visitNumber = WorldMapCells[18][94].visitNumber = WorldMapCells[18][95].visitNumber = WorldMapCells[18][96].visitNumber = WorldMapCells[18][97].visitNumber = WorldMapCells[18][98].visitNumber = WorldMapCells[18][99].visitNumber = 3;
                }
                else if (WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true
                    || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
                    || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true)
                {
                    WorldMapCells[7][0].visitNumber = WorldMapCells[7][1].visitNumber = WorldMapCells[7][2].visitNumber = WorldMapCells[7][3].visitNumber = WorldMapCells[7][4].visitNumber = WorldMapCells[7][5].visitNumber = WorldMapCells[7][6].visitNumber = WorldMapCells[7][7].visitNumber = WorldMapCells[7][8].visitNumber = WorldMapCells[7][9].visitNumber = WorldMapCells[7][10].visitNumber = WorldMapCells[7][11].visitNumber = WorldMapCells[7][12].visitNumber = WorldMapCells[7][13].visitNumber = WorldMapCells[7][14].visitNumber = WorldMapCells[7][15].visitNumber = WorldMapCells[7][16].visitNumber = WorldMapCells[7][17].visitNumber = WorldMapCells[7][18].visitNumber = WorldMapCells[7][19].visitNumber = WorldMapCells[7][20].visitNumber = WorldMapCells[7][21].visitNumber = WorldMapCells[7][22].visitNumber = WorldMapCells[7][23].visitNumber = WorldMapCells[7][24].visitNumber = WorldMapCells[7][25].visitNumber = WorldMapCells[7][26].visitNumber = WorldMapCells[7][27].visitNumber = WorldMapCells[7][28].visitNumber = WorldMapCells[7][29].visitNumber = WorldMapCells[7][30].visitNumber = WorldMapCells[7][31].visitNumber = WorldMapCells[7][32].visitNumber = WorldMapCells[7][33].visitNumber = WorldMapCells[7][34].visitNumber = WorldMapCells[7][35].visitNumber = WorldMapCells[7][36].visitNumber = WorldMapCells[7][37].visitNumber = WorldMapCells[7][38].visitNumber = WorldMapCells[7][39].visitNumber = WorldMapCells[7][40].visitNumber = WorldMapCells[7][41].visitNumber = WorldMapCells[7][42].visitNumber = WorldMapCells[7][43].visitNumber = WorldMapCells[7][44].visitNumber = WorldMapCells[7][45].visitNumber = WorldMapCells[7][46].visitNumber = WorldMapCells[7][47].visitNumber = WorldMapCells[7][48].visitNumber = WorldMapCells[7][49].visitNumber = WorldMapCells[7][50].visitNumber = WorldMapCells[7][51].visitNumber = WorldMapCells[7][52].visitNumber = WorldMapCells[7][53].visitNumber = WorldMapCells[7][54].visitNumber = WorldMapCells[7][55].visitNumber = WorldMapCells[7][56].visitNumber = WorldMapCells[7][57].visitNumber = WorldMapCells[7][58].visitNumber = WorldMapCells[7][59].visitNumber = WorldMapCells[7][60].visitNumber = WorldMapCells[7][61].visitNumber = WorldMapCells[7][62].visitNumber = WorldMapCells[7][63].visitNumber = WorldMapCells[7][64].visitNumber = WorldMapCells[7][65].visitNumber = WorldMapCells[7][66].visitNumber = WorldMapCells[7][67].visitNumber = WorldMapCells[7][68].visitNumber = WorldMapCells[7][69].visitNumber = WorldMapCells[7][70].visitNumber = WorldMapCells[7][71].visitNumber = WorldMapCells[7][72].visitNumber = WorldMapCells[7][73].visitNumber = WorldMapCells[7][74].visitNumber = WorldMapCells[7][75].visitNumber = WorldMapCells[7][76].visitNumber = WorldMapCells[7][77].visitNumber = WorldMapCells[7][78].visitNumber = WorldMapCells[7][79].visitNumber = WorldMapCells[7][80].visitNumber = WorldMapCells[7][81].visitNumber = WorldMapCells[7][82].visitNumber = WorldMapCells[7][83].visitNumber = WorldMapCells[7][84].visitNumber = WorldMapCells[7][85].visitNumber = WorldMapCells[7][86].visitNumber = WorldMapCells[7][87].visitNumber = WorldMapCells[7][88].visitNumber = WorldMapCells[7][89].visitNumber = WorldMapCells[7][90].visitNumber = WorldMapCells[7][91].visitNumber = WorldMapCells[7][92].visitNumber = WorldMapCells[7][93].visitNumber = WorldMapCells[7][94].visitNumber = WorldMapCells[7][95].visitNumber = WorldMapCells[7][96].visitNumber = WorldMapCells[7][97].visitNumber = WorldMapCells[7][98].visitNumber = WorldMapCells[7][99].visitNumber = 4;
                    WorldMapCells[17][0].visitNumber = WorldMapCells[17][1].visitNumber = WorldMapCells[17][2].visitNumber = WorldMapCells[17][3].visitNumber = WorldMapCells[17][4].visitNumber = WorldMapCells[17][5].visitNumber = WorldMapCells[17][6].visitNumber = WorldMapCells[17][7].visitNumber = WorldMapCells[17][8].visitNumber = WorldMapCells[17][9].visitNumber = WorldMapCells[17][10].visitNumber = WorldMapCells[17][11].visitNumber = WorldMapCells[17][12].visitNumber = WorldMapCells[17][13].visitNumber = WorldMapCells[17][14].visitNumber = WorldMapCells[17][15].visitNumber = WorldMapCells[17][16].visitNumber = WorldMapCells[17][17].visitNumber = WorldMapCells[17][18].visitNumber = WorldMapCells[17][19].visitNumber = WorldMapCells[17][20].visitNumber = WorldMapCells[17][21].visitNumber = WorldMapCells[17][22].visitNumber = WorldMapCells[17][23].visitNumber = WorldMapCells[17][24].visitNumber = WorldMapCells[17][25].visitNumber = WorldMapCells[17][26].visitNumber = WorldMapCells[17][27].visitNumber = WorldMapCells[17][28].visitNumber = WorldMapCells[17][29].visitNumber = WorldMapCells[17][30].visitNumber = WorldMapCells[17][31].visitNumber = WorldMapCells[17][32].visitNumber = WorldMapCells[17][33].visitNumber = WorldMapCells[17][34].visitNumber = WorldMapCells[17][35].visitNumber = WorldMapCells[17][36].visitNumber = WorldMapCells[17][37].visitNumber = WorldMapCells[17][38].visitNumber = WorldMapCells[17][39].visitNumber = WorldMapCells[17][40].visitNumber = WorldMapCells[17][41].visitNumber = WorldMapCells[17][42].visitNumber = WorldMapCells[17][43].visitNumber = WorldMapCells[17][44].visitNumber = WorldMapCells[17][45].visitNumber = WorldMapCells[17][46].visitNumber = WorldMapCells[17][47].visitNumber = WorldMapCells[17][48].visitNumber = WorldMapCells[17][49].visitNumber = WorldMapCells[17][50].visitNumber = WorldMapCells[17][51].visitNumber = WorldMapCells[17][52].visitNumber = WorldMapCells[17][53].visitNumber = WorldMapCells[17][54].visitNumber = WorldMapCells[17][55].visitNumber = WorldMapCells[17][56].visitNumber = WorldMapCells[17][57].visitNumber = WorldMapCells[17][58].visitNumber = WorldMapCells[17][59].visitNumber = WorldMapCells[17][60].visitNumber = WorldMapCells[17][61].visitNumber = WorldMapCells[17][62].visitNumber = WorldMapCells[17][63].visitNumber = WorldMapCells[17][64].visitNumber = WorldMapCells[17][65].visitNumber = WorldMapCells[17][66].visitNumber = WorldMapCells[17][67].visitNumber = WorldMapCells[17][68].visitNumber = WorldMapCells[17][69].visitNumber = WorldMapCells[17][70].visitNumber = WorldMapCells[17][71].visitNumber = WorldMapCells[17][72].visitNumber = WorldMapCells[17][73].visitNumber = WorldMapCells[17][74].visitNumber = WorldMapCells[17][75].visitNumber = WorldMapCells[17][76].visitNumber = WorldMapCells[17][77].visitNumber = WorldMapCells[17][78].visitNumber = WorldMapCells[17][79].visitNumber = WorldMapCells[17][80].visitNumber = WorldMapCells[17][81].visitNumber = WorldMapCells[17][82].visitNumber = WorldMapCells[17][83].visitNumber = WorldMapCells[17][84].visitNumber = WorldMapCells[17][85].visitNumber = WorldMapCells[17][86].visitNumber = WorldMapCells[17][87].visitNumber = WorldMapCells[17][88].visitNumber = WorldMapCells[17][89].visitNumber = WorldMapCells[17][90].visitNumber = WorldMapCells[17][91].visitNumber = WorldMapCells[17][92].visitNumber = WorldMapCells[17][93].visitNumber = WorldMapCells[17][94].visitNumber = WorldMapCells[17][95].visitNumber = WorldMapCells[17][96].visitNumber = WorldMapCells[17][97].visitNumber = WorldMapCells[17][98].visitNumber = WorldMapCells[17][99].visitNumber = 4;
                    WorldMapCells[18][0].visitNumber = WorldMapCells[18][1].visitNumber = WorldMapCells[18][2].visitNumber = WorldMapCells[18][3].visitNumber = WorldMapCells[18][4].visitNumber = WorldMapCells[18][5].visitNumber = WorldMapCells[18][6].visitNumber = WorldMapCells[18][7].visitNumber = WorldMapCells[18][8].visitNumber = WorldMapCells[18][9].visitNumber = WorldMapCells[18][10].visitNumber = WorldMapCells[18][11].visitNumber = WorldMapCells[18][12].visitNumber = WorldMapCells[18][13].visitNumber = WorldMapCells[18][14].visitNumber = WorldMapCells[18][15].visitNumber = WorldMapCells[18][16].visitNumber = WorldMapCells[18][17].visitNumber = WorldMapCells[18][18].visitNumber = WorldMapCells[18][19].visitNumber = WorldMapCells[18][20].visitNumber = WorldMapCells[18][21].visitNumber = WorldMapCells[18][22].visitNumber = WorldMapCells[18][23].visitNumber = WorldMapCells[18][24].visitNumber = WorldMapCells[18][25].visitNumber = WorldMapCells[18][26].visitNumber = WorldMapCells[18][27].visitNumber = WorldMapCells[18][28].visitNumber = WorldMapCells[18][29].visitNumber = WorldMapCells[18][30].visitNumber = WorldMapCells[18][31].visitNumber = WorldMapCells[18][32].visitNumber = WorldMapCells[18][33].visitNumber = WorldMapCells[18][34].visitNumber = WorldMapCells[18][35].visitNumber = WorldMapCells[18][36].visitNumber = WorldMapCells[18][37].visitNumber = WorldMapCells[18][38].visitNumber = WorldMapCells[18][39].visitNumber = WorldMapCells[18][40].visitNumber = WorldMapCells[18][41].visitNumber = WorldMapCells[18][42].visitNumber = WorldMapCells[18][43].visitNumber = WorldMapCells[18][44].visitNumber = WorldMapCells[18][45].visitNumber = WorldMapCells[18][46].visitNumber = WorldMapCells[18][47].visitNumber = WorldMapCells[18][48].visitNumber = WorldMapCells[18][49].visitNumber = WorldMapCells[18][50].visitNumber = WorldMapCells[18][51].visitNumber = WorldMapCells[18][52].visitNumber = WorldMapCells[18][53].visitNumber = WorldMapCells[18][54].visitNumber = WorldMapCells[18][55].visitNumber = WorldMapCells[18][56].visitNumber = WorldMapCells[18][57].visitNumber = WorldMapCells[18][58].visitNumber = WorldMapCells[18][59].visitNumber = WorldMapCells[18][60].visitNumber = WorldMapCells[18][61].visitNumber = WorldMapCells[18][62].visitNumber = WorldMapCells[18][63].visitNumber = WorldMapCells[18][64].visitNumber = WorldMapCells[18][65].visitNumber = WorldMapCells[18][66].visitNumber = WorldMapCells[18][67].visitNumber = WorldMapCells[18][68].visitNumber = WorldMapCells[18][69].visitNumber = WorldMapCells[18][70].visitNumber = WorldMapCells[18][71].visitNumber = WorldMapCells[18][72].visitNumber = WorldMapCells[18][73].visitNumber = WorldMapCells[18][74].visitNumber = WorldMapCells[18][75].visitNumber = WorldMapCells[18][76].visitNumber = WorldMapCells[18][77].visitNumber = WorldMapCells[18][78].visitNumber = WorldMapCells[18][79].visitNumber = WorldMapCells[18][80].visitNumber = WorldMapCells[18][81].visitNumber = WorldMapCells[18][82].visitNumber = WorldMapCells[18][83].visitNumber = WorldMapCells[18][84].visitNumber = WorldMapCells[18][85].visitNumber = WorldMapCells[18][86].visitNumber = WorldMapCells[18][87].visitNumber = WorldMapCells[18][88].visitNumber = WorldMapCells[18][89].visitNumber = WorldMapCells[18][90].visitNumber = WorldMapCells[18][91].visitNumber = WorldMapCells[18][92].visitNumber = WorldMapCells[18][93].visitNumber = WorldMapCells[18][94].visitNumber = WorldMapCells[18][95].visitNumber = WorldMapCells[18][96].visitNumber = WorldMapCells[18][97].visitNumber = WorldMapCells[18][98].visitNumber = WorldMapCells[18][99].visitNumber = 4;
                }
                else if (WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true)
                {
                    WorldMapCells[7][0].visitNumber = WorldMapCells[7][1].visitNumber = WorldMapCells[7][2].visitNumber = WorldMapCells[7][3].visitNumber = WorldMapCells[7][4].visitNumber = WorldMapCells[7][5].visitNumber = WorldMapCells[7][6].visitNumber = WorldMapCells[7][7].visitNumber = WorldMapCells[7][8].visitNumber = WorldMapCells[7][9].visitNumber = WorldMapCells[7][10].visitNumber = WorldMapCells[7][11].visitNumber = WorldMapCells[7][12].visitNumber = WorldMapCells[7][13].visitNumber = WorldMapCells[7][14].visitNumber = WorldMapCells[7][15].visitNumber = WorldMapCells[7][16].visitNumber = WorldMapCells[7][17].visitNumber = WorldMapCells[7][18].visitNumber = WorldMapCells[7][19].visitNumber = WorldMapCells[7][20].visitNumber = WorldMapCells[7][21].visitNumber = WorldMapCells[7][22].visitNumber = WorldMapCells[7][23].visitNumber = WorldMapCells[7][24].visitNumber = WorldMapCells[7][25].visitNumber = WorldMapCells[7][26].visitNumber = WorldMapCells[7][27].visitNumber = WorldMapCells[7][28].visitNumber = WorldMapCells[7][29].visitNumber = WorldMapCells[7][30].visitNumber = WorldMapCells[7][31].visitNumber = WorldMapCells[7][32].visitNumber = WorldMapCells[7][33].visitNumber = WorldMapCells[7][34].visitNumber = WorldMapCells[7][35].visitNumber = WorldMapCells[7][36].visitNumber = WorldMapCells[7][37].visitNumber = WorldMapCells[7][38].visitNumber = WorldMapCells[7][39].visitNumber = WorldMapCells[7][40].visitNumber = WorldMapCells[7][41].visitNumber = WorldMapCells[7][42].visitNumber = WorldMapCells[7][43].visitNumber = WorldMapCells[7][44].visitNumber = WorldMapCells[7][45].visitNumber = WorldMapCells[7][46].visitNumber = WorldMapCells[7][47].visitNumber = WorldMapCells[7][48].visitNumber = WorldMapCells[7][49].visitNumber = WorldMapCells[7][50].visitNumber = WorldMapCells[7][51].visitNumber = WorldMapCells[7][52].visitNumber = WorldMapCells[7][53].visitNumber = WorldMapCells[7][54].visitNumber = WorldMapCells[7][55].visitNumber = WorldMapCells[7][56].visitNumber = WorldMapCells[7][57].visitNumber = WorldMapCells[7][58].visitNumber = WorldMapCells[7][59].visitNumber = WorldMapCells[7][60].visitNumber = WorldMapCells[7][61].visitNumber = WorldMapCells[7][62].visitNumber = WorldMapCells[7][63].visitNumber = WorldMapCells[7][64].visitNumber = WorldMapCells[7][65].visitNumber = WorldMapCells[7][66].visitNumber = WorldMapCells[7][67].visitNumber = WorldMapCells[7][68].visitNumber = WorldMapCells[7][69].visitNumber = WorldMapCells[7][70].visitNumber = WorldMapCells[7][71].visitNumber = WorldMapCells[7][72].visitNumber = WorldMapCells[7][73].visitNumber = WorldMapCells[7][74].visitNumber = WorldMapCells[7][75].visitNumber = WorldMapCells[7][76].visitNumber = WorldMapCells[7][77].visitNumber = WorldMapCells[7][78].visitNumber = WorldMapCells[7][79].visitNumber = WorldMapCells[7][80].visitNumber = WorldMapCells[7][81].visitNumber = WorldMapCells[7][82].visitNumber = WorldMapCells[7][83].visitNumber = WorldMapCells[7][84].visitNumber = WorldMapCells[7][85].visitNumber = WorldMapCells[7][86].visitNumber = WorldMapCells[7][87].visitNumber = WorldMapCells[7][88].visitNumber = WorldMapCells[7][89].visitNumber = WorldMapCells[7][90].visitNumber = WorldMapCells[7][91].visitNumber = WorldMapCells[7][92].visitNumber = WorldMapCells[7][93].visitNumber = WorldMapCells[7][94].visitNumber = WorldMapCells[7][95].visitNumber = WorldMapCells[7][96].visitNumber = WorldMapCells[7][97].visitNumber = WorldMapCells[7][98].visitNumber = WorldMapCells[7][99].visitNumber = 5;
                    WorldMapCells[17][0].visitNumber = WorldMapCells[17][1].visitNumber = WorldMapCells[17][2].visitNumber = WorldMapCells[17][3].visitNumber = WorldMapCells[17][4].visitNumber = WorldMapCells[17][5].visitNumber = WorldMapCells[17][6].visitNumber = WorldMapCells[17][7].visitNumber = WorldMapCells[17][8].visitNumber = WorldMapCells[17][9].visitNumber = WorldMapCells[17][10].visitNumber = WorldMapCells[17][11].visitNumber = WorldMapCells[17][12].visitNumber = WorldMapCells[17][13].visitNumber = WorldMapCells[17][14].visitNumber = WorldMapCells[17][15].visitNumber = WorldMapCells[17][16].visitNumber = WorldMapCells[17][17].visitNumber = WorldMapCells[17][18].visitNumber = WorldMapCells[17][19].visitNumber = WorldMapCells[17][20].visitNumber = WorldMapCells[17][21].visitNumber = WorldMapCells[17][22].visitNumber = WorldMapCells[17][23].visitNumber = WorldMapCells[17][24].visitNumber = WorldMapCells[17][25].visitNumber = WorldMapCells[17][26].visitNumber = WorldMapCells[17][27].visitNumber = WorldMapCells[17][28].visitNumber = WorldMapCells[17][29].visitNumber = WorldMapCells[17][30].visitNumber = WorldMapCells[17][31].visitNumber = WorldMapCells[17][32].visitNumber = WorldMapCells[17][33].visitNumber = WorldMapCells[17][34].visitNumber = WorldMapCells[17][35].visitNumber = WorldMapCells[17][36].visitNumber = WorldMapCells[17][37].visitNumber = WorldMapCells[17][38].visitNumber = WorldMapCells[17][39].visitNumber = WorldMapCells[17][40].visitNumber = WorldMapCells[17][41].visitNumber = WorldMapCells[17][42].visitNumber = WorldMapCells[17][43].visitNumber = WorldMapCells[17][44].visitNumber = WorldMapCells[17][45].visitNumber = WorldMapCells[17][46].visitNumber = WorldMapCells[17][47].visitNumber = WorldMapCells[17][48].visitNumber = WorldMapCells[17][49].visitNumber = WorldMapCells[17][50].visitNumber = WorldMapCells[17][51].visitNumber = WorldMapCells[17][52].visitNumber = WorldMapCells[17][53].visitNumber = WorldMapCells[17][54].visitNumber = WorldMapCells[17][55].visitNumber = WorldMapCells[17][56].visitNumber = WorldMapCells[17][57].visitNumber = WorldMapCells[17][58].visitNumber = WorldMapCells[17][59].visitNumber = WorldMapCells[17][60].visitNumber = WorldMapCells[17][61].visitNumber = WorldMapCells[17][62].visitNumber = WorldMapCells[17][63].visitNumber = WorldMapCells[17][64].visitNumber = WorldMapCells[17][65].visitNumber = WorldMapCells[17][66].visitNumber = WorldMapCells[17][67].visitNumber = WorldMapCells[17][68].visitNumber = WorldMapCells[17][69].visitNumber = WorldMapCells[17][70].visitNumber = WorldMapCells[17][71].visitNumber = WorldMapCells[17][72].visitNumber = WorldMapCells[17][73].visitNumber = WorldMapCells[17][74].visitNumber = WorldMapCells[17][75].visitNumber = WorldMapCells[17][76].visitNumber = WorldMapCells[17][77].visitNumber = WorldMapCells[17][78].visitNumber = WorldMapCells[17][79].visitNumber = WorldMapCells[17][80].visitNumber = WorldMapCells[17][81].visitNumber = WorldMapCells[17][82].visitNumber = WorldMapCells[17][83].visitNumber = WorldMapCells[17][84].visitNumber = WorldMapCells[17][85].visitNumber = WorldMapCells[17][86].visitNumber = WorldMapCells[17][87].visitNumber = WorldMapCells[17][88].visitNumber = WorldMapCells[17][89].visitNumber = WorldMapCells[17][90].visitNumber = WorldMapCells[17][91].visitNumber = WorldMapCells[17][92].visitNumber = WorldMapCells[17][93].visitNumber = WorldMapCells[17][94].visitNumber = WorldMapCells[17][95].visitNumber = WorldMapCells[17][96].visitNumber = WorldMapCells[17][97].visitNumber = WorldMapCells[17][98].visitNumber = WorldMapCells[17][99].visitNumber = 5;
                    WorldMapCells[18][0].visitNumber = WorldMapCells[18][1].visitNumber = WorldMapCells[18][2].visitNumber = WorldMapCells[18][3].visitNumber = WorldMapCells[18][4].visitNumber = WorldMapCells[18][5].visitNumber = WorldMapCells[18][6].visitNumber = WorldMapCells[18][7].visitNumber = WorldMapCells[18][8].visitNumber = WorldMapCells[18][9].visitNumber = WorldMapCells[18][10].visitNumber = WorldMapCells[18][11].visitNumber = WorldMapCells[18][12].visitNumber = WorldMapCells[18][13].visitNumber = WorldMapCells[18][14].visitNumber = WorldMapCells[18][15].visitNumber = WorldMapCells[18][16].visitNumber = WorldMapCells[18][17].visitNumber = WorldMapCells[18][18].visitNumber = WorldMapCells[18][19].visitNumber = WorldMapCells[18][20].visitNumber = WorldMapCells[18][21].visitNumber = WorldMapCells[18][22].visitNumber = WorldMapCells[18][23].visitNumber = WorldMapCells[18][24].visitNumber = WorldMapCells[18][25].visitNumber = WorldMapCells[18][26].visitNumber = WorldMapCells[18][27].visitNumber = WorldMapCells[18][28].visitNumber = WorldMapCells[18][29].visitNumber = WorldMapCells[18][30].visitNumber = WorldMapCells[18][31].visitNumber = WorldMapCells[18][32].visitNumber = WorldMapCells[18][33].visitNumber = WorldMapCells[18][34].visitNumber = WorldMapCells[18][35].visitNumber = WorldMapCells[18][36].visitNumber = WorldMapCells[18][37].visitNumber = WorldMapCells[18][38].visitNumber = WorldMapCells[18][39].visitNumber = WorldMapCells[18][40].visitNumber = WorldMapCells[18][41].visitNumber = WorldMapCells[18][42].visitNumber = WorldMapCells[18][43].visitNumber = WorldMapCells[18][44].visitNumber = WorldMapCells[18][45].visitNumber = WorldMapCells[18][46].visitNumber = WorldMapCells[18][47].visitNumber = WorldMapCells[18][48].visitNumber = WorldMapCells[18][49].visitNumber = WorldMapCells[18][50].visitNumber = WorldMapCells[18][51].visitNumber = WorldMapCells[18][52].visitNumber = WorldMapCells[18][53].visitNumber = WorldMapCells[18][54].visitNumber = WorldMapCells[18][55].visitNumber = WorldMapCells[18][56].visitNumber = WorldMapCells[18][57].visitNumber = WorldMapCells[18][58].visitNumber = WorldMapCells[18][59].visitNumber = WorldMapCells[18][60].visitNumber = WorldMapCells[18][61].visitNumber = WorldMapCells[18][62].visitNumber = WorldMapCells[18][63].visitNumber = WorldMapCells[18][64].visitNumber = WorldMapCells[18][65].visitNumber = WorldMapCells[18][66].visitNumber = WorldMapCells[18][67].visitNumber = WorldMapCells[18][68].visitNumber = WorldMapCells[18][69].visitNumber = WorldMapCells[18][70].visitNumber = WorldMapCells[18][71].visitNumber = WorldMapCells[18][72].visitNumber = WorldMapCells[18][73].visitNumber = WorldMapCells[18][74].visitNumber = WorldMapCells[18][75].visitNumber = WorldMapCells[18][76].visitNumber = WorldMapCells[18][77].visitNumber = WorldMapCells[18][78].visitNumber = WorldMapCells[18][79].visitNumber = WorldMapCells[18][80].visitNumber = WorldMapCells[18][81].visitNumber = WorldMapCells[18][82].visitNumber = WorldMapCells[18][83].visitNumber = WorldMapCells[18][84].visitNumber = WorldMapCells[18][85].visitNumber = WorldMapCells[18][86].visitNumber = WorldMapCells[18][87].visitNumber = WorldMapCells[18][88].visitNumber = WorldMapCells[18][89].visitNumber = WorldMapCells[18][90].visitNumber = WorldMapCells[18][91].visitNumber = WorldMapCells[18][92].visitNumber = WorldMapCells[18][93].visitNumber = WorldMapCells[18][94].visitNumber = WorldMapCells[18][95].visitNumber = WorldMapCells[18][96].visitNumber = WorldMapCells[18][97].visitNumber = WorldMapCells[18][98].visitNumber = WorldMapCells[18][99].visitNumber = 5;
                }
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapName == WorldMapCells[8][11].mapName && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == WorldMapCells[8][11].cellLocation && WorldMapCells[8][11].firstVisit == true) //earth
            {
                WorldMapCells[8][11].firstVisit = false;
                if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false)
                {
                    WorldMapCells[8][0].visitNumber = WorldMapCells[8][1].visitNumber = WorldMapCells[8][2].visitNumber = WorldMapCells[8][3].visitNumber = WorldMapCells[8][4].visitNumber = WorldMapCells[8][5].visitNumber = WorldMapCells[8][6].visitNumber = WorldMapCells[8][7].visitNumber = WorldMapCells[8][8].visitNumber = WorldMapCells[8][9].visitNumber = WorldMapCells[8][10].visitNumber = WorldMapCells[8][11].visitNumber = WorldMapCells[8][12].visitNumber = WorldMapCells[8][13].visitNumber = WorldMapCells[8][14].visitNumber = WorldMapCells[8][15].visitNumber = WorldMapCells[8][16].visitNumber = WorldMapCells[8][17].visitNumber = WorldMapCells[8][18].visitNumber = WorldMapCells[8][19].visitNumber = WorldMapCells[8][20].visitNumber = WorldMapCells[8][21].visitNumber = WorldMapCells[8][22].visitNumber = WorldMapCells[8][23].visitNumber = WorldMapCells[8][24].visitNumber = WorldMapCells[8][25].visitNumber = WorldMapCells[8][26].visitNumber = WorldMapCells[8][27].visitNumber = WorldMapCells[8][28].visitNumber = WorldMapCells[8][29].visitNumber = WorldMapCells[8][30].visitNumber = WorldMapCells[8][31].visitNumber = WorldMapCells[8][32].visitNumber = WorldMapCells[8][33].visitNumber = WorldMapCells[8][34].visitNumber = WorldMapCells[8][35].visitNumber = WorldMapCells[8][36].visitNumber = WorldMapCells[8][37].visitNumber = WorldMapCells[8][38].visitNumber = WorldMapCells[8][39].visitNumber = WorldMapCells[8][40].visitNumber = WorldMapCells[8][41].visitNumber = WorldMapCells[8][42].visitNumber = WorldMapCells[8][43].visitNumber = WorldMapCells[8][44].visitNumber = WorldMapCells[8][45].visitNumber = WorldMapCells[8][46].visitNumber = WorldMapCells[8][47].visitNumber = WorldMapCells[8][48].visitNumber = WorldMapCells[8][49].visitNumber = WorldMapCells[8][50].visitNumber = WorldMapCells[8][51].visitNumber = WorldMapCells[8][52].visitNumber = WorldMapCells[8][53].visitNumber = WorldMapCells[8][54].visitNumber = WorldMapCells[8][55].visitNumber = WorldMapCells[8][56].visitNumber = WorldMapCells[8][57].visitNumber = WorldMapCells[8][58].visitNumber = WorldMapCells[8][59].visitNumber = WorldMapCells[8][60].visitNumber = WorldMapCells[8][61].visitNumber = WorldMapCells[8][62].visitNumber = WorldMapCells[8][63].visitNumber = WorldMapCells[8][64].visitNumber = WorldMapCells[8][65].visitNumber = WorldMapCells[8][66].visitNumber = WorldMapCells[8][67].visitNumber = WorldMapCells[8][68].visitNumber = WorldMapCells[8][69].visitNumber = WorldMapCells[8][70].visitNumber = WorldMapCells[8][71].visitNumber = WorldMapCells[8][72].visitNumber = WorldMapCells[8][73].visitNumber = WorldMapCells[8][74].visitNumber = WorldMapCells[8][75].visitNumber = WorldMapCells[8][76].visitNumber = WorldMapCells[8][77].visitNumber = WorldMapCells[8][78].visitNumber = WorldMapCells[8][79].visitNumber = WorldMapCells[8][80].visitNumber = WorldMapCells[8][81].visitNumber = WorldMapCells[8][82].visitNumber = WorldMapCells[8][83].visitNumber = WorldMapCells[8][84].visitNumber = WorldMapCells[8][85].visitNumber = WorldMapCells[8][86].visitNumber = WorldMapCells[8][87].visitNumber = WorldMapCells[8][88].visitNumber = WorldMapCells[8][89].visitNumber = WorldMapCells[8][90].visitNumber = WorldMapCells[8][91].visitNumber = WorldMapCells[8][92].visitNumber = WorldMapCells[8][93].visitNumber = WorldMapCells[8][94].visitNumber = WorldMapCells[8][95].visitNumber = WorldMapCells[8][96].visitNumber = WorldMapCells[8][97].visitNumber = WorldMapCells[8][98].visitNumber = WorldMapCells[8][99].visitNumber = 1;
                    WorldMapCells[20][0].visitNumber = WorldMapCells[20][1].visitNumber = WorldMapCells[20][2].visitNumber = WorldMapCells[20][3].visitNumber = WorldMapCells[20][4].visitNumber = WorldMapCells[20][5].visitNumber = WorldMapCells[20][6].visitNumber = WorldMapCells[20][7].visitNumber = WorldMapCells[20][8].visitNumber = WorldMapCells[20][9].visitNumber = WorldMapCells[20][10].visitNumber = WorldMapCells[20][11].visitNumber = WorldMapCells[20][12].visitNumber = WorldMapCells[20][13].visitNumber = WorldMapCells[20][14].visitNumber = WorldMapCells[20][15].visitNumber = WorldMapCells[20][16].visitNumber = WorldMapCells[20][17].visitNumber = WorldMapCells[20][18].visitNumber = WorldMapCells[20][19].visitNumber = WorldMapCells[20][20].visitNumber = WorldMapCells[20][21].visitNumber = WorldMapCells[20][22].visitNumber = WorldMapCells[20][23].visitNumber = WorldMapCells[20][24].visitNumber = WorldMapCells[20][25].visitNumber = WorldMapCells[20][26].visitNumber = WorldMapCells[20][27].visitNumber = WorldMapCells[20][28].visitNumber = WorldMapCells[20][29].visitNumber = WorldMapCells[20][30].visitNumber = WorldMapCells[20][31].visitNumber = WorldMapCells[20][32].visitNumber = WorldMapCells[20][33].visitNumber = WorldMapCells[20][34].visitNumber = WorldMapCells[20][35].visitNumber = WorldMapCells[20][36].visitNumber = WorldMapCells[20][37].visitNumber = WorldMapCells[20][38].visitNumber = WorldMapCells[20][39].visitNumber = WorldMapCells[20][40].visitNumber = WorldMapCells[20][41].visitNumber = WorldMapCells[20][42].visitNumber = WorldMapCells[20][43].visitNumber = WorldMapCells[20][44].visitNumber = WorldMapCells[20][45].visitNumber = WorldMapCells[20][46].visitNumber = WorldMapCells[20][47].visitNumber = WorldMapCells[20][48].visitNumber = WorldMapCells[20][49].visitNumber = WorldMapCells[20][50].visitNumber = WorldMapCells[20][51].visitNumber = WorldMapCells[20][52].visitNumber = WorldMapCells[20][53].visitNumber = WorldMapCells[20][54].visitNumber = WorldMapCells[20][55].visitNumber = WorldMapCells[20][56].visitNumber = WorldMapCells[20][57].visitNumber = WorldMapCells[20][58].visitNumber = WorldMapCells[20][59].visitNumber = WorldMapCells[20][60].visitNumber = WorldMapCells[20][61].visitNumber = WorldMapCells[20][62].visitNumber = WorldMapCells[20][63].visitNumber = WorldMapCells[20][64].visitNumber = WorldMapCells[20][65].visitNumber = WorldMapCells[20][66].visitNumber = WorldMapCells[20][67].visitNumber = WorldMapCells[20][68].visitNumber = WorldMapCells[20][69].visitNumber = WorldMapCells[20][70].visitNumber = WorldMapCells[20][71].visitNumber = WorldMapCells[20][72].visitNumber = WorldMapCells[20][73].visitNumber = WorldMapCells[20][74].visitNumber = WorldMapCells[20][75].visitNumber = WorldMapCells[20][76].visitNumber = WorldMapCells[20][77].visitNumber = WorldMapCells[20][78].visitNumber = WorldMapCells[20][79].visitNumber = WorldMapCells[20][80].visitNumber = WorldMapCells[20][81].visitNumber = WorldMapCells[20][82].visitNumber = WorldMapCells[20][83].visitNumber = WorldMapCells[20][84].visitNumber = WorldMapCells[20][85].visitNumber = WorldMapCells[20][86].visitNumber = WorldMapCells[20][87].visitNumber = WorldMapCells[20][88].visitNumber = WorldMapCells[20][89].visitNumber = WorldMapCells[20][90].visitNumber = WorldMapCells[20][91].visitNumber = WorldMapCells[20][92].visitNumber = WorldMapCells[20][93].visitNumber = WorldMapCells[20][94].visitNumber = WorldMapCells[20][95].visitNumber = WorldMapCells[20][96].visitNumber = WorldMapCells[20][97].visitNumber = WorldMapCells[20][98].visitNumber = WorldMapCells[20][99].visitNumber = 1;
                    WorldMapCells[21][0].visitNumber = WorldMapCells[21][1].visitNumber = WorldMapCells[21][2].visitNumber = WorldMapCells[21][3].visitNumber = WorldMapCells[21][4].visitNumber = WorldMapCells[21][5].visitNumber = WorldMapCells[21][6].visitNumber = WorldMapCells[21][7].visitNumber = WorldMapCells[21][8].visitNumber = WorldMapCells[21][9].visitNumber = WorldMapCells[21][10].visitNumber = WorldMapCells[21][11].visitNumber = WorldMapCells[21][12].visitNumber = WorldMapCells[21][13].visitNumber = WorldMapCells[21][14].visitNumber = WorldMapCells[21][15].visitNumber = WorldMapCells[21][16].visitNumber = WorldMapCells[21][17].visitNumber = WorldMapCells[21][18].visitNumber = WorldMapCells[21][19].visitNumber = WorldMapCells[21][20].visitNumber = WorldMapCells[21][21].visitNumber = WorldMapCells[21][22].visitNumber = WorldMapCells[21][23].visitNumber = WorldMapCells[21][24].visitNumber = WorldMapCells[21][25].visitNumber = WorldMapCells[21][26].visitNumber = WorldMapCells[21][27].visitNumber = WorldMapCells[21][28].visitNumber = WorldMapCells[21][29].visitNumber = WorldMapCells[21][30].visitNumber = WorldMapCells[21][31].visitNumber = WorldMapCells[21][32].visitNumber = WorldMapCells[21][33].visitNumber = WorldMapCells[21][34].visitNumber = WorldMapCells[21][35].visitNumber = WorldMapCells[21][36].visitNumber = WorldMapCells[21][37].visitNumber = WorldMapCells[21][38].visitNumber = WorldMapCells[21][39].visitNumber = WorldMapCells[21][40].visitNumber = WorldMapCells[21][41].visitNumber = WorldMapCells[21][42].visitNumber = WorldMapCells[21][43].visitNumber = WorldMapCells[21][44].visitNumber = WorldMapCells[21][45].visitNumber = WorldMapCells[21][46].visitNumber = WorldMapCells[21][47].visitNumber = WorldMapCells[21][48].visitNumber = WorldMapCells[21][49].visitNumber = WorldMapCells[21][50].visitNumber = WorldMapCells[21][51].visitNumber = WorldMapCells[21][52].visitNumber = WorldMapCells[21][53].visitNumber = WorldMapCells[21][54].visitNumber = WorldMapCells[21][55].visitNumber = WorldMapCells[21][56].visitNumber = WorldMapCells[21][57].visitNumber = WorldMapCells[21][58].visitNumber = WorldMapCells[21][59].visitNumber = WorldMapCells[21][60].visitNumber = WorldMapCells[21][61].visitNumber = WorldMapCells[21][62].visitNumber = WorldMapCells[21][63].visitNumber = WorldMapCells[21][64].visitNumber = WorldMapCells[21][65].visitNumber = WorldMapCells[21][66].visitNumber = WorldMapCells[21][67].visitNumber = WorldMapCells[21][68].visitNumber = WorldMapCells[21][69].visitNumber = WorldMapCells[21][70].visitNumber = WorldMapCells[21][71].visitNumber = WorldMapCells[21][72].visitNumber = WorldMapCells[21][73].visitNumber = WorldMapCells[21][74].visitNumber = WorldMapCells[21][75].visitNumber = WorldMapCells[21][76].visitNumber = WorldMapCells[21][77].visitNumber = WorldMapCells[21][78].visitNumber = WorldMapCells[21][79].visitNumber = WorldMapCells[21][80].visitNumber = WorldMapCells[21][81].visitNumber = WorldMapCells[21][82].visitNumber = WorldMapCells[21][83].visitNumber = WorldMapCells[21][84].visitNumber = WorldMapCells[21][85].visitNumber = WorldMapCells[21][86].visitNumber = WorldMapCells[21][87].visitNumber = WorldMapCells[21][88].visitNumber = WorldMapCells[21][89].visitNumber = WorldMapCells[21][90].visitNumber = WorldMapCells[21][91].visitNumber = WorldMapCells[21][92].visitNumber = WorldMapCells[21][93].visitNumber = WorldMapCells[21][94].visitNumber = WorldMapCells[21][95].visitNumber = WorldMapCells[21][96].visitNumber = WorldMapCells[21][97].visitNumber = WorldMapCells[21][98].visitNumber = WorldMapCells[21][99].visitNumber = 1;
                }
                else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false)
                {
                    WorldMapCells[8][0].visitNumber = WorldMapCells[8][1].visitNumber = WorldMapCells[8][2].visitNumber = WorldMapCells[8][3].visitNumber = WorldMapCells[8][4].visitNumber = WorldMapCells[8][5].visitNumber = WorldMapCells[8][6].visitNumber = WorldMapCells[8][7].visitNumber = WorldMapCells[8][8].visitNumber = WorldMapCells[8][9].visitNumber = WorldMapCells[8][10].visitNumber = WorldMapCells[8][11].visitNumber = WorldMapCells[8][12].visitNumber = WorldMapCells[8][13].visitNumber = WorldMapCells[8][14].visitNumber = WorldMapCells[8][15].visitNumber = WorldMapCells[8][16].visitNumber = WorldMapCells[8][17].visitNumber = WorldMapCells[8][18].visitNumber = WorldMapCells[8][19].visitNumber = WorldMapCells[8][20].visitNumber = WorldMapCells[8][21].visitNumber = WorldMapCells[8][22].visitNumber = WorldMapCells[8][23].visitNumber = WorldMapCells[8][24].visitNumber = WorldMapCells[8][25].visitNumber = WorldMapCells[8][26].visitNumber = WorldMapCells[8][27].visitNumber = WorldMapCells[8][28].visitNumber = WorldMapCells[8][29].visitNumber = WorldMapCells[8][30].visitNumber = WorldMapCells[8][31].visitNumber = WorldMapCells[8][32].visitNumber = WorldMapCells[8][33].visitNumber = WorldMapCells[8][34].visitNumber = WorldMapCells[8][35].visitNumber = WorldMapCells[8][36].visitNumber = WorldMapCells[8][37].visitNumber = WorldMapCells[8][38].visitNumber = WorldMapCells[8][39].visitNumber = WorldMapCells[8][40].visitNumber = WorldMapCells[8][41].visitNumber = WorldMapCells[8][42].visitNumber = WorldMapCells[8][43].visitNumber = WorldMapCells[8][44].visitNumber = WorldMapCells[8][45].visitNumber = WorldMapCells[8][46].visitNumber = WorldMapCells[8][47].visitNumber = WorldMapCells[8][48].visitNumber = WorldMapCells[8][49].visitNumber = WorldMapCells[8][50].visitNumber = WorldMapCells[8][51].visitNumber = WorldMapCells[8][52].visitNumber = WorldMapCells[8][53].visitNumber = WorldMapCells[8][54].visitNumber = WorldMapCells[8][55].visitNumber = WorldMapCells[8][56].visitNumber = WorldMapCells[8][57].visitNumber = WorldMapCells[8][58].visitNumber = WorldMapCells[8][59].visitNumber = WorldMapCells[8][60].visitNumber = WorldMapCells[8][61].visitNumber = WorldMapCells[8][62].visitNumber = WorldMapCells[8][63].visitNumber = WorldMapCells[8][64].visitNumber = WorldMapCells[8][65].visitNumber = WorldMapCells[8][66].visitNumber = WorldMapCells[8][67].visitNumber = WorldMapCells[8][68].visitNumber = WorldMapCells[8][69].visitNumber = WorldMapCells[8][70].visitNumber = WorldMapCells[8][71].visitNumber = WorldMapCells[8][72].visitNumber = WorldMapCells[8][73].visitNumber = WorldMapCells[8][74].visitNumber = WorldMapCells[8][75].visitNumber = WorldMapCells[8][76].visitNumber = WorldMapCells[8][77].visitNumber = WorldMapCells[8][78].visitNumber = WorldMapCells[8][79].visitNumber = WorldMapCells[8][80].visitNumber = WorldMapCells[8][81].visitNumber = WorldMapCells[8][82].visitNumber = WorldMapCells[8][83].visitNumber = WorldMapCells[8][84].visitNumber = WorldMapCells[8][85].visitNumber = WorldMapCells[8][86].visitNumber = WorldMapCells[8][87].visitNumber = WorldMapCells[8][88].visitNumber = WorldMapCells[8][89].visitNumber = WorldMapCells[8][90].visitNumber = WorldMapCells[8][91].visitNumber = WorldMapCells[8][92].visitNumber = WorldMapCells[8][93].visitNumber = WorldMapCells[8][94].visitNumber = WorldMapCells[8][95].visitNumber = WorldMapCells[8][96].visitNumber = WorldMapCells[8][97].visitNumber = WorldMapCells[8][98].visitNumber = WorldMapCells[8][99].visitNumber = 2;
                    WorldMapCells[20][0].visitNumber = WorldMapCells[20][1].visitNumber = WorldMapCells[20][2].visitNumber = WorldMapCells[20][3].visitNumber = WorldMapCells[20][4].visitNumber = WorldMapCells[20][5].visitNumber = WorldMapCells[20][6].visitNumber = WorldMapCells[20][7].visitNumber = WorldMapCells[20][8].visitNumber = WorldMapCells[20][9].visitNumber = WorldMapCells[20][10].visitNumber = WorldMapCells[20][11].visitNumber = WorldMapCells[20][12].visitNumber = WorldMapCells[20][13].visitNumber = WorldMapCells[20][14].visitNumber = WorldMapCells[20][15].visitNumber = WorldMapCells[20][16].visitNumber = WorldMapCells[20][17].visitNumber = WorldMapCells[20][18].visitNumber = WorldMapCells[20][19].visitNumber = WorldMapCells[20][20].visitNumber = WorldMapCells[20][21].visitNumber = WorldMapCells[20][22].visitNumber = WorldMapCells[20][23].visitNumber = WorldMapCells[20][24].visitNumber = WorldMapCells[20][25].visitNumber = WorldMapCells[20][26].visitNumber = WorldMapCells[20][27].visitNumber = WorldMapCells[20][28].visitNumber = WorldMapCells[20][29].visitNumber = WorldMapCells[20][30].visitNumber = WorldMapCells[20][31].visitNumber = WorldMapCells[20][32].visitNumber = WorldMapCells[20][33].visitNumber = WorldMapCells[20][34].visitNumber = WorldMapCells[20][35].visitNumber = WorldMapCells[20][36].visitNumber = WorldMapCells[20][37].visitNumber = WorldMapCells[20][38].visitNumber = WorldMapCells[20][39].visitNumber = WorldMapCells[20][40].visitNumber = WorldMapCells[20][41].visitNumber = WorldMapCells[20][42].visitNumber = WorldMapCells[20][43].visitNumber = WorldMapCells[20][44].visitNumber = WorldMapCells[20][45].visitNumber = WorldMapCells[20][46].visitNumber = WorldMapCells[20][47].visitNumber = WorldMapCells[20][48].visitNumber = WorldMapCells[20][49].visitNumber = WorldMapCells[20][50].visitNumber = WorldMapCells[20][51].visitNumber = WorldMapCells[20][52].visitNumber = WorldMapCells[20][53].visitNumber = WorldMapCells[20][54].visitNumber = WorldMapCells[20][55].visitNumber = WorldMapCells[20][56].visitNumber = WorldMapCells[20][57].visitNumber = WorldMapCells[20][58].visitNumber = WorldMapCells[20][59].visitNumber = WorldMapCells[20][60].visitNumber = WorldMapCells[20][61].visitNumber = WorldMapCells[20][62].visitNumber = WorldMapCells[20][63].visitNumber = WorldMapCells[20][64].visitNumber = WorldMapCells[20][65].visitNumber = WorldMapCells[20][66].visitNumber = WorldMapCells[20][67].visitNumber = WorldMapCells[20][68].visitNumber = WorldMapCells[20][69].visitNumber = WorldMapCells[20][70].visitNumber = WorldMapCells[20][71].visitNumber = WorldMapCells[20][72].visitNumber = WorldMapCells[20][73].visitNumber = WorldMapCells[20][74].visitNumber = WorldMapCells[20][75].visitNumber = WorldMapCells[20][76].visitNumber = WorldMapCells[20][77].visitNumber = WorldMapCells[20][78].visitNumber = WorldMapCells[20][79].visitNumber = WorldMapCells[20][80].visitNumber = WorldMapCells[20][81].visitNumber = WorldMapCells[20][82].visitNumber = WorldMapCells[20][83].visitNumber = WorldMapCells[20][84].visitNumber = WorldMapCells[20][85].visitNumber = WorldMapCells[20][86].visitNumber = WorldMapCells[20][87].visitNumber = WorldMapCells[20][88].visitNumber = WorldMapCells[20][89].visitNumber = WorldMapCells[20][90].visitNumber = WorldMapCells[20][91].visitNumber = WorldMapCells[20][92].visitNumber = WorldMapCells[20][93].visitNumber = WorldMapCells[20][94].visitNumber = WorldMapCells[20][95].visitNumber = WorldMapCells[20][96].visitNumber = WorldMapCells[20][97].visitNumber = WorldMapCells[20][98].visitNumber = WorldMapCells[20][99].visitNumber = 2;
                    WorldMapCells[21][0].visitNumber = WorldMapCells[21][1].visitNumber = WorldMapCells[21][2].visitNumber = WorldMapCells[21][3].visitNumber = WorldMapCells[21][4].visitNumber = WorldMapCells[21][5].visitNumber = WorldMapCells[21][6].visitNumber = WorldMapCells[21][7].visitNumber = WorldMapCells[21][8].visitNumber = WorldMapCells[21][9].visitNumber = WorldMapCells[21][10].visitNumber = WorldMapCells[21][11].visitNumber = WorldMapCells[21][12].visitNumber = WorldMapCells[21][13].visitNumber = WorldMapCells[21][14].visitNumber = WorldMapCells[21][15].visitNumber = WorldMapCells[21][16].visitNumber = WorldMapCells[21][17].visitNumber = WorldMapCells[21][18].visitNumber = WorldMapCells[21][19].visitNumber = WorldMapCells[21][20].visitNumber = WorldMapCells[21][21].visitNumber = WorldMapCells[21][22].visitNumber = WorldMapCells[21][23].visitNumber = WorldMapCells[21][24].visitNumber = WorldMapCells[21][25].visitNumber = WorldMapCells[21][26].visitNumber = WorldMapCells[21][27].visitNumber = WorldMapCells[21][28].visitNumber = WorldMapCells[21][29].visitNumber = WorldMapCells[21][30].visitNumber = WorldMapCells[21][31].visitNumber = WorldMapCells[21][32].visitNumber = WorldMapCells[21][33].visitNumber = WorldMapCells[21][34].visitNumber = WorldMapCells[21][35].visitNumber = WorldMapCells[21][36].visitNumber = WorldMapCells[21][37].visitNumber = WorldMapCells[21][38].visitNumber = WorldMapCells[21][39].visitNumber = WorldMapCells[21][40].visitNumber = WorldMapCells[21][41].visitNumber = WorldMapCells[21][42].visitNumber = WorldMapCells[21][43].visitNumber = WorldMapCells[21][44].visitNumber = WorldMapCells[21][45].visitNumber = WorldMapCells[21][46].visitNumber = WorldMapCells[21][47].visitNumber = WorldMapCells[21][48].visitNumber = WorldMapCells[21][49].visitNumber = WorldMapCells[21][50].visitNumber = WorldMapCells[21][51].visitNumber = WorldMapCells[21][52].visitNumber = WorldMapCells[21][53].visitNumber = WorldMapCells[21][54].visitNumber = WorldMapCells[21][55].visitNumber = WorldMapCells[21][56].visitNumber = WorldMapCells[21][57].visitNumber = WorldMapCells[21][58].visitNumber = WorldMapCells[21][59].visitNumber = WorldMapCells[21][60].visitNumber = WorldMapCells[21][61].visitNumber = WorldMapCells[21][62].visitNumber = WorldMapCells[21][63].visitNumber = WorldMapCells[21][64].visitNumber = WorldMapCells[21][65].visitNumber = WorldMapCells[21][66].visitNumber = WorldMapCells[21][67].visitNumber = WorldMapCells[21][68].visitNumber = WorldMapCells[21][69].visitNumber = WorldMapCells[21][70].visitNumber = WorldMapCells[21][71].visitNumber = WorldMapCells[21][72].visitNumber = WorldMapCells[21][73].visitNumber = WorldMapCells[21][74].visitNumber = WorldMapCells[21][75].visitNumber = WorldMapCells[21][76].visitNumber = WorldMapCells[21][77].visitNumber = WorldMapCells[21][78].visitNumber = WorldMapCells[21][79].visitNumber = WorldMapCells[21][80].visitNumber = WorldMapCells[21][81].visitNumber = WorldMapCells[21][82].visitNumber = WorldMapCells[21][83].visitNumber = WorldMapCells[21][84].visitNumber = WorldMapCells[21][85].visitNumber = WorldMapCells[21][86].visitNumber = WorldMapCells[21][87].visitNumber = WorldMapCells[21][88].visitNumber = WorldMapCells[21][89].visitNumber = WorldMapCells[21][90].visitNumber = WorldMapCells[21][91].visitNumber = WorldMapCells[21][92].visitNumber = WorldMapCells[21][93].visitNumber = WorldMapCells[21][94].visitNumber = WorldMapCells[21][95].visitNumber = WorldMapCells[21][96].visitNumber = WorldMapCells[21][97].visitNumber = WorldMapCells[21][98].visitNumber = WorldMapCells[21][99].visitNumber = 2;
                }
                else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true)
                {
                    WorldMapCells[8][0].visitNumber = WorldMapCells[8][1].visitNumber = WorldMapCells[8][2].visitNumber = WorldMapCells[8][3].visitNumber = WorldMapCells[8][4].visitNumber = WorldMapCells[8][5].visitNumber = WorldMapCells[8][6].visitNumber = WorldMapCells[8][7].visitNumber = WorldMapCells[8][8].visitNumber = WorldMapCells[8][9].visitNumber = WorldMapCells[8][10].visitNumber = WorldMapCells[8][11].visitNumber = WorldMapCells[8][12].visitNumber = WorldMapCells[8][13].visitNumber = WorldMapCells[8][14].visitNumber = WorldMapCells[8][15].visitNumber = WorldMapCells[8][16].visitNumber = WorldMapCells[8][17].visitNumber = WorldMapCells[8][18].visitNumber = WorldMapCells[8][19].visitNumber = WorldMapCells[8][20].visitNumber = WorldMapCells[8][21].visitNumber = WorldMapCells[8][22].visitNumber = WorldMapCells[8][23].visitNumber = WorldMapCells[8][24].visitNumber = WorldMapCells[8][25].visitNumber = WorldMapCells[8][26].visitNumber = WorldMapCells[8][27].visitNumber = WorldMapCells[8][28].visitNumber = WorldMapCells[8][29].visitNumber = WorldMapCells[8][30].visitNumber = WorldMapCells[8][31].visitNumber = WorldMapCells[8][32].visitNumber = WorldMapCells[8][33].visitNumber = WorldMapCells[8][34].visitNumber = WorldMapCells[8][35].visitNumber = WorldMapCells[8][36].visitNumber = WorldMapCells[8][37].visitNumber = WorldMapCells[8][38].visitNumber = WorldMapCells[8][39].visitNumber = WorldMapCells[8][40].visitNumber = WorldMapCells[8][41].visitNumber = WorldMapCells[8][42].visitNumber = WorldMapCells[8][43].visitNumber = WorldMapCells[8][44].visitNumber = WorldMapCells[8][45].visitNumber = WorldMapCells[8][46].visitNumber = WorldMapCells[8][47].visitNumber = WorldMapCells[8][48].visitNumber = WorldMapCells[8][49].visitNumber = WorldMapCells[8][50].visitNumber = WorldMapCells[8][51].visitNumber = WorldMapCells[8][52].visitNumber = WorldMapCells[8][53].visitNumber = WorldMapCells[8][54].visitNumber = WorldMapCells[8][55].visitNumber = WorldMapCells[8][56].visitNumber = WorldMapCells[8][57].visitNumber = WorldMapCells[8][58].visitNumber = WorldMapCells[8][59].visitNumber = WorldMapCells[8][60].visitNumber = WorldMapCells[8][61].visitNumber = WorldMapCells[8][62].visitNumber = WorldMapCells[8][63].visitNumber = WorldMapCells[8][64].visitNumber = WorldMapCells[8][65].visitNumber = WorldMapCells[8][66].visitNumber = WorldMapCells[8][67].visitNumber = WorldMapCells[8][68].visitNumber = WorldMapCells[8][69].visitNumber = WorldMapCells[8][70].visitNumber = WorldMapCells[8][71].visitNumber = WorldMapCells[8][72].visitNumber = WorldMapCells[8][73].visitNumber = WorldMapCells[8][74].visitNumber = WorldMapCells[8][75].visitNumber = WorldMapCells[8][76].visitNumber = WorldMapCells[8][77].visitNumber = WorldMapCells[8][78].visitNumber = WorldMapCells[8][79].visitNumber = WorldMapCells[8][80].visitNumber = WorldMapCells[8][81].visitNumber = WorldMapCells[8][82].visitNumber = WorldMapCells[8][83].visitNumber = WorldMapCells[8][84].visitNumber = WorldMapCells[8][85].visitNumber = WorldMapCells[8][86].visitNumber = WorldMapCells[8][87].visitNumber = WorldMapCells[8][88].visitNumber = WorldMapCells[8][89].visitNumber = WorldMapCells[8][90].visitNumber = WorldMapCells[8][91].visitNumber = WorldMapCells[8][92].visitNumber = WorldMapCells[8][93].visitNumber = WorldMapCells[8][94].visitNumber = WorldMapCells[8][95].visitNumber = WorldMapCells[8][96].visitNumber = WorldMapCells[8][97].visitNumber = WorldMapCells[8][98].visitNumber = WorldMapCells[8][99].visitNumber = 3;
                    WorldMapCells[20][0].visitNumber = WorldMapCells[20][1].visitNumber = WorldMapCells[20][2].visitNumber = WorldMapCells[20][3].visitNumber = WorldMapCells[20][4].visitNumber = WorldMapCells[20][5].visitNumber = WorldMapCells[20][6].visitNumber = WorldMapCells[20][7].visitNumber = WorldMapCells[20][8].visitNumber = WorldMapCells[20][9].visitNumber = WorldMapCells[20][10].visitNumber = WorldMapCells[20][11].visitNumber = WorldMapCells[20][12].visitNumber = WorldMapCells[20][13].visitNumber = WorldMapCells[20][14].visitNumber = WorldMapCells[20][15].visitNumber = WorldMapCells[20][16].visitNumber = WorldMapCells[20][17].visitNumber = WorldMapCells[20][18].visitNumber = WorldMapCells[20][19].visitNumber = WorldMapCells[20][20].visitNumber = WorldMapCells[20][21].visitNumber = WorldMapCells[20][22].visitNumber = WorldMapCells[20][23].visitNumber = WorldMapCells[20][24].visitNumber = WorldMapCells[20][25].visitNumber = WorldMapCells[20][26].visitNumber = WorldMapCells[20][27].visitNumber = WorldMapCells[20][28].visitNumber = WorldMapCells[20][29].visitNumber = WorldMapCells[20][30].visitNumber = WorldMapCells[20][31].visitNumber = WorldMapCells[20][32].visitNumber = WorldMapCells[20][33].visitNumber = WorldMapCells[20][34].visitNumber = WorldMapCells[20][35].visitNumber = WorldMapCells[20][36].visitNumber = WorldMapCells[20][37].visitNumber = WorldMapCells[20][38].visitNumber = WorldMapCells[20][39].visitNumber = WorldMapCells[20][40].visitNumber = WorldMapCells[20][41].visitNumber = WorldMapCells[20][42].visitNumber = WorldMapCells[20][43].visitNumber = WorldMapCells[20][44].visitNumber = WorldMapCells[20][45].visitNumber = WorldMapCells[20][46].visitNumber = WorldMapCells[20][47].visitNumber = WorldMapCells[20][48].visitNumber = WorldMapCells[20][49].visitNumber = WorldMapCells[20][50].visitNumber = WorldMapCells[20][51].visitNumber = WorldMapCells[20][52].visitNumber = WorldMapCells[20][53].visitNumber = WorldMapCells[20][54].visitNumber = WorldMapCells[20][55].visitNumber = WorldMapCells[20][56].visitNumber = WorldMapCells[20][57].visitNumber = WorldMapCells[20][58].visitNumber = WorldMapCells[20][59].visitNumber = WorldMapCells[20][60].visitNumber = WorldMapCells[20][61].visitNumber = WorldMapCells[20][62].visitNumber = WorldMapCells[20][63].visitNumber = WorldMapCells[20][64].visitNumber = WorldMapCells[20][65].visitNumber = WorldMapCells[20][66].visitNumber = WorldMapCells[20][67].visitNumber = WorldMapCells[20][68].visitNumber = WorldMapCells[20][69].visitNumber = WorldMapCells[20][70].visitNumber = WorldMapCells[20][71].visitNumber = WorldMapCells[20][72].visitNumber = WorldMapCells[20][73].visitNumber = WorldMapCells[20][74].visitNumber = WorldMapCells[20][75].visitNumber = WorldMapCells[20][76].visitNumber = WorldMapCells[20][77].visitNumber = WorldMapCells[20][78].visitNumber = WorldMapCells[20][79].visitNumber = WorldMapCells[20][80].visitNumber = WorldMapCells[20][81].visitNumber = WorldMapCells[20][82].visitNumber = WorldMapCells[20][83].visitNumber = WorldMapCells[20][84].visitNumber = WorldMapCells[20][85].visitNumber = WorldMapCells[20][86].visitNumber = WorldMapCells[20][87].visitNumber = WorldMapCells[20][88].visitNumber = WorldMapCells[20][89].visitNumber = WorldMapCells[20][90].visitNumber = WorldMapCells[20][91].visitNumber = WorldMapCells[20][92].visitNumber = WorldMapCells[20][93].visitNumber = WorldMapCells[20][94].visitNumber = WorldMapCells[20][95].visitNumber = WorldMapCells[20][96].visitNumber = WorldMapCells[20][97].visitNumber = WorldMapCells[20][98].visitNumber = WorldMapCells[20][99].visitNumber = 3;
                    WorldMapCells[21][0].visitNumber = WorldMapCells[21][1].visitNumber = WorldMapCells[21][2].visitNumber = WorldMapCells[21][3].visitNumber = WorldMapCells[21][4].visitNumber = WorldMapCells[21][5].visitNumber = WorldMapCells[21][6].visitNumber = WorldMapCells[21][7].visitNumber = WorldMapCells[21][8].visitNumber = WorldMapCells[21][9].visitNumber = WorldMapCells[21][10].visitNumber = WorldMapCells[21][11].visitNumber = WorldMapCells[21][12].visitNumber = WorldMapCells[21][13].visitNumber = WorldMapCells[21][14].visitNumber = WorldMapCells[21][15].visitNumber = WorldMapCells[21][16].visitNumber = WorldMapCells[21][17].visitNumber = WorldMapCells[21][18].visitNumber = WorldMapCells[21][19].visitNumber = WorldMapCells[21][20].visitNumber = WorldMapCells[21][21].visitNumber = WorldMapCells[21][22].visitNumber = WorldMapCells[21][23].visitNumber = WorldMapCells[21][24].visitNumber = WorldMapCells[21][25].visitNumber = WorldMapCells[21][26].visitNumber = WorldMapCells[21][27].visitNumber = WorldMapCells[21][28].visitNumber = WorldMapCells[21][29].visitNumber = WorldMapCells[21][30].visitNumber = WorldMapCells[21][31].visitNumber = WorldMapCells[21][32].visitNumber = WorldMapCells[21][33].visitNumber = WorldMapCells[21][34].visitNumber = WorldMapCells[21][35].visitNumber = WorldMapCells[21][36].visitNumber = WorldMapCells[21][37].visitNumber = WorldMapCells[21][38].visitNumber = WorldMapCells[21][39].visitNumber = WorldMapCells[21][40].visitNumber = WorldMapCells[21][41].visitNumber = WorldMapCells[21][42].visitNumber = WorldMapCells[21][43].visitNumber = WorldMapCells[21][44].visitNumber = WorldMapCells[21][45].visitNumber = WorldMapCells[21][46].visitNumber = WorldMapCells[21][47].visitNumber = WorldMapCells[21][48].visitNumber = WorldMapCells[21][49].visitNumber = WorldMapCells[21][50].visitNumber = WorldMapCells[21][51].visitNumber = WorldMapCells[21][52].visitNumber = WorldMapCells[21][53].visitNumber = WorldMapCells[21][54].visitNumber = WorldMapCells[21][55].visitNumber = WorldMapCells[21][56].visitNumber = WorldMapCells[21][57].visitNumber = WorldMapCells[21][58].visitNumber = WorldMapCells[21][59].visitNumber = WorldMapCells[21][60].visitNumber = WorldMapCells[21][61].visitNumber = WorldMapCells[21][62].visitNumber = WorldMapCells[21][63].visitNumber = WorldMapCells[21][64].visitNumber = WorldMapCells[21][65].visitNumber = WorldMapCells[21][66].visitNumber = WorldMapCells[21][67].visitNumber = WorldMapCells[21][68].visitNumber = WorldMapCells[21][69].visitNumber = WorldMapCells[21][70].visitNumber = WorldMapCells[21][71].visitNumber = WorldMapCells[21][72].visitNumber = WorldMapCells[21][73].visitNumber = WorldMapCells[21][74].visitNumber = WorldMapCells[21][75].visitNumber = WorldMapCells[21][76].visitNumber = WorldMapCells[21][77].visitNumber = WorldMapCells[21][78].visitNumber = WorldMapCells[21][79].visitNumber = WorldMapCells[21][80].visitNumber = WorldMapCells[21][81].visitNumber = WorldMapCells[21][82].visitNumber = WorldMapCells[21][83].visitNumber = WorldMapCells[21][84].visitNumber = WorldMapCells[21][85].visitNumber = WorldMapCells[21][86].visitNumber = WorldMapCells[21][87].visitNumber = WorldMapCells[21][88].visitNumber = WorldMapCells[21][89].visitNumber = WorldMapCells[21][90].visitNumber = WorldMapCells[21][91].visitNumber = WorldMapCells[21][92].visitNumber = WorldMapCells[21][93].visitNumber = WorldMapCells[21][94].visitNumber = WorldMapCells[21][95].visitNumber = WorldMapCells[21][96].visitNumber = WorldMapCells[21][97].visitNumber = WorldMapCells[21][98].visitNumber = WorldMapCells[21][99].visitNumber = 3;
                }
                else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true)
                {
                    WorldMapCells[8][0].visitNumber = WorldMapCells[8][1].visitNumber = WorldMapCells[8][2].visitNumber = WorldMapCells[8][3].visitNumber = WorldMapCells[8][4].visitNumber = WorldMapCells[8][5].visitNumber = WorldMapCells[8][6].visitNumber = WorldMapCells[8][7].visitNumber = WorldMapCells[8][8].visitNumber = WorldMapCells[8][9].visitNumber = WorldMapCells[8][10].visitNumber = WorldMapCells[8][11].visitNumber = WorldMapCells[8][12].visitNumber = WorldMapCells[8][13].visitNumber = WorldMapCells[8][14].visitNumber = WorldMapCells[8][15].visitNumber = WorldMapCells[8][16].visitNumber = WorldMapCells[8][17].visitNumber = WorldMapCells[8][18].visitNumber = WorldMapCells[8][19].visitNumber = WorldMapCells[8][20].visitNumber = WorldMapCells[8][21].visitNumber = WorldMapCells[8][22].visitNumber = WorldMapCells[8][23].visitNumber = WorldMapCells[8][24].visitNumber = WorldMapCells[8][25].visitNumber = WorldMapCells[8][26].visitNumber = WorldMapCells[8][27].visitNumber = WorldMapCells[8][28].visitNumber = WorldMapCells[8][29].visitNumber = WorldMapCells[8][30].visitNumber = WorldMapCells[8][31].visitNumber = WorldMapCells[8][32].visitNumber = WorldMapCells[8][33].visitNumber = WorldMapCells[8][34].visitNumber = WorldMapCells[8][35].visitNumber = WorldMapCells[8][36].visitNumber = WorldMapCells[8][37].visitNumber = WorldMapCells[8][38].visitNumber = WorldMapCells[8][39].visitNumber = WorldMapCells[8][40].visitNumber = WorldMapCells[8][41].visitNumber = WorldMapCells[8][42].visitNumber = WorldMapCells[8][43].visitNumber = WorldMapCells[8][44].visitNumber = WorldMapCells[8][45].visitNumber = WorldMapCells[8][46].visitNumber = WorldMapCells[8][47].visitNumber = WorldMapCells[8][48].visitNumber = WorldMapCells[8][49].visitNumber = WorldMapCells[8][50].visitNumber = WorldMapCells[8][51].visitNumber = WorldMapCells[8][52].visitNumber = WorldMapCells[8][53].visitNumber = WorldMapCells[8][54].visitNumber = WorldMapCells[8][55].visitNumber = WorldMapCells[8][56].visitNumber = WorldMapCells[8][57].visitNumber = WorldMapCells[8][58].visitNumber = WorldMapCells[8][59].visitNumber = WorldMapCells[8][60].visitNumber = WorldMapCells[8][61].visitNumber = WorldMapCells[8][62].visitNumber = WorldMapCells[8][63].visitNumber = WorldMapCells[8][64].visitNumber = WorldMapCells[8][65].visitNumber = WorldMapCells[8][66].visitNumber = WorldMapCells[8][67].visitNumber = WorldMapCells[8][68].visitNumber = WorldMapCells[8][69].visitNumber = WorldMapCells[8][70].visitNumber = WorldMapCells[8][71].visitNumber = WorldMapCells[8][72].visitNumber = WorldMapCells[8][73].visitNumber = WorldMapCells[8][74].visitNumber = WorldMapCells[8][75].visitNumber = WorldMapCells[8][76].visitNumber = WorldMapCells[8][77].visitNumber = WorldMapCells[8][78].visitNumber = WorldMapCells[8][79].visitNumber = WorldMapCells[8][80].visitNumber = WorldMapCells[8][81].visitNumber = WorldMapCells[8][82].visitNumber = WorldMapCells[8][83].visitNumber = WorldMapCells[8][84].visitNumber = WorldMapCells[8][85].visitNumber = WorldMapCells[8][86].visitNumber = WorldMapCells[8][87].visitNumber = WorldMapCells[8][88].visitNumber = WorldMapCells[8][89].visitNumber = WorldMapCells[8][90].visitNumber = WorldMapCells[8][91].visitNumber = WorldMapCells[8][92].visitNumber = WorldMapCells[8][93].visitNumber = WorldMapCells[8][94].visitNumber = WorldMapCells[8][95].visitNumber = WorldMapCells[8][96].visitNumber = WorldMapCells[8][97].visitNumber = WorldMapCells[8][98].visitNumber = WorldMapCells[8][99].visitNumber = 4;
                    WorldMapCells[20][0].visitNumber = WorldMapCells[20][1].visitNumber = WorldMapCells[20][2].visitNumber = WorldMapCells[20][3].visitNumber = WorldMapCells[20][4].visitNumber = WorldMapCells[20][5].visitNumber = WorldMapCells[20][6].visitNumber = WorldMapCells[20][7].visitNumber = WorldMapCells[20][8].visitNumber = WorldMapCells[20][9].visitNumber = WorldMapCells[20][10].visitNumber = WorldMapCells[20][11].visitNumber = WorldMapCells[20][12].visitNumber = WorldMapCells[20][13].visitNumber = WorldMapCells[20][14].visitNumber = WorldMapCells[20][15].visitNumber = WorldMapCells[20][16].visitNumber = WorldMapCells[20][17].visitNumber = WorldMapCells[20][18].visitNumber = WorldMapCells[20][19].visitNumber = WorldMapCells[20][20].visitNumber = WorldMapCells[20][21].visitNumber = WorldMapCells[20][22].visitNumber = WorldMapCells[20][23].visitNumber = WorldMapCells[20][24].visitNumber = WorldMapCells[20][25].visitNumber = WorldMapCells[20][26].visitNumber = WorldMapCells[20][27].visitNumber = WorldMapCells[20][28].visitNumber = WorldMapCells[20][29].visitNumber = WorldMapCells[20][30].visitNumber = WorldMapCells[20][31].visitNumber = WorldMapCells[20][32].visitNumber = WorldMapCells[20][33].visitNumber = WorldMapCells[20][34].visitNumber = WorldMapCells[20][35].visitNumber = WorldMapCells[20][36].visitNumber = WorldMapCells[20][37].visitNumber = WorldMapCells[20][38].visitNumber = WorldMapCells[20][39].visitNumber = WorldMapCells[20][40].visitNumber = WorldMapCells[20][41].visitNumber = WorldMapCells[20][42].visitNumber = WorldMapCells[20][43].visitNumber = WorldMapCells[20][44].visitNumber = WorldMapCells[20][45].visitNumber = WorldMapCells[20][46].visitNumber = WorldMapCells[20][47].visitNumber = WorldMapCells[20][48].visitNumber = WorldMapCells[20][49].visitNumber = WorldMapCells[20][50].visitNumber = WorldMapCells[20][51].visitNumber = WorldMapCells[20][52].visitNumber = WorldMapCells[20][53].visitNumber = WorldMapCells[20][54].visitNumber = WorldMapCells[20][55].visitNumber = WorldMapCells[20][56].visitNumber = WorldMapCells[20][57].visitNumber = WorldMapCells[20][58].visitNumber = WorldMapCells[20][59].visitNumber = WorldMapCells[20][60].visitNumber = WorldMapCells[20][61].visitNumber = WorldMapCells[20][62].visitNumber = WorldMapCells[20][63].visitNumber = WorldMapCells[20][64].visitNumber = WorldMapCells[20][65].visitNumber = WorldMapCells[20][66].visitNumber = WorldMapCells[20][67].visitNumber = WorldMapCells[20][68].visitNumber = WorldMapCells[20][69].visitNumber = WorldMapCells[20][70].visitNumber = WorldMapCells[20][71].visitNumber = WorldMapCells[20][72].visitNumber = WorldMapCells[20][73].visitNumber = WorldMapCells[20][74].visitNumber = WorldMapCells[20][75].visitNumber = WorldMapCells[20][76].visitNumber = WorldMapCells[20][77].visitNumber = WorldMapCells[20][78].visitNumber = WorldMapCells[20][79].visitNumber = WorldMapCells[20][80].visitNumber = WorldMapCells[20][81].visitNumber = WorldMapCells[20][82].visitNumber = WorldMapCells[20][83].visitNumber = WorldMapCells[20][84].visitNumber = WorldMapCells[20][85].visitNumber = WorldMapCells[20][86].visitNumber = WorldMapCells[20][87].visitNumber = WorldMapCells[20][88].visitNumber = WorldMapCells[20][89].visitNumber = WorldMapCells[20][90].visitNumber = WorldMapCells[20][91].visitNumber = WorldMapCells[20][92].visitNumber = WorldMapCells[20][93].visitNumber = WorldMapCells[20][94].visitNumber = WorldMapCells[20][95].visitNumber = WorldMapCells[20][96].visitNumber = WorldMapCells[20][97].visitNumber = WorldMapCells[20][98].visitNumber = WorldMapCells[20][99].visitNumber = 4;
                    WorldMapCells[21][0].visitNumber = WorldMapCells[21][1].visitNumber = WorldMapCells[21][2].visitNumber = WorldMapCells[21][3].visitNumber = WorldMapCells[21][4].visitNumber = WorldMapCells[21][5].visitNumber = WorldMapCells[21][6].visitNumber = WorldMapCells[21][7].visitNumber = WorldMapCells[21][8].visitNumber = WorldMapCells[21][9].visitNumber = WorldMapCells[21][10].visitNumber = WorldMapCells[21][11].visitNumber = WorldMapCells[21][12].visitNumber = WorldMapCells[21][13].visitNumber = WorldMapCells[21][14].visitNumber = WorldMapCells[21][15].visitNumber = WorldMapCells[21][16].visitNumber = WorldMapCells[21][17].visitNumber = WorldMapCells[21][18].visitNumber = WorldMapCells[21][19].visitNumber = WorldMapCells[21][20].visitNumber = WorldMapCells[21][21].visitNumber = WorldMapCells[21][22].visitNumber = WorldMapCells[21][23].visitNumber = WorldMapCells[21][24].visitNumber = WorldMapCells[21][25].visitNumber = WorldMapCells[21][26].visitNumber = WorldMapCells[21][27].visitNumber = WorldMapCells[21][28].visitNumber = WorldMapCells[21][29].visitNumber = WorldMapCells[21][30].visitNumber = WorldMapCells[21][31].visitNumber = WorldMapCells[21][32].visitNumber = WorldMapCells[21][33].visitNumber = WorldMapCells[21][34].visitNumber = WorldMapCells[21][35].visitNumber = WorldMapCells[21][36].visitNumber = WorldMapCells[21][37].visitNumber = WorldMapCells[21][38].visitNumber = WorldMapCells[21][39].visitNumber = WorldMapCells[21][40].visitNumber = WorldMapCells[21][41].visitNumber = WorldMapCells[21][42].visitNumber = WorldMapCells[21][43].visitNumber = WorldMapCells[21][44].visitNumber = WorldMapCells[21][45].visitNumber = WorldMapCells[21][46].visitNumber = WorldMapCells[21][47].visitNumber = WorldMapCells[21][48].visitNumber = WorldMapCells[21][49].visitNumber = WorldMapCells[21][50].visitNumber = WorldMapCells[21][51].visitNumber = WorldMapCells[21][52].visitNumber = WorldMapCells[21][53].visitNumber = WorldMapCells[21][54].visitNumber = WorldMapCells[21][55].visitNumber = WorldMapCells[21][56].visitNumber = WorldMapCells[21][57].visitNumber = WorldMapCells[21][58].visitNumber = WorldMapCells[21][59].visitNumber = WorldMapCells[21][60].visitNumber = WorldMapCells[21][61].visitNumber = WorldMapCells[21][62].visitNumber = WorldMapCells[21][63].visitNumber = WorldMapCells[21][64].visitNumber = WorldMapCells[21][65].visitNumber = WorldMapCells[21][66].visitNumber = WorldMapCells[21][67].visitNumber = WorldMapCells[21][68].visitNumber = WorldMapCells[21][69].visitNumber = WorldMapCells[21][70].visitNumber = WorldMapCells[21][71].visitNumber = WorldMapCells[21][72].visitNumber = WorldMapCells[21][73].visitNumber = WorldMapCells[21][74].visitNumber = WorldMapCells[21][75].visitNumber = WorldMapCells[21][76].visitNumber = WorldMapCells[21][77].visitNumber = WorldMapCells[21][78].visitNumber = WorldMapCells[21][79].visitNumber = WorldMapCells[21][80].visitNumber = WorldMapCells[21][81].visitNumber = WorldMapCells[21][82].visitNumber = WorldMapCells[21][83].visitNumber = WorldMapCells[21][84].visitNumber = WorldMapCells[21][85].visitNumber = WorldMapCells[21][86].visitNumber = WorldMapCells[21][87].visitNumber = WorldMapCells[21][88].visitNumber = WorldMapCells[21][89].visitNumber = WorldMapCells[21][90].visitNumber = WorldMapCells[21][91].visitNumber = WorldMapCells[21][92].visitNumber = WorldMapCells[21][93].visitNumber = WorldMapCells[21][94].visitNumber = WorldMapCells[21][95].visitNumber = WorldMapCells[21][96].visitNumber = WorldMapCells[21][97].visitNumber = WorldMapCells[21][98].visitNumber = WorldMapCells[21][99].visitNumber = 4;
                }
                else if (WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true)
                {
                    WorldMapCells[8][0].visitNumber = WorldMapCells[8][1].visitNumber = WorldMapCells[8][2].visitNumber = WorldMapCells[8][3].visitNumber = WorldMapCells[8][4].visitNumber = WorldMapCells[8][5].visitNumber = WorldMapCells[8][6].visitNumber = WorldMapCells[8][7].visitNumber = WorldMapCells[8][8].visitNumber = WorldMapCells[8][9].visitNumber = WorldMapCells[8][10].visitNumber = WorldMapCells[8][11].visitNumber = WorldMapCells[8][12].visitNumber = WorldMapCells[8][13].visitNumber = WorldMapCells[8][14].visitNumber = WorldMapCells[8][15].visitNumber = WorldMapCells[8][16].visitNumber = WorldMapCells[8][17].visitNumber = WorldMapCells[8][18].visitNumber = WorldMapCells[8][19].visitNumber = WorldMapCells[8][20].visitNumber = WorldMapCells[8][21].visitNumber = WorldMapCells[8][22].visitNumber = WorldMapCells[8][23].visitNumber = WorldMapCells[8][24].visitNumber = WorldMapCells[8][25].visitNumber = WorldMapCells[8][26].visitNumber = WorldMapCells[8][27].visitNumber = WorldMapCells[8][28].visitNumber = WorldMapCells[8][29].visitNumber = WorldMapCells[8][30].visitNumber = WorldMapCells[8][31].visitNumber = WorldMapCells[8][32].visitNumber = WorldMapCells[8][33].visitNumber = WorldMapCells[8][34].visitNumber = WorldMapCells[8][35].visitNumber = WorldMapCells[8][36].visitNumber = WorldMapCells[8][37].visitNumber = WorldMapCells[8][38].visitNumber = WorldMapCells[8][39].visitNumber = WorldMapCells[8][40].visitNumber = WorldMapCells[8][41].visitNumber = WorldMapCells[8][42].visitNumber = WorldMapCells[8][43].visitNumber = WorldMapCells[8][44].visitNumber = WorldMapCells[8][45].visitNumber = WorldMapCells[8][46].visitNumber = WorldMapCells[8][47].visitNumber = WorldMapCells[8][48].visitNumber = WorldMapCells[8][49].visitNumber = WorldMapCells[8][50].visitNumber = WorldMapCells[8][51].visitNumber = WorldMapCells[8][52].visitNumber = WorldMapCells[8][53].visitNumber = WorldMapCells[8][54].visitNumber = WorldMapCells[8][55].visitNumber = WorldMapCells[8][56].visitNumber = WorldMapCells[8][57].visitNumber = WorldMapCells[8][58].visitNumber = WorldMapCells[8][59].visitNumber = WorldMapCells[8][60].visitNumber = WorldMapCells[8][61].visitNumber = WorldMapCells[8][62].visitNumber = WorldMapCells[8][63].visitNumber = WorldMapCells[8][64].visitNumber = WorldMapCells[8][65].visitNumber = WorldMapCells[8][66].visitNumber = WorldMapCells[8][67].visitNumber = WorldMapCells[8][68].visitNumber = WorldMapCells[8][69].visitNumber = WorldMapCells[8][70].visitNumber = WorldMapCells[8][71].visitNumber = WorldMapCells[8][72].visitNumber = WorldMapCells[8][73].visitNumber = WorldMapCells[8][74].visitNumber = WorldMapCells[8][75].visitNumber = WorldMapCells[8][76].visitNumber = WorldMapCells[8][77].visitNumber = WorldMapCells[8][78].visitNumber = WorldMapCells[8][79].visitNumber = WorldMapCells[8][80].visitNumber = WorldMapCells[8][81].visitNumber = WorldMapCells[8][82].visitNumber = WorldMapCells[8][83].visitNumber = WorldMapCells[8][84].visitNumber = WorldMapCells[8][85].visitNumber = WorldMapCells[8][86].visitNumber = WorldMapCells[8][87].visitNumber = WorldMapCells[8][88].visitNumber = WorldMapCells[8][89].visitNumber = WorldMapCells[8][90].visitNumber = WorldMapCells[8][91].visitNumber = WorldMapCells[8][92].visitNumber = WorldMapCells[8][93].visitNumber = WorldMapCells[8][94].visitNumber = WorldMapCells[8][95].visitNumber = WorldMapCells[8][96].visitNumber = WorldMapCells[8][97].visitNumber = WorldMapCells[8][98].visitNumber = WorldMapCells[8][99].visitNumber = 5;
                    WorldMapCells[20][0].visitNumber = WorldMapCells[20][1].visitNumber = WorldMapCells[20][2].visitNumber = WorldMapCells[20][3].visitNumber = WorldMapCells[20][4].visitNumber = WorldMapCells[20][5].visitNumber = WorldMapCells[20][6].visitNumber = WorldMapCells[20][7].visitNumber = WorldMapCells[20][8].visitNumber = WorldMapCells[20][9].visitNumber = WorldMapCells[20][10].visitNumber = WorldMapCells[20][11].visitNumber = WorldMapCells[20][12].visitNumber = WorldMapCells[20][13].visitNumber = WorldMapCells[20][14].visitNumber = WorldMapCells[20][15].visitNumber = WorldMapCells[20][16].visitNumber = WorldMapCells[20][17].visitNumber = WorldMapCells[20][18].visitNumber = WorldMapCells[20][19].visitNumber = WorldMapCells[20][20].visitNumber = WorldMapCells[20][21].visitNumber = WorldMapCells[20][22].visitNumber = WorldMapCells[20][23].visitNumber = WorldMapCells[20][24].visitNumber = WorldMapCells[20][25].visitNumber = WorldMapCells[20][26].visitNumber = WorldMapCells[20][27].visitNumber = WorldMapCells[20][28].visitNumber = WorldMapCells[20][29].visitNumber = WorldMapCells[20][30].visitNumber = WorldMapCells[20][31].visitNumber = WorldMapCells[20][32].visitNumber = WorldMapCells[20][33].visitNumber = WorldMapCells[20][34].visitNumber = WorldMapCells[20][35].visitNumber = WorldMapCells[20][36].visitNumber = WorldMapCells[20][37].visitNumber = WorldMapCells[20][38].visitNumber = WorldMapCells[20][39].visitNumber = WorldMapCells[20][40].visitNumber = WorldMapCells[20][41].visitNumber = WorldMapCells[20][42].visitNumber = WorldMapCells[20][43].visitNumber = WorldMapCells[20][44].visitNumber = WorldMapCells[20][45].visitNumber = WorldMapCells[20][46].visitNumber = WorldMapCells[20][47].visitNumber = WorldMapCells[20][48].visitNumber = WorldMapCells[20][49].visitNumber = WorldMapCells[20][50].visitNumber = WorldMapCells[20][51].visitNumber = WorldMapCells[20][52].visitNumber = WorldMapCells[20][53].visitNumber = WorldMapCells[20][54].visitNumber = WorldMapCells[20][55].visitNumber = WorldMapCells[20][56].visitNumber = WorldMapCells[20][57].visitNumber = WorldMapCells[20][58].visitNumber = WorldMapCells[20][59].visitNumber = WorldMapCells[20][60].visitNumber = WorldMapCells[20][61].visitNumber = WorldMapCells[20][62].visitNumber = WorldMapCells[20][63].visitNumber = WorldMapCells[20][64].visitNumber = WorldMapCells[20][65].visitNumber = WorldMapCells[20][66].visitNumber = WorldMapCells[20][67].visitNumber = WorldMapCells[20][68].visitNumber = WorldMapCells[20][69].visitNumber = WorldMapCells[20][70].visitNumber = WorldMapCells[20][71].visitNumber = WorldMapCells[20][72].visitNumber = WorldMapCells[20][73].visitNumber = WorldMapCells[20][74].visitNumber = WorldMapCells[20][75].visitNumber = WorldMapCells[20][76].visitNumber = WorldMapCells[20][77].visitNumber = WorldMapCells[20][78].visitNumber = WorldMapCells[20][79].visitNumber = WorldMapCells[20][80].visitNumber = WorldMapCells[20][81].visitNumber = WorldMapCells[20][82].visitNumber = WorldMapCells[20][83].visitNumber = WorldMapCells[20][84].visitNumber = WorldMapCells[20][85].visitNumber = WorldMapCells[20][86].visitNumber = WorldMapCells[20][87].visitNumber = WorldMapCells[20][88].visitNumber = WorldMapCells[20][89].visitNumber = WorldMapCells[20][90].visitNumber = WorldMapCells[20][91].visitNumber = WorldMapCells[20][92].visitNumber = WorldMapCells[20][93].visitNumber = WorldMapCells[20][94].visitNumber = WorldMapCells[20][95].visitNumber = WorldMapCells[20][96].visitNumber = WorldMapCells[20][97].visitNumber = WorldMapCells[20][98].visitNumber = WorldMapCells[20][99].visitNumber = 5;
                    WorldMapCells[21][0].visitNumber = WorldMapCells[21][1].visitNumber = WorldMapCells[21][2].visitNumber = WorldMapCells[21][3].visitNumber = WorldMapCells[21][4].visitNumber = WorldMapCells[21][5].visitNumber = WorldMapCells[21][6].visitNumber = WorldMapCells[21][7].visitNumber = WorldMapCells[21][8].visitNumber = WorldMapCells[21][9].visitNumber = WorldMapCells[21][10].visitNumber = WorldMapCells[21][11].visitNumber = WorldMapCells[21][12].visitNumber = WorldMapCells[21][13].visitNumber = WorldMapCells[21][14].visitNumber = WorldMapCells[21][15].visitNumber = WorldMapCells[21][16].visitNumber = WorldMapCells[21][17].visitNumber = WorldMapCells[21][18].visitNumber = WorldMapCells[21][19].visitNumber = WorldMapCells[21][20].visitNumber = WorldMapCells[21][21].visitNumber = WorldMapCells[21][22].visitNumber = WorldMapCells[21][23].visitNumber = WorldMapCells[21][24].visitNumber = WorldMapCells[21][25].visitNumber = WorldMapCells[21][26].visitNumber = WorldMapCells[21][27].visitNumber = WorldMapCells[21][28].visitNumber = WorldMapCells[21][29].visitNumber = WorldMapCells[21][30].visitNumber = WorldMapCells[21][31].visitNumber = WorldMapCells[21][32].visitNumber = WorldMapCells[21][33].visitNumber = WorldMapCells[21][34].visitNumber = WorldMapCells[21][35].visitNumber = WorldMapCells[21][36].visitNumber = WorldMapCells[21][37].visitNumber = WorldMapCells[21][38].visitNumber = WorldMapCells[21][39].visitNumber = WorldMapCells[21][40].visitNumber = WorldMapCells[21][41].visitNumber = WorldMapCells[21][42].visitNumber = WorldMapCells[21][43].visitNumber = WorldMapCells[21][44].visitNumber = WorldMapCells[21][45].visitNumber = WorldMapCells[21][46].visitNumber = WorldMapCells[21][47].visitNumber = WorldMapCells[21][48].visitNumber = WorldMapCells[21][49].visitNumber = WorldMapCells[21][50].visitNumber = WorldMapCells[21][51].visitNumber = WorldMapCells[21][52].visitNumber = WorldMapCells[21][53].visitNumber = WorldMapCells[21][54].visitNumber = WorldMapCells[21][55].visitNumber = WorldMapCells[21][56].visitNumber = WorldMapCells[21][57].visitNumber = WorldMapCells[21][58].visitNumber = WorldMapCells[21][59].visitNumber = WorldMapCells[21][60].visitNumber = WorldMapCells[21][61].visitNumber = WorldMapCells[21][62].visitNumber = WorldMapCells[21][63].visitNumber = WorldMapCells[21][64].visitNumber = WorldMapCells[21][65].visitNumber = WorldMapCells[21][66].visitNumber = WorldMapCells[21][67].visitNumber = WorldMapCells[21][68].visitNumber = WorldMapCells[21][69].visitNumber = WorldMapCells[21][70].visitNumber = WorldMapCells[21][71].visitNumber = WorldMapCells[21][72].visitNumber = WorldMapCells[21][73].visitNumber = WorldMapCells[21][74].visitNumber = WorldMapCells[21][75].visitNumber = WorldMapCells[21][76].visitNumber = WorldMapCells[21][77].visitNumber = WorldMapCells[21][78].visitNumber = WorldMapCells[21][79].visitNumber = WorldMapCells[21][80].visitNumber = WorldMapCells[21][81].visitNumber = WorldMapCells[21][82].visitNumber = WorldMapCells[21][83].visitNumber = WorldMapCells[21][84].visitNumber = WorldMapCells[21][85].visitNumber = WorldMapCells[21][86].visitNumber = WorldMapCells[21][87].visitNumber = WorldMapCells[21][88].visitNumber = WorldMapCells[21][89].visitNumber = WorldMapCells[21][90].visitNumber = WorldMapCells[21][91].visitNumber = WorldMapCells[21][92].visitNumber = WorldMapCells[21][93].visitNumber = WorldMapCells[21][94].visitNumber = WorldMapCells[21][95].visitNumber = WorldMapCells[21][96].visitNumber = WorldMapCells[21][97].visitNumber = WorldMapCells[21][98].visitNumber = WorldMapCells[21][99].visitNumber = 5;
                }
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapName == WorldMapCells[9][10].mapName && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == WorldMapCells[9][10].cellLocation && WorldMapCells[8][11].firstVisit == true) //air
            {
                WorldMapCells[9][10].firstVisit = false;
                if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == false)
                {
                    WorldMapCells[9][0].visitNumber = WorldMapCells[9][1].visitNumber = WorldMapCells[9][2].visitNumber = WorldMapCells[9][3].visitNumber = WorldMapCells[9][4].visitNumber = WorldMapCells[9][5].visitNumber = WorldMapCells[9][6].visitNumber = WorldMapCells[9][7].visitNumber = WorldMapCells[9][8].visitNumber = WorldMapCells[9][9].visitNumber = WorldMapCells[9][10].visitNumber = WorldMapCells[9][11].visitNumber = WorldMapCells[9][12].visitNumber = WorldMapCells[9][13].visitNumber = WorldMapCells[9][14].visitNumber = WorldMapCells[9][15].visitNumber = WorldMapCells[9][16].visitNumber = WorldMapCells[9][17].visitNumber = WorldMapCells[9][18].visitNumber = WorldMapCells[9][19].visitNumber = WorldMapCells[9][20].visitNumber = WorldMapCells[9][21].visitNumber = WorldMapCells[9][22].visitNumber = WorldMapCells[9][23].visitNumber = WorldMapCells[9][24].visitNumber = WorldMapCells[9][25].visitNumber = WorldMapCells[9][26].visitNumber = WorldMapCells[9][27].visitNumber = WorldMapCells[9][28].visitNumber = WorldMapCells[9][29].visitNumber = WorldMapCells[9][30].visitNumber = WorldMapCells[9][31].visitNumber = WorldMapCells[9][32].visitNumber = WorldMapCells[9][33].visitNumber = WorldMapCells[9][34].visitNumber = WorldMapCells[9][35].visitNumber = WorldMapCells[9][36].visitNumber = WorldMapCells[9][37].visitNumber = WorldMapCells[9][38].visitNumber = WorldMapCells[9][39].visitNumber = WorldMapCells[9][40].visitNumber = WorldMapCells[9][41].visitNumber = WorldMapCells[9][42].visitNumber = WorldMapCells[9][43].visitNumber = WorldMapCells[9][44].visitNumber = WorldMapCells[9][45].visitNumber = WorldMapCells[9][46].visitNumber = WorldMapCells[9][47].visitNumber = WorldMapCells[9][48].visitNumber = WorldMapCells[9][49].visitNumber = WorldMapCells[9][50].visitNumber = WorldMapCells[9][51].visitNumber = WorldMapCells[9][52].visitNumber = WorldMapCells[9][53].visitNumber = WorldMapCells[9][54].visitNumber = WorldMapCells[9][55].visitNumber = WorldMapCells[9][56].visitNumber = WorldMapCells[9][57].visitNumber = WorldMapCells[9][58].visitNumber = WorldMapCells[9][59].visitNumber = WorldMapCells[9][60].visitNumber = WorldMapCells[9][61].visitNumber = WorldMapCells[9][62].visitNumber = WorldMapCells[9][63].visitNumber = WorldMapCells[9][64].visitNumber = WorldMapCells[9][65].visitNumber = WorldMapCells[9][66].visitNumber = WorldMapCells[9][67].visitNumber = WorldMapCells[9][68].visitNumber = WorldMapCells[9][69].visitNumber = WorldMapCells[9][70].visitNumber = WorldMapCells[9][71].visitNumber = WorldMapCells[9][72].visitNumber = WorldMapCells[9][73].visitNumber = WorldMapCells[9][74].visitNumber = WorldMapCells[9][75].visitNumber = WorldMapCells[9][76].visitNumber = WorldMapCells[9][77].visitNumber = WorldMapCells[9][78].visitNumber = WorldMapCells[9][79].visitNumber = WorldMapCells[9][80].visitNumber = WorldMapCells[9][81].visitNumber = WorldMapCells[9][82].visitNumber = WorldMapCells[9][83].visitNumber = WorldMapCells[9][84].visitNumber = WorldMapCells[9][85].visitNumber = WorldMapCells[9][86].visitNumber = WorldMapCells[9][87].visitNumber = WorldMapCells[9][88].visitNumber = WorldMapCells[9][89].visitNumber = WorldMapCells[9][90].visitNumber = WorldMapCells[9][91].visitNumber = WorldMapCells[9][92].visitNumber = WorldMapCells[9][93].visitNumber = WorldMapCells[9][94].visitNumber = WorldMapCells[9][95].visitNumber = WorldMapCells[9][96].visitNumber = WorldMapCells[9][97].visitNumber = WorldMapCells[9][98].visitNumber = WorldMapCells[9][99].visitNumber = 1;
                    WorldMapCells[23][0].visitNumber = WorldMapCells[23][1].visitNumber = WorldMapCells[23][2].visitNumber = WorldMapCells[23][3].visitNumber = WorldMapCells[23][4].visitNumber = WorldMapCells[23][5].visitNumber = WorldMapCells[23][6].visitNumber = WorldMapCells[23][7].visitNumber = WorldMapCells[23][8].visitNumber = WorldMapCells[23][9].visitNumber = WorldMapCells[23][10].visitNumber = WorldMapCells[23][11].visitNumber = WorldMapCells[23][12].visitNumber = WorldMapCells[23][13].visitNumber = WorldMapCells[23][14].visitNumber = WorldMapCells[23][15].visitNumber = WorldMapCells[23][16].visitNumber = WorldMapCells[23][17].visitNumber = WorldMapCells[23][18].visitNumber = WorldMapCells[23][19].visitNumber = WorldMapCells[23][20].visitNumber = WorldMapCells[23][21].visitNumber = WorldMapCells[23][22].visitNumber = WorldMapCells[23][23].visitNumber = WorldMapCells[23][24].visitNumber = WorldMapCells[23][25].visitNumber = WorldMapCells[23][26].visitNumber = WorldMapCells[23][27].visitNumber = WorldMapCells[23][28].visitNumber = WorldMapCells[23][29].visitNumber = WorldMapCells[23][30].visitNumber = WorldMapCells[23][31].visitNumber = WorldMapCells[23][32].visitNumber = WorldMapCells[23][33].visitNumber = WorldMapCells[23][34].visitNumber = WorldMapCells[23][35].visitNumber = WorldMapCells[23][36].visitNumber = WorldMapCells[23][37].visitNumber = WorldMapCells[23][38].visitNumber = WorldMapCells[23][39].visitNumber = WorldMapCells[23][40].visitNumber = WorldMapCells[23][41].visitNumber = WorldMapCells[23][42].visitNumber = WorldMapCells[23][43].visitNumber = WorldMapCells[23][44].visitNumber = WorldMapCells[23][45].visitNumber = WorldMapCells[23][46].visitNumber = WorldMapCells[23][47].visitNumber = WorldMapCells[23][48].visitNumber = WorldMapCells[23][49].visitNumber = WorldMapCells[23][50].visitNumber = WorldMapCells[23][51].visitNumber = WorldMapCells[23][52].visitNumber = WorldMapCells[23][53].visitNumber = WorldMapCells[23][54].visitNumber = WorldMapCells[23][55].visitNumber = WorldMapCells[23][56].visitNumber = WorldMapCells[23][57].visitNumber = WorldMapCells[23][58].visitNumber = WorldMapCells[23][59].visitNumber = WorldMapCells[23][60].visitNumber = WorldMapCells[23][61].visitNumber = WorldMapCells[23][62].visitNumber = WorldMapCells[23][63].visitNumber = WorldMapCells[23][64].visitNumber = WorldMapCells[23][65].visitNumber = WorldMapCells[23][66].visitNumber = WorldMapCells[23][67].visitNumber = WorldMapCells[23][68].visitNumber = WorldMapCells[23][69].visitNumber = WorldMapCells[23][70].visitNumber = WorldMapCells[23][71].visitNumber = WorldMapCells[23][72].visitNumber = WorldMapCells[23][73].visitNumber = WorldMapCells[23][74].visitNumber = WorldMapCells[23][75].visitNumber = WorldMapCells[23][76].visitNumber = WorldMapCells[23][77].visitNumber = WorldMapCells[23][78].visitNumber = WorldMapCells[23][79].visitNumber = WorldMapCells[23][80].visitNumber = WorldMapCells[23][81].visitNumber = WorldMapCells[23][82].visitNumber = WorldMapCells[23][83].visitNumber = WorldMapCells[23][84].visitNumber = WorldMapCells[23][85].visitNumber = WorldMapCells[23][86].visitNumber = WorldMapCells[23][87].visitNumber = WorldMapCells[23][88].visitNumber = WorldMapCells[23][89].visitNumber = WorldMapCells[23][90].visitNumber = WorldMapCells[23][91].visitNumber = WorldMapCells[23][92].visitNumber = WorldMapCells[23][93].visitNumber = WorldMapCells[23][94].visitNumber = WorldMapCells[23][95].visitNumber = WorldMapCells[23][96].visitNumber = WorldMapCells[23][97].visitNumber = WorldMapCells[23][98].visitNumber = WorldMapCells[23][99].visitNumber = 1;
                    WorldMapCells[24][0].visitNumber = WorldMapCells[24][1].visitNumber = WorldMapCells[24][2].visitNumber = WorldMapCells[24][3].visitNumber = WorldMapCells[24][4].visitNumber = WorldMapCells[24][5].visitNumber = WorldMapCells[24][6].visitNumber = WorldMapCells[24][7].visitNumber = WorldMapCells[24][8].visitNumber = WorldMapCells[24][9].visitNumber = WorldMapCells[24][10].visitNumber = WorldMapCells[24][11].visitNumber = WorldMapCells[24][12].visitNumber = WorldMapCells[24][13].visitNumber = WorldMapCells[24][14].visitNumber = WorldMapCells[24][15].visitNumber = WorldMapCells[24][16].visitNumber = WorldMapCells[24][17].visitNumber = WorldMapCells[24][18].visitNumber = WorldMapCells[24][19].visitNumber = WorldMapCells[24][20].visitNumber = WorldMapCells[24][21].visitNumber = WorldMapCells[24][22].visitNumber = WorldMapCells[24][23].visitNumber = WorldMapCells[24][24].visitNumber = WorldMapCells[24][25].visitNumber = WorldMapCells[24][26].visitNumber = WorldMapCells[24][27].visitNumber = WorldMapCells[24][28].visitNumber = WorldMapCells[24][29].visitNumber = WorldMapCells[24][30].visitNumber = WorldMapCells[24][31].visitNumber = WorldMapCells[24][32].visitNumber = WorldMapCells[24][33].visitNumber = WorldMapCells[24][34].visitNumber = WorldMapCells[24][35].visitNumber = WorldMapCells[24][36].visitNumber = WorldMapCells[24][37].visitNumber = WorldMapCells[24][38].visitNumber = WorldMapCells[24][39].visitNumber = WorldMapCells[24][40].visitNumber = WorldMapCells[24][41].visitNumber = WorldMapCells[24][42].visitNumber = WorldMapCells[24][43].visitNumber = WorldMapCells[24][44].visitNumber = WorldMapCells[24][45].visitNumber = WorldMapCells[24][46].visitNumber = WorldMapCells[24][47].visitNumber = WorldMapCells[24][48].visitNumber = WorldMapCells[24][49].visitNumber = WorldMapCells[24][50].visitNumber = WorldMapCells[24][51].visitNumber = WorldMapCells[24][52].visitNumber = WorldMapCells[24][53].visitNumber = WorldMapCells[24][54].visitNumber = WorldMapCells[24][55].visitNumber = WorldMapCells[24][56].visitNumber = WorldMapCells[24][57].visitNumber = WorldMapCells[24][58].visitNumber = WorldMapCells[24][59].visitNumber = WorldMapCells[24][60].visitNumber = WorldMapCells[24][61].visitNumber = WorldMapCells[24][62].visitNumber = WorldMapCells[24][63].visitNumber = WorldMapCells[24][64].visitNumber = WorldMapCells[24][65].visitNumber = WorldMapCells[24][66].visitNumber = WorldMapCells[24][67].visitNumber = WorldMapCells[24][68].visitNumber = WorldMapCells[24][69].visitNumber = WorldMapCells[24][70].visitNumber = WorldMapCells[24][71].visitNumber = WorldMapCells[24][72].visitNumber = WorldMapCells[24][73].visitNumber = WorldMapCells[24][74].visitNumber = WorldMapCells[24][75].visitNumber = WorldMapCells[24][76].visitNumber = WorldMapCells[24][77].visitNumber = WorldMapCells[24][78].visitNumber = WorldMapCells[24][79].visitNumber = WorldMapCells[24][80].visitNumber = WorldMapCells[24][81].visitNumber = WorldMapCells[24][82].visitNumber = WorldMapCells[24][83].visitNumber = WorldMapCells[24][84].visitNumber = WorldMapCells[24][85].visitNumber = WorldMapCells[24][86].visitNumber = WorldMapCells[24][87].visitNumber = WorldMapCells[24][88].visitNumber = WorldMapCells[24][89].visitNumber = WorldMapCells[24][90].visitNumber = WorldMapCells[24][91].visitNumber = WorldMapCells[24][92].visitNumber = WorldMapCells[24][93].visitNumber = WorldMapCells[24][94].visitNumber = WorldMapCells[24][95].visitNumber = WorldMapCells[24][96].visitNumber = WorldMapCells[24][97].visitNumber = WorldMapCells[24][98].visitNumber = WorldMapCells[24][99].visitNumber = 1;
                }
                else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == false)
                {
                    WorldMapCells[9][0].visitNumber = WorldMapCells[9][1].visitNumber = WorldMapCells[9][2].visitNumber = WorldMapCells[9][3].visitNumber = WorldMapCells[9][4].visitNumber = WorldMapCells[9][5].visitNumber = WorldMapCells[9][6].visitNumber = WorldMapCells[9][7].visitNumber = WorldMapCells[9][8].visitNumber = WorldMapCells[9][9].visitNumber = WorldMapCells[9][10].visitNumber = WorldMapCells[9][11].visitNumber = WorldMapCells[9][12].visitNumber = WorldMapCells[9][13].visitNumber = WorldMapCells[9][14].visitNumber = WorldMapCells[9][15].visitNumber = WorldMapCells[9][16].visitNumber = WorldMapCells[9][17].visitNumber = WorldMapCells[9][18].visitNumber = WorldMapCells[9][19].visitNumber = WorldMapCells[9][20].visitNumber = WorldMapCells[9][21].visitNumber = WorldMapCells[9][22].visitNumber = WorldMapCells[9][23].visitNumber = WorldMapCells[9][24].visitNumber = WorldMapCells[9][25].visitNumber = WorldMapCells[9][26].visitNumber = WorldMapCells[9][27].visitNumber = WorldMapCells[9][28].visitNumber = WorldMapCells[9][29].visitNumber = WorldMapCells[9][30].visitNumber = WorldMapCells[9][31].visitNumber = WorldMapCells[9][32].visitNumber = WorldMapCells[9][33].visitNumber = WorldMapCells[9][34].visitNumber = WorldMapCells[9][35].visitNumber = WorldMapCells[9][36].visitNumber = WorldMapCells[9][37].visitNumber = WorldMapCells[9][38].visitNumber = WorldMapCells[9][39].visitNumber = WorldMapCells[9][40].visitNumber = WorldMapCells[9][41].visitNumber = WorldMapCells[9][42].visitNumber = WorldMapCells[9][43].visitNumber = WorldMapCells[9][44].visitNumber = WorldMapCells[9][45].visitNumber = WorldMapCells[9][46].visitNumber = WorldMapCells[9][47].visitNumber = WorldMapCells[9][48].visitNumber = WorldMapCells[9][49].visitNumber = WorldMapCells[9][50].visitNumber = WorldMapCells[9][51].visitNumber = WorldMapCells[9][52].visitNumber = WorldMapCells[9][53].visitNumber = WorldMapCells[9][54].visitNumber = WorldMapCells[9][55].visitNumber = WorldMapCells[9][56].visitNumber = WorldMapCells[9][57].visitNumber = WorldMapCells[9][58].visitNumber = WorldMapCells[9][59].visitNumber = WorldMapCells[9][60].visitNumber = WorldMapCells[9][61].visitNumber = WorldMapCells[9][62].visitNumber = WorldMapCells[9][63].visitNumber = WorldMapCells[9][64].visitNumber = WorldMapCells[9][65].visitNumber = WorldMapCells[9][66].visitNumber = WorldMapCells[9][67].visitNumber = WorldMapCells[9][68].visitNumber = WorldMapCells[9][69].visitNumber = WorldMapCells[9][70].visitNumber = WorldMapCells[9][71].visitNumber = WorldMapCells[9][72].visitNumber = WorldMapCells[9][73].visitNumber = WorldMapCells[9][74].visitNumber = WorldMapCells[9][75].visitNumber = WorldMapCells[9][76].visitNumber = WorldMapCells[9][77].visitNumber = WorldMapCells[9][78].visitNumber = WorldMapCells[9][79].visitNumber = WorldMapCells[9][80].visitNumber = WorldMapCells[9][81].visitNumber = WorldMapCells[9][82].visitNumber = WorldMapCells[9][83].visitNumber = WorldMapCells[9][84].visitNumber = WorldMapCells[9][85].visitNumber = WorldMapCells[9][86].visitNumber = WorldMapCells[9][87].visitNumber = WorldMapCells[9][88].visitNumber = WorldMapCells[9][89].visitNumber = WorldMapCells[9][90].visitNumber = WorldMapCells[9][91].visitNumber = WorldMapCells[9][92].visitNumber = WorldMapCells[9][93].visitNumber = WorldMapCells[9][94].visitNumber = WorldMapCells[9][95].visitNumber = WorldMapCells[9][96].visitNumber = WorldMapCells[9][97].visitNumber = WorldMapCells[9][98].visitNumber = WorldMapCells[9][99].visitNumber = 2;
                    WorldMapCells[23][0].visitNumber = WorldMapCells[23][1].visitNumber = WorldMapCells[23][2].visitNumber = WorldMapCells[23][3].visitNumber = WorldMapCells[23][4].visitNumber = WorldMapCells[23][5].visitNumber = WorldMapCells[23][6].visitNumber = WorldMapCells[23][7].visitNumber = WorldMapCells[23][8].visitNumber = WorldMapCells[23][9].visitNumber = WorldMapCells[23][10].visitNumber = WorldMapCells[23][11].visitNumber = WorldMapCells[23][12].visitNumber = WorldMapCells[23][13].visitNumber = WorldMapCells[23][14].visitNumber = WorldMapCells[23][15].visitNumber = WorldMapCells[23][16].visitNumber = WorldMapCells[23][17].visitNumber = WorldMapCells[23][18].visitNumber = WorldMapCells[23][19].visitNumber = WorldMapCells[23][20].visitNumber = WorldMapCells[23][21].visitNumber = WorldMapCells[23][22].visitNumber = WorldMapCells[23][23].visitNumber = WorldMapCells[23][24].visitNumber = WorldMapCells[23][25].visitNumber = WorldMapCells[23][26].visitNumber = WorldMapCells[23][27].visitNumber = WorldMapCells[23][28].visitNumber = WorldMapCells[23][29].visitNumber = WorldMapCells[23][30].visitNumber = WorldMapCells[23][31].visitNumber = WorldMapCells[23][32].visitNumber = WorldMapCells[23][33].visitNumber = WorldMapCells[23][34].visitNumber = WorldMapCells[23][35].visitNumber = WorldMapCells[23][36].visitNumber = WorldMapCells[23][37].visitNumber = WorldMapCells[23][38].visitNumber = WorldMapCells[23][39].visitNumber = WorldMapCells[23][40].visitNumber = WorldMapCells[23][41].visitNumber = WorldMapCells[23][42].visitNumber = WorldMapCells[23][43].visitNumber = WorldMapCells[23][44].visitNumber = WorldMapCells[23][45].visitNumber = WorldMapCells[23][46].visitNumber = WorldMapCells[23][47].visitNumber = WorldMapCells[23][48].visitNumber = WorldMapCells[23][49].visitNumber = WorldMapCells[23][50].visitNumber = WorldMapCells[23][51].visitNumber = WorldMapCells[23][52].visitNumber = WorldMapCells[23][53].visitNumber = WorldMapCells[23][54].visitNumber = WorldMapCells[23][55].visitNumber = WorldMapCells[23][56].visitNumber = WorldMapCells[23][57].visitNumber = WorldMapCells[23][58].visitNumber = WorldMapCells[23][59].visitNumber = WorldMapCells[23][60].visitNumber = WorldMapCells[23][61].visitNumber = WorldMapCells[23][62].visitNumber = WorldMapCells[23][63].visitNumber = WorldMapCells[23][64].visitNumber = WorldMapCells[23][65].visitNumber = WorldMapCells[23][66].visitNumber = WorldMapCells[23][67].visitNumber = WorldMapCells[23][68].visitNumber = WorldMapCells[23][69].visitNumber = WorldMapCells[23][70].visitNumber = WorldMapCells[23][71].visitNumber = WorldMapCells[23][72].visitNumber = WorldMapCells[23][73].visitNumber = WorldMapCells[23][74].visitNumber = WorldMapCells[23][75].visitNumber = WorldMapCells[23][76].visitNumber = WorldMapCells[23][77].visitNumber = WorldMapCells[23][78].visitNumber = WorldMapCells[23][79].visitNumber = WorldMapCells[23][80].visitNumber = WorldMapCells[23][81].visitNumber = WorldMapCells[23][82].visitNumber = WorldMapCells[23][83].visitNumber = WorldMapCells[23][84].visitNumber = WorldMapCells[23][85].visitNumber = WorldMapCells[23][86].visitNumber = WorldMapCells[23][87].visitNumber = WorldMapCells[23][88].visitNumber = WorldMapCells[23][89].visitNumber = WorldMapCells[23][90].visitNumber = WorldMapCells[23][91].visitNumber = WorldMapCells[23][92].visitNumber = WorldMapCells[23][93].visitNumber = WorldMapCells[23][94].visitNumber = WorldMapCells[23][95].visitNumber = WorldMapCells[23][96].visitNumber = WorldMapCells[23][97].visitNumber = WorldMapCells[23][98].visitNumber = WorldMapCells[23][99].visitNumber = 2;
                    WorldMapCells[24][0].visitNumber = WorldMapCells[24][1].visitNumber = WorldMapCells[24][2].visitNumber = WorldMapCells[24][3].visitNumber = WorldMapCells[24][4].visitNumber = WorldMapCells[24][5].visitNumber = WorldMapCells[24][6].visitNumber = WorldMapCells[24][7].visitNumber = WorldMapCells[24][8].visitNumber = WorldMapCells[24][9].visitNumber = WorldMapCells[24][10].visitNumber = WorldMapCells[24][11].visitNumber = WorldMapCells[24][12].visitNumber = WorldMapCells[24][13].visitNumber = WorldMapCells[24][14].visitNumber = WorldMapCells[24][15].visitNumber = WorldMapCells[24][16].visitNumber = WorldMapCells[24][17].visitNumber = WorldMapCells[24][18].visitNumber = WorldMapCells[24][19].visitNumber = WorldMapCells[24][20].visitNumber = WorldMapCells[24][21].visitNumber = WorldMapCells[24][22].visitNumber = WorldMapCells[24][23].visitNumber = WorldMapCells[24][24].visitNumber = WorldMapCells[24][25].visitNumber = WorldMapCells[24][26].visitNumber = WorldMapCells[24][27].visitNumber = WorldMapCells[24][28].visitNumber = WorldMapCells[24][29].visitNumber = WorldMapCells[24][30].visitNumber = WorldMapCells[24][31].visitNumber = WorldMapCells[24][32].visitNumber = WorldMapCells[24][33].visitNumber = WorldMapCells[24][34].visitNumber = WorldMapCells[24][35].visitNumber = WorldMapCells[24][36].visitNumber = WorldMapCells[24][37].visitNumber = WorldMapCells[24][38].visitNumber = WorldMapCells[24][39].visitNumber = WorldMapCells[24][40].visitNumber = WorldMapCells[24][41].visitNumber = WorldMapCells[24][42].visitNumber = WorldMapCells[24][43].visitNumber = WorldMapCells[24][44].visitNumber = WorldMapCells[24][45].visitNumber = WorldMapCells[24][46].visitNumber = WorldMapCells[24][47].visitNumber = WorldMapCells[24][48].visitNumber = WorldMapCells[24][49].visitNumber = WorldMapCells[24][50].visitNumber = WorldMapCells[24][51].visitNumber = WorldMapCells[24][52].visitNumber = WorldMapCells[24][53].visitNumber = WorldMapCells[24][54].visitNumber = WorldMapCells[24][55].visitNumber = WorldMapCells[24][56].visitNumber = WorldMapCells[24][57].visitNumber = WorldMapCells[24][58].visitNumber = WorldMapCells[24][59].visitNumber = WorldMapCells[24][60].visitNumber = WorldMapCells[24][61].visitNumber = WorldMapCells[24][62].visitNumber = WorldMapCells[24][63].visitNumber = WorldMapCells[24][64].visitNumber = WorldMapCells[24][65].visitNumber = WorldMapCells[24][66].visitNumber = WorldMapCells[24][67].visitNumber = WorldMapCells[24][68].visitNumber = WorldMapCells[24][69].visitNumber = WorldMapCells[24][70].visitNumber = WorldMapCells[24][71].visitNumber = WorldMapCells[24][72].visitNumber = WorldMapCells[24][73].visitNumber = WorldMapCells[24][74].visitNumber = WorldMapCells[24][75].visitNumber = WorldMapCells[24][76].visitNumber = WorldMapCells[24][77].visitNumber = WorldMapCells[24][78].visitNumber = WorldMapCells[24][79].visitNumber = WorldMapCells[24][80].visitNumber = WorldMapCells[24][81].visitNumber = WorldMapCells[24][82].visitNumber = WorldMapCells[24][83].visitNumber = WorldMapCells[24][84].visitNumber = WorldMapCells[24][85].visitNumber = WorldMapCells[24][86].visitNumber = WorldMapCells[24][87].visitNumber = WorldMapCells[24][88].visitNumber = WorldMapCells[24][89].visitNumber = WorldMapCells[24][90].visitNumber = WorldMapCells[24][91].visitNumber = WorldMapCells[24][92].visitNumber = WorldMapCells[24][93].visitNumber = WorldMapCells[24][94].visitNumber = WorldMapCells[24][95].visitNumber = WorldMapCells[24][96].visitNumber = WorldMapCells[24][97].visitNumber = WorldMapCells[24][98].visitNumber = WorldMapCells[24][99].visitNumber = 2;
                }
                else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == true)
                {
                    WorldMapCells[9][0].visitNumber = WorldMapCells[9][1].visitNumber = WorldMapCells[9][2].visitNumber = WorldMapCells[9][3].visitNumber = WorldMapCells[9][4].visitNumber = WorldMapCells[9][5].visitNumber = WorldMapCells[9][6].visitNumber = WorldMapCells[9][7].visitNumber = WorldMapCells[9][8].visitNumber = WorldMapCells[9][9].visitNumber = WorldMapCells[9][10].visitNumber = WorldMapCells[9][11].visitNumber = WorldMapCells[9][12].visitNumber = WorldMapCells[9][13].visitNumber = WorldMapCells[9][14].visitNumber = WorldMapCells[9][15].visitNumber = WorldMapCells[9][16].visitNumber = WorldMapCells[9][17].visitNumber = WorldMapCells[9][18].visitNumber = WorldMapCells[9][19].visitNumber = WorldMapCells[9][20].visitNumber = WorldMapCells[9][21].visitNumber = WorldMapCells[9][22].visitNumber = WorldMapCells[9][23].visitNumber = WorldMapCells[9][24].visitNumber = WorldMapCells[9][25].visitNumber = WorldMapCells[9][26].visitNumber = WorldMapCells[9][27].visitNumber = WorldMapCells[9][28].visitNumber = WorldMapCells[9][29].visitNumber = WorldMapCells[9][30].visitNumber = WorldMapCells[9][31].visitNumber = WorldMapCells[9][32].visitNumber = WorldMapCells[9][33].visitNumber = WorldMapCells[9][34].visitNumber = WorldMapCells[9][35].visitNumber = WorldMapCells[9][36].visitNumber = WorldMapCells[9][37].visitNumber = WorldMapCells[9][38].visitNumber = WorldMapCells[9][39].visitNumber = WorldMapCells[9][40].visitNumber = WorldMapCells[9][41].visitNumber = WorldMapCells[9][42].visitNumber = WorldMapCells[9][43].visitNumber = WorldMapCells[9][44].visitNumber = WorldMapCells[9][45].visitNumber = WorldMapCells[9][46].visitNumber = WorldMapCells[9][47].visitNumber = WorldMapCells[9][48].visitNumber = WorldMapCells[9][49].visitNumber = WorldMapCells[9][50].visitNumber = WorldMapCells[9][51].visitNumber = WorldMapCells[9][52].visitNumber = WorldMapCells[9][53].visitNumber = WorldMapCells[9][54].visitNumber = WorldMapCells[9][55].visitNumber = WorldMapCells[9][56].visitNumber = WorldMapCells[9][57].visitNumber = WorldMapCells[9][58].visitNumber = WorldMapCells[9][59].visitNumber = WorldMapCells[9][60].visitNumber = WorldMapCells[9][61].visitNumber = WorldMapCells[9][62].visitNumber = WorldMapCells[9][63].visitNumber = WorldMapCells[9][64].visitNumber = WorldMapCells[9][65].visitNumber = WorldMapCells[9][66].visitNumber = WorldMapCells[9][67].visitNumber = WorldMapCells[9][68].visitNumber = WorldMapCells[9][69].visitNumber = WorldMapCells[9][70].visitNumber = WorldMapCells[9][71].visitNumber = WorldMapCells[9][72].visitNumber = WorldMapCells[9][73].visitNumber = WorldMapCells[9][74].visitNumber = WorldMapCells[9][75].visitNumber = WorldMapCells[9][76].visitNumber = WorldMapCells[9][77].visitNumber = WorldMapCells[9][78].visitNumber = WorldMapCells[9][79].visitNumber = WorldMapCells[9][80].visitNumber = WorldMapCells[9][81].visitNumber = WorldMapCells[9][82].visitNumber = WorldMapCells[9][83].visitNumber = WorldMapCells[9][84].visitNumber = WorldMapCells[9][85].visitNumber = WorldMapCells[9][86].visitNumber = WorldMapCells[9][87].visitNumber = WorldMapCells[9][88].visitNumber = WorldMapCells[9][89].visitNumber = WorldMapCells[9][90].visitNumber = WorldMapCells[9][91].visitNumber = WorldMapCells[9][92].visitNumber = WorldMapCells[9][93].visitNumber = WorldMapCells[9][94].visitNumber = WorldMapCells[9][95].visitNumber = WorldMapCells[9][96].visitNumber = WorldMapCells[9][97].visitNumber = WorldMapCells[9][98].visitNumber = WorldMapCells[9][99].visitNumber = 3;
                    WorldMapCells[23][0].visitNumber = WorldMapCells[23][1].visitNumber = WorldMapCells[23][2].visitNumber = WorldMapCells[23][3].visitNumber = WorldMapCells[23][4].visitNumber = WorldMapCells[23][5].visitNumber = WorldMapCells[23][6].visitNumber = WorldMapCells[23][7].visitNumber = WorldMapCells[23][8].visitNumber = WorldMapCells[23][9].visitNumber = WorldMapCells[23][10].visitNumber = WorldMapCells[23][11].visitNumber = WorldMapCells[23][12].visitNumber = WorldMapCells[23][13].visitNumber = WorldMapCells[23][14].visitNumber = WorldMapCells[23][15].visitNumber = WorldMapCells[23][16].visitNumber = WorldMapCells[23][17].visitNumber = WorldMapCells[23][18].visitNumber = WorldMapCells[23][19].visitNumber = WorldMapCells[23][20].visitNumber = WorldMapCells[23][21].visitNumber = WorldMapCells[23][22].visitNumber = WorldMapCells[23][23].visitNumber = WorldMapCells[23][24].visitNumber = WorldMapCells[23][25].visitNumber = WorldMapCells[23][26].visitNumber = WorldMapCells[23][27].visitNumber = WorldMapCells[23][28].visitNumber = WorldMapCells[23][29].visitNumber = WorldMapCells[23][30].visitNumber = WorldMapCells[23][31].visitNumber = WorldMapCells[23][32].visitNumber = WorldMapCells[23][33].visitNumber = WorldMapCells[23][34].visitNumber = WorldMapCells[23][35].visitNumber = WorldMapCells[23][36].visitNumber = WorldMapCells[23][37].visitNumber = WorldMapCells[23][38].visitNumber = WorldMapCells[23][39].visitNumber = WorldMapCells[23][40].visitNumber = WorldMapCells[23][41].visitNumber = WorldMapCells[23][42].visitNumber = WorldMapCells[23][43].visitNumber = WorldMapCells[23][44].visitNumber = WorldMapCells[23][45].visitNumber = WorldMapCells[23][46].visitNumber = WorldMapCells[23][47].visitNumber = WorldMapCells[23][48].visitNumber = WorldMapCells[23][49].visitNumber = WorldMapCells[23][50].visitNumber = WorldMapCells[23][51].visitNumber = WorldMapCells[23][52].visitNumber = WorldMapCells[23][53].visitNumber = WorldMapCells[23][54].visitNumber = WorldMapCells[23][55].visitNumber = WorldMapCells[23][56].visitNumber = WorldMapCells[23][57].visitNumber = WorldMapCells[23][58].visitNumber = WorldMapCells[23][59].visitNumber = WorldMapCells[23][60].visitNumber = WorldMapCells[23][61].visitNumber = WorldMapCells[23][62].visitNumber = WorldMapCells[23][63].visitNumber = WorldMapCells[23][64].visitNumber = WorldMapCells[23][65].visitNumber = WorldMapCells[23][66].visitNumber = WorldMapCells[23][67].visitNumber = WorldMapCells[23][68].visitNumber = WorldMapCells[23][69].visitNumber = WorldMapCells[23][70].visitNumber = WorldMapCells[23][71].visitNumber = WorldMapCells[23][72].visitNumber = WorldMapCells[23][73].visitNumber = WorldMapCells[23][74].visitNumber = WorldMapCells[23][75].visitNumber = WorldMapCells[23][76].visitNumber = WorldMapCells[23][77].visitNumber = WorldMapCells[23][78].visitNumber = WorldMapCells[23][79].visitNumber = WorldMapCells[23][80].visitNumber = WorldMapCells[23][81].visitNumber = WorldMapCells[23][82].visitNumber = WorldMapCells[23][83].visitNumber = WorldMapCells[23][84].visitNumber = WorldMapCells[23][85].visitNumber = WorldMapCells[23][86].visitNumber = WorldMapCells[23][87].visitNumber = WorldMapCells[23][88].visitNumber = WorldMapCells[23][89].visitNumber = WorldMapCells[23][90].visitNumber = WorldMapCells[23][91].visitNumber = WorldMapCells[23][92].visitNumber = WorldMapCells[23][93].visitNumber = WorldMapCells[23][94].visitNumber = WorldMapCells[23][95].visitNumber = WorldMapCells[23][96].visitNumber = WorldMapCells[23][97].visitNumber = WorldMapCells[23][98].visitNumber = WorldMapCells[23][99].visitNumber = 3;
                    WorldMapCells[24][0].visitNumber = WorldMapCells[24][1].visitNumber = WorldMapCells[24][2].visitNumber = WorldMapCells[24][3].visitNumber = WorldMapCells[24][4].visitNumber = WorldMapCells[24][5].visitNumber = WorldMapCells[24][6].visitNumber = WorldMapCells[24][7].visitNumber = WorldMapCells[24][8].visitNumber = WorldMapCells[24][9].visitNumber = WorldMapCells[24][10].visitNumber = WorldMapCells[24][11].visitNumber = WorldMapCells[24][12].visitNumber = WorldMapCells[24][13].visitNumber = WorldMapCells[24][14].visitNumber = WorldMapCells[24][15].visitNumber = WorldMapCells[24][16].visitNumber = WorldMapCells[24][17].visitNumber = WorldMapCells[24][18].visitNumber = WorldMapCells[24][19].visitNumber = WorldMapCells[24][20].visitNumber = WorldMapCells[24][21].visitNumber = WorldMapCells[24][22].visitNumber = WorldMapCells[24][23].visitNumber = WorldMapCells[24][24].visitNumber = WorldMapCells[24][25].visitNumber = WorldMapCells[24][26].visitNumber = WorldMapCells[24][27].visitNumber = WorldMapCells[24][28].visitNumber = WorldMapCells[24][29].visitNumber = WorldMapCells[24][30].visitNumber = WorldMapCells[24][31].visitNumber = WorldMapCells[24][32].visitNumber = WorldMapCells[24][33].visitNumber = WorldMapCells[24][34].visitNumber = WorldMapCells[24][35].visitNumber = WorldMapCells[24][36].visitNumber = WorldMapCells[24][37].visitNumber = WorldMapCells[24][38].visitNumber = WorldMapCells[24][39].visitNumber = WorldMapCells[24][40].visitNumber = WorldMapCells[24][41].visitNumber = WorldMapCells[24][42].visitNumber = WorldMapCells[24][43].visitNumber = WorldMapCells[24][44].visitNumber = WorldMapCells[24][45].visitNumber = WorldMapCells[24][46].visitNumber = WorldMapCells[24][47].visitNumber = WorldMapCells[24][48].visitNumber = WorldMapCells[24][49].visitNumber = WorldMapCells[24][50].visitNumber = WorldMapCells[24][51].visitNumber = WorldMapCells[24][52].visitNumber = WorldMapCells[24][53].visitNumber = WorldMapCells[24][54].visitNumber = WorldMapCells[24][55].visitNumber = WorldMapCells[24][56].visitNumber = WorldMapCells[24][57].visitNumber = WorldMapCells[24][58].visitNumber = WorldMapCells[24][59].visitNumber = WorldMapCells[24][60].visitNumber = WorldMapCells[24][61].visitNumber = WorldMapCells[24][62].visitNumber = WorldMapCells[24][63].visitNumber = WorldMapCells[24][64].visitNumber = WorldMapCells[24][65].visitNumber = WorldMapCells[24][66].visitNumber = WorldMapCells[24][67].visitNumber = WorldMapCells[24][68].visitNumber = WorldMapCells[24][69].visitNumber = WorldMapCells[24][70].visitNumber = WorldMapCells[24][71].visitNumber = WorldMapCells[24][72].visitNumber = WorldMapCells[24][73].visitNumber = WorldMapCells[24][74].visitNumber = WorldMapCells[24][75].visitNumber = WorldMapCells[24][76].visitNumber = WorldMapCells[24][77].visitNumber = WorldMapCells[24][78].visitNumber = WorldMapCells[24][79].visitNumber = WorldMapCells[24][80].visitNumber = WorldMapCells[24][81].visitNumber = WorldMapCells[24][82].visitNumber = WorldMapCells[24][83].visitNumber = WorldMapCells[24][84].visitNumber = WorldMapCells[24][85].visitNumber = WorldMapCells[24][86].visitNumber = WorldMapCells[24][87].visitNumber = WorldMapCells[24][88].visitNumber = WorldMapCells[24][89].visitNumber = WorldMapCells[24][90].visitNumber = WorldMapCells[24][91].visitNumber = WorldMapCells[24][92].visitNumber = WorldMapCells[24][93].visitNumber = WorldMapCells[24][94].visitNumber = WorldMapCells[24][95].visitNumber = WorldMapCells[24][96].visitNumber = WorldMapCells[24][97].visitNumber = WorldMapCells[24][98].visitNumber = WorldMapCells[24][99].visitNumber = 3;
                }
                else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == true
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == true)
                {
                    WorldMapCells[9][0].visitNumber = WorldMapCells[9][1].visitNumber = WorldMapCells[9][2].visitNumber = WorldMapCells[9][3].visitNumber = WorldMapCells[9][4].visitNumber = WorldMapCells[9][5].visitNumber = WorldMapCells[9][6].visitNumber = WorldMapCells[9][7].visitNumber = WorldMapCells[9][8].visitNumber = WorldMapCells[9][9].visitNumber = WorldMapCells[9][10].visitNumber = WorldMapCells[9][11].visitNumber = WorldMapCells[9][12].visitNumber = WorldMapCells[9][13].visitNumber = WorldMapCells[9][14].visitNumber = WorldMapCells[9][15].visitNumber = WorldMapCells[9][16].visitNumber = WorldMapCells[9][17].visitNumber = WorldMapCells[9][18].visitNumber = WorldMapCells[9][19].visitNumber = WorldMapCells[9][20].visitNumber = WorldMapCells[9][21].visitNumber = WorldMapCells[9][22].visitNumber = WorldMapCells[9][23].visitNumber = WorldMapCells[9][24].visitNumber = WorldMapCells[9][25].visitNumber = WorldMapCells[9][26].visitNumber = WorldMapCells[9][27].visitNumber = WorldMapCells[9][28].visitNumber = WorldMapCells[9][29].visitNumber = WorldMapCells[9][30].visitNumber = WorldMapCells[9][31].visitNumber = WorldMapCells[9][32].visitNumber = WorldMapCells[9][33].visitNumber = WorldMapCells[9][34].visitNumber = WorldMapCells[9][35].visitNumber = WorldMapCells[9][36].visitNumber = WorldMapCells[9][37].visitNumber = WorldMapCells[9][38].visitNumber = WorldMapCells[9][39].visitNumber = WorldMapCells[9][40].visitNumber = WorldMapCells[9][41].visitNumber = WorldMapCells[9][42].visitNumber = WorldMapCells[9][43].visitNumber = WorldMapCells[9][44].visitNumber = WorldMapCells[9][45].visitNumber = WorldMapCells[9][46].visitNumber = WorldMapCells[9][47].visitNumber = WorldMapCells[9][48].visitNumber = WorldMapCells[9][49].visitNumber = WorldMapCells[9][50].visitNumber = WorldMapCells[9][51].visitNumber = WorldMapCells[9][52].visitNumber = WorldMapCells[9][53].visitNumber = WorldMapCells[9][54].visitNumber = WorldMapCells[9][55].visitNumber = WorldMapCells[9][56].visitNumber = WorldMapCells[9][57].visitNumber = WorldMapCells[9][58].visitNumber = WorldMapCells[9][59].visitNumber = WorldMapCells[9][60].visitNumber = WorldMapCells[9][61].visitNumber = WorldMapCells[9][62].visitNumber = WorldMapCells[9][63].visitNumber = WorldMapCells[9][64].visitNumber = WorldMapCells[9][65].visitNumber = WorldMapCells[9][66].visitNumber = WorldMapCells[9][67].visitNumber = WorldMapCells[9][68].visitNumber = WorldMapCells[9][69].visitNumber = WorldMapCells[9][70].visitNumber = WorldMapCells[9][71].visitNumber = WorldMapCells[9][72].visitNumber = WorldMapCells[9][73].visitNumber = WorldMapCells[9][74].visitNumber = WorldMapCells[9][75].visitNumber = WorldMapCells[9][76].visitNumber = WorldMapCells[9][77].visitNumber = WorldMapCells[9][78].visitNumber = WorldMapCells[9][79].visitNumber = WorldMapCells[9][80].visitNumber = WorldMapCells[9][81].visitNumber = WorldMapCells[9][82].visitNumber = WorldMapCells[9][83].visitNumber = WorldMapCells[9][84].visitNumber = WorldMapCells[9][85].visitNumber = WorldMapCells[9][86].visitNumber = WorldMapCells[9][87].visitNumber = WorldMapCells[9][88].visitNumber = WorldMapCells[9][89].visitNumber = WorldMapCells[9][90].visitNumber = WorldMapCells[9][91].visitNumber = WorldMapCells[9][92].visitNumber = WorldMapCells[9][93].visitNumber = WorldMapCells[9][94].visitNumber = WorldMapCells[9][95].visitNumber = WorldMapCells[9][96].visitNumber = WorldMapCells[9][97].visitNumber = WorldMapCells[9][98].visitNumber = WorldMapCells[9][99].visitNumber = 4;
                    WorldMapCells[23][0].visitNumber = WorldMapCells[23][1].visitNumber = WorldMapCells[23][2].visitNumber = WorldMapCells[23][3].visitNumber = WorldMapCells[23][4].visitNumber = WorldMapCells[23][5].visitNumber = WorldMapCells[23][6].visitNumber = WorldMapCells[23][7].visitNumber = WorldMapCells[23][8].visitNumber = WorldMapCells[23][9].visitNumber = WorldMapCells[23][10].visitNumber = WorldMapCells[23][11].visitNumber = WorldMapCells[23][12].visitNumber = WorldMapCells[23][13].visitNumber = WorldMapCells[23][14].visitNumber = WorldMapCells[23][15].visitNumber = WorldMapCells[23][16].visitNumber = WorldMapCells[23][17].visitNumber = WorldMapCells[23][18].visitNumber = WorldMapCells[23][19].visitNumber = WorldMapCells[23][20].visitNumber = WorldMapCells[23][21].visitNumber = WorldMapCells[23][22].visitNumber = WorldMapCells[23][23].visitNumber = WorldMapCells[23][24].visitNumber = WorldMapCells[23][25].visitNumber = WorldMapCells[23][26].visitNumber = WorldMapCells[23][27].visitNumber = WorldMapCells[23][28].visitNumber = WorldMapCells[23][29].visitNumber = WorldMapCells[23][30].visitNumber = WorldMapCells[23][31].visitNumber = WorldMapCells[23][32].visitNumber = WorldMapCells[23][33].visitNumber = WorldMapCells[23][34].visitNumber = WorldMapCells[23][35].visitNumber = WorldMapCells[23][36].visitNumber = WorldMapCells[23][37].visitNumber = WorldMapCells[23][38].visitNumber = WorldMapCells[23][39].visitNumber = WorldMapCells[23][40].visitNumber = WorldMapCells[23][41].visitNumber = WorldMapCells[23][42].visitNumber = WorldMapCells[23][43].visitNumber = WorldMapCells[23][44].visitNumber = WorldMapCells[23][45].visitNumber = WorldMapCells[23][46].visitNumber = WorldMapCells[23][47].visitNumber = WorldMapCells[23][48].visitNumber = WorldMapCells[23][49].visitNumber = WorldMapCells[23][50].visitNumber = WorldMapCells[23][51].visitNumber = WorldMapCells[23][52].visitNumber = WorldMapCells[23][53].visitNumber = WorldMapCells[23][54].visitNumber = WorldMapCells[23][55].visitNumber = WorldMapCells[23][56].visitNumber = WorldMapCells[23][57].visitNumber = WorldMapCells[23][58].visitNumber = WorldMapCells[23][59].visitNumber = WorldMapCells[23][60].visitNumber = WorldMapCells[23][61].visitNumber = WorldMapCells[23][62].visitNumber = WorldMapCells[23][63].visitNumber = WorldMapCells[23][64].visitNumber = WorldMapCells[23][65].visitNumber = WorldMapCells[23][66].visitNumber = WorldMapCells[23][67].visitNumber = WorldMapCells[23][68].visitNumber = WorldMapCells[23][69].visitNumber = WorldMapCells[23][70].visitNumber = WorldMapCells[23][71].visitNumber = WorldMapCells[23][72].visitNumber = WorldMapCells[23][73].visitNumber = WorldMapCells[23][74].visitNumber = WorldMapCells[23][75].visitNumber = WorldMapCells[23][76].visitNumber = WorldMapCells[23][77].visitNumber = WorldMapCells[23][78].visitNumber = WorldMapCells[23][79].visitNumber = WorldMapCells[23][80].visitNumber = WorldMapCells[23][81].visitNumber = WorldMapCells[23][82].visitNumber = WorldMapCells[23][83].visitNumber = WorldMapCells[23][84].visitNumber = WorldMapCells[23][85].visitNumber = WorldMapCells[23][86].visitNumber = WorldMapCells[23][87].visitNumber = WorldMapCells[23][88].visitNumber = WorldMapCells[23][89].visitNumber = WorldMapCells[23][90].visitNumber = WorldMapCells[23][91].visitNumber = WorldMapCells[23][92].visitNumber = WorldMapCells[23][93].visitNumber = WorldMapCells[23][94].visitNumber = WorldMapCells[23][95].visitNumber = WorldMapCells[23][96].visitNumber = WorldMapCells[23][97].visitNumber = WorldMapCells[23][98].visitNumber = WorldMapCells[23][99].visitNumber = 4;
                    WorldMapCells[24][0].visitNumber = WorldMapCells[24][1].visitNumber = WorldMapCells[24][2].visitNumber = WorldMapCells[24][3].visitNumber = WorldMapCells[24][4].visitNumber = WorldMapCells[24][5].visitNumber = WorldMapCells[24][6].visitNumber = WorldMapCells[24][7].visitNumber = WorldMapCells[24][8].visitNumber = WorldMapCells[24][9].visitNumber = WorldMapCells[24][10].visitNumber = WorldMapCells[24][11].visitNumber = WorldMapCells[24][12].visitNumber = WorldMapCells[24][13].visitNumber = WorldMapCells[24][14].visitNumber = WorldMapCells[24][15].visitNumber = WorldMapCells[24][16].visitNumber = WorldMapCells[24][17].visitNumber = WorldMapCells[24][18].visitNumber = WorldMapCells[24][19].visitNumber = WorldMapCells[24][20].visitNumber = WorldMapCells[24][21].visitNumber = WorldMapCells[24][22].visitNumber = WorldMapCells[24][23].visitNumber = WorldMapCells[24][24].visitNumber = WorldMapCells[24][25].visitNumber = WorldMapCells[24][26].visitNumber = WorldMapCells[24][27].visitNumber = WorldMapCells[24][28].visitNumber = WorldMapCells[24][29].visitNumber = WorldMapCells[24][30].visitNumber = WorldMapCells[24][31].visitNumber = WorldMapCells[24][32].visitNumber = WorldMapCells[24][33].visitNumber = WorldMapCells[24][34].visitNumber = WorldMapCells[24][35].visitNumber = WorldMapCells[24][36].visitNumber = WorldMapCells[24][37].visitNumber = WorldMapCells[24][38].visitNumber = WorldMapCells[24][39].visitNumber = WorldMapCells[24][40].visitNumber = WorldMapCells[24][41].visitNumber = WorldMapCells[24][42].visitNumber = WorldMapCells[24][43].visitNumber = WorldMapCells[24][44].visitNumber = WorldMapCells[24][45].visitNumber = WorldMapCells[24][46].visitNumber = WorldMapCells[24][47].visitNumber = WorldMapCells[24][48].visitNumber = WorldMapCells[24][49].visitNumber = WorldMapCells[24][50].visitNumber = WorldMapCells[24][51].visitNumber = WorldMapCells[24][52].visitNumber = WorldMapCells[24][53].visitNumber = WorldMapCells[24][54].visitNumber = WorldMapCells[24][55].visitNumber = WorldMapCells[24][56].visitNumber = WorldMapCells[24][57].visitNumber = WorldMapCells[24][58].visitNumber = WorldMapCells[24][59].visitNumber = WorldMapCells[24][60].visitNumber = WorldMapCells[24][61].visitNumber = WorldMapCells[24][62].visitNumber = WorldMapCells[24][63].visitNumber = WorldMapCells[24][64].visitNumber = WorldMapCells[24][65].visitNumber = WorldMapCells[24][66].visitNumber = WorldMapCells[24][67].visitNumber = WorldMapCells[24][68].visitNumber = WorldMapCells[24][69].visitNumber = WorldMapCells[24][70].visitNumber = WorldMapCells[24][71].visitNumber = WorldMapCells[24][72].visitNumber = WorldMapCells[24][73].visitNumber = WorldMapCells[24][74].visitNumber = WorldMapCells[24][75].visitNumber = WorldMapCells[24][76].visitNumber = WorldMapCells[24][77].visitNumber = WorldMapCells[24][78].visitNumber = WorldMapCells[24][79].visitNumber = WorldMapCells[24][80].visitNumber = WorldMapCells[24][81].visitNumber = WorldMapCells[24][82].visitNumber = WorldMapCells[24][83].visitNumber = WorldMapCells[24][84].visitNumber = WorldMapCells[24][85].visitNumber = WorldMapCells[24][86].visitNumber = WorldMapCells[24][87].visitNumber = WorldMapCells[24][88].visitNumber = WorldMapCells[24][89].visitNumber = WorldMapCells[24][90].visitNumber = WorldMapCells[24][91].visitNumber = WorldMapCells[24][92].visitNumber = WorldMapCells[24][93].visitNumber = WorldMapCells[24][94].visitNumber = WorldMapCells[24][95].visitNumber = WorldMapCells[24][96].visitNumber = WorldMapCells[24][97].visitNumber = WorldMapCells[24][98].visitNumber = WorldMapCells[24][99].visitNumber = 4;
                }
                else if (WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == true)
                {
                    WorldMapCells[9][0].visitNumber = WorldMapCells[9][1].visitNumber = WorldMapCells[9][2].visitNumber = WorldMapCells[9][3].visitNumber = WorldMapCells[9][4].visitNumber = WorldMapCells[9][5].visitNumber = WorldMapCells[9][6].visitNumber = WorldMapCells[9][7].visitNumber = WorldMapCells[9][8].visitNumber = WorldMapCells[9][9].visitNumber = WorldMapCells[9][10].visitNumber = WorldMapCells[9][11].visitNumber = WorldMapCells[9][12].visitNumber = WorldMapCells[9][13].visitNumber = WorldMapCells[9][14].visitNumber = WorldMapCells[9][15].visitNumber = WorldMapCells[9][16].visitNumber = WorldMapCells[9][17].visitNumber = WorldMapCells[9][18].visitNumber = WorldMapCells[9][19].visitNumber = WorldMapCells[9][20].visitNumber = WorldMapCells[9][21].visitNumber = WorldMapCells[9][22].visitNumber = WorldMapCells[9][23].visitNumber = WorldMapCells[9][24].visitNumber = WorldMapCells[9][25].visitNumber = WorldMapCells[9][26].visitNumber = WorldMapCells[9][27].visitNumber = WorldMapCells[9][28].visitNumber = WorldMapCells[9][29].visitNumber = WorldMapCells[9][30].visitNumber = WorldMapCells[9][31].visitNumber = WorldMapCells[9][32].visitNumber = WorldMapCells[9][33].visitNumber = WorldMapCells[9][34].visitNumber = WorldMapCells[9][35].visitNumber = WorldMapCells[9][36].visitNumber = WorldMapCells[9][37].visitNumber = WorldMapCells[9][38].visitNumber = WorldMapCells[9][39].visitNumber = WorldMapCells[9][40].visitNumber = WorldMapCells[9][41].visitNumber = WorldMapCells[9][42].visitNumber = WorldMapCells[9][43].visitNumber = WorldMapCells[9][44].visitNumber = WorldMapCells[9][45].visitNumber = WorldMapCells[9][46].visitNumber = WorldMapCells[9][47].visitNumber = WorldMapCells[9][48].visitNumber = WorldMapCells[9][49].visitNumber = WorldMapCells[9][50].visitNumber = WorldMapCells[9][51].visitNumber = WorldMapCells[9][52].visitNumber = WorldMapCells[9][53].visitNumber = WorldMapCells[9][54].visitNumber = WorldMapCells[9][55].visitNumber = WorldMapCells[9][56].visitNumber = WorldMapCells[9][57].visitNumber = WorldMapCells[9][58].visitNumber = WorldMapCells[9][59].visitNumber = WorldMapCells[9][60].visitNumber = WorldMapCells[9][61].visitNumber = WorldMapCells[9][62].visitNumber = WorldMapCells[9][63].visitNumber = WorldMapCells[9][64].visitNumber = WorldMapCells[9][65].visitNumber = WorldMapCells[9][66].visitNumber = WorldMapCells[9][67].visitNumber = WorldMapCells[9][68].visitNumber = WorldMapCells[9][69].visitNumber = WorldMapCells[9][70].visitNumber = WorldMapCells[9][71].visitNumber = WorldMapCells[9][72].visitNumber = WorldMapCells[9][73].visitNumber = WorldMapCells[9][74].visitNumber = WorldMapCells[9][75].visitNumber = WorldMapCells[9][76].visitNumber = WorldMapCells[9][77].visitNumber = WorldMapCells[9][78].visitNumber = WorldMapCells[9][79].visitNumber = WorldMapCells[9][80].visitNumber = WorldMapCells[9][81].visitNumber = WorldMapCells[9][82].visitNumber = WorldMapCells[9][83].visitNumber = WorldMapCells[9][84].visitNumber = WorldMapCells[9][85].visitNumber = WorldMapCells[9][86].visitNumber = WorldMapCells[9][87].visitNumber = WorldMapCells[9][88].visitNumber = WorldMapCells[9][89].visitNumber = WorldMapCells[9][90].visitNumber = WorldMapCells[9][91].visitNumber = WorldMapCells[9][92].visitNumber = WorldMapCells[9][93].visitNumber = WorldMapCells[9][94].visitNumber = WorldMapCells[9][95].visitNumber = WorldMapCells[9][96].visitNumber = WorldMapCells[9][97].visitNumber = WorldMapCells[9][98].visitNumber = WorldMapCells[9][99].visitNumber = 5;
                    WorldMapCells[23][0].visitNumber = WorldMapCells[23][1].visitNumber = WorldMapCells[23][2].visitNumber = WorldMapCells[23][3].visitNumber = WorldMapCells[23][4].visitNumber = WorldMapCells[23][5].visitNumber = WorldMapCells[23][6].visitNumber = WorldMapCells[23][7].visitNumber = WorldMapCells[23][8].visitNumber = WorldMapCells[23][9].visitNumber = WorldMapCells[23][10].visitNumber = WorldMapCells[23][11].visitNumber = WorldMapCells[23][12].visitNumber = WorldMapCells[23][13].visitNumber = WorldMapCells[23][14].visitNumber = WorldMapCells[23][15].visitNumber = WorldMapCells[23][16].visitNumber = WorldMapCells[23][17].visitNumber = WorldMapCells[23][18].visitNumber = WorldMapCells[23][19].visitNumber = WorldMapCells[23][20].visitNumber = WorldMapCells[23][21].visitNumber = WorldMapCells[23][22].visitNumber = WorldMapCells[23][23].visitNumber = WorldMapCells[23][24].visitNumber = WorldMapCells[23][25].visitNumber = WorldMapCells[23][26].visitNumber = WorldMapCells[23][27].visitNumber = WorldMapCells[23][28].visitNumber = WorldMapCells[23][29].visitNumber = WorldMapCells[23][30].visitNumber = WorldMapCells[23][31].visitNumber = WorldMapCells[23][32].visitNumber = WorldMapCells[23][33].visitNumber = WorldMapCells[23][34].visitNumber = WorldMapCells[23][35].visitNumber = WorldMapCells[23][36].visitNumber = WorldMapCells[23][37].visitNumber = WorldMapCells[23][38].visitNumber = WorldMapCells[23][39].visitNumber = WorldMapCells[23][40].visitNumber = WorldMapCells[23][41].visitNumber = WorldMapCells[23][42].visitNumber = WorldMapCells[23][43].visitNumber = WorldMapCells[23][44].visitNumber = WorldMapCells[23][45].visitNumber = WorldMapCells[23][46].visitNumber = WorldMapCells[23][47].visitNumber = WorldMapCells[23][48].visitNumber = WorldMapCells[23][49].visitNumber = WorldMapCells[23][50].visitNumber = WorldMapCells[23][51].visitNumber = WorldMapCells[23][52].visitNumber = WorldMapCells[23][53].visitNumber = WorldMapCells[23][54].visitNumber = WorldMapCells[23][55].visitNumber = WorldMapCells[23][56].visitNumber = WorldMapCells[23][57].visitNumber = WorldMapCells[23][58].visitNumber = WorldMapCells[23][59].visitNumber = WorldMapCells[23][60].visitNumber = WorldMapCells[23][61].visitNumber = WorldMapCells[23][62].visitNumber = WorldMapCells[23][63].visitNumber = WorldMapCells[23][64].visitNumber = WorldMapCells[23][65].visitNumber = WorldMapCells[23][66].visitNumber = WorldMapCells[23][67].visitNumber = WorldMapCells[23][68].visitNumber = WorldMapCells[23][69].visitNumber = WorldMapCells[23][70].visitNumber = WorldMapCells[23][71].visitNumber = WorldMapCells[23][72].visitNumber = WorldMapCells[23][73].visitNumber = WorldMapCells[23][74].visitNumber = WorldMapCells[23][75].visitNumber = WorldMapCells[23][76].visitNumber = WorldMapCells[23][77].visitNumber = WorldMapCells[23][78].visitNumber = WorldMapCells[23][79].visitNumber = WorldMapCells[23][80].visitNumber = WorldMapCells[23][81].visitNumber = WorldMapCells[23][82].visitNumber = WorldMapCells[23][83].visitNumber = WorldMapCells[23][84].visitNumber = WorldMapCells[23][85].visitNumber = WorldMapCells[23][86].visitNumber = WorldMapCells[23][87].visitNumber = WorldMapCells[23][88].visitNumber = WorldMapCells[23][89].visitNumber = WorldMapCells[23][90].visitNumber = WorldMapCells[23][91].visitNumber = WorldMapCells[23][92].visitNumber = WorldMapCells[23][93].visitNumber = WorldMapCells[23][94].visitNumber = WorldMapCells[23][95].visitNumber = WorldMapCells[23][96].visitNumber = WorldMapCells[23][97].visitNumber = WorldMapCells[23][98].visitNumber = WorldMapCells[23][99].visitNumber = 5;
                    WorldMapCells[24][0].visitNumber = WorldMapCells[24][1].visitNumber = WorldMapCells[24][2].visitNumber = WorldMapCells[24][3].visitNumber = WorldMapCells[24][4].visitNumber = WorldMapCells[24][5].visitNumber = WorldMapCells[24][6].visitNumber = WorldMapCells[24][7].visitNumber = WorldMapCells[24][8].visitNumber = WorldMapCells[24][9].visitNumber = WorldMapCells[24][10].visitNumber = WorldMapCells[24][11].visitNumber = WorldMapCells[24][12].visitNumber = WorldMapCells[24][13].visitNumber = WorldMapCells[24][14].visitNumber = WorldMapCells[24][15].visitNumber = WorldMapCells[24][16].visitNumber = WorldMapCells[24][17].visitNumber = WorldMapCells[24][18].visitNumber = WorldMapCells[24][19].visitNumber = WorldMapCells[24][20].visitNumber = WorldMapCells[24][21].visitNumber = WorldMapCells[24][22].visitNumber = WorldMapCells[24][23].visitNumber = WorldMapCells[24][24].visitNumber = WorldMapCells[24][25].visitNumber = WorldMapCells[24][26].visitNumber = WorldMapCells[24][27].visitNumber = WorldMapCells[24][28].visitNumber = WorldMapCells[24][29].visitNumber = WorldMapCells[24][30].visitNumber = WorldMapCells[24][31].visitNumber = WorldMapCells[24][32].visitNumber = WorldMapCells[24][33].visitNumber = WorldMapCells[24][34].visitNumber = WorldMapCells[24][35].visitNumber = WorldMapCells[24][36].visitNumber = WorldMapCells[24][37].visitNumber = WorldMapCells[24][38].visitNumber = WorldMapCells[24][39].visitNumber = WorldMapCells[24][40].visitNumber = WorldMapCells[24][41].visitNumber = WorldMapCells[24][42].visitNumber = WorldMapCells[24][43].visitNumber = WorldMapCells[24][44].visitNumber = WorldMapCells[24][45].visitNumber = WorldMapCells[24][46].visitNumber = WorldMapCells[24][47].visitNumber = WorldMapCells[24][48].visitNumber = WorldMapCells[24][49].visitNumber = WorldMapCells[24][50].visitNumber = WorldMapCells[24][51].visitNumber = WorldMapCells[24][52].visitNumber = WorldMapCells[24][53].visitNumber = WorldMapCells[24][54].visitNumber = WorldMapCells[24][55].visitNumber = WorldMapCells[24][56].visitNumber = WorldMapCells[24][57].visitNumber = WorldMapCells[24][58].visitNumber = WorldMapCells[24][59].visitNumber = WorldMapCells[24][60].visitNumber = WorldMapCells[24][61].visitNumber = WorldMapCells[24][62].visitNumber = WorldMapCells[24][63].visitNumber = WorldMapCells[24][64].visitNumber = WorldMapCells[24][65].visitNumber = WorldMapCells[24][66].visitNumber = WorldMapCells[24][67].visitNumber = WorldMapCells[24][68].visitNumber = WorldMapCells[24][69].visitNumber = WorldMapCells[24][70].visitNumber = WorldMapCells[24][71].visitNumber = WorldMapCells[24][72].visitNumber = WorldMapCells[24][73].visitNumber = WorldMapCells[24][74].visitNumber = WorldMapCells[24][75].visitNumber = WorldMapCells[24][76].visitNumber = WorldMapCells[24][77].visitNumber = WorldMapCells[24][78].visitNumber = WorldMapCells[24][79].visitNumber = WorldMapCells[24][80].visitNumber = WorldMapCells[24][81].visitNumber = WorldMapCells[24][82].visitNumber = WorldMapCells[24][83].visitNumber = WorldMapCells[24][84].visitNumber = WorldMapCells[24][85].visitNumber = WorldMapCells[24][86].visitNumber = WorldMapCells[24][87].visitNumber = WorldMapCells[24][88].visitNumber = WorldMapCells[24][89].visitNumber = WorldMapCells[24][90].visitNumber = WorldMapCells[24][91].visitNumber = WorldMapCells[24][92].visitNumber = WorldMapCells[24][93].visitNumber = WorldMapCells[24][94].visitNumber = WorldMapCells[24][95].visitNumber = WorldMapCells[24][96].visitNumber = WorldMapCells[24][97].visitNumber = WorldMapCells[24][98].visitNumber = WorldMapCells[24][99].visitNumber = 5;
                }
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapName == WorldMapCells[10][89].mapName && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == WorldMapCells[10][89].cellLocation && WorldMapCells[8][11].firstVisit == true) //water
            {
                WorldMapCells[10][89].firstVisit = false;
                if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false)
                {
                    WorldMapCells[10][0].visitNumber = WorldMapCells[10][1].visitNumber = WorldMapCells[10][2].visitNumber = WorldMapCells[10][3].visitNumber = WorldMapCells[10][4].visitNumber = WorldMapCells[10][5].visitNumber = WorldMapCells[10][6].visitNumber = WorldMapCells[10][7].visitNumber = WorldMapCells[10][8].visitNumber = WorldMapCells[10][9].visitNumber = WorldMapCells[10][10].visitNumber = WorldMapCells[10][11].visitNumber = WorldMapCells[10][12].visitNumber = WorldMapCells[10][13].visitNumber = WorldMapCells[10][14].visitNumber = WorldMapCells[10][15].visitNumber = WorldMapCells[10][16].visitNumber = WorldMapCells[10][17].visitNumber = WorldMapCells[10][18].visitNumber = WorldMapCells[10][19].visitNumber = WorldMapCells[10][20].visitNumber = WorldMapCells[10][21].visitNumber = WorldMapCells[10][22].visitNumber = WorldMapCells[10][23].visitNumber = WorldMapCells[10][24].visitNumber = WorldMapCells[10][25].visitNumber = WorldMapCells[10][26].visitNumber = WorldMapCells[10][27].visitNumber = WorldMapCells[10][28].visitNumber = WorldMapCells[10][29].visitNumber = WorldMapCells[10][30].visitNumber = WorldMapCells[10][31].visitNumber = WorldMapCells[10][32].visitNumber = WorldMapCells[10][33].visitNumber = WorldMapCells[10][34].visitNumber = WorldMapCells[10][35].visitNumber = WorldMapCells[10][36].visitNumber = WorldMapCells[10][37].visitNumber = WorldMapCells[10][38].visitNumber = WorldMapCells[10][39].visitNumber = WorldMapCells[10][40].visitNumber = WorldMapCells[10][41].visitNumber = WorldMapCells[10][42].visitNumber = WorldMapCells[10][43].visitNumber = WorldMapCells[10][44].visitNumber = WorldMapCells[10][45].visitNumber = WorldMapCells[10][46].visitNumber = WorldMapCells[10][47].visitNumber = WorldMapCells[10][48].visitNumber = WorldMapCells[10][49].visitNumber = WorldMapCells[10][50].visitNumber = WorldMapCells[10][51].visitNumber = WorldMapCells[10][52].visitNumber = WorldMapCells[10][53].visitNumber = WorldMapCells[10][54].visitNumber = WorldMapCells[10][55].visitNumber = WorldMapCells[10][56].visitNumber = WorldMapCells[10][57].visitNumber = WorldMapCells[10][58].visitNumber = WorldMapCells[10][59].visitNumber = WorldMapCells[10][60].visitNumber = WorldMapCells[10][61].visitNumber = WorldMapCells[10][62].visitNumber = WorldMapCells[10][63].visitNumber = WorldMapCells[10][64].visitNumber = WorldMapCells[10][65].visitNumber = WorldMapCells[10][66].visitNumber = WorldMapCells[10][67].visitNumber = WorldMapCells[10][68].visitNumber = WorldMapCells[10][69].visitNumber = WorldMapCells[10][70].visitNumber = WorldMapCells[10][71].visitNumber = WorldMapCells[10][72].visitNumber = WorldMapCells[10][73].visitNumber = WorldMapCells[10][74].visitNumber = WorldMapCells[10][75].visitNumber = WorldMapCells[10][76].visitNumber = WorldMapCells[10][77].visitNumber = WorldMapCells[10][78].visitNumber = WorldMapCells[10][79].visitNumber = WorldMapCells[10][80].visitNumber = WorldMapCells[10][81].visitNumber = WorldMapCells[10][82].visitNumber = WorldMapCells[10][83].visitNumber = WorldMapCells[10][84].visitNumber = WorldMapCells[10][85].visitNumber = WorldMapCells[10][86].visitNumber = WorldMapCells[10][87].visitNumber = WorldMapCells[10][88].visitNumber = WorldMapCells[10][89].visitNumber = WorldMapCells[10][90].visitNumber = WorldMapCells[10][91].visitNumber = WorldMapCells[10][92].visitNumber = WorldMapCells[10][93].visitNumber = WorldMapCells[10][94].visitNumber = WorldMapCells[10][95].visitNumber = WorldMapCells[10][96].visitNumber = WorldMapCells[10][97].visitNumber = WorldMapCells[10][98].visitNumber = WorldMapCells[10][99].visitNumber = 1;
                    WorldMapCells[26][0].visitNumber = WorldMapCells[26][1].visitNumber = WorldMapCells[26][2].visitNumber = WorldMapCells[26][3].visitNumber = WorldMapCells[26][4].visitNumber = WorldMapCells[26][5].visitNumber = WorldMapCells[26][6].visitNumber = WorldMapCells[26][7].visitNumber = WorldMapCells[26][8].visitNumber = WorldMapCells[26][9].visitNumber = WorldMapCells[26][10].visitNumber = WorldMapCells[26][11].visitNumber = WorldMapCells[26][12].visitNumber = WorldMapCells[26][13].visitNumber = WorldMapCells[26][14].visitNumber = WorldMapCells[26][15].visitNumber = WorldMapCells[26][16].visitNumber = WorldMapCells[26][17].visitNumber = WorldMapCells[26][18].visitNumber = WorldMapCells[26][19].visitNumber = WorldMapCells[26][20].visitNumber = WorldMapCells[26][21].visitNumber = WorldMapCells[26][22].visitNumber = WorldMapCells[26][23].visitNumber = WorldMapCells[26][24].visitNumber = WorldMapCells[26][25].visitNumber = WorldMapCells[26][26].visitNumber = WorldMapCells[26][27].visitNumber = WorldMapCells[26][28].visitNumber = WorldMapCells[26][29].visitNumber = WorldMapCells[26][30].visitNumber = WorldMapCells[26][31].visitNumber = WorldMapCells[26][32].visitNumber = WorldMapCells[26][33].visitNumber = WorldMapCells[26][34].visitNumber = WorldMapCells[26][35].visitNumber = WorldMapCells[26][36].visitNumber = WorldMapCells[26][37].visitNumber = WorldMapCells[26][38].visitNumber = WorldMapCells[26][39].visitNumber = WorldMapCells[26][40].visitNumber = WorldMapCells[26][41].visitNumber = WorldMapCells[26][42].visitNumber = WorldMapCells[26][43].visitNumber = WorldMapCells[26][44].visitNumber = WorldMapCells[26][45].visitNumber = WorldMapCells[26][46].visitNumber = WorldMapCells[26][47].visitNumber = WorldMapCells[26][48].visitNumber = WorldMapCells[26][49].visitNumber = WorldMapCells[26][50].visitNumber = WorldMapCells[26][51].visitNumber = WorldMapCells[26][52].visitNumber = WorldMapCells[26][53].visitNumber = WorldMapCells[26][54].visitNumber = WorldMapCells[26][55].visitNumber = WorldMapCells[26][56].visitNumber = WorldMapCells[26][57].visitNumber = WorldMapCells[26][58].visitNumber = WorldMapCells[26][59].visitNumber = WorldMapCells[26][60].visitNumber = WorldMapCells[26][61].visitNumber = WorldMapCells[26][62].visitNumber = WorldMapCells[26][63].visitNumber = WorldMapCells[26][64].visitNumber = WorldMapCells[26][65].visitNumber = WorldMapCells[26][66].visitNumber = WorldMapCells[26][67].visitNumber = WorldMapCells[26][68].visitNumber = WorldMapCells[26][69].visitNumber = WorldMapCells[26][70].visitNumber = WorldMapCells[26][71].visitNumber = WorldMapCells[26][72].visitNumber = WorldMapCells[26][73].visitNumber = WorldMapCells[26][74].visitNumber = WorldMapCells[26][75].visitNumber = WorldMapCells[26][76].visitNumber = WorldMapCells[26][77].visitNumber = WorldMapCells[26][78].visitNumber = WorldMapCells[26][79].visitNumber = WorldMapCells[26][80].visitNumber = WorldMapCells[26][81].visitNumber = WorldMapCells[26][82].visitNumber = WorldMapCells[26][83].visitNumber = WorldMapCells[26][84].visitNumber = WorldMapCells[26][85].visitNumber = WorldMapCells[26][86].visitNumber = WorldMapCells[26][87].visitNumber = WorldMapCells[26][88].visitNumber = WorldMapCells[26][89].visitNumber = WorldMapCells[26][90].visitNumber = WorldMapCells[26][91].visitNumber = WorldMapCells[26][92].visitNumber = WorldMapCells[26][93].visitNumber = WorldMapCells[26][94].visitNumber = WorldMapCells[26][95].visitNumber = WorldMapCells[26][96].visitNumber = WorldMapCells[26][97].visitNumber = WorldMapCells[26][98].visitNumber = WorldMapCells[26][99].visitNumber = 1;
                    WorldMapCells[27][0].visitNumber = WorldMapCells[27][1].visitNumber = WorldMapCells[27][2].visitNumber = WorldMapCells[27][3].visitNumber = WorldMapCells[27][4].visitNumber = WorldMapCells[27][5].visitNumber = WorldMapCells[27][6].visitNumber = WorldMapCells[27][7].visitNumber = WorldMapCells[27][8].visitNumber = WorldMapCells[27][9].visitNumber = WorldMapCells[27][10].visitNumber = WorldMapCells[27][11].visitNumber = WorldMapCells[27][12].visitNumber = WorldMapCells[27][13].visitNumber = WorldMapCells[27][14].visitNumber = WorldMapCells[27][15].visitNumber = WorldMapCells[27][16].visitNumber = WorldMapCells[27][17].visitNumber = WorldMapCells[27][18].visitNumber = WorldMapCells[27][19].visitNumber = WorldMapCells[27][20].visitNumber = WorldMapCells[27][21].visitNumber = WorldMapCells[27][22].visitNumber = WorldMapCells[27][23].visitNumber = WorldMapCells[27][24].visitNumber = WorldMapCells[27][25].visitNumber = WorldMapCells[27][26].visitNumber = WorldMapCells[27][27].visitNumber = WorldMapCells[27][28].visitNumber = WorldMapCells[27][29].visitNumber = WorldMapCells[27][30].visitNumber = WorldMapCells[27][31].visitNumber = WorldMapCells[27][32].visitNumber = WorldMapCells[27][33].visitNumber = WorldMapCells[27][34].visitNumber = WorldMapCells[27][35].visitNumber = WorldMapCells[27][36].visitNumber = WorldMapCells[27][37].visitNumber = WorldMapCells[27][38].visitNumber = WorldMapCells[27][39].visitNumber = WorldMapCells[27][40].visitNumber = WorldMapCells[27][41].visitNumber = WorldMapCells[27][42].visitNumber = WorldMapCells[27][43].visitNumber = WorldMapCells[27][44].visitNumber = WorldMapCells[27][45].visitNumber = WorldMapCells[27][46].visitNumber = WorldMapCells[27][47].visitNumber = WorldMapCells[27][48].visitNumber = WorldMapCells[27][49].visitNumber = WorldMapCells[27][50].visitNumber = WorldMapCells[27][51].visitNumber = WorldMapCells[27][52].visitNumber = WorldMapCells[27][53].visitNumber = WorldMapCells[27][54].visitNumber = WorldMapCells[27][55].visitNumber = WorldMapCells[27][56].visitNumber = WorldMapCells[27][57].visitNumber = WorldMapCells[27][58].visitNumber = WorldMapCells[27][59].visitNumber = WorldMapCells[27][60].visitNumber = WorldMapCells[27][61].visitNumber = WorldMapCells[27][62].visitNumber = WorldMapCells[27][63].visitNumber = WorldMapCells[27][64].visitNumber = WorldMapCells[27][65].visitNumber = WorldMapCells[27][66].visitNumber = WorldMapCells[27][67].visitNumber = WorldMapCells[27][68].visitNumber = WorldMapCells[27][69].visitNumber = WorldMapCells[27][70].visitNumber = WorldMapCells[27][71].visitNumber = WorldMapCells[27][72].visitNumber = WorldMapCells[27][73].visitNumber = WorldMapCells[27][74].visitNumber = WorldMapCells[27][75].visitNumber = WorldMapCells[27][76].visitNumber = WorldMapCells[27][77].visitNumber = WorldMapCells[27][78].visitNumber = WorldMapCells[27][79].visitNumber = WorldMapCells[27][80].visitNumber = WorldMapCells[27][81].visitNumber = WorldMapCells[27][82].visitNumber = WorldMapCells[27][83].visitNumber = WorldMapCells[27][84].visitNumber = WorldMapCells[27][85].visitNumber = WorldMapCells[27][86].visitNumber = WorldMapCells[27][87].visitNumber = WorldMapCells[27][88].visitNumber = WorldMapCells[27][89].visitNumber = WorldMapCells[27][90].visitNumber = WorldMapCells[27][91].visitNumber = WorldMapCells[27][92].visitNumber = WorldMapCells[27][93].visitNumber = WorldMapCells[27][94].visitNumber = WorldMapCells[27][95].visitNumber = WorldMapCells[27][96].visitNumber = WorldMapCells[27][97].visitNumber = WorldMapCells[27][98].visitNumber = WorldMapCells[27][99].visitNumber = 1;
                }
                else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true
                    || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false
                    || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false)
                {
                    WorldMapCells[10][0].visitNumber = WorldMapCells[10][1].visitNumber = WorldMapCells[10][2].visitNumber = WorldMapCells[10][3].visitNumber = WorldMapCells[10][4].visitNumber = WorldMapCells[10][5].visitNumber = WorldMapCells[10][6].visitNumber = WorldMapCells[10][7].visitNumber = WorldMapCells[10][8].visitNumber = WorldMapCells[10][9].visitNumber = WorldMapCells[10][10].visitNumber = WorldMapCells[10][11].visitNumber = WorldMapCells[10][12].visitNumber = WorldMapCells[10][13].visitNumber = WorldMapCells[10][14].visitNumber = WorldMapCells[10][15].visitNumber = WorldMapCells[10][16].visitNumber = WorldMapCells[10][17].visitNumber = WorldMapCells[10][18].visitNumber = WorldMapCells[10][19].visitNumber = WorldMapCells[10][20].visitNumber = WorldMapCells[10][21].visitNumber = WorldMapCells[10][22].visitNumber = WorldMapCells[10][23].visitNumber = WorldMapCells[10][24].visitNumber = WorldMapCells[10][25].visitNumber = WorldMapCells[10][26].visitNumber = WorldMapCells[10][27].visitNumber = WorldMapCells[10][28].visitNumber = WorldMapCells[10][29].visitNumber = WorldMapCells[10][30].visitNumber = WorldMapCells[10][31].visitNumber = WorldMapCells[10][32].visitNumber = WorldMapCells[10][33].visitNumber = WorldMapCells[10][34].visitNumber = WorldMapCells[10][35].visitNumber = WorldMapCells[10][36].visitNumber = WorldMapCells[10][37].visitNumber = WorldMapCells[10][38].visitNumber = WorldMapCells[10][39].visitNumber = WorldMapCells[10][40].visitNumber = WorldMapCells[10][41].visitNumber = WorldMapCells[10][42].visitNumber = WorldMapCells[10][43].visitNumber = WorldMapCells[10][44].visitNumber = WorldMapCells[10][45].visitNumber = WorldMapCells[10][46].visitNumber = WorldMapCells[10][47].visitNumber = WorldMapCells[10][48].visitNumber = WorldMapCells[10][49].visitNumber = WorldMapCells[10][50].visitNumber = WorldMapCells[10][51].visitNumber = WorldMapCells[10][52].visitNumber = WorldMapCells[10][53].visitNumber = WorldMapCells[10][54].visitNumber = WorldMapCells[10][55].visitNumber = WorldMapCells[10][56].visitNumber = WorldMapCells[10][57].visitNumber = WorldMapCells[10][58].visitNumber = WorldMapCells[10][59].visitNumber = WorldMapCells[10][60].visitNumber = WorldMapCells[10][61].visitNumber = WorldMapCells[10][62].visitNumber = WorldMapCells[10][63].visitNumber = WorldMapCells[10][64].visitNumber = WorldMapCells[10][65].visitNumber = WorldMapCells[10][66].visitNumber = WorldMapCells[10][67].visitNumber = WorldMapCells[10][68].visitNumber = WorldMapCells[10][69].visitNumber = WorldMapCells[10][70].visitNumber = WorldMapCells[10][71].visitNumber = WorldMapCells[10][72].visitNumber = WorldMapCells[10][73].visitNumber = WorldMapCells[10][74].visitNumber = WorldMapCells[10][75].visitNumber = WorldMapCells[10][76].visitNumber = WorldMapCells[10][77].visitNumber = WorldMapCells[10][78].visitNumber = WorldMapCells[10][79].visitNumber = WorldMapCells[10][80].visitNumber = WorldMapCells[10][81].visitNumber = WorldMapCells[10][82].visitNumber = WorldMapCells[10][83].visitNumber = WorldMapCells[10][84].visitNumber = WorldMapCells[10][85].visitNumber = WorldMapCells[10][86].visitNumber = WorldMapCells[10][87].visitNumber = WorldMapCells[10][88].visitNumber = WorldMapCells[10][89].visitNumber = WorldMapCells[10][90].visitNumber = WorldMapCells[10][91].visitNumber = WorldMapCells[10][92].visitNumber = WorldMapCells[10][93].visitNumber = WorldMapCells[10][94].visitNumber = WorldMapCells[10][95].visitNumber = WorldMapCells[10][96].visitNumber = WorldMapCells[10][97].visitNumber = WorldMapCells[10][98].visitNumber = WorldMapCells[10][99].visitNumber = 2;
                    WorldMapCells[26][0].visitNumber = WorldMapCells[26][1].visitNumber = WorldMapCells[26][2].visitNumber = WorldMapCells[26][3].visitNumber = WorldMapCells[26][4].visitNumber = WorldMapCells[26][5].visitNumber = WorldMapCells[26][6].visitNumber = WorldMapCells[26][7].visitNumber = WorldMapCells[26][8].visitNumber = WorldMapCells[26][9].visitNumber = WorldMapCells[26][10].visitNumber = WorldMapCells[26][11].visitNumber = WorldMapCells[26][12].visitNumber = WorldMapCells[26][13].visitNumber = WorldMapCells[26][14].visitNumber = WorldMapCells[26][15].visitNumber = WorldMapCells[26][16].visitNumber = WorldMapCells[26][17].visitNumber = WorldMapCells[26][18].visitNumber = WorldMapCells[26][19].visitNumber = WorldMapCells[26][20].visitNumber = WorldMapCells[26][21].visitNumber = WorldMapCells[26][22].visitNumber = WorldMapCells[26][23].visitNumber = WorldMapCells[26][24].visitNumber = WorldMapCells[26][25].visitNumber = WorldMapCells[26][26].visitNumber = WorldMapCells[26][27].visitNumber = WorldMapCells[26][28].visitNumber = WorldMapCells[26][29].visitNumber = WorldMapCells[26][30].visitNumber = WorldMapCells[26][31].visitNumber = WorldMapCells[26][32].visitNumber = WorldMapCells[26][33].visitNumber = WorldMapCells[26][34].visitNumber = WorldMapCells[26][35].visitNumber = WorldMapCells[26][36].visitNumber = WorldMapCells[26][37].visitNumber = WorldMapCells[26][38].visitNumber = WorldMapCells[26][39].visitNumber = WorldMapCells[26][40].visitNumber = WorldMapCells[26][41].visitNumber = WorldMapCells[26][42].visitNumber = WorldMapCells[26][43].visitNumber = WorldMapCells[26][44].visitNumber = WorldMapCells[26][45].visitNumber = WorldMapCells[26][46].visitNumber = WorldMapCells[26][47].visitNumber = WorldMapCells[26][48].visitNumber = WorldMapCells[26][49].visitNumber = WorldMapCells[26][50].visitNumber = WorldMapCells[26][51].visitNumber = WorldMapCells[26][52].visitNumber = WorldMapCells[26][53].visitNumber = WorldMapCells[26][54].visitNumber = WorldMapCells[26][55].visitNumber = WorldMapCells[26][56].visitNumber = WorldMapCells[26][57].visitNumber = WorldMapCells[26][58].visitNumber = WorldMapCells[26][59].visitNumber = WorldMapCells[26][60].visitNumber = WorldMapCells[26][61].visitNumber = WorldMapCells[26][62].visitNumber = WorldMapCells[26][63].visitNumber = WorldMapCells[26][64].visitNumber = WorldMapCells[26][65].visitNumber = WorldMapCells[26][66].visitNumber = WorldMapCells[26][67].visitNumber = WorldMapCells[26][68].visitNumber = WorldMapCells[26][69].visitNumber = WorldMapCells[26][70].visitNumber = WorldMapCells[26][71].visitNumber = WorldMapCells[26][72].visitNumber = WorldMapCells[26][73].visitNumber = WorldMapCells[26][74].visitNumber = WorldMapCells[26][75].visitNumber = WorldMapCells[26][76].visitNumber = WorldMapCells[26][77].visitNumber = WorldMapCells[26][78].visitNumber = WorldMapCells[26][79].visitNumber = WorldMapCells[26][80].visitNumber = WorldMapCells[26][81].visitNumber = WorldMapCells[26][82].visitNumber = WorldMapCells[26][83].visitNumber = WorldMapCells[26][84].visitNumber = WorldMapCells[26][85].visitNumber = WorldMapCells[26][86].visitNumber = WorldMapCells[26][87].visitNumber = WorldMapCells[26][88].visitNumber = WorldMapCells[26][89].visitNumber = WorldMapCells[26][90].visitNumber = WorldMapCells[26][91].visitNumber = WorldMapCells[26][92].visitNumber = WorldMapCells[26][93].visitNumber = WorldMapCells[26][94].visitNumber = WorldMapCells[26][95].visitNumber = WorldMapCells[26][96].visitNumber = WorldMapCells[26][97].visitNumber = WorldMapCells[26][98].visitNumber = WorldMapCells[26][99].visitNumber = 2;
                    WorldMapCells[27][0].visitNumber = WorldMapCells[27][1].visitNumber = WorldMapCells[27][2].visitNumber = WorldMapCells[27][3].visitNumber = WorldMapCells[27][4].visitNumber = WorldMapCells[27][5].visitNumber = WorldMapCells[27][6].visitNumber = WorldMapCells[27][7].visitNumber = WorldMapCells[27][8].visitNumber = WorldMapCells[27][9].visitNumber = WorldMapCells[27][10].visitNumber = WorldMapCells[27][11].visitNumber = WorldMapCells[27][12].visitNumber = WorldMapCells[27][13].visitNumber = WorldMapCells[27][14].visitNumber = WorldMapCells[27][15].visitNumber = WorldMapCells[27][16].visitNumber = WorldMapCells[27][17].visitNumber = WorldMapCells[27][18].visitNumber = WorldMapCells[27][19].visitNumber = WorldMapCells[27][20].visitNumber = WorldMapCells[27][21].visitNumber = WorldMapCells[27][22].visitNumber = WorldMapCells[27][23].visitNumber = WorldMapCells[27][24].visitNumber = WorldMapCells[27][25].visitNumber = WorldMapCells[27][26].visitNumber = WorldMapCells[27][27].visitNumber = WorldMapCells[27][28].visitNumber = WorldMapCells[27][29].visitNumber = WorldMapCells[27][30].visitNumber = WorldMapCells[27][31].visitNumber = WorldMapCells[27][32].visitNumber = WorldMapCells[27][33].visitNumber = WorldMapCells[27][34].visitNumber = WorldMapCells[27][35].visitNumber = WorldMapCells[27][36].visitNumber = WorldMapCells[27][37].visitNumber = WorldMapCells[27][38].visitNumber = WorldMapCells[27][39].visitNumber = WorldMapCells[27][40].visitNumber = WorldMapCells[27][41].visitNumber = WorldMapCells[27][42].visitNumber = WorldMapCells[27][43].visitNumber = WorldMapCells[27][44].visitNumber = WorldMapCells[27][45].visitNumber = WorldMapCells[27][46].visitNumber = WorldMapCells[27][47].visitNumber = WorldMapCells[27][48].visitNumber = WorldMapCells[27][49].visitNumber = WorldMapCells[27][50].visitNumber = WorldMapCells[27][51].visitNumber = WorldMapCells[27][52].visitNumber = WorldMapCells[27][53].visitNumber = WorldMapCells[27][54].visitNumber = WorldMapCells[27][55].visitNumber = WorldMapCells[27][56].visitNumber = WorldMapCells[27][57].visitNumber = WorldMapCells[27][58].visitNumber = WorldMapCells[27][59].visitNumber = WorldMapCells[27][60].visitNumber = WorldMapCells[27][61].visitNumber = WorldMapCells[27][62].visitNumber = WorldMapCells[27][63].visitNumber = WorldMapCells[27][64].visitNumber = WorldMapCells[27][65].visitNumber = WorldMapCells[27][66].visitNumber = WorldMapCells[27][67].visitNumber = WorldMapCells[27][68].visitNumber = WorldMapCells[27][69].visitNumber = WorldMapCells[27][70].visitNumber = WorldMapCells[27][71].visitNumber = WorldMapCells[27][72].visitNumber = WorldMapCells[27][73].visitNumber = WorldMapCells[27][74].visitNumber = WorldMapCells[27][75].visitNumber = WorldMapCells[27][76].visitNumber = WorldMapCells[27][77].visitNumber = WorldMapCells[27][78].visitNumber = WorldMapCells[27][79].visitNumber = WorldMapCells[27][80].visitNumber = WorldMapCells[27][81].visitNumber = WorldMapCells[27][82].visitNumber = WorldMapCells[27][83].visitNumber = WorldMapCells[27][84].visitNumber = WorldMapCells[27][85].visitNumber = WorldMapCells[27][86].visitNumber = WorldMapCells[27][87].visitNumber = WorldMapCells[27][88].visitNumber = WorldMapCells[27][89].visitNumber = WorldMapCells[27][90].visitNumber = WorldMapCells[27][91].visitNumber = WorldMapCells[27][92].visitNumber = WorldMapCells[27][93].visitNumber = WorldMapCells[27][94].visitNumber = WorldMapCells[27][95].visitNumber = WorldMapCells[27][96].visitNumber = WorldMapCells[27][97].visitNumber = WorldMapCells[27][98].visitNumber = WorldMapCells[27][99].visitNumber = 2;
                }
                else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true
                    || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true
                    || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true)
                {
                    WorldMapCells[10][0].visitNumber = WorldMapCells[10][1].visitNumber = WorldMapCells[10][2].visitNumber = WorldMapCells[10][3].visitNumber = WorldMapCells[10][4].visitNumber = WorldMapCells[10][5].visitNumber = WorldMapCells[10][6].visitNumber = WorldMapCells[10][7].visitNumber = WorldMapCells[10][8].visitNumber = WorldMapCells[10][9].visitNumber = WorldMapCells[10][10].visitNumber = WorldMapCells[10][11].visitNumber = WorldMapCells[10][12].visitNumber = WorldMapCells[10][13].visitNumber = WorldMapCells[10][14].visitNumber = WorldMapCells[10][15].visitNumber = WorldMapCells[10][16].visitNumber = WorldMapCells[10][17].visitNumber = WorldMapCells[10][18].visitNumber = WorldMapCells[10][19].visitNumber = WorldMapCells[10][20].visitNumber = WorldMapCells[10][21].visitNumber = WorldMapCells[10][22].visitNumber = WorldMapCells[10][23].visitNumber = WorldMapCells[10][24].visitNumber = WorldMapCells[10][25].visitNumber = WorldMapCells[10][26].visitNumber = WorldMapCells[10][27].visitNumber = WorldMapCells[10][28].visitNumber = WorldMapCells[10][29].visitNumber = WorldMapCells[10][30].visitNumber = WorldMapCells[10][31].visitNumber = WorldMapCells[10][32].visitNumber = WorldMapCells[10][33].visitNumber = WorldMapCells[10][34].visitNumber = WorldMapCells[10][35].visitNumber = WorldMapCells[10][36].visitNumber = WorldMapCells[10][37].visitNumber = WorldMapCells[10][38].visitNumber = WorldMapCells[10][39].visitNumber = WorldMapCells[10][40].visitNumber = WorldMapCells[10][41].visitNumber = WorldMapCells[10][42].visitNumber = WorldMapCells[10][43].visitNumber = WorldMapCells[10][44].visitNumber = WorldMapCells[10][45].visitNumber = WorldMapCells[10][46].visitNumber = WorldMapCells[10][47].visitNumber = WorldMapCells[10][48].visitNumber = WorldMapCells[10][49].visitNumber = WorldMapCells[10][50].visitNumber = WorldMapCells[10][51].visitNumber = WorldMapCells[10][52].visitNumber = WorldMapCells[10][53].visitNumber = WorldMapCells[10][54].visitNumber = WorldMapCells[10][55].visitNumber = WorldMapCells[10][56].visitNumber = WorldMapCells[10][57].visitNumber = WorldMapCells[10][58].visitNumber = WorldMapCells[10][59].visitNumber = WorldMapCells[10][60].visitNumber = WorldMapCells[10][61].visitNumber = WorldMapCells[10][62].visitNumber = WorldMapCells[10][63].visitNumber = WorldMapCells[10][64].visitNumber = WorldMapCells[10][65].visitNumber = WorldMapCells[10][66].visitNumber = WorldMapCells[10][67].visitNumber = WorldMapCells[10][68].visitNumber = WorldMapCells[10][69].visitNumber = WorldMapCells[10][70].visitNumber = WorldMapCells[10][71].visitNumber = WorldMapCells[10][72].visitNumber = WorldMapCells[10][73].visitNumber = WorldMapCells[10][74].visitNumber = WorldMapCells[10][75].visitNumber = WorldMapCells[10][76].visitNumber = WorldMapCells[10][77].visitNumber = WorldMapCells[10][78].visitNumber = WorldMapCells[10][79].visitNumber = WorldMapCells[10][80].visitNumber = WorldMapCells[10][81].visitNumber = WorldMapCells[10][82].visitNumber = WorldMapCells[10][83].visitNumber = WorldMapCells[10][84].visitNumber = WorldMapCells[10][85].visitNumber = WorldMapCells[10][86].visitNumber = WorldMapCells[10][87].visitNumber = WorldMapCells[10][88].visitNumber = WorldMapCells[10][89].visitNumber = WorldMapCells[10][90].visitNumber = WorldMapCells[10][91].visitNumber = WorldMapCells[10][92].visitNumber = WorldMapCells[10][93].visitNumber = WorldMapCells[10][94].visitNumber = WorldMapCells[10][95].visitNumber = WorldMapCells[10][96].visitNumber = WorldMapCells[10][97].visitNumber = WorldMapCells[10][98].visitNumber = WorldMapCells[10][99].visitNumber = 3;
                    WorldMapCells[26][0].visitNumber = WorldMapCells[26][1].visitNumber = WorldMapCells[26][2].visitNumber = WorldMapCells[26][3].visitNumber = WorldMapCells[26][4].visitNumber = WorldMapCells[26][5].visitNumber = WorldMapCells[26][6].visitNumber = WorldMapCells[26][7].visitNumber = WorldMapCells[26][8].visitNumber = WorldMapCells[26][9].visitNumber = WorldMapCells[26][10].visitNumber = WorldMapCells[26][11].visitNumber = WorldMapCells[26][12].visitNumber = WorldMapCells[26][13].visitNumber = WorldMapCells[26][14].visitNumber = WorldMapCells[26][15].visitNumber = WorldMapCells[26][16].visitNumber = WorldMapCells[26][17].visitNumber = WorldMapCells[26][18].visitNumber = WorldMapCells[26][19].visitNumber = WorldMapCells[26][20].visitNumber = WorldMapCells[26][21].visitNumber = WorldMapCells[26][22].visitNumber = WorldMapCells[26][23].visitNumber = WorldMapCells[26][24].visitNumber = WorldMapCells[26][25].visitNumber = WorldMapCells[26][26].visitNumber = WorldMapCells[26][27].visitNumber = WorldMapCells[26][28].visitNumber = WorldMapCells[26][29].visitNumber = WorldMapCells[26][30].visitNumber = WorldMapCells[26][31].visitNumber = WorldMapCells[26][32].visitNumber = WorldMapCells[26][33].visitNumber = WorldMapCells[26][34].visitNumber = WorldMapCells[26][35].visitNumber = WorldMapCells[26][36].visitNumber = WorldMapCells[26][37].visitNumber = WorldMapCells[26][38].visitNumber = WorldMapCells[26][39].visitNumber = WorldMapCells[26][40].visitNumber = WorldMapCells[26][41].visitNumber = WorldMapCells[26][42].visitNumber = WorldMapCells[26][43].visitNumber = WorldMapCells[26][44].visitNumber = WorldMapCells[26][45].visitNumber = WorldMapCells[26][46].visitNumber = WorldMapCells[26][47].visitNumber = WorldMapCells[26][48].visitNumber = WorldMapCells[26][49].visitNumber = WorldMapCells[26][50].visitNumber = WorldMapCells[26][51].visitNumber = WorldMapCells[26][52].visitNumber = WorldMapCells[26][53].visitNumber = WorldMapCells[26][54].visitNumber = WorldMapCells[26][55].visitNumber = WorldMapCells[26][56].visitNumber = WorldMapCells[26][57].visitNumber = WorldMapCells[26][58].visitNumber = WorldMapCells[26][59].visitNumber = WorldMapCells[26][60].visitNumber = WorldMapCells[26][61].visitNumber = WorldMapCells[26][62].visitNumber = WorldMapCells[26][63].visitNumber = WorldMapCells[26][64].visitNumber = WorldMapCells[26][65].visitNumber = WorldMapCells[26][66].visitNumber = WorldMapCells[26][67].visitNumber = WorldMapCells[26][68].visitNumber = WorldMapCells[26][69].visitNumber = WorldMapCells[26][70].visitNumber = WorldMapCells[26][71].visitNumber = WorldMapCells[26][72].visitNumber = WorldMapCells[26][73].visitNumber = WorldMapCells[26][74].visitNumber = WorldMapCells[26][75].visitNumber = WorldMapCells[26][76].visitNumber = WorldMapCells[26][77].visitNumber = WorldMapCells[26][78].visitNumber = WorldMapCells[26][79].visitNumber = WorldMapCells[26][80].visitNumber = WorldMapCells[26][81].visitNumber = WorldMapCells[26][82].visitNumber = WorldMapCells[26][83].visitNumber = WorldMapCells[26][84].visitNumber = WorldMapCells[26][85].visitNumber = WorldMapCells[26][86].visitNumber = WorldMapCells[26][87].visitNumber = WorldMapCells[26][88].visitNumber = WorldMapCells[26][89].visitNumber = WorldMapCells[26][90].visitNumber = WorldMapCells[26][91].visitNumber = WorldMapCells[26][92].visitNumber = WorldMapCells[26][93].visitNumber = WorldMapCells[26][94].visitNumber = WorldMapCells[26][95].visitNumber = WorldMapCells[26][96].visitNumber = WorldMapCells[26][97].visitNumber = WorldMapCells[26][98].visitNumber = WorldMapCells[26][99].visitNumber = 3;
                    WorldMapCells[27][0].visitNumber = WorldMapCells[27][1].visitNumber = WorldMapCells[27][2].visitNumber = WorldMapCells[27][3].visitNumber = WorldMapCells[27][4].visitNumber = WorldMapCells[27][5].visitNumber = WorldMapCells[27][6].visitNumber = WorldMapCells[27][7].visitNumber = WorldMapCells[27][8].visitNumber = WorldMapCells[27][9].visitNumber = WorldMapCells[27][10].visitNumber = WorldMapCells[27][11].visitNumber = WorldMapCells[27][12].visitNumber = WorldMapCells[27][13].visitNumber = WorldMapCells[27][14].visitNumber = WorldMapCells[27][15].visitNumber = WorldMapCells[27][16].visitNumber = WorldMapCells[27][17].visitNumber = WorldMapCells[27][18].visitNumber = WorldMapCells[27][19].visitNumber = WorldMapCells[27][20].visitNumber = WorldMapCells[27][21].visitNumber = WorldMapCells[27][22].visitNumber = WorldMapCells[27][23].visitNumber = WorldMapCells[27][24].visitNumber = WorldMapCells[27][25].visitNumber = WorldMapCells[27][26].visitNumber = WorldMapCells[27][27].visitNumber = WorldMapCells[27][28].visitNumber = WorldMapCells[27][29].visitNumber = WorldMapCells[27][30].visitNumber = WorldMapCells[27][31].visitNumber = WorldMapCells[27][32].visitNumber = WorldMapCells[27][33].visitNumber = WorldMapCells[27][34].visitNumber = WorldMapCells[27][35].visitNumber = WorldMapCells[27][36].visitNumber = WorldMapCells[27][37].visitNumber = WorldMapCells[27][38].visitNumber = WorldMapCells[27][39].visitNumber = WorldMapCells[27][40].visitNumber = WorldMapCells[27][41].visitNumber = WorldMapCells[27][42].visitNumber = WorldMapCells[27][43].visitNumber = WorldMapCells[27][44].visitNumber = WorldMapCells[27][45].visitNumber = WorldMapCells[27][46].visitNumber = WorldMapCells[27][47].visitNumber = WorldMapCells[27][48].visitNumber = WorldMapCells[27][49].visitNumber = WorldMapCells[27][50].visitNumber = WorldMapCells[27][51].visitNumber = WorldMapCells[27][52].visitNumber = WorldMapCells[27][53].visitNumber = WorldMapCells[27][54].visitNumber = WorldMapCells[27][55].visitNumber = WorldMapCells[27][56].visitNumber = WorldMapCells[27][57].visitNumber = WorldMapCells[27][58].visitNumber = WorldMapCells[27][59].visitNumber = WorldMapCells[27][60].visitNumber = WorldMapCells[27][61].visitNumber = WorldMapCells[27][62].visitNumber = WorldMapCells[27][63].visitNumber = WorldMapCells[27][64].visitNumber = WorldMapCells[27][65].visitNumber = WorldMapCells[27][66].visitNumber = WorldMapCells[27][67].visitNumber = WorldMapCells[27][68].visitNumber = WorldMapCells[27][69].visitNumber = WorldMapCells[27][70].visitNumber = WorldMapCells[27][71].visitNumber = WorldMapCells[27][72].visitNumber = WorldMapCells[27][73].visitNumber = WorldMapCells[27][74].visitNumber = WorldMapCells[27][75].visitNumber = WorldMapCells[27][76].visitNumber = WorldMapCells[27][77].visitNumber = WorldMapCells[27][78].visitNumber = WorldMapCells[27][79].visitNumber = WorldMapCells[27][80].visitNumber = WorldMapCells[27][81].visitNumber = WorldMapCells[27][82].visitNumber = WorldMapCells[27][83].visitNumber = WorldMapCells[27][84].visitNumber = WorldMapCells[27][85].visitNumber = WorldMapCells[27][86].visitNumber = WorldMapCells[27][87].visitNumber = WorldMapCells[27][88].visitNumber = WorldMapCells[27][89].visitNumber = WorldMapCells[27][90].visitNumber = WorldMapCells[27][91].visitNumber = WorldMapCells[27][92].visitNumber = WorldMapCells[27][93].visitNumber = WorldMapCells[27][94].visitNumber = WorldMapCells[27][95].visitNumber = WorldMapCells[27][96].visitNumber = WorldMapCells[27][97].visitNumber = WorldMapCells[27][98].visitNumber = WorldMapCells[27][99].visitNumber = 3;
                }
                else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false
                    || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true)
                {
                    WorldMapCells[10][0].visitNumber = WorldMapCells[10][1].visitNumber = WorldMapCells[10][2].visitNumber = WorldMapCells[10][3].visitNumber = WorldMapCells[10][4].visitNumber = WorldMapCells[10][5].visitNumber = WorldMapCells[10][6].visitNumber = WorldMapCells[10][7].visitNumber = WorldMapCells[10][8].visitNumber = WorldMapCells[10][9].visitNumber = WorldMapCells[10][10].visitNumber = WorldMapCells[10][11].visitNumber = WorldMapCells[10][12].visitNumber = WorldMapCells[10][13].visitNumber = WorldMapCells[10][14].visitNumber = WorldMapCells[10][15].visitNumber = WorldMapCells[10][16].visitNumber = WorldMapCells[10][17].visitNumber = WorldMapCells[10][18].visitNumber = WorldMapCells[10][19].visitNumber = WorldMapCells[10][20].visitNumber = WorldMapCells[10][21].visitNumber = WorldMapCells[10][22].visitNumber = WorldMapCells[10][23].visitNumber = WorldMapCells[10][24].visitNumber = WorldMapCells[10][25].visitNumber = WorldMapCells[10][26].visitNumber = WorldMapCells[10][27].visitNumber = WorldMapCells[10][28].visitNumber = WorldMapCells[10][29].visitNumber = WorldMapCells[10][30].visitNumber = WorldMapCells[10][31].visitNumber = WorldMapCells[10][32].visitNumber = WorldMapCells[10][33].visitNumber = WorldMapCells[10][34].visitNumber = WorldMapCells[10][35].visitNumber = WorldMapCells[10][36].visitNumber = WorldMapCells[10][37].visitNumber = WorldMapCells[10][38].visitNumber = WorldMapCells[10][39].visitNumber = WorldMapCells[10][40].visitNumber = WorldMapCells[10][41].visitNumber = WorldMapCells[10][42].visitNumber = WorldMapCells[10][43].visitNumber = WorldMapCells[10][44].visitNumber = WorldMapCells[10][45].visitNumber = WorldMapCells[10][46].visitNumber = WorldMapCells[10][47].visitNumber = WorldMapCells[10][48].visitNumber = WorldMapCells[10][49].visitNumber = WorldMapCells[10][50].visitNumber = WorldMapCells[10][51].visitNumber = WorldMapCells[10][52].visitNumber = WorldMapCells[10][53].visitNumber = WorldMapCells[10][54].visitNumber = WorldMapCells[10][55].visitNumber = WorldMapCells[10][56].visitNumber = WorldMapCells[10][57].visitNumber = WorldMapCells[10][58].visitNumber = WorldMapCells[10][59].visitNumber = WorldMapCells[10][60].visitNumber = WorldMapCells[10][61].visitNumber = WorldMapCells[10][62].visitNumber = WorldMapCells[10][63].visitNumber = WorldMapCells[10][64].visitNumber = WorldMapCells[10][65].visitNumber = WorldMapCells[10][66].visitNumber = WorldMapCells[10][67].visitNumber = WorldMapCells[10][68].visitNumber = WorldMapCells[10][69].visitNumber = WorldMapCells[10][70].visitNumber = WorldMapCells[10][71].visitNumber = WorldMapCells[10][72].visitNumber = WorldMapCells[10][73].visitNumber = WorldMapCells[10][74].visitNumber = WorldMapCells[10][75].visitNumber = WorldMapCells[10][76].visitNumber = WorldMapCells[10][77].visitNumber = WorldMapCells[10][78].visitNumber = WorldMapCells[10][79].visitNumber = WorldMapCells[10][80].visitNumber = WorldMapCells[10][81].visitNumber = WorldMapCells[10][82].visitNumber = WorldMapCells[10][83].visitNumber = WorldMapCells[10][84].visitNumber = WorldMapCells[10][85].visitNumber = WorldMapCells[10][86].visitNumber = WorldMapCells[10][87].visitNumber = WorldMapCells[10][88].visitNumber = WorldMapCells[10][89].visitNumber = WorldMapCells[10][90].visitNumber = WorldMapCells[10][91].visitNumber = WorldMapCells[10][92].visitNumber = WorldMapCells[10][93].visitNumber = WorldMapCells[10][94].visitNumber = WorldMapCells[10][95].visitNumber = WorldMapCells[10][96].visitNumber = WorldMapCells[10][97].visitNumber = WorldMapCells[10][98].visitNumber = WorldMapCells[10][99].visitNumber = 4;
                    WorldMapCells[26][0].visitNumber = WorldMapCells[26][1].visitNumber = WorldMapCells[26][2].visitNumber = WorldMapCells[26][3].visitNumber = WorldMapCells[26][4].visitNumber = WorldMapCells[26][5].visitNumber = WorldMapCells[26][6].visitNumber = WorldMapCells[26][7].visitNumber = WorldMapCells[26][8].visitNumber = WorldMapCells[26][9].visitNumber = WorldMapCells[26][10].visitNumber = WorldMapCells[26][11].visitNumber = WorldMapCells[26][12].visitNumber = WorldMapCells[26][13].visitNumber = WorldMapCells[26][14].visitNumber = WorldMapCells[26][15].visitNumber = WorldMapCells[26][16].visitNumber = WorldMapCells[26][17].visitNumber = WorldMapCells[26][18].visitNumber = WorldMapCells[26][19].visitNumber = WorldMapCells[26][20].visitNumber = WorldMapCells[26][21].visitNumber = WorldMapCells[26][22].visitNumber = WorldMapCells[26][23].visitNumber = WorldMapCells[26][24].visitNumber = WorldMapCells[26][25].visitNumber = WorldMapCells[26][26].visitNumber = WorldMapCells[26][27].visitNumber = WorldMapCells[26][28].visitNumber = WorldMapCells[26][29].visitNumber = WorldMapCells[26][30].visitNumber = WorldMapCells[26][31].visitNumber = WorldMapCells[26][32].visitNumber = WorldMapCells[26][33].visitNumber = WorldMapCells[26][34].visitNumber = WorldMapCells[26][35].visitNumber = WorldMapCells[26][36].visitNumber = WorldMapCells[26][37].visitNumber = WorldMapCells[26][38].visitNumber = WorldMapCells[26][39].visitNumber = WorldMapCells[26][40].visitNumber = WorldMapCells[26][41].visitNumber = WorldMapCells[26][42].visitNumber = WorldMapCells[26][43].visitNumber = WorldMapCells[26][44].visitNumber = WorldMapCells[26][45].visitNumber = WorldMapCells[26][46].visitNumber = WorldMapCells[26][47].visitNumber = WorldMapCells[26][48].visitNumber = WorldMapCells[26][49].visitNumber = WorldMapCells[26][50].visitNumber = WorldMapCells[26][51].visitNumber = WorldMapCells[26][52].visitNumber = WorldMapCells[26][53].visitNumber = WorldMapCells[26][54].visitNumber = WorldMapCells[26][55].visitNumber = WorldMapCells[26][56].visitNumber = WorldMapCells[26][57].visitNumber = WorldMapCells[26][58].visitNumber = WorldMapCells[26][59].visitNumber = WorldMapCells[26][60].visitNumber = WorldMapCells[26][61].visitNumber = WorldMapCells[26][62].visitNumber = WorldMapCells[26][63].visitNumber = WorldMapCells[26][64].visitNumber = WorldMapCells[26][65].visitNumber = WorldMapCells[26][66].visitNumber = WorldMapCells[26][67].visitNumber = WorldMapCells[26][68].visitNumber = WorldMapCells[26][69].visitNumber = WorldMapCells[26][70].visitNumber = WorldMapCells[26][71].visitNumber = WorldMapCells[26][72].visitNumber = WorldMapCells[26][73].visitNumber = WorldMapCells[26][74].visitNumber = WorldMapCells[26][75].visitNumber = WorldMapCells[26][76].visitNumber = WorldMapCells[26][77].visitNumber = WorldMapCells[26][78].visitNumber = WorldMapCells[26][79].visitNumber = WorldMapCells[26][80].visitNumber = WorldMapCells[26][81].visitNumber = WorldMapCells[26][82].visitNumber = WorldMapCells[26][83].visitNumber = WorldMapCells[26][84].visitNumber = WorldMapCells[26][85].visitNumber = WorldMapCells[26][86].visitNumber = WorldMapCells[26][87].visitNumber = WorldMapCells[26][88].visitNumber = WorldMapCells[26][89].visitNumber = WorldMapCells[26][90].visitNumber = WorldMapCells[26][91].visitNumber = WorldMapCells[26][92].visitNumber = WorldMapCells[26][93].visitNumber = WorldMapCells[26][94].visitNumber = WorldMapCells[26][95].visitNumber = WorldMapCells[26][96].visitNumber = WorldMapCells[26][97].visitNumber = WorldMapCells[26][98].visitNumber = WorldMapCells[26][99].visitNumber = 4;
                    WorldMapCells[27][0].visitNumber = WorldMapCells[27][1].visitNumber = WorldMapCells[27][2].visitNumber = WorldMapCells[27][3].visitNumber = WorldMapCells[27][4].visitNumber = WorldMapCells[27][5].visitNumber = WorldMapCells[27][6].visitNumber = WorldMapCells[27][7].visitNumber = WorldMapCells[27][8].visitNumber = WorldMapCells[27][9].visitNumber = WorldMapCells[27][10].visitNumber = WorldMapCells[27][11].visitNumber = WorldMapCells[27][12].visitNumber = WorldMapCells[27][13].visitNumber = WorldMapCells[27][14].visitNumber = WorldMapCells[27][15].visitNumber = WorldMapCells[27][16].visitNumber = WorldMapCells[27][17].visitNumber = WorldMapCells[27][18].visitNumber = WorldMapCells[27][19].visitNumber = WorldMapCells[27][20].visitNumber = WorldMapCells[27][21].visitNumber = WorldMapCells[27][22].visitNumber = WorldMapCells[27][23].visitNumber = WorldMapCells[27][24].visitNumber = WorldMapCells[27][25].visitNumber = WorldMapCells[27][26].visitNumber = WorldMapCells[27][27].visitNumber = WorldMapCells[27][28].visitNumber = WorldMapCells[27][29].visitNumber = WorldMapCells[27][30].visitNumber = WorldMapCells[27][31].visitNumber = WorldMapCells[27][32].visitNumber = WorldMapCells[27][33].visitNumber = WorldMapCells[27][34].visitNumber = WorldMapCells[27][35].visitNumber = WorldMapCells[27][36].visitNumber = WorldMapCells[27][37].visitNumber = WorldMapCells[27][38].visitNumber = WorldMapCells[27][39].visitNumber = WorldMapCells[27][40].visitNumber = WorldMapCells[27][41].visitNumber = WorldMapCells[27][42].visitNumber = WorldMapCells[27][43].visitNumber = WorldMapCells[27][44].visitNumber = WorldMapCells[27][45].visitNumber = WorldMapCells[27][46].visitNumber = WorldMapCells[27][47].visitNumber = WorldMapCells[27][48].visitNumber = WorldMapCells[27][49].visitNumber = WorldMapCells[27][50].visitNumber = WorldMapCells[27][51].visitNumber = WorldMapCells[27][52].visitNumber = WorldMapCells[27][53].visitNumber = WorldMapCells[27][54].visitNumber = WorldMapCells[27][55].visitNumber = WorldMapCells[27][56].visitNumber = WorldMapCells[27][57].visitNumber = WorldMapCells[27][58].visitNumber = WorldMapCells[27][59].visitNumber = WorldMapCells[27][60].visitNumber = WorldMapCells[27][61].visitNumber = WorldMapCells[27][62].visitNumber = WorldMapCells[27][63].visitNumber = WorldMapCells[27][64].visitNumber = WorldMapCells[27][65].visitNumber = WorldMapCells[27][66].visitNumber = WorldMapCells[27][67].visitNumber = WorldMapCells[27][68].visitNumber = WorldMapCells[27][69].visitNumber = WorldMapCells[27][70].visitNumber = WorldMapCells[27][71].visitNumber = WorldMapCells[27][72].visitNumber = WorldMapCells[27][73].visitNumber = WorldMapCells[27][74].visitNumber = WorldMapCells[27][75].visitNumber = WorldMapCells[27][76].visitNumber = WorldMapCells[27][77].visitNumber = WorldMapCells[27][78].visitNumber = WorldMapCells[27][79].visitNumber = WorldMapCells[27][80].visitNumber = WorldMapCells[27][81].visitNumber = WorldMapCells[27][82].visitNumber = WorldMapCells[27][83].visitNumber = WorldMapCells[27][84].visitNumber = WorldMapCells[27][85].visitNumber = WorldMapCells[27][86].visitNumber = WorldMapCells[27][87].visitNumber = WorldMapCells[27][88].visitNumber = WorldMapCells[27][89].visitNumber = WorldMapCells[27][90].visitNumber = WorldMapCells[27][91].visitNumber = WorldMapCells[27][92].visitNumber = WorldMapCells[27][93].visitNumber = WorldMapCells[27][94].visitNumber = WorldMapCells[27][95].visitNumber = WorldMapCells[27][96].visitNumber = WorldMapCells[27][97].visitNumber = WorldMapCells[27][98].visitNumber = WorldMapCells[27][99].visitNumber = 4;
                }
                else if (WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true)
                {
                    WorldMapCells[10][0].visitNumber = WorldMapCells[10][1].visitNumber = WorldMapCells[10][2].visitNumber = WorldMapCells[10][3].visitNumber = WorldMapCells[10][4].visitNumber = WorldMapCells[10][5].visitNumber = WorldMapCells[10][6].visitNumber = WorldMapCells[10][7].visitNumber = WorldMapCells[10][8].visitNumber = WorldMapCells[10][9].visitNumber = WorldMapCells[10][10].visitNumber = WorldMapCells[10][11].visitNumber = WorldMapCells[10][12].visitNumber = WorldMapCells[10][13].visitNumber = WorldMapCells[10][14].visitNumber = WorldMapCells[10][15].visitNumber = WorldMapCells[10][16].visitNumber = WorldMapCells[10][17].visitNumber = WorldMapCells[10][18].visitNumber = WorldMapCells[10][19].visitNumber = WorldMapCells[10][20].visitNumber = WorldMapCells[10][21].visitNumber = WorldMapCells[10][22].visitNumber = WorldMapCells[10][23].visitNumber = WorldMapCells[10][24].visitNumber = WorldMapCells[10][25].visitNumber = WorldMapCells[10][26].visitNumber = WorldMapCells[10][27].visitNumber = WorldMapCells[10][28].visitNumber = WorldMapCells[10][29].visitNumber = WorldMapCells[10][30].visitNumber = WorldMapCells[10][31].visitNumber = WorldMapCells[10][32].visitNumber = WorldMapCells[10][33].visitNumber = WorldMapCells[10][34].visitNumber = WorldMapCells[10][35].visitNumber = WorldMapCells[10][36].visitNumber = WorldMapCells[10][37].visitNumber = WorldMapCells[10][38].visitNumber = WorldMapCells[10][39].visitNumber = WorldMapCells[10][40].visitNumber = WorldMapCells[10][41].visitNumber = WorldMapCells[10][42].visitNumber = WorldMapCells[10][43].visitNumber = WorldMapCells[10][44].visitNumber = WorldMapCells[10][45].visitNumber = WorldMapCells[10][46].visitNumber = WorldMapCells[10][47].visitNumber = WorldMapCells[10][48].visitNumber = WorldMapCells[10][49].visitNumber = WorldMapCells[10][50].visitNumber = WorldMapCells[10][51].visitNumber = WorldMapCells[10][52].visitNumber = WorldMapCells[10][53].visitNumber = WorldMapCells[10][54].visitNumber = WorldMapCells[10][55].visitNumber = WorldMapCells[10][56].visitNumber = WorldMapCells[10][57].visitNumber = WorldMapCells[10][58].visitNumber = WorldMapCells[10][59].visitNumber = WorldMapCells[10][60].visitNumber = WorldMapCells[10][61].visitNumber = WorldMapCells[10][62].visitNumber = WorldMapCells[10][63].visitNumber = WorldMapCells[10][64].visitNumber = WorldMapCells[10][65].visitNumber = WorldMapCells[10][66].visitNumber = WorldMapCells[10][67].visitNumber = WorldMapCells[10][68].visitNumber = WorldMapCells[10][69].visitNumber = WorldMapCells[10][70].visitNumber = WorldMapCells[10][71].visitNumber = WorldMapCells[10][72].visitNumber = WorldMapCells[10][73].visitNumber = WorldMapCells[10][74].visitNumber = WorldMapCells[10][75].visitNumber = WorldMapCells[10][76].visitNumber = WorldMapCells[10][77].visitNumber = WorldMapCells[10][78].visitNumber = WorldMapCells[10][79].visitNumber = WorldMapCells[10][80].visitNumber = WorldMapCells[10][81].visitNumber = WorldMapCells[10][82].visitNumber = WorldMapCells[10][83].visitNumber = WorldMapCells[10][84].visitNumber = WorldMapCells[10][85].visitNumber = WorldMapCells[10][86].visitNumber = WorldMapCells[10][87].visitNumber = WorldMapCells[10][88].visitNumber = WorldMapCells[10][89].visitNumber = WorldMapCells[10][90].visitNumber = WorldMapCells[10][91].visitNumber = WorldMapCells[10][92].visitNumber = WorldMapCells[10][93].visitNumber = WorldMapCells[10][94].visitNumber = WorldMapCells[10][95].visitNumber = WorldMapCells[10][96].visitNumber = WorldMapCells[10][97].visitNumber = WorldMapCells[10][98].visitNumber = WorldMapCells[10][99].visitNumber = 5;
                    WorldMapCells[26][0].visitNumber = WorldMapCells[26][1].visitNumber = WorldMapCells[26][2].visitNumber = WorldMapCells[26][3].visitNumber = WorldMapCells[26][4].visitNumber = WorldMapCells[26][5].visitNumber = WorldMapCells[26][6].visitNumber = WorldMapCells[26][7].visitNumber = WorldMapCells[26][8].visitNumber = WorldMapCells[26][9].visitNumber = WorldMapCells[26][10].visitNumber = WorldMapCells[26][11].visitNumber = WorldMapCells[26][12].visitNumber = WorldMapCells[26][13].visitNumber = WorldMapCells[26][14].visitNumber = WorldMapCells[26][15].visitNumber = WorldMapCells[26][16].visitNumber = WorldMapCells[26][17].visitNumber = WorldMapCells[26][18].visitNumber = WorldMapCells[26][19].visitNumber = WorldMapCells[26][20].visitNumber = WorldMapCells[26][21].visitNumber = WorldMapCells[26][22].visitNumber = WorldMapCells[26][23].visitNumber = WorldMapCells[26][24].visitNumber = WorldMapCells[26][25].visitNumber = WorldMapCells[26][26].visitNumber = WorldMapCells[26][27].visitNumber = WorldMapCells[26][28].visitNumber = WorldMapCells[26][29].visitNumber = WorldMapCells[26][30].visitNumber = WorldMapCells[26][31].visitNumber = WorldMapCells[26][32].visitNumber = WorldMapCells[26][33].visitNumber = WorldMapCells[26][34].visitNumber = WorldMapCells[26][35].visitNumber = WorldMapCells[26][36].visitNumber = WorldMapCells[26][37].visitNumber = WorldMapCells[26][38].visitNumber = WorldMapCells[26][39].visitNumber = WorldMapCells[26][40].visitNumber = WorldMapCells[26][41].visitNumber = WorldMapCells[26][42].visitNumber = WorldMapCells[26][43].visitNumber = WorldMapCells[26][44].visitNumber = WorldMapCells[26][45].visitNumber = WorldMapCells[26][46].visitNumber = WorldMapCells[26][47].visitNumber = WorldMapCells[26][48].visitNumber = WorldMapCells[26][49].visitNumber = WorldMapCells[26][50].visitNumber = WorldMapCells[26][51].visitNumber = WorldMapCells[26][52].visitNumber = WorldMapCells[26][53].visitNumber = WorldMapCells[26][54].visitNumber = WorldMapCells[26][55].visitNumber = WorldMapCells[26][56].visitNumber = WorldMapCells[26][57].visitNumber = WorldMapCells[26][58].visitNumber = WorldMapCells[26][59].visitNumber = WorldMapCells[26][60].visitNumber = WorldMapCells[26][61].visitNumber = WorldMapCells[26][62].visitNumber = WorldMapCells[26][63].visitNumber = WorldMapCells[26][64].visitNumber = WorldMapCells[26][65].visitNumber = WorldMapCells[26][66].visitNumber = WorldMapCells[26][67].visitNumber = WorldMapCells[26][68].visitNumber = WorldMapCells[26][69].visitNumber = WorldMapCells[26][70].visitNumber = WorldMapCells[26][71].visitNumber = WorldMapCells[26][72].visitNumber = WorldMapCells[26][73].visitNumber = WorldMapCells[26][74].visitNumber = WorldMapCells[26][75].visitNumber = WorldMapCells[26][76].visitNumber = WorldMapCells[26][77].visitNumber = WorldMapCells[26][78].visitNumber = WorldMapCells[26][79].visitNumber = WorldMapCells[26][80].visitNumber = WorldMapCells[26][81].visitNumber = WorldMapCells[26][82].visitNumber = WorldMapCells[26][83].visitNumber = WorldMapCells[26][84].visitNumber = WorldMapCells[26][85].visitNumber = WorldMapCells[26][86].visitNumber = WorldMapCells[26][87].visitNumber = WorldMapCells[26][88].visitNumber = WorldMapCells[26][89].visitNumber = WorldMapCells[26][90].visitNumber = WorldMapCells[26][91].visitNumber = WorldMapCells[26][92].visitNumber = WorldMapCells[26][93].visitNumber = WorldMapCells[26][94].visitNumber = WorldMapCells[26][95].visitNumber = WorldMapCells[26][96].visitNumber = WorldMapCells[26][97].visitNumber = WorldMapCells[26][98].visitNumber = WorldMapCells[26][99].visitNumber = 5;
                    WorldMapCells[27][0].visitNumber = WorldMapCells[27][1].visitNumber = WorldMapCells[27][2].visitNumber = WorldMapCells[27][3].visitNumber = WorldMapCells[27][4].visitNumber = WorldMapCells[27][5].visitNumber = WorldMapCells[27][6].visitNumber = WorldMapCells[27][7].visitNumber = WorldMapCells[27][8].visitNumber = WorldMapCells[27][9].visitNumber = WorldMapCells[27][10].visitNumber = WorldMapCells[27][11].visitNumber = WorldMapCells[27][12].visitNumber = WorldMapCells[27][13].visitNumber = WorldMapCells[27][14].visitNumber = WorldMapCells[27][15].visitNumber = WorldMapCells[27][16].visitNumber = WorldMapCells[27][17].visitNumber = WorldMapCells[27][18].visitNumber = WorldMapCells[27][19].visitNumber = WorldMapCells[27][20].visitNumber = WorldMapCells[27][21].visitNumber = WorldMapCells[27][22].visitNumber = WorldMapCells[27][23].visitNumber = WorldMapCells[27][24].visitNumber = WorldMapCells[27][25].visitNumber = WorldMapCells[27][26].visitNumber = WorldMapCells[27][27].visitNumber = WorldMapCells[27][28].visitNumber = WorldMapCells[27][29].visitNumber = WorldMapCells[27][30].visitNumber = WorldMapCells[27][31].visitNumber = WorldMapCells[27][32].visitNumber = WorldMapCells[27][33].visitNumber = WorldMapCells[27][34].visitNumber = WorldMapCells[27][35].visitNumber = WorldMapCells[27][36].visitNumber = WorldMapCells[27][37].visitNumber = WorldMapCells[27][38].visitNumber = WorldMapCells[27][39].visitNumber = WorldMapCells[27][40].visitNumber = WorldMapCells[27][41].visitNumber = WorldMapCells[27][42].visitNumber = WorldMapCells[27][43].visitNumber = WorldMapCells[27][44].visitNumber = WorldMapCells[27][45].visitNumber = WorldMapCells[27][46].visitNumber = WorldMapCells[27][47].visitNumber = WorldMapCells[27][48].visitNumber = WorldMapCells[27][49].visitNumber = WorldMapCells[27][50].visitNumber = WorldMapCells[27][51].visitNumber = WorldMapCells[27][52].visitNumber = WorldMapCells[27][53].visitNumber = WorldMapCells[27][54].visitNumber = WorldMapCells[27][55].visitNumber = WorldMapCells[27][56].visitNumber = WorldMapCells[27][57].visitNumber = WorldMapCells[27][58].visitNumber = WorldMapCells[27][59].visitNumber = WorldMapCells[27][60].visitNumber = WorldMapCells[27][61].visitNumber = WorldMapCells[27][62].visitNumber = WorldMapCells[27][63].visitNumber = WorldMapCells[27][64].visitNumber = WorldMapCells[27][65].visitNumber = WorldMapCells[27][66].visitNumber = WorldMapCells[27][67].visitNumber = WorldMapCells[27][68].visitNumber = WorldMapCells[27][69].visitNumber = WorldMapCells[27][70].visitNumber = WorldMapCells[27][71].visitNumber = WorldMapCells[27][72].visitNumber = WorldMapCells[27][73].visitNumber = WorldMapCells[27][74].visitNumber = WorldMapCells[27][75].visitNumber = WorldMapCells[27][76].visitNumber = WorldMapCells[27][77].visitNumber = WorldMapCells[27][78].visitNumber = WorldMapCells[27][79].visitNumber = WorldMapCells[27][80].visitNumber = WorldMapCells[27][81].visitNumber = WorldMapCells[27][82].visitNumber = WorldMapCells[27][83].visitNumber = WorldMapCells[27][84].visitNumber = WorldMapCells[27][85].visitNumber = WorldMapCells[27][86].visitNumber = WorldMapCells[27][87].visitNumber = WorldMapCells[27][88].visitNumber = WorldMapCells[27][89].visitNumber = WorldMapCells[27][90].visitNumber = WorldMapCells[27][91].visitNumber = WorldMapCells[27][92].visitNumber = WorldMapCells[27][93].visitNumber = WorldMapCells[27][94].visitNumber = WorldMapCells[27][95].visitNumber = WorldMapCells[27][96].visitNumber = WorldMapCells[27][97].visitNumber = WorldMapCells[27][98].visitNumber = WorldMapCells[27][99].visitNumber = 5;
                }
            }
        }

        public void LookAround()
        {
            int tempTextSpeed = textSpeed;
            textSpeed = 0;
            Console.ForegroundColor = foregroundColour;
            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName);
            WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].gridDescription);
            if (WorldMapCells[CurrentMap][CurrentLocation].gridDescNumber == 1)
                WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].look);
            else if (WorldMapCells[CurrentMap][CurrentLocation].gridDescNumber == 2)
                WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].look2);
            else if (WorldMapCells[CurrentMap][CurrentLocation].gridDescNumber == 3)
                WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].look3);
            else if (WorldMapCells[CurrentMap][CurrentLocation].gridDescNumber == 4)
                WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].look4);
            else if (WorldMapCells[CurrentMap][CurrentLocation].gridDescNumber == 5)
                WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].look5);
            else if (WorldMapCells[CurrentMap][CurrentLocation].gridDescNumber == 6)
                WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].look6);
            for (int i = 0; i < 100; i++)
            {
                if (WorldMapCells[CurrentMap][i].cellLocation == CurrentLocation && !WorldMapCells[CurrentMap][CurrentLocation].gridItems.All(e => e == ""))
                {
                    foreach (var item in WorldMapCells[CurrentMap][i].gridItems)
                    {
                        if (item != "")
                        {
                            if (item[0].Equals('a') || item[0].Equals('e') || item[0].Equals('i') || item[0].Equals('o') || item[0].Equals('u'))
                                WriteLineText("There is an " + item + " here");
                            else
                                WriteLineText("There is a " + item + " here");
                        }
                    }
                }
            }
            textSpeed = tempTextSpeed;
        }

        public void LookSecondLevel()
        {
            int tempTextSpeed = textSpeed;
            textSpeed = 0;
            Console.ForegroundColor = foregroundColour;
            WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].gridDescriptionLevel2);
            Thread.Sleep(800);
            WorldMapCells[CurrentMap][CurrentLocation].secondLook = true;
            for (int i = 0; i < 100; i++)
            {
                if (WorldMapCells[CurrentMap][i].cellLocation == CurrentLocation && !WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2.All(e => e == ""))
                {
                    foreach (var item in WorldMapCells[CurrentMap][i].gridItemsLevel2)
                    {
                        if (item != "")
                        {
                            if (WorldMapCells[CurrentMap][i].mapName == "rifton" && WorldMapCells[CurrentMap][i].cellLocation == 13)
                                WriteLineText("There is a copy of " + UppercaseFirst(item) + " here");
                            else
                            {
                                if (item[0].Equals('a') || item[0].Equals('e') || item[0].Equals('i') || item[0].Equals('o') || item[0].Equals('u'))
                                    WriteLineText("There is an " + item + " here");
                                else
                                    WriteLineText("There is a " + item + " here");
                            }
                        }
                    }
                }
            }
            textSpeed = tempTextSpeed;
        }

        public void TakeAll()
        {
            Console.ForegroundColor = foregroundColour;
            for (int i = 0; i < WorldMapCells[CurrentMap][CurrentLocation].gridItems.Count; i++)
            {
                if (WorldMapCells[CurrentMap][CurrentLocation].gridItems[i] != "")
                {
                    inventory.dictionary.TryGetValue(WorldMapCells[CurrentMap][CurrentLocation].gridItems[i], out currentCount);
                    inventory.dictionary[WorldMapCells[CurrentMap][CurrentLocation].gridItems[i]] = currentCount + 1;
                    WriteLineText("You took the " + WorldMapCells[CurrentMap][CurrentLocation].gridItems[i]);
                }
            }
            WorldMapCells[CurrentMap][CurrentLocation].gridItems.Clear();

            if (WorldMapCells[CurrentMap][CurrentLocation].secondLook == true)
            {
                for (int i = 0; i < WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2.Count; i++)
                {
                    if (WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2[i] != "")
                    {
                        if (WorldMapCells[CurrentMap][CurrentLocation].shop == true)
                        {
                            WriteLineText("You can't take everything in the shop!");
                            Thread.Sleep(800);
                            break;
                        }
                        else
                        {
                            inventory.dictionary.TryGetValue(WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2[i], out currentCount);
                            inventory.dictionary[WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2[i]] = currentCount + 1;
                            WriteLineText("You took the " + WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2[i]);
                        }
                    }
                }
                if (WorldMapCells[CurrentMap][CurrentLocation].shop != true)
                    WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2.Clear();
            }
        }

        public void TakeIndividual()
        {
            Console.ForegroundColor = foregroundColour;
            for (int i = 0; i < WorldMapCells[CurrentMap][CurrentLocation].gridItems.Count; i++)
            {
                if (Regex.IsMatch(userValueItem, WorldMapCells[CurrentMap][CurrentLocation].gridItems[i], RegexOptions.IgnoreCase)
                     && WorldMapCells[CurrentMap][CurrentLocation].gridItems[i] != "")
                {
                    inventory.dictionary.TryGetValue(WorldMapCells[CurrentMap][CurrentLocation].gridItems[i], out currentCount);
                    inventory.dictionary[WorldMapCells[CurrentMap][CurrentLocation].gridItems[i]] = currentCount + 1;
                    WriteLineText("You took the " + WorldMapCells[CurrentMap][CurrentLocation].gridItems[i]);

                    var results = from result in WorldMapCells[CurrentMap][CurrentLocation].gridItems
                                  where Regex.Match(userValueItem, result, RegexOptions.Singleline | RegexOptions.IgnoreCase).Success
                                  select result;
                    foreach (var result in results)
                    {
                        WorldMapCells[CurrentMap][CurrentLocation].gridItems.Remove(result);
                        break;
                    }

                    break;
                }
            }

            if (WorldMapCells[CurrentMap][CurrentLocation].secondLook == true)
            {
                for (int i = 0; i < WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2.Count; i++)
                {
                    if (Regex.IsMatch(userValueItem, WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2[i], RegexOptions.IgnoreCase))
                    {
                        if (WorldMapCells[CurrentMap][CurrentLocation].shop == true)
                        {
                            var results = from result in WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2
                                          where Regex.Match(userValueItem, result, RegexOptions.Singleline | RegexOptions.IgnoreCase).Success
                                          select result;
                            foreach (var result in results)
                            {
                                itemChoice = result;
                            }
                            referenceCurrentItem();
                            if (torchOn == false)
                                Console.ForegroundColor = ConsoleColor.DarkCyan;
                            else if (torchOn == true)
                                Console.ForegroundColor = ConsoleColor.DarkBlue;
                            WriteLineText("That will cost " + examItem.itemBuyValue + " Ayu. Would you still like to buy it?");
                            Thread.Sleep(1000);
                            Console.ForegroundColor = foregroundColour;
                            bool done = false;
                            do
                            {
                                Console.Write("> ");
                                string choice = Console.ReadLine().ToLower().Trim();
                                if (choice.Length > 80) //makes input max of 80 chars
                                {
                                    double textlength = choice.Length;
                                    for (int j = 80; j <= textlength; j += 80)
                                    {
                                        Console.CursorTop -= 1;
                                        Console.Write(new string(' ', Console.WindowWidth));
                                        Console.CursorTop -= 1;
                                    }
                                    choice = choice.Remove(80);
                                }
                                if (Regex.IsMatch(choice, affirmativePhrases, RegexOptions.IgnoreCase))
                                {
                                    if (playerStats.playerMoney >= examItem.itemBuyValue)
                                    {
                                        if (torchOn == false)
                                            Console.ForegroundColor = ConsoleColor.DarkCyan;
                                        else if (torchOn == true)
                                            Console.ForegroundColor = ConsoleColor.DarkBlue;
                                        WriteLineText("OK! Here you go. Thanks and see you again soon!");
                                        Thread.Sleep(1000);
                                        playerStats.playerMoney -= examItem.itemBuyValue;
                                        inventory.dictionary.TryGetValue(WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2[i], out currentCount);
                                        inventory.dictionary[WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2[i]] = currentCount + 1;
                                        Console.ForegroundColor = foregroundColour;
                                        WriteLineText("You bought the " + WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2[i]);
                                        Thread.Sleep(800);

                                        if (examItem.equippable == true)
                                        {
                                            WriteLineText("Would you like to equip this now?");
                                            bool done2 = false;
                                            do
                                            {
                                                Console.Write("> ");
                                                string equipChoice = Console.ReadLine().ToLower().Trim();
                                                if (equipChoice.Length > 80) //makes input max of 80 chars
                                                {
                                                    double textlength = equipChoice.Length;
                                                    for (int j = 80; j <= textlength; j += 80)
                                                    {
                                                        Console.CursorTop -= 1;
                                                        Console.Write(new string(' ', Console.WindowWidth));
                                                        Console.CursorTop -= 1;
                                                    }
                                                    equipChoice = equipChoice.Remove(80);
                                                }
                                                if (equipChoice == "no" || equipChoice == "n")
                                                {
                                                    done2 = true;
                                                    WriteLineText("It was added to your inventory");
                                                }
                                                else if (equipChoice == "yes" || equipChoice == "y")
                                                {
                                                    done2 = true;
                                                    EquipItems();
                                                }
                                                else
                                                {
                                                    Console.CursorTop -= 1;
                                                    Console.Write(new string(' ', Console.WindowWidth));
                                                    Console.CursorTop -= 1;
                                                }
                                            } while (done2 == false);
                                            done = true;
                                            if (examItem.itemType == "weapon" || examItem.itemType == "shield")
                                            {
                                                var results2 = from result in WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2
                                                               where Regex.Match(userValueItem, result, RegexOptions.Singleline | RegexOptions.IgnoreCase).Success
                                                               select result;
                                                foreach (var result in results2)
                                                {
                                                    WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2.Remove(result);
                                                    break;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            WriteLineText("It was added to your inventory");
                                            done = true;
                                        }
                                    }
                                    else
                                    {
                                        if (torchOn == false)
                                            Console.ForegroundColor = ConsoleColor.DarkCyan;
                                        else if (torchOn == true)
                                            Console.ForegroundColor = ConsoleColor.DarkBlue;
                                        WriteLineText("It looks like you can't afford that right now...");
                                        Thread.Sleep(1000);
                                        done = true;
                                    }
                                }
                                else if (Regex.IsMatch(choice, negativePhrases, RegexOptions.IgnoreCase))
                                {
                                    if (torchOn == false)
                                        Console.ForegroundColor = ConsoleColor.DarkCyan;
                                    else if (torchOn == true)
                                        Console.ForegroundColor = ConsoleColor.DarkBlue;
                                    WriteLineText("OK, come back another time though.");
                                    Thread.Sleep(1000);
                                    done = true;
                                }
                                else
                                {
                                    if (torchOn == false)
                                        Console.ForegroundColor = ConsoleColor.DarkCyan;
                                    else if (torchOn == true)
                                        Console.ForegroundColor = ConsoleColor.DarkBlue;
                                    WriteLineText("Excuse me?");
                                    Thread.Sleep(1000);
                                }
                            } while (done == false);
                            break;
                        }
                        else
                        {
                            inventory.dictionary.TryGetValue(WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2[i], out currentCount);
                            inventory.dictionary[WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2[i]] = currentCount + 1;
                            WriteLineText("You took the " + WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2[i]);
                            var results = from result in WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2
                                          where Regex.Match(userValueItem, result, RegexOptions.Singleline | RegexOptions.IgnoreCase).Success
                                          select result;
                            foreach (var result in results)
                            {
                                WorldMapCells[CurrentMap][CurrentLocation].gridItemsLevel2.Remove(result);
                                break;
                            }
                            break;
                        }
                    }
                }
            }

        }

        public void DropIndividual() //if key item, can't drop it, but can deposit it in lab
        {
            Console.ForegroundColor = foregroundColour;
            var results = from result in inventory.dictionary
                          where Regex.Match(userValueItem, result.Key, RegexOptions.Singleline | RegexOptions.IgnoreCase).Success
                          select result;
            foreach (var result in results)
            {
                itemChoice = result.Key;
            }
            referenceCurrentItem();
            if (examItem.keyItem != true)
            {
                inventory.dictionary.TryGetValue(examItem.itemName, out currentCount);
                inventory.dictionary[examItem.itemName] = currentCount - 1;
                WriteLineText("You dropped the " + UppercaseFirst(examItem.itemName));
                WorldMapCells[CurrentMap][CurrentLocation].gridItems.Add(examItem.itemName);
                inventory.dictionary.TryGetValue(examItem.itemName, out currentCount); //removes any 0 value items
                if (currentCount == 0)
                    inventory.dictionary.Remove(examItem.itemName);
            }
            else if (examItem.keyItem == true)
                WriteLineText("You don't really want to get rid of such a useful item, do you?");
        }

        public void Examine()
        {
            Console.ForegroundColor = foregroundColour;
            {
                referenceCurrentItem();
                WriteLineText(UppercaseFirst(examItem.itemName) + ": \n" + examItem.itemDescription);
                if (examItem.equippable == true)
                    WriteLineText("This is an equippable item for your " + examItem.itemBodyLocation);
                if (examItem.itemStrengthBonus != 0)
                    WriteLineText("It provides " + examItem.itemStrengthBonus + " Strength");
                if (examItem.itemDefenseBonus != 0)
                    WriteLineText("It provides " + examItem.itemDefenseBonus + " Defense");
                if (examItem.itemHPGain != 0)
                    WriteLineText("It restores " + examItem.itemHPGain + " Health");
            }
        }

        public void AccessInventory()
        {
            Console.ForegroundColor = foregroundColour;
            getInvDictionary1();
            foreach (KeyValuePair<string, int> item in inventory.dictionary)
            {
                itemChoice = item.Key;
                referenceCurrentItem();
                if (item.Value != 0)
                    if (examItem.itemType == "weapon" || examItem.itemType == "shield")
                        Console.WriteLine("{0} [{1} {2} of {3}]", UppercaseFirst(examItem.itemName), UppercaseFirst(examItem.weaponelementName), UppercaseFirst(examItem.itemName), UppercaseFirst(examItem.weaponstatName));
                    else
                        Console.WriteLine("{0}: {1}", UppercaseFirst(item.Key), item.Value);
            }
            if (inventory.dictionary.Count == 0)
                WriteLineText("You have no items!");
        }

        public void AccessInventoryComputer()
        {
            foreach (KeyValuePair<string, int> item in inventory.dictionary)
            {
                if (item.Value != 0)
                    Console.WriteLine("{0}: {1}", item.Key.ToUpper(), item.Value);
            }
            if (inventory.dictionary.Count == 0)
                WriteLineText("YOU HAVE NO ITEMS TO DEPOSIT.");
        }

        public void AccessComputerStorage()
        {
            foreach (KeyValuePair<string, int> item in ComputerStorage)
            {
                if (item.Value != 0)
                    Console.WriteLine("{0}: {1}", item.Key.ToUpper(), item.Value);
            }
            if (ComputerStorage.Count == 0)
                WriteLineText("THERE ARE NO ITEMS STORED HERE.");
        }

        public void AccessComputerDNAItemStorage()
        {
            foreach (KeyValuePair<string, int> item in ComputerDNAItemStorage)
            {
                if (item.Value != 0)
                    Console.WriteLine("{0}: {1}", item.Key.ToUpper(), item.Value);
            }
            if (ComputerDNAItemStorage.Count == 0)
                WriteLineText("THERE ARE NO ITEMS STORED HERE.");
        }

        public void AccessStats()
        {
            Console.ForegroundColor = foregroundColour;
            Console.WriteLine("Your current HP is {0}" + @"/" + "{1} \nYour current Strength is {2} \nYour current Defense is {3} \nYour current Speed is {4} \nYour current Hit% is {5} \nYour current Charisma is {6} \nYour current Level is {7} \nYour current Exp is {8}\nYou have {9} Money", playerStats.playerCurrentHP, playerStats.playerMaxHP, playerStats.playerMaxStrength, playerStats.playerMaxDefense, playerStats.playerMaxSpeed, playerStats.playerMaxHit, playerStats.playerMaxCharisma, playerStats.playerLevel, playerStats.playerCurrentExp, playerStats.playerMoney);
        }

        public void AccessEquipment()
        {
            Console.ForegroundColor = foregroundColour;
            string weaponName = UppercaseFirst(playerStats.weaponElement) + " " + UppercaseFirst(playerStats.weapon) + " of " + UppercaseFirst(playerStats.weaponStatName);
            string shieldName = UppercaseFirst(playerStats.armourElement) + " " + UppercaseFirst(playerStats.shield) + " of " + UppercaseFirst(playerStats.armourStatName);
            Console.WriteLine("Armour: {0} \nWeapon: {1} \nShield: {2}",
                            UppercaseFirst(playerStats.armour), UppercaseFirst(weaponName), UppercaseFirst(shieldName));
        }

        public void AccessMonsters()
        {
            Console.ForegroundColor = foregroundColour;
            if (storyCounter >= 2)
            {
                Console.WriteLine("Name:    {0}\nAttack:  {1}\nDefense: {2}\nSpeed:   {3}\nSpecial Abilities:", meeba.name, meeba.attack, meeba.defense, meeba.speed);
                for (int i = 0; i < meeba.Moves.Count; i++)
                {
                    Console.WriteLine("         " + meeba.Moves[i]);
                }
                Console.WriteLine("\nName:    {0}\nAttack:  {1}\nDefense: {2}\nSpeed:   {3}\nSpecial Abilities:", meeba2.name, meeba2.attack, meeba2.defense, meeba2.speed);
                for (int i = 0; i < meeba2.Moves.Count; i++)
                {
                    Console.WriteLine("         " + meeba2.Moves[i]);
                }
            }
        }

        public void AccessHelp()
        {
            int tempTextSpeed = textSpeed;
            textSpeed = 0;
            Console.ForegroundColor = foregroundColour;
            WriteLineText("GUIDE TO INTERACTING WITH THE WORLD AND ITS INHABITANTS");
            WriteLineText("_______________________________________________________\n");
            WriteLineText("COMMAND EXAMPLES: \nMovement: \n'go north'  OR 'north' OR 'n'\n'go south' OR 'south' OR 's'\n'go east' OR 'east' OR 'e'\n'go west' OR 'west' OR 'w'\n\nNavigation: \n'map'\n");
            WriteLineText("Interaction: \n'look'\n'examine' OR 'exam' OR 'x'\n'take [item]'\n'take all'\n'drop [item]'\n'talk to [name]'\n");
            WriteLineText("Menu: \n'menu'\n'inventory'/'inv'\n'stats'\n'equipment'\n'help'\n\nItem use: \n'Use [item]'\n'Read [item]'\n'Eat [item]'\n'Drink [item]'\n'[Verb] [item]'");
            WriteLineText("\nGUIDE TO NAVIGATING THE WORLD OF TERETHIA");
            WriteLineText("_________________________________________");
            Map();
            WriteLineText("Map: \n| | You have not been here \n|x| You have been here \n|o| You are currently here \nAccess to new maps is shown in white");
            string[] Hints = new string[]
            {
                "Dr. Digby asked me to collect a sample of Protomeebium from Rifton Cave, to the west of the village.",
                "I need to find more information on the protomeebium, maybe the library will provide me with some answers.",
                "Incredible! We were able to create the Meeba from the sample I found.",
                "The miners in the excavation shack ought to know the whereabouts of more Ellondite.",
                "Dr. Digby has asked me to head to Karstbay to visit his collegue, there's a boat leaving soon from Rifton Beach that I should be able to catch."
            }; //CHANGE - add more

            WriteLineText("\nHints:");
            for (int i = 0; i < Hints.Length; i++)
            {
                if (i == storyCounter)
                {
                    WriteLineText(Hints[i]);
                }
            }
            textSpeed = tempTextSpeed;
        }

        public void AccessTextSpeed()
        {
            Console.ForegroundColor = foregroundColour;
            Console.WriteLine("Please choose the text speed you would like:\n1: Snail\n2: Leisurely\n3: Average\n4: Brisk\n5: Light-speed");
            bool validChoice = false;
            do
            {
                Console.Write("> ");
                string choice = Console.ReadLine().ToLower().Trim();
                if (choice != "1" && choice != "2" && choice != "3" && choice != "4" && choice != "5" && choice != "exit" && choice != "back")
                {
                    Console.ForegroundColor = foregroundColour;
                    Console.WriteLine("Please choose a valid option");
                    Thread.Sleep(1000);
                    Console.CursorTop -= 2;
                    Console.Write(new string(' ', Console.WindowWidth));
                    Console.CursorTop -= 2;
                    Console.Write(new string(' ', Console.WindowWidth));
                    Console.CursorTop -= 1;
                }
                else if (choice == "back" || choice == "exit")
                {
                    validChoice = true;
                    break;
                }
                else if (choice == "1")
                {
                    textSpeed = 80;
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("Text speed set to Snail.");
                    Thread.Sleep(1000);
                    validChoice = true;
                    break;
                }
                else if (choice == "2")
                {
                    textSpeed = 60;
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("Text speed set to Leisurely.");
                    Thread.Sleep(1000);
                    validChoice = true;
                    break;
                }
                else if (choice == "3")
                {
                    textSpeed = 40;
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("Text speed set to Average.");
                    Thread.Sleep(1000);
                    validChoice = true;
                    break;
                }
                else if (choice == "4")
                {
                    textSpeed = 20;
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("Text speed set to Brisk.");
                    Thread.Sleep(1000);
                    validChoice = true;
                    break;
                }
                else if (choice == "5")
                {
                    textSpeed = 0;
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("Text speed set to Light-speed.");
                    Thread.Sleep(1000);
                    validChoice = true;
                    break;
                }
            } while (validChoice == false);
        }

        public void AccessQuestLog()
        {
            int tempTextSpeed = textSpeed;
            textSpeed = 0;
            Console.ForegroundColor = foregroundColour;
            if (questLog.Count > 0)
            {
                foreach (var item in questLog)
                {
                    WriteLineText(item); //add this as an option in menu
                }
            }
            else
                WriteLineText("You do not have any current quests.");
            textSpeed = tempTextSpeed;
        }

        public void Save()
        {
            WriteLineText("Progress was recorded.");
            Thread.Sleep(800);

            //PlayerStats saveData = new PlayerStats()
            //{
            //    //Save all variables
            //    playerLevel = playerStats.playerLevel.ToString(),
            //};

            string json = JsonConvert.SerializeObject(playerStats);
            File.WriteAllText(@"C:\Users\Claire\Documents\Game Development\Visual Studio 2013\Projects\GridAdventure1\GridAdventure1\bin\Debug\SaveFile.txt", json);
        }

        public void LoadSaveData()
        {
            StreamReader s = new StreamReader("SaveFile.txt");
            string json = s.ReadToEnd();
            var deserialisedData = JsonConvert.DeserializeObject<PlayerStats>(json);

            s.Close();
            //Update all variables
            playerStats = deserialisedData;
            //playerStats.playerLevel = Convert.ToDouble(deserialisedData.playerLevelSave);
        }

        public void unknownInput()
        {
            Console.ForegroundColor = foregroundColour;
            if (!userValue.Contains("1") && !userValue.Contains("2") && !userValue.Contains("3") && !userValue.Contains("4") && !userValue.Contains("5") && !userValue.Contains("7") && !userValue.Contains("8") && !userValue.Contains("9") && !userValue.Contains("0"))
            {
                string[] unknownResponses = new string[] { "You can't do that!", "I don't understand", "Try something else", "You want to do WHAT?!", "Excuse me?", "I beg your pardon?" };
                var randomMember = random.Next(unknownResponses.Length);
                WriteLineText(unknownResponses[randomMember]);
            }
            else
            {
                Console.CursorTop -= 1;
                Console.Write(new string(' ', Console.WindowWidth));
                Console.CursorTop -= 1;
            }
        }

        public void fullHeal()
        {
            Console.Beep(600, 100);
            Console.Beep(400, 100);
            Console.Beep(800, 100);
            Thread.Sleep(800);
            playerStats.playerCurrentHP = playerStats.playerMaxHP;
            meeba.currentHp = meeba.hp;
            meeba2.currentHp = meeba2.hp;
            meeba.currentMP = meeba.MP;
            meeba2.currentMP = meeba2.MP;
            resetStats();
            playerStats.isAsleep = false;
            playerStats.isPoisoned = false;
            playerStats.isPoisonedTwo = false;
            playerStats.isStunned = false;
            meeba.isAsleep = false;
            meeba.isPoisoned = false;
            meeba.isPoisonedTwo = false;
            meeba.isStunned = false;
            meeba2.isAsleep = false;
            meeba2.isPoisoned = false;
            meeba2.isPoisonedTwo = false;
            meeba2.isStunned = false;
        }

        public void NPCTALK()
        { //C:\Users\Claire\Documents\Game Development\Visual Studio 2013\Projects\GridAdventure1\GridAdventure1\bin\Debug
            try
            {
                using (StreamReader sr = new StreamReader("NPCTEXT.txt"))
                {
                    string line;
                    while ((line = sr.ReadLine()) != "ENDFILE")
                    {
                        if ((line) == NPCIdentifier)
                        {
                            while ((line = sr.ReadLine()) != ENDNPCIdentifier)
                            {
                                if (line == Convert.ToString(NPCConvStage))
                                {
                                    while ((line = sr.ReadLine()) != "END")
                                    {
                                        bool indent = true;
                                        if (torchOn == false)
                                            Console.ForegroundColor = ConsoleColor.DarkCyan;
                                        else if (torchOn == true)
                                            Console.ForegroundColor = ConsoleColor.DarkBlue;

                                        if (line.Contains("*NPCNAME*"))
                                        {
                                            line = line.Replace("*NPCNAME*", UppercaseFirst(NPCName));
                                            indent = false;
                                        }

                                        if (line.Contains("*NAME*"))
                                            line = line.Replace("*NAME*", UppercaseFirst(playerStats.name));

                                        if (line.Contains("*FAVDRINK*"))
                                            line = line.Replace("*FAVDRINK*", UppercaseFirst(playerStats.favdrink));

                                        if (line.Contains("*YELLOW*"))
                                        {
                                            bool gray = false;
                                            if (line.Contains("*GREY*"))
                                            {
                                                line = line.Replace("*GREY*", "");
                                                if (torchOn == false)
                                                    Console.ForegroundColor = ConsoleColor.Gray;
                                                else
                                                    Console.ForegroundColor = ConsoleColor.Black;
                                                gray = true;
                                            }
                                            else
                                            {
                                                if (torchOn == false)
                                                    Console.ForegroundColor = ConsoleColor.DarkCyan;
                                                else if (torchOn == true)
                                                    Console.ForegroundColor = ConsoleColor.DarkBlue;
                                            }

                                            int startIndex = line.IndexOf("*YELLOW*") + 8;
                                            int endIndex = line.IndexOf("*/YELLOW*");
                                            string subPreYellow = line.Substring(0, startIndex - 8).TrimEnd(' ');
                                            string subYellow = line.Substring(startIndex, endIndex - startIndex);
                                            string subPostYellow = line.Substring(endIndex + 9).TrimStart(' ');
                                            string[] subPreYellowWords = subPreYellow.Split(' ');
                                            string[] subYellowWords = subYellow.Split(' ');
                                            string[] subPostYellowWords = subPostYellow.Split(' ');

                                            string currentLine = "";
                                            if (indent == true)
                                            {
                                                Console.Write(new string(' ', NPCName.Length + 2));
                                                currentLine = (new string(' ', NPCName.Length + 2));
                                            }

                                            foreach (var word in subPreYellowWords)
                                            {
                                                if (gray == true && torchOn == false)
                                                    Console.ForegroundColor = ConsoleColor.Gray;
                                                else if (gray == true && torchOn == true)
                                                    Console.ForegroundColor = ConsoleColor.Black;
                                                else
                                                {
                                                    if (torchOn == false)
                                                        Console.ForegroundColor = ConsoleColor.DarkCyan;
                                                    else if (torchOn == true)
                                                        Console.ForegroundColor = ConsoleColor.DarkBlue;
                                                }
                                                //for each word in the message, if it makes the message so far less than the window width..   
                                                if (currentLine.Length + word.Length + 1 < Console.WindowWidth)
                                                {
                                                    currentLine += word + " ";
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                }
                                                else //if the word makes the line go over the window width, print what we have so far
                                                {
                                                    Console.Write("\n");
                                                    Console.Write(new string(' ', NPCName.Length + 2));

                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                    currentLine = (new string(' ', NPCName.Length + 2)) + word + " ";
                                                }
                                            }
                                            foreach (var word in subYellowWords)
                                            {
                                                if (torchOn == false)
                                                    Console.ForegroundColor = ConsoleColor.Yellow;
                                                else
                                                    Console.ForegroundColor = ConsoleColor.Black;
                                                //for each word in the message, if it makes the message so far less than the window width..   
                                                if (currentLine.Length + word.Length + 1 < Console.WindowWidth)
                                                {
                                                    currentLine += word + " ";
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                }
                                                else //if the word makes the line go over the window width, print what we have so far
                                                {
                                                    Console.Write("\n");
                                                    Console.Write(new string(' ', NPCName.Length + 2));
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                    currentLine = (new string(' ', NPCName.Length + 2)) + word + " ";
                                                }
                                            }
                                            foreach (var word in subPostYellowWords)
                                            {
                                                if (gray == true && torchOn == false)
                                                    Console.ForegroundColor = ConsoleColor.Gray;
                                                else if (gray == true && torchOn == true)
                                                    Console.ForegroundColor = ConsoleColor.Black;
                                                else
                                                {
                                                    if (torchOn == false)
                                                        Console.ForegroundColor = ConsoleColor.DarkCyan;
                                                    else if (torchOn == true)
                                                        Console.ForegroundColor = ConsoleColor.DarkBlue;
                                                }
                                                //for each word in the message, if it makes the message so far less than the window width..   
                                                if (currentLine.Length + word.Length + 1 < Console.WindowWidth)
                                                {
                                                    currentLine += word + " ";
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                }
                                                else //if the word makes the line go over the window width, print what we have so far
                                                {
                                                    Console.Write("\n");
                                                    Console.Write(new string(' ', NPCName.Length + 2));
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                    currentLine = (new string(' ', NPCName.Length + 2)) + word + " ";
                                                }
                                            }
                                            Console.Write(Environment.NewLine);
                                            Thread.Sleep(500);
                                        }
                                        else if (line.Contains("*GREY*"))
                                        {
                                            string output = line.Replace("*GREY*", "");
                                            if (torchOn == false)
                                                Console.ForegroundColor = ConsoleColor.Gray;
                                            else
                                                Console.ForegroundColor = ConsoleColor.Black;
                                            WriteLineText(output);
                                            Thread.Sleep(1500);
                                        }
                                        else
                                        {
                                            if (torchOn == false)
                                                Console.ForegroundColor = ConsoleColor.DarkCyan;
                                            else if (torchOn == true)
                                                Console.ForegroundColor = ConsoleColor.DarkBlue;

                                            string[] subWords = line.Split(' ');
                                            string currentLine = "";
                                            if (indent == true)
                                            {
                                                Console.Write(new string(' ', NPCName.Length + 2));
                                                currentLine = (new string(' ', NPCName.Length + 2));
                                            }
                                            foreach (var word in subWords)
                                            {
                                                //for each word in the message, if it makes the message so far less than the window width..   
                                                if (currentLine.Length + word.Length + 1 < Console.WindowWidth)
                                                {
                                                    currentLine += word + " ";
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                }
                                                else //if the word makes the line go over the window width, print what we have so far
                                                {
                                                    Console.Write("\n");
                                                    Console.Write(new string(' ', NPCName.Length + 2));
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                    currentLine = (new string(' ', NPCName.Length + 2)) + word + " ";
                                                }
                                            }
                                            Console.Write("\n");
                                            
                                            Thread.Sleep(1500);
                                            if (torchOn == false)
                                                Console.ForegroundColor = ConsoleColor.Gray;
                                            else
                                                Console.ForegroundColor = ConsoleColor.Black;
                                        }
                                        if (torchOn == false)
                                            Console.ForegroundColor = ConsoleColor.Gray;
                                        else
                                            Console.ForegroundColor = ConsoleColor.Black;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                WriteLineText("They don't want to talk right now.");
            }
        }

        public void useTorch()
        {
            Console.BackgroundColor = ConsoleColor.Yellow;
            backgroundColour = ConsoleColor.Yellow;
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Black;
            foregroundColour = ConsoleColor.Black;
            torchOn = true;
            WorldMapCells[1][31].accessible = true; //Hidden locations
            WorldMapCells[1][32].accessible = true;
        }

        public void useUVTorch()
        {
            Console.BackgroundColor = ConsoleColor.DarkMagenta;
            backgroundColour = ConsoleColor.DarkMagenta;
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Magenta;
            foregroundColour = ConsoleColor.Magenta;
            torchOn = true;
            WorldMapCells[1][31].accessible = true; //Hidden locations
            WorldMapCells[1][32].accessible = true;
        }

        public void useDetector()
        {
            double tempEllonditeLoc = 100;
            double tempCurrentLoc = 100;
            for (int i = 0; i < 100; i++)
            {
                if (WorldMapCells[CurrentMap][i].ellondite == true)
                    tempEllonditeLoc = i;
            }
            if (tempEllonditeLoc != 100)
            {
                double tempCurrentLocRow = 0;
                double tempCurrentLocColumn = 0;
                double tempEllonditeLocRow = 0;
                double tempEllonditeLocColumn = 0;
                tempCurrentLoc = WorldMapCells[CurrentMap][CurrentLocation].cellLocation;

                if (tempCurrentLoc > 9)
                {
                    tempCurrentLocRow = Math.Floor(tempCurrentLoc / 10); //e.g. 31 becomes 3, 57 becomes 5
                }//gets first part of number (row)
                if (tempEllonditeLoc > 9)
                {
                    tempEllonditeLocRow = Math.Floor(tempEllonditeLoc / 10); //e.g. 31 becomes 3, 57 becomes 5
                }

                if (tempCurrentLoc > 9) //gets column number
                {
                    while (tempCurrentLoc > 9) //reduces by 10 until less than 10
                    {
                        tempCurrentLoc -= 10;
                    }
                }
                tempCurrentLocColumn = tempCurrentLoc;

                if (tempEllonditeLoc > 9)
                {
                    while (tempEllonditeLoc > 9)
                    {
                        tempEllonditeLoc -= 10;
                    }
                }
                tempEllonditeLocColumn = tempEllonditeLoc;

                //absolute value of distance between two points
                double radiation = Math.Abs((tempEllonditeLocColumn + tempEllonditeLocRow) - (tempCurrentLocColumn + tempCurrentLocRow));
                double radiationRandomised = random.NextDouble();
                double finalRadiation = (19 - radiation + radiationRandomised) * 5;
                string finalRadString = finalRadiation.ToString().Remove(6);
                Console.ForegroundColor = ConsoleColor.DarkGreen;
                message = "RADIATION DETECTOR: DETECTING...\n";
                for (int i = 0; i < message.Length; i++)
                {
                    Console.Write(message[i]);
                    Thread.Sleep(25);
                }
                Thread.Sleep(800);
                message = "RADIATION LEVEL: ";
                for (int i = 0; i < message.Length; i++)
                {
                    Console.Write(message[i]);
                    Thread.Sleep(25);
                }
                Thread.Sleep(800);
                Console.Write(finalRadString);
                Thread.Sleep(800);
                Console.Write("\n");
                Console.ForegroundColor = foregroundColour;
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.DarkGreen;
                message = "RADIATION DETECTOR: DETECTING...\n";
                for (int i = 0; i < message.Length; i++)
                {
                    Console.Write(message[i]);
                    Thread.Sleep(25);
                }
                Thread.Sleep(800);
                message = "NO DETECTABLE RADIATION FOUND\n";
                for (int i = 0; i < message.Length; i++)
                {
                    Console.Write(message[i]);
                    Thread.Sleep(25);
                }
                Thread.Sleep(800);
            }
        }

        public void TurnOffTorch()
        {
            backgroundColour = ConsoleColor.Black;
            foregroundColour = ConsoleColor.Gray;
            Console.BackgroundColor = backgroundColour;
            Console.ForegroundColor = foregroundColour;
            Console.Clear();
            torchOn = false;
            WorldMapCells[1][31].accessible = false; //Hidden locations
            WorldMapCells[1][32].accessible = false;
        }

        public void Map()
        {
            GridMap = new string[100];
            for (int i = 0; i < 100; i++)
            {
                WorldMapCells[CurrentMap][i].draw = false;

                if (WorldMapCells[CurrentMap][i] == WorldMapCells[CurrentMap][CurrentLocation])
                {
                    GridMap[CurrentLocation] = "|o|";
                    WorldMapCells[CurrentMap][i].draw = true;
                }

                //torchvisible
                else if (WorldMapCells[CurrentMap][i].accessible == false || WorldMapCells[CurrentMap][i].torchVisible == true)
                {
                    GridMap[i] = "   ";
                    WorldMapCells[CurrentMap][i].draw = true;
                    if (WorldMapCells[CurrentMap][i].torchVisible == true && torchOn == true && WorldMapCells[CurrentMap][i].visited == false)
                    {
                        GridMap[i] = "| |";
                        WorldMapCells[CurrentMap][i].draw = true;
                    }
                    else if (WorldMapCells[CurrentMap][i].torchVisible == true && torchOn == true && WorldMapCells[CurrentMap][i].visited == true)
                    {
                        WorldMapCells[CurrentMap][i].draw = true;
                        GridMap[i] = "|x|";
                    }

                }

                else if (WorldMapCells[CurrentMap][i].accessible == true && WorldMapCells[CurrentMap][i].visited == false)
                {
                    GridMap[i] = "| |";
                    WorldMapCells[CurrentMap][i].draw = true;
                }

                else if (WorldMapCells[CurrentMap][i].visited == true && WorldMapCells[CurrentMap][i] != WorldMapCells[CurrentMap][CurrentLocation])
                {
                    GridMap[i] = "|x|";
                    WorldMapCells[CurrentMap][i].draw = true;
                }

                //cave
                if (WorldMapCells[CurrentMap][i].cave == true && torchOn == true)
                {
                    //east border except corners
                    if (easternBorder.Contains(WorldMapCells[CurrentMap][CurrentLocation].cellLocation) && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 9 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 99)
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 11].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 10].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 9].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 10].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    //west border except corners
                    if (westernBorder.Contains(WorldMapCells[CurrentMap][CurrentLocation].cellLocation) && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 0 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 90)
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 10].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 9].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 10].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 11].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    //north border except corners
                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation < 10 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 0 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 9)
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 9].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 10].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 11].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    //south border except corners
                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation > 89 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 90 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 99)
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 11].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 10].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 9].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 0) //NW corner
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][10].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][11].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 9) //NE corner
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][8].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][18].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][19].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 90) //SW corner
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][80].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][81].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][91].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 99) //SE corner
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][88].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][89].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][98].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation //central
                         && WorldMapCells[CurrentMap][CurrentLocation].cellLocation < 90 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation > 9 && !easternBorder.Contains(WorldMapCells[CurrentMap][CurrentLocation].cellLocation) && !westernBorder.Contains(WorldMapCells[CurrentMap][CurrentLocation].cellLocation)
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 11].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 10].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 9].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 1].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 9].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 10].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 11].cellLocation)
                    {
                        GridMap[i] = "   ";
                        WorldMapCells[CurrentMap][i].draw = false;
                    }

                    if (WorldMapCells[CurrentMap][i].visited == true && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation)
                    {
                        GridMap[i] = "|x|";
                        WorldMapCells[CurrentMap][i].draw = true;
                    }
                }
                else if (WorldMapCells[CurrentMap][i].cave == true && torchOn == false)
                {
                    if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation)
                    {
                        GridMap[i] = "   ";
                        WorldMapCells[CurrentMap][i].draw = false;
                    }
                }
            }

            bool inUpperDeck = false;
            bool inMiddleDeck = false;
            bool inLowerDeck = false;

            if (WorldMapCells[CurrentMap][CurrentLocation].boatLowerDeck == true)
                inLowerDeck = true;
            if (WorldMapCells[CurrentMap][CurrentLocation].boatMiddleDeck == true)
                inMiddleDeck = true;
            if (WorldMapCells[CurrentMap][CurrentLocation].boatUpperDeck == true)
                inUpperDeck = true;

            //actually write map
            Console.ForegroundColor = foregroundColour;
            Console.WriteLine("\nYour current location is " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName) + ", " + WorldMapCells[CurrentMap][CurrentLocation].cellName);
            Console.WriteLine("\n  N");
            Console.WriteLine("W   E");
            Console.WriteLine("  S\n");
            for (int j = 0; j < 100; j += 10) //Draws map - j is the row (increments of 10 as 10 cells per row)
            {
                if (WorldMapCells[CurrentMap][j].accessible == true || WorldMapCells[CurrentMap][j + 1].accessible == true || WorldMapCells[CurrentMap][j + 2].accessible == true || WorldMapCells[CurrentMap][j + 3].accessible == true || WorldMapCells[CurrentMap][j + 4].accessible == true || WorldMapCells[CurrentMap][j + 5].accessible == true || WorldMapCells[CurrentMap][j + 6].accessible == true || WorldMapCells[CurrentMap][j + 7].accessible == true || WorldMapCells[CurrentMap][j + 8].accessible == true || WorldMapCells[CurrentMap][j + 9].accessible == true || WorldMapCells[CurrentMap][j].Gateway == true || WorldMapCells[CurrentMap][j + 1].Gateway == true || WorldMapCells[CurrentMap][j + 2].Gateway == true || WorldMapCells[CurrentMap][j + 3].Gateway == true || WorldMapCells[CurrentMap][j + 4].Gateway == true || WorldMapCells[CurrentMap][j + 5].Gateway == true || WorldMapCells[CurrentMap][j + 6].Gateway == true || WorldMapCells[CurrentMap][j + 7].Gateway == true || WorldMapCells[CurrentMap][j + 8].Gateway == true || WorldMapCells[CurrentMap][j + 9].Gateway == true)
                { //Only draws a row if there is something accessible on it
                    for (int i = j; i < (j + 10); i++) //i is the cell (1-10 per row)
                    {
                        if (inLowerDeck == true && WorldMapCells[CurrentMap][i].boatMiddleDeck == true || inLowerDeck == true && WorldMapCells[CurrentMap][i].boatUpperDeck == true || inMiddleDeck == true && WorldMapCells[CurrentMap][i].boatLowerDeck == true || inMiddleDeck == true && WorldMapCells[CurrentMap][i].boatUpperDeck == true || inUpperDeck == true && WorldMapCells[CurrentMap][i].boatLowerDeck == true || inUpperDeck == true && WorldMapCells[CurrentMap][i].boatMiddleDeck == true)
                        {
                            if (inLowerDeck == true && WorldMapCells[CurrentMap][i].boatMiddleDeck == true)
                            {
                                Console.BackgroundColor = backgroundColour;
                                Console.Write("   ");
                                Console.ResetColor();
                            }
                            if (inLowerDeck == true && WorldMapCells[CurrentMap][i].boatUpperDeck == true)
                            {
                                Console.BackgroundColor = backgroundColour;
                                Console.Write("   ");
                                Console.ResetColor();
                            }
                            if (inMiddleDeck == true && WorldMapCells[CurrentMap][i].boatLowerDeck == true)
                            {
                                Console.BackgroundColor = backgroundColour;
                                Console.Write("   ");
                                Console.ResetColor();
                            }
                            if (inMiddleDeck == true && WorldMapCells[CurrentMap][i].boatUpperDeck == true)
                            {
                                Console.BackgroundColor = backgroundColour;
                                Console.Write("   ");
                                Console.ResetColor();
                            }
                            if (inUpperDeck == true && WorldMapCells[CurrentMap][i].boatLowerDeck == true)
                            {
                                Console.BackgroundColor = backgroundColour;
                                Console.Write("   ");
                                Console.ResetColor();
                            }
                            if (inUpperDeck == true && WorldMapCells[CurrentMap][i].boatMiddleDeck == true)
                            {
                                Console.BackgroundColor = backgroundColour;
                                Console.Write("   ");
                                Console.ResetColor();
                            }
                        }

                        else //if not in boat
                        {
                            if (WorldMapCells[CurrentMap][i].Gateway == true && WorldMapCells[CurrentMap][i].cave == true && WorldMapCells[CurrentMap][i].draw != false)
                            {
                                if (torchOn == false)
                                {
                                    Console.BackgroundColor = ConsoleColor.White;
                                }
                                else if (torchOn == true)
                                {
                                    Console.BackgroundColor = ConsoleColor.DarkMagenta;
                                }
                                Console.ForegroundColor = ConsoleColor.Black;
                                Console.Write(GridMap[i]);
                                Console.ResetColor();
                            }
                            //else if (WorldMapCells[CurrentMap][i].Gateway == true && WorldMapCells[CurrentMap][i].cave == true && torchOn == false)
                            //{
                            //    Console.BackgroundColor = backgroundColour;
                            //    Console.Write(GridMap[i]);
                            //    Console.ResetColor();
                            //}
                            else if (WorldMapCells[CurrentMap][i].Gateway == true && WorldMapCells[CurrentMap][i].cave != true)
                            {
                                if (torchOn == false)
                                {
                                    Console.BackgroundColor = ConsoleColor.White;
                                }
                                else if (torchOn == true)
                                {
                                    Console.BackgroundColor = ConsoleColor.DarkMagenta;
                                }
                                Console.ForegroundColor = ConsoleColor.Black;
                                Console.Write(GridMap[i]);
                                Console.ResetColor();
                            }
                            else if (GridMap[i] == "   ")
                            {
                                Console.BackgroundColor = backgroundColour;
                                Console.Write(GridMap[i]);
                                Console.ResetColor();
                            }
                            else if (GridMap[i] == "| |" || GridMap[i] == "|x|" || GridMap[i] == "|o|")
                            {
                                Console.BackgroundColor = ConsoleColor.DarkGray;
                                Console.ForegroundColor = ConsoleColor.Black;
                                Console.Write(GridMap[i]);
                                Console.ResetColor();
                            }
                        }

                    }
                }
                if (WorldMapCells[CurrentMap][j].accessible == true || WorldMapCells[CurrentMap][j].Gateway == true || WorldMapCells[CurrentMap][j + 1].accessible == true || WorldMapCells[CurrentMap][j + 1].Gateway == true || WorldMapCells[CurrentMap][j + 2].accessible == true || WorldMapCells[CurrentMap][j + 2].Gateway == true || WorldMapCells[CurrentMap][j + 3].accessible == true || WorldMapCells[CurrentMap][j + 3].Gateway == true || WorldMapCells[CurrentMap][j + 4].accessible == true || WorldMapCells[CurrentMap][j + 4].Gateway == true || WorldMapCells[CurrentMap][j + 5].accessible == true || WorldMapCells[CurrentMap][j + 5].Gateway == true || WorldMapCells[CurrentMap][j + 6].accessible == true || WorldMapCells[CurrentMap][j + 6].Gateway == true || WorldMapCells[CurrentMap][j + 7].accessible == true || WorldMapCells[CurrentMap][j + 7].Gateway == true || WorldMapCells[CurrentMap][j + 8].accessible == true || WorldMapCells[CurrentMap][j + 8].Gateway == true || WorldMapCells[CurrentMap][j + 9].accessible == true || WorldMapCells[CurrentMap][j + 9].Gateway == true)
                    Console.Write(Environment.NewLine); //Only starts a new line if there was map drawn on it
            }
            inLowerDeck = false;
            inMiddleDeck = false;
            inUpperDeck = false;
        }

        public void referenceCurrentItem()
        {
            if (itemChoice.ToLower() == FavDrink.itemName.ToLower())
            {
                itemChoice = "favdrink";
            }
            switch (itemChoice) //Add all items
            {
                case "stick":
                    examItem = Stick;
                    break;
                case "sword":
                    examItem = Sword;
                    break;
                case "axe":
                    examItem = Axe;
                    break;
                case "mace":
                    examItem = Mace;
                    break;
                case "spear":
                    examItem = Spear;
                    break;
                case "bow":
                    examItem = Bow;
                    break;
                case "shield":
                    examItem = Shield;
                    break;
                case "cotton vest":
                    examItem = new CottonVest();
                    break;
                case "oats":
                    examItem = new Oats();
                    break;
                case "dried fish":
                    examItem = new DriedFish();
                    break;
                case "knitted vest":
                    examItem = new KnittedVest();
                    break;
                case "chainmail":
                    examItem = new Chainmail();
                    break;
                case "apple":
                    examItem = new Apple();
                    break;
                case "tiny parsnip":
                    examItem = new TinyParsnip();
                    break;
                case "carrot":
                    examItem = new Carrot();
                    break;
                case "onion":
                    examItem = new Onion();
                    break;
                case "beans":
                    examItem = new Beans();
                    break;
                case "potato":
                    examItem = new Potato();
                    break;
                case "wild berries":
                    examItem = new WildBerries();
                    break;
                case "red pipon shake":
                    examItem = new RedPiponShake();
                    break;
                case "blue pipon shake":
                    examItem = new BluePiponShake();
                    break;
                case "green pipon shake":
                    examItem = new GreenPiponShake();
                    break;
                case "pink pipon shake":
                    examItem = new PinkPiponShake();
                    break;
                case "history of rifton village":
                    examItem = new HistoryRiftonVillageBook();
                    break;
                case "the polluted lands":
                    examItem = new PollutedLandsBook();
                    break;
                case "soil quality and gardening":
                    examItem = new GardeningBeginnersBook();
                    break;
                case "favdrink":
                    examItem = FavDrink;
                    break;
                case "flashlight":
                    examItem = new Flashlight();
                    break;
                case "large branch":
                    examItem = new LargeBranch();
                    break;
                case "detector":
                    examItem = new Detector();
                    break;
                case "pickaxe":
                    examItem = new Pickaxe();
                    break;
                case "ellondite":
                    examItem = new Ellondite();
                    break;
                case "rock":
                    examItem = new Rock();
                    break;
                case "protomeebium":
                    examItem = new Protomeebium();
                    break;
                case "protomeebium book":
                    examItem = new ProtomeebiumBook();
                    break;
                case "Rapid evolutionary radiations throughout history":
                    examItem = new RapidRadiationsHistoryBook();
                    break;
                case "grellite":
                    examItem = new Grellite(); //weapon - atk1
                    break;
                case "red mustonite":
                    examItem = new RedMustonite(); //weapon - atk2
                    break;
                case "red cobarite":
                    examItem = new RedCobarite(); //weapon - atk3
                    break;
                case "red safrostine":
                    examItem = new RedSafrostine(); //weapon - atk4
                    break;
                case "blue mustonite":
                    examItem = new BlueMustonite(); //weapon - spd1
                    break;
                case "blue cobarite":
                    examItem = new BlueCobarite(); //weapon - spd2
                    break;
                case "blue safrostine":
                    examItem = new BlueSafrostine(); //weapon - spd3
                    break;
                case "green cobarite": //weapon - hp1
                    examItem = new GreenCobarite();
                    break;
                case "green safrostine": //weapon - hp2
                    examItem = new GreenSafrostine();
                    break;
                case "yellow cobarite": //weapon - hit1
                    examItem = new YellowCobarite();
                    break;
                case "yellow safrostine": //weapon - hit2
                    examItem = new YellowSafrostine();
                    break;
                case "pink safrostine": //weapon - cha1
                    examItem = new PinkSafrostine();
                    break;
                case "brown safrostine": //weapon - atk hp
                    examItem = new BrownSafrostine();
                    break;
                case "purple safrostine": //weapon - atk spd
                    examItem = new PurpleSafrostine();
                    break;
                case "lime safrostine": //weapon - hit hp
                    examItem = new LimeSafrostine();
                    break;
                case "quarlite": //armour - def1
                    examItem = new Quarlite();
                    break;
                case "red tomaline": //armour - def2
                    examItem = new RedTomaline();
                    break;
                case "red corusite": //armour - def3
                    examItem = new RedCorusite();
                    break;
                case "red dirazite": //armour - def4
                    examItem = new RedDirazite();
                    break;
                case "green tomaline": //armour - hp1
                    examItem = new GreenTomaline();
                    break;
                case "green corusite": //armour - hp2
                    examItem = new GreenCorusite();
                    break;
                case "green dirazite": //armour - hp3
                    examItem = new GreenDirazite();
                    break;
                case "blue corusite": //armour - spd1
                    examItem = new BlueCorusite();
                    break;
                case "blue dirazite": //armour - spd2
                    examItem = new BlueDirazite();
                    break;
                case "yellow corusite": //armour - hit1
                    examItem = new YellowCorusite();
                    break;
                case "yellow dirazite": //armour - hit2
                    examItem = new YellowDirazite();
                    break;
                case "pink dirazite": //armour - cha1
                    examItem = new PinkDirazite();
                    break;
                case "brown dirazite": //armour - hpdef
                    examItem = new BrownDirazite();
                    break;
                case "orange dirazite": //armour - hitdef
                    examItem = new OrangeDirazite();
                    break;
                case "aqua dirazite": //armour - hpspd
                    examItem = new AquaDirazite();
                    break;
                case "fire egg":
                    examItem = new FireEgg();
                    break;
                case "flame gloop":
                    examItem = new FlameGloop();
                    break;
                case "coal armour":
                    examItem = new CoalArmour();
                    break;
                case "flint":
                    examItem = new Flint();
                    break;
                case "fire fang":
                    examItem = new FireFang();
                    break;
                case "burning tail":
                    examItem = new BurningTail();
                    break;
                case "infernal scale":
                    examItem = new InfernalScale();
                    break;
                case "lava rock":
                    examItem = new LavaRock();
                    break;
                case "seed":
                    examItem = new Seed();
                    break;
                case "spore":
                    examItem = new Spore();
                    break;
                case "grass scale":
                    examItem = new GrassScale();
                    break;
                case "pollen fang":
                    examItem = new PollenFang();
                    break;
                case "thorn":
                    examItem = new Thorn();
                    break;
                case "vine berry":
                    examItem = new VineBerry();
                    break;
                case "rotting branch":
                    examItem = new RottingBranch();
                    break;
                case "golden leaf":
                    examItem = new GoldenLeaf();
                    break;
                case "mud ball":
                    examItem = new MudBall();
                    break;
                case "granule":
                    examItem = new Granule();
                    break;
                case "earthy claw":
                    examItem = new EarthyClaw();
                    break;
                case "muddy fur":
                    examItem = new MuddyFur();
                    break;
                case "old bone":
                    examItem = new OldBone();
                    break;
                case "fossil":
                    examItem = new Fossil();
                    break;
                case "gritty paw":
                    examItem = new GrittyPaw();
                    break;
                case "rock slab":
                    examItem = new RockSlab();
                    break;
                case "chitin wing":
                    examItem = new ChitinWing();
                    break;
                case "antenna":
                    examItem = new Antenna();
                    break;
                case "light wing":
                    examItem = new LightWing();
                    break;
                case "hooked claw":
                    examItem = new HookedClaw();
                    break;
                case "feather":
                    examItem = new Feather();
                    break;
                case "sharp beak":
                    examItem = new SharpBeak();
                    break;
                case "ventifact scale":
                    examItem = new VentifactScale();
                    break;
                case "hollow fang":
                    examItem = new HollowFang();
                    break;
                case "spicule":
                    examItem = new Spicule();
                    break;
                case "sea gloop":
                    examItem = new SeaGloop();
                    break;
                case "ocean scale":
                    examItem = new OceanScale();
                    break;
                case "fin":
                    examItem = new Fin();
                    break;
                case "tentacle":
                    examItem = new Tentacle();
                    break;
                case "biolume":
                    examItem = new Biolume();
                    break;
                case "deep-sea blubber":
                    examItem = new DeepSeaBlubber();
                    break;
                case "ocean fin":
                    examItem = new OceanFin();
                    break;
                case "tinder root":
                    examItem = new TinderRoot();
                    break;
                case "smoke root":
                    examItem = new SmokeRoot();
                    break;
                case "flame root":
                    examItem = new FlameRoot();
                    break;
                case "inferno root":
                    examItem = new InfernoRoot();
                    break;
                case "sprout root":
                    examItem = new SproutRoot();
                    break;
                case "grass root":
                    examItem = new GrassRoot();
                    break;
                case "vine root":
                    examItem = new VineRoot();
                    break;
                case "forest root":
                    examItem = new ForestRoot();
                    break;
                case "soil root":
                    examItem = new SoilRoot();
                    break;
                case "boulder root":
                    examItem = new BoulderRoot();
                    break;
                case "terra root":
                    examItem = new TerraRoot();
                    break;
                case "mount root":
                    examItem = new MountRoot();
                    break;
                case "breeze root":
                    examItem = new BreezeRoot();
                    break;
                case "wind root":
                    examItem = new WindRoot();
                    break;
                case "sky root":
                    examItem = new SkyRoot();
                    break;
                case "atmos root":
                    examItem = new AtmosRoot();
                    break;
                case "drop root":
                    examItem = new DropRoot();
                    break;
                case "pond root":
                    examItem = new PondRoot();
                    break;
                case "lake root":
                    examItem = new LakeRoot();
                    break;
                case "ocean root":
                    examItem = new OceanRoot();
                    break;
                case "cinder root":
                    examItem = new CinderRoot();
                    break;
                case "ember root":
                    examItem = new EmberRoot();
                    break;
                case "charred root":
                    examItem = new CharredRoot();
                    break;
                case "ash root":
                    examItem = new AshRoot();
                    break;
                case "algae root":
                    examItem = new AlgaeRoot();
                    break;
                case "lichen root":
                    examItem = new LichenRoot();
                    break;
                case "bog root":
                    examItem = new BogRoot();
                    break;
                case "swamp root":
                    examItem = new SwampRoot();
                    break;
                case "sand root":
                    examItem = new SandRoot();
                    break;
                case "loess root":
                    examItem = new LoessRoot();
                    break;
                case "dune root":
                    examItem = new DuneRoot();
                    break;
                case "desert root":
                    examItem = new DesertRoot();
                    break;
                case "cloud root":
                    examItem = new CloudRoot();
                    break;
                case "hail root":
                    examItem = new HailRoot();
                    break;
                case "thunder root":
                    examItem = new ThunderRoot();
                    break;
                case "lightning root":
                    examItem = new LightningRoot();
                    break;
                case "evapo root":
                    examItem = new EvapoRoot();
                    break;
                case "vapour root":
                    examItem = new VapourRoot();
                    break;
                case "vent root":
                    examItem = new VentRoot();
                    break;
                case "geyser root":
                    examItem = new GeyserRoot();
                    break;
            }
        }
        //Item Types: weapon, armour, healthgain, dropItem, evolveItem, statusChange, key, torch, map, inBattle, book,
        public void EquipItems()
        {
            Console.ForegroundColor = foregroundColour;
            // itemChoice = userValueItem;
            referenceCurrentItem();

            if (examItem.equippable == true)
            {
                if (inventory.dictionary.ContainsKey(userValueItem))
                {
                    inventory.dictionary[examItem.itemName] -= 1;
                    inventory.dictionary.TryGetValue(examItem.itemName, out currentCount); //removes any 0 value items
                    if (currentCount == 0)
                        inventory.dictionary.Remove(examItem.itemName);
                    WriteLineText("You equipped the " + UppercaseFirst(examItem.itemName)); //chestarmour phrases etc., + dictionarys
                    Thread.Sleep(1000);
                    if (examItem.itemBodyLocation == "armour")
                    {
                        if (playerStats.armour.ToLower() != "nothing".ToLower())
                        {
                            if (inventory.dictionary.ContainsKey(playerStats.armour.ToLower()))
                                inventory.dictionary[playerStats.armour.ToLower()] += 1;
                            else
                                inventory.dictionary.Add(playerStats.armour.ToLower(), 1);
                        }
                        playerStats.armour = UppercaseFirst(userValueItem);
                        playerStats.playerArmourDef = examItem.itemDefenseBonus;
                        playerStats.playerArmourSpeed = examItem.itemSpeedBonus;
                    }
                    else if (examItem.itemBodyLocation == "weapon")
                    {
                        if (playerStats.weapon.ToLower() != "fists".ToLower())
                        {
                            if (inventory.dictionary.ContainsKey(playerStats.weapon.ToLower()))
                                inventory.dictionary[playerStats.weapon.ToLower()] += 1;
                            else
                                inventory.dictionary.Add(playerStats.weapon.ToLower(), 1);
                        }
                        if (examItem.itemName == "stick")
                            playerStats.sprite = Stick.sprite;
                        else if (examItem.itemName == "sword")
                            playerStats.sprite = Sword.sprite;
                        else if (examItem.itemName == "spear")
                            playerStats.sprite = Spear.sprite;
                        else if (examItem.itemName == "axe")
                            playerStats.sprite = Axe.sprite;
                        else if (examItem.itemName == "mace")
                            playerStats.sprite = Mace.sprite;
                        else if (examItem.itemName == "bow")
                            playerStats.sprite = Bow.sprite;
                        playerStats.weapon = examItem.itemName;
                        playerStats.weaponElement = examItem.weaponelementName;
                        playerStats.weaponStatName = examItem.weaponstatName;
                        playerStats.playerWeaponStrength = examItem.itemStrengthBonus;
                        playerStats.playerWeaponSpeed = examItem.itemSpeedBonus;
                        playerStats.playerWeaponHit = examItem.itemHitGain;
                        playerStats.playerWeaponHP = examItem.itemHPGain;
                        playerStats.playerWeaponCharisma = examItem.itemCharismaBonus;
                    }
                    else if (examItem.itemBodyLocation == "shield")
                    {
                        if (playerStats.shield.ToLower() != "fists".ToLower())
                        {
                            if (inventory.dictionary.ContainsKey(playerStats.shield.ToLower()))
                                inventory.dictionary[playerStats.shield.ToLower()] += 1;
                            else
                                inventory.dictionary.Add(playerStats.shield.ToLower(), 1);
                        }
                        if (playerStats.weapon == "fists")
                            playerStats.sprite = Shield.sprite;
                        playerStats.shield = examItem.itemName;
                        playerStats.armourElement = examItem.weaponelementName;
                        playerStats.armourStatName = examItem.weaponstatName;
                        playerStats.playerShieldDefense = examItem.itemDefenseBonus;
                        playerStats.playerShieldSpeed = examItem.itemSpeedBonus;
                        playerStats.playerShieldHP = examItem.itemHPGain;
                        playerStats.playerShieldHit = examItem.itemHitGain;
                        playerStats.playerShieldCharisma = examItem.itemCharismaBonus;
                    }
                }
                else
                {
                    WriteLineText("You do not have one of those");
                    Thread.Sleep(800);
                }
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].gridItems.Contains(examItem.itemName) && !inventory.dictionary.ContainsKey(userValueItem))
                WriteLineText("Take the item first!");
        }

        public void UnequipItems()
        {
            Console.ForegroundColor = foregroundColour;
            referenceCurrentItem();

            if (examItem.equippable == true)
            {
                if (playerStats.weapon.ToLower() == examItem.itemName.ToLower())
                {
                    if (inventory.dictionary.Keys.Count < 20)
                    {
                        if (inventory.dictionary.ContainsKey(examItem.itemName))
                            inventory.dictionary[examItem.itemName] += 1;
                        else
                            inventory.dictionary.Add(examItem.itemName, 1);
                        WriteLineText("You un-equipped the " + UppercaseFirst(examItem.itemName)); //chestarmour phrases etc., + dictionarys
                        Thread.Sleep(1000);
                        playerStats.weapon = "fists";
                        playerStats.weaponElement = "neutral";
                        playerStats.weaponStatName = "beginnings";
                        playerStats.playerWeaponStrength -= examItem.itemStrengthBonus;
                        playerStats.playerWeaponSpeed -= examItem.itemSpeedBonus;
                        playerStats.playerWeaponCharisma -= examItem.itemCharismaBonus;
                        playerStats.playerWeaponHit -= examItem.itemHitGain;
                        playerStats.playerWeaponHP -= examItem.itemHitGain;
                    }
                    else
                    {
                        WriteLineText("You do not have enough space in your inventory");
                    }
                }
                else if (playerStats.shield.ToLower() == examItem.itemName.ToLower())
                {
                    if (inventory.dictionary.Keys.Count < 20)
                    {
                        if (inventory.dictionary.ContainsKey(examItem.itemName))
                            inventory.dictionary[examItem.itemName] += 1;
                        else
                            inventory.dictionary.Add(examItem.itemName, 1);
                        WriteLineText("You un-equipped the " + UppercaseFirst(examItem.itemName)); //chestarmour phrases etc., + dictionarys
                        playerStats.shield = "fists";
                        playerStats.weaponElement = "neutral";
                        playerStats.weaponStatName = "beginnings";
                        playerStats.playerShieldDefense -= examItem.itemDefenseBonus;
                        playerStats.playerShieldSpeed -= examItem.itemSpeedBonus;
                        playerStats.playerShieldCharisma -= examItem.itemCharismaBonus;
                        playerStats.playerShieldHit -= examItem.itemHitGain;
                        playerStats.playerShieldHP -= examItem.itemHitGain;
                    }
                    else
                    {
                        WriteLineText("You do not have enough space in your inventory");
                    }
                }
                else if (playerStats.armour.ToLower() == examItem.itemName.ToLower())
                {
                    if (inventory.dictionary.Keys.Count < 20)
                    {
                        if (inventory.dictionary.ContainsKey(examItem.itemName))
                            inventory.dictionary[examItem.itemName] += 1;
                        else
                            inventory.dictionary.Add(examItem.itemName, 1);
                        WriteLineText("You un-equipped the " + UppercaseFirst(examItem.itemName)); //chestarmour phrases etc., + dictionarys
                        playerStats.armour = "nothing";
                        playerStats.armourElement = "neutral";
                        playerStats.armourStatName = "beginnings";
                        playerStats.playerArmourDef -= examItem.itemDefenseBonus;
                        playerStats.playerArmourSpeed -= examItem.itemSpeedBonus;
                    }
                    else
                    {
                        WriteLineText("You do not have enough space in your inventory");
                    }
                }
            }
        }

        public void UseItem()
        {
            Console.ForegroundColor = foregroundColour;
            //keys
            if (examItem.itemType == "key")
            {
                //do stuff
            }
            else if (examItem.itemType == "healthgain" || examItem.itemType == "mpgain" || examItem.itemType == "antidote" || examItem.itemType == "awakening")
            {
                WriteLineText("For consumable items, please use the correct command ('eat', 'drink', etc.)");
                Thread.Sleep(800);
            }
            else
            {
                WriteLineText("You can't use that right now.");
                Thread.Sleep(800);
            }
            //others
            //if (examItem.itemType == ...
        }

        public void EatDrinkSomething()
        {
            Console.ForegroundColor = foregroundColour;
            if (inventory.dictionary.ContainsKey(userValueItem))
            {
                itemChoice = userValueItem;
                referenceCurrentItem();
                if (examItem.itemType == "healthgain")
                {
                    if (storyCounter >= 2)
                    {
                        WriteLineText("Who will you use the " + examItem.itemName + " on?");
                        Thread.Sleep(800);
                        WriteLineText("1: " + playerStats.name + "\n2: " + meeba.name + "\n3: " + meeba2.name);
                        Thread.Sleep(800);
                        bool validChoice = false;
                        do
                        {
                            Console.Write("> ");
                            string input = Console.ReadLine().ToLower().Trim();
                            if (input.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = input.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    Console.CursorTop -= 1;
                                }
                                input = input.Remove(80);
                            }
                            if (string.IsNullOrEmpty(input) || input != "1" && input != "2" && input != "3")
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            else if (input == "back" || input == "exit")
                            {
                                validChoice = true;
                                break;
                            }
                            else
                            {
                                string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                                var randomMember = random.Next(foodReactions.Length);

                                int inputInt = Convert.ToInt16(input);
                                if (inputInt == 1)
                                {
                                    WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.itemHPGain > 0) //if provides health gain
                                    {
                                        if (playerStats.playerCurrentHP == playerStats.playerMaxHP) //if already at max health
                                        {
                                            WriteLineText("You are already at maximum health");
                                            Thread.Sleep(1000);
                                        }
                                        else if (playerStats.playerCurrentHP < playerStats.playerMaxHP) //if not at max health
                                        {
                                            double healthGainCalc = playerStats.playerMaxHP - playerStats.playerCurrentHP; //hp deficit
                                            WriteLineText("You restored " + (healthGainCalc < examItem.itemHPGain ? healthGainCalc : examItem.itemHPGain) + " HP");
                                            Thread.Sleep(1000);
                                            playerStats.playerCurrentHP += examItem.itemHPGain;
                                            if (playerStats.playerCurrentHP > playerStats.playerMaxHP)
                                                playerStats.playerCurrentHP = playerStats.playerMaxHP;
                                            WriteLineText("You have " + playerStats.playerCurrentHP + " HP");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                                else if (inputInt == 2)
                                {
                                    WriteLineText(UppercaseFirst(meeba.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.itemHPGain > 0)
                                    {
                                        if (meeba.currentHp == meeba.hp)
                                        {
                                            WriteLineText(UppercaseFirst(meeba.name) + " is already at maximum health");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meeba.currentHp < meeba.hp)
                                        {
                                            double healthGainCalc = meeba.hp - meeba.currentHp; //hp deficit
                                            WriteLineText(UppercaseFirst(meeba.name) + " restored " + (healthGainCalc < examItem.itemHPGain ? healthGainCalc : examItem.itemHPGain) + " HP");
                                            Thread.Sleep(1000);
                                            meeba.currentHp += examItem.itemHPGain;
                                            if (meeba.currentHp > meeba.hp)
                                                meeba.currentHp = meeba.hp;
                                            WriteLineText(UppercaseFirst(meeba.name) + " has " + meeba.currentHp + " HP");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                                else if (inputInt == 3)
                                {
                                    WriteLineText(UppercaseFirst(meeba2.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.itemHPGain > 0)
                                    {
                                        if (meeba.currentHp == meeba.hp)
                                        {
                                            WriteLineText(UppercaseFirst(meeba2.name) + " is already at maximum health");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meeba.currentHp < meeba.hp)
                                        {
                                            double healthGainCalc = meeba.hp - meeba.currentHp; //hp deficit
                                            WriteLineText(UppercaseFirst(meeba2.name) + " restored " + (healthGainCalc < examItem.itemHPGain ? healthGainCalc : examItem.itemHPGain) + " HP");
                                            Thread.Sleep(1000);
                                            meeba2.currentHp += examItem.itemHPGain;
                                            if (meeba2.currentHp > meeba.hp)
                                                meeba2.currentHp = meeba.hp;
                                            WriteLineText(UppercaseFirst(meeba2.name) + " has " + meeba2.currentHp + " HP");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                            }
                        } while (validChoice == false);
                    }
                    else
                    {
                        string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                        var randomMember = random.Next(foodReactions.Length);
                        WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                        if (examItem.itemHPGain > 0)
                        {
                            if (playerStats.playerCurrentHP == playerStats.playerMaxHP)
                            {
                                WriteLineText("You are already at maximum health");
                                Thread.Sleep(1000);
                            }
                            else if (playerStats.playerCurrentHP < playerStats.playerMaxHP)
                            {
                                double healthGainCalc = playerStats.playerMaxHP - playerStats.playerCurrentHP; //hp deficit
                                WriteLineText("You restored " + (healthGainCalc < examItem.itemHPGain ? healthGainCalc : examItem.itemHPGain) + " HP");
                                Thread.Sleep(1000);
                                playerStats.playerCurrentHP += examItem.itemHPGain;
                                if (playerStats.playerCurrentHP > playerStats.playerMaxHP)
                                    playerStats.playerCurrentHP = playerStats.playerMaxHP;
                                WriteLineText("You have " + playerStats.playerCurrentHP + " HP");
                                Thread.Sleep(1000);
                            }
                            inventory.dictionary[examItem.itemName] -= 1;
                            if (inventory.dictionary[examItem.itemName] == 0)
                                inventory.dictionary.Remove(examItem.itemName);
                        }
                    }
                }
                else if (examItem.itemType == "mpgain")
                {
                    WriteLineText("Who will you use the " + examItem.itemName + " on?");
                    Thread.Sleep(800);
                    WriteLineText("1: " + meeba.name + "\n2: " + meeba2.name);
                    Thread.Sleep(800);
                    bool validChoice = false;
                    do
                    {
                        Console.Write("> ");
                        string input = Console.ReadLine().ToLower().Trim();
                        if (input.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = input.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            input = input.Remove(80);
                        }
                        if (string.IsNullOrEmpty(input) || input != "1" && input != "2")
                        {
                            Console.CursorTop -= 1;
                            Console.Write(new string(' ', Console.WindowWidth));
                            Console.CursorTop -= 1;
                        }
                        else if (input == "back" || input == "exit")
                        {
                            validChoice = true;
                            break;
                        }
                        else
                        {
                            string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                            var randomMember = random.Next(foodReactions.Length);

                            int inputInt = Convert.ToInt16(input);
                            if (inputInt == 1)
                            {
                                WriteLineText(UppercaseFirst(meeba.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                validChoice = true;
                                if (examItem.itemMPGain > 0)
                                {
                                    if (meeba.currentMP == meeba.MP)
                                    {
                                        WriteLineText(UppercaseFirst(meeba.name) + " already has maximum MP");
                                        Thread.Sleep(1000);
                                    }
                                    else if (meeba.currentHp < meeba.hp)
                                    {
                                        double mpGainCalc = meeba.MP - meeba.currentMP; //hp deficit
                                        WriteLineText(UppercaseFirst(meeba.name) + " restored " + (mpGainCalc < examItem.itemMPGain ? mpGainCalc : examItem.itemMPGain) + " MP");
                                        Thread.Sleep(1000);
                                        meeba.currentMP += examItem.itemMPGain;
                                        if (meeba.currentMP > meeba.MP)
                                            meeba.currentMP = meeba.MP;
                                        WriteLineText(UppercaseFirst(meeba.name) + " has " + meeba.currentMP + " MP");
                                        Thread.Sleep(1000);
                                    }
                                    inventory.dictionary[examItem.itemName] -= 1;
                                    if (inventory.dictionary[examItem.itemName] == 0)
                                        inventory.dictionary.Remove(examItem.itemName);
                                }
                            }
                            else if (inputInt == 2)
                            {
                                WriteLineText(UppercaseFirst(meeba2.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                validChoice = true;
                                if (examItem.itemMPGain > 0)
                                {
                                    if (meeba.currentMP == meeba.MP)
                                    {
                                        WriteLineText(UppercaseFirst(meeba2.name) + " already has maximum MP!");
                                        Thread.Sleep(1000);
                                    }
                                    else if (meeba.currentMP < meeba.MP)
                                    {
                                        double mpGainCalc = meeba.MP - meeba.currentMP; //hp deficit
                                        WriteLineText(UppercaseFirst(meeba2.name) + " restored " + (mpGainCalc < examItem.itemMPGain ? mpGainCalc : examItem.itemMPGain) + " MP");
                                        Thread.Sleep(1000);
                                        meeba2.currentMP += examItem.itemMPGain;
                                        if (meeba2.currentMP > meeba.MP)
                                            meeba2.currentMP = meeba.MP;
                                        WriteLineText(UppercaseFirst(meeba2.name) + " has " + meeba2.currentMP + " MP");
                                        Thread.Sleep(1000);
                                    }
                                    inventory.dictionary[examItem.itemName] -= 1;
                                    if (inventory.dictionary[examItem.itemName] == 0)
                                        inventory.dictionary.Remove(examItem.itemName);
                                }
                            }
                        }
                    } while (validChoice == false);
                }
                else if (examItem.itemType == "antidote")
                {
                    if (storyCounter >= 2)
                    {
                        WriteLineText("Who will you use the " + examItem.itemName + " on?");
                        Thread.Sleep(800);
                        WriteLineText("1: " + playerStats.name + "\n2: " + meeba.name + "\n3: " + meeba2.name);
                        Thread.Sleep(800);
                        bool validChoice = false;
                        do
                        {
                            Console.Write("> ");
                            string input = Console.ReadLine().ToLower().Trim();
                            if (input.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = input.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    Console.CursorTop -= 1;
                                }
                                input = input.Remove(80);
                            }
                            if (string.IsNullOrEmpty(input) || input != "1" && input != "2" && input != "3")
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            else if (input == "back" || input == "exit")
                            {
                                validChoice = true;
                                break;
                            }
                            else
                            {
                                string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                                var randomMember = random.Next(foodReactions.Length);

                                int inputInt = Convert.ToInt16(input);
                                if (inputInt == 1)
                                {
                                    WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.antidote == true) //if antidote
                                    {
                                        if (playerStats.isPoisoned == false && playerStats.isPoisonedTwo == false) //if not poisoned
                                        {
                                            WriteLineText("You do not need an antidote.");
                                            Thread.Sleep(1000);
                                        }
                                        else if (playerStats.isPoisoned == true || playerStats.isPoisonedTwo == true) //if posioned
                                        {
                                            playerStats.isPoisoned = false;
                                            playerStats.isPoisonedTwo = false;
                                            WriteLineText("You recovered from the poison.");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                                else if (inputInt == 2)
                                {
                                    WriteLineText(UppercaseFirst(meeba.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.antidote == true) //if antidote
                                    {
                                        if (meeba.isPoisoned == false && meeba.isPoisonedTwo == false) //if not poisoned
                                        {
                                            WriteLineText(UppercaseFirst(meeba.name) + " does not need an antidote.");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meeba.isPoisoned == true || meeba.isPoisonedTwo == true) //if posioned
                                        {
                                            meeba.isPoisoned = false;
                                            meeba.isPoisonedTwo = false;
                                            WriteLineText(UppercaseFirst(meeba.name) + " recovered from the poison.");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                                else if (inputInt == 3)
                                {
                                    WriteLineText(UppercaseFirst(meeba2.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.antidote == true) //if antidote
                                    {
                                        if (meeba2.isPoisoned == false && meeba2.isPoisonedTwo == false) //if not poisoned
                                        {
                                            WriteLineText(UppercaseFirst(meeba2.name) + " does not need an antidote.");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meeba2.isPoisoned == true || meeba2.isPoisonedTwo == true) //if posioned
                                        {
                                            meeba2.isPoisoned = false;
                                            meeba2.isPoisonedTwo = false;
                                            WriteLineText(UppercaseFirst(meeba2.name) + " recovered from the poison.");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                            }
                        } while (validChoice == false);
                    }
                    else
                    {
                        string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                        var randomMember = random.Next(foodReactions.Length);
                        WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                        if (examItem.antidote == true)
                        {
                            WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                            if (examItem.antidote == true) //if antidote
                            {
                                if (playerStats.isPoisoned == false && playerStats.isPoisonedTwo == false) //if not poisoned
                                {
                                    WriteLineText("You do not need an antidote.");
                                    Thread.Sleep(1000);
                                }
                                else if (playerStats.isPoisoned == true || playerStats.isPoisonedTwo == true) //if posioned
                                {
                                    playerStats.isPoisoned = false;
                                    playerStats.isPoisonedTwo = false;
                                    WriteLineText("You recovered from the poison.");
                                    Thread.Sleep(1000);
                                }
                                inventory.dictionary[examItem.itemName] -= 1;
                                if (inventory.dictionary[examItem.itemName] == 0)
                                    inventory.dictionary.Remove(examItem.itemName);
                            }
                        }
                    }
                }
                else if (examItem.itemType == "awakening")
                {
                    if (storyCounter >= 2)
                    {
                        WriteLineText("Who will you use the " + examItem.itemName + " on?");
                        Thread.Sleep(800);
                        WriteLineText("1: " + playerStats.name + "\n2: " + meeba.name + "\n3: " + meeba2.name);
                        Thread.Sleep(800);
                        bool validChoice = false;
                        do
                        {
                            Console.Write("> ");
                            string input = Console.ReadLine().ToLower().Trim();
                            if (input.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = input.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    Console.CursorTop -= 1;
                                }
                                input = input.Remove(80);
                            }
                            if (string.IsNullOrEmpty(input) || input != "1" && input != "2" && input != "3")
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            else if (input == "back" || input == "exit")
                            {
                                validChoice = true;
                                break;
                            }
                            else
                            {
                                string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                                var randomMember = random.Next(foodReactions.Length);

                                int inputInt = Convert.ToInt16(input);
                                if (inputInt == 1)
                                {
                                    WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.awaken == true) //if awakening
                                    {
                                        if (playerStats.isAsleep == false) //if not asleep
                                        {
                                            WriteLineText("You do not need to be woken.");
                                            Thread.Sleep(1000);
                                        }
                                        else if (playerStats.isAsleep == true) //if posioned
                                        {
                                            playerStats.isAsleep = false;
                                            WriteLineText("You woke up.");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                                else if (inputInt == 2)
                                {
                                    WriteLineText(UppercaseFirst(meeba.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.awaken == true) //if awakening
                                    {
                                        if (meeba.isAsleep == false) //if not asleep
                                        {
                                            WriteLineText(UppercaseFirst(meeba.name) + " does not need to be woken.");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meeba.isAsleep == true) //if posioned
                                        {
                                            meeba.isAsleep = false;
                                            WriteLineText(UppercaseFirst(meeba.name) + " woke up.");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                                else if (inputInt == 3)
                                {
                                    WriteLineText(UppercaseFirst(meeba2.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.awaken == true) //if antidote
                                    {
                                        if (meeba2.isAsleep == false) //if not poisoned
                                        {
                                            WriteLineText(UppercaseFirst(meeba2.name) + " does not need to be woken.");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meeba2.isAsleep == true) //if posioned
                                        {
                                            meeba2.isAsleep = false;
                                            WriteLineText(UppercaseFirst(meeba2.name) + " woke up.");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                            }
                        } while (validChoice == false);
                    }
                    else
                    {
                        string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                        var randomMember = random.Next(foodReactions.Length);
                        WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                        if (examItem.awaken == true) //if awakening
                        {
                            if (playerStats.isAsleep == false) //if not asleep
                            {
                                WriteLineText("You do not need to be woken.");
                                Thread.Sleep(1000);
                            }
                            else if (playerStats.isAsleep == true) //if posioned
                            {
                                playerStats.isAsleep = false;
                                WriteLineText("You woke up.");
                                Thread.Sleep(1000);
                            }
                            inventory.dictionary[examItem.itemName] -= 1;
                            if (inventory.dictionary[examItem.itemName] == 0)
                                inventory.dictionary.Remove(examItem.itemName);
                        }
                    }
                }
                else
                    WriteLineText("You can't eat that!");
            }
            else
                WriteLineText("You do not own that");
            //other than healthgain - stat gain, invisibilty? etc. add all these here - CHANGE
        }

        public void MainMenu()
        {
            Console.ForegroundColor = foregroundColour;
            string otherOptions = @"\beat\b|\buse\b|\bdrink\b|\btake\b|\blook\b";
            string equip = @"\bequip\b";
            string unequip = @"\bunequip\b|\bun-equip\b";
            do
            {
                string menuInput;
                switch (currentMainMenuState)
                {
                    case MainMenuState.MainMenu:
                        Console.Clear();
                        bool storycounterover2 = false;
                        if (storyCounter >= 2)
                            storycounterover2 = true;
                        Console.WriteLine("Menu: \nInventory \nStats \nEquipment" + ((storycounterover2 == true) ? "\nMeeba\n" : " \n") + "Quest Log\nSettings \nHelp \nSave \nExit Menu");
                        Console.Write("> ");
                        menuInput = Console.ReadLine().ToLower().Trim();
                        if (menuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = menuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            menuInput = menuInput.Remove(80);
                        }
                        if (string.IsNullOrEmpty(menuInput))
                            Console.CursorTop -= 1;
                        else if (InvPhrases.Contains(menuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (menuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (menuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (menuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (menuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (menuInput == "quest".ToLower() || menuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (menuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (menuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (menuInput == "exit".ToLower() || menuInput == "exit menu".ToLower())
                        {
                            Console.Clear();
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else if (Regex.IsMatch(menuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = menuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(menuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = menuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(menuInput, otherOptions, RegexOptions.IgnoreCase))
                        {
                            WriteLineText("Please exit the menu first");
                            Thread.Sleep(1000);
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else
                        {
                            WriteLineText("That is not an option");
                            Console.Write("> ");
                            Console.ReadLine();
                        }
                        break;

                    case MainMenuState.Inventory:
                        Console.WriteLine("");
                        AccessInventory();
                        Console.Write("> ");
                        string invMenuInput = Console.ReadLine().ToLower().Trim();
                        if (invMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = invMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            invMenuInput = invMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(invMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (invMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (invMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (invMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (invMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (invMenuInput == "quest".ToLower() || invMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (invMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (invMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(invMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = invMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(invMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = invMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (invMenuInput == "exit".ToLower() || invMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.Stats:
                        Console.WriteLine("");
                        AccessStats();
                        Console.Write("> ");
                        string statsMenuInput = Console.ReadLine().ToLower().Trim();
                        if (statsMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = statsMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            statsMenuInput = statsMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(statsMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (statsMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (statsMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (statsMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (statsMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (statsMenuInput == "quest".ToLower() || statsMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (statsMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (statsMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(statsMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = statsMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(statsMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = statsMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (statsMenuInput == "exit".ToLower() || statsMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.Equipment:
                        Console.WriteLine("");
                        AccessEquipment();
                        Console.Write("> ");
                        string equipMenuInput = Console.ReadLine().ToLower().Trim();
                        if (equipMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = equipMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            equipMenuInput = equipMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(equipMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (equipMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (equipMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (equipMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (equipMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (equipMenuInput == "quest".ToLower() || equipMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (equipMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (equipMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(equipMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = equipMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(equipMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = equipMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (equipMenuInput == "exit".ToLower() || equipMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.Monsters:
                        Console.WriteLine("");
                        AccessMonsters();
                        Console.Write("> ");
                        string monsterMenuInput = Console.ReadLine().ToLower().Trim();
                        if (monsterMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = monsterMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            monsterMenuInput = monsterMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(monsterMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (monsterMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (monsterMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (monsterMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (monsterMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (monsterMenuInput == "quest".ToLower() || monsterMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (monsterMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (monsterMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(monsterMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = monsterMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(monsterMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = monsterMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (monsterMenuInput == "exit".ToLower() || monsterMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.Settings:
                        Console.WriteLine("");
                        AccessTextSpeed();
                        Console.Write("> ");
                        string settingsMenuInput = Console.ReadLine().ToLower().Trim();
                        if (settingsMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = settingsMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            settingsMenuInput = settingsMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(settingsMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (settingsMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (settingsMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (settingsMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (settingsMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (settingsMenuInput == "quest".ToLower() || settingsMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (settingsMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (settingsMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(settingsMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = settingsMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(settingsMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = settingsMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (settingsMenuInput == "exit".ToLower() || settingsMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.QuestLog:
                        Console.WriteLine("");
                        AccessQuestLog();
                        Console.Write("> ");
                        string questMenuInput = Console.ReadLine().ToLower().Trim();
                        if (questMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = questMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            questMenuInput = questMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(questMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (questMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (questMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (questMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (questMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (questMenuInput == "quest".ToLower() || questMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (questMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (questMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(questMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = questMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(questMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = questMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (questMenuInput == "exit".ToLower() || questMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.Help:
                        Console.WriteLine("");
                        AccessHelp();
                        Console.Write("> ");
                        string helpMenuInput = Console.ReadLine().ToLower().Trim();
                        if (helpMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = helpMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            helpMenuInput = helpMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(helpMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (helpMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (helpMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (helpMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (helpMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (helpMenuInput == "quest".ToLower() || helpMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (helpMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (helpMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(helpMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = helpMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(helpMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = helpMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (helpMenuInput == "exit".ToLower() || helpMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.Save:
                        Console.WriteLine("");
                        Save();
                        Console.Write("> ");
                        string saveMenuInput = Console.ReadLine().ToLower().Trim();
                        if (saveMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = saveMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            saveMenuInput = saveMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(saveMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (saveMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (saveMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (saveMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (saveMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (saveMenuInput == "quest".ToLower() || saveMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (saveMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (saveMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(saveMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = saveMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(saveMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = saveMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (saveMenuInput == "exit".ToLower() || saveMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.ExitMenu:
                        break;
                }
            } while (currentMainMenuState != MainMenuState.ExitMenu);
        }

        public void MeebaEvolution()
        {
            ThisBattleMeebas.Clear();
            ThisBattleMeebas.Add(meeba);
            ThisBattleMeebas.Add(meeba2);
            foreach (var item in ThisBattleMeebas)
            {

                if (item.name == meeba.name && currentDNAMeeba.name == meeba.name || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name)
                {
                    if (item.elementType == "Neutral") //can go to F1, P1, E1, A1, W1
                    {
                        if (examItem.itemName == "tinder root" && item.reachedFireTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT1.name;
                            item.elementType = FT1.elementType;
                            item.levelTier = FT1.levelTier;
                            item.attack += FT1.attackBonus;
                            item.defense += FT1.defenseBonus;
                            item.speed += FT1.speedBonus;
                            item.hp += FT1.hpBonus;
                            item.MP = FT1.MP;
                            item.hitRange = FT1.hitRange;
                            item.Moves.Add(FT1.newMove);
                            item.sprite = FT1.sprite;
                        }
                        else if (examItem.itemName == "sprout root" && item.reachedPlantTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT1.name;
                            item.elementType = PT1.elementType;
                            item.levelTier = PT1.levelTier;
                            item.attack += PT1.attackBonus;
                            item.defense += PT1.defenseBonus;
                            item.speed += PT1.speedBonus;
                            item.hp += PT1.hpBonus;
                            item.MP = PT1.MP;
                            item.hitRange = PT1.hitRange;
                            item.Moves.Add(PT1.newMove);
                            item.sprite = PT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = PT1.lifeLeechChance;
                            item.lifeLeechHeal = PT1.lifeLeechHeal;
                        }
                        else if (examItem.itemName == "soil root" && item.reachedEarthTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET1.name;
                            item.elementType = ET1.elementType;
                            item.levelTier = ET1.levelTier;
                            item.attack += ET1.attackBonus;
                            item.defense += ET1.defenseBonus;
                            item.speed += ET1.speedBonus;
                            item.hp += ET1.hpBonus;
                            item.MP = ET1.MP;
                            item.hitRange = ET1.hitRange;
                            item.Moves.Add(ET1.newMove);
                            item.sprite = ET1.sprite;
                        }
                        else if (examItem.itemName == "breeze root" && item.reachedAirTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT1.name;
                            item.elementType = AT1.elementType;
                            item.levelTier = AT1.levelTier;
                            item.attack += AT1.attackBonus;
                            item.defense += AT1.defenseBonus;
                            item.speed += AT1.speedBonus;
                            item.hp += AT1.hpBonus;
                            item.MP = AT1.MP;
                            item.hitRange = AT1.hitRange;
                            item.Moves.Add(AT1.newMove);
                            item.sprite = AT1.sprite;
                        }
                        else if (examItem.itemName == "drop root" && item.reachedWaterTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT1.name;
                            item.elementType = WT1.elementType;
                            item.levelTier = WT1.levelTier;
                            item.attack += WT1.attackBonus;
                            item.defense += WT1.defenseBonus;
                            item.speed += WT1.speedBonus;
                            item.hp += WT1.hpBonus;
                            item.MP = WT1.MP;
                            item.hitRange = WT1.hitRange;
                            item.Moves.Add(WT1.newMove);
                            item.sprite = WT1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "fire" && item.levelTier == 1) //can go to F2, C1, H1
                    {
                        if (examItem.itemName == "smoke root" && item.reachedFireTier2 == false)
                        {
                            item.name = FT2.name;
                            item.elementType = FT2.elementType;
                            item.levelTier = FT2.levelTier;
                            item.attack += FT2.attackBonus;
                            item.defense += FT2.defenseBonus;
                            item.speed += FT2.speedBonus;
                            item.hp += FT2.hpBonus;
                            item.MP = FT2.MP;
                            item.hitRange = FT2.hitRange;
                            item.Moves.Add(FT2.newMove);
                            item.sprite = FT2.sprite;
                        }
                        else if (examItem.itemName == "cinder root" && item.reachedCharcoalTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT1.name;
                            item.elementType = CT1.elementType;
                            item.levelTier = CT1.levelTier;
                            item.attack += CT1.attackBonus;
                            item.defense += CT1.defenseBonus;
                            item.speed += CT1.speedBonus;
                            item.hp += CT1.hpBonus;
                            item.MP = CT1.MP;
                            item.hitRange = CT1.hitRange;
                            item.Moves.Add(CT1.newMove);
                            item.sprite = CT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = CT1.lifeLeechChance;
                            item.lifeLeechHeal = CT1.lifeLeechHeal;
                        }
                        else if (examItem.itemName == "evapo root" && item.reachedHydrothermTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT1.name;
                            item.elementType = HT1.elementType;
                            item.levelTier = HT1.levelTier;
                            item.attack += HT1.attackBonus;
                            item.defense += HT1.defenseBonus;
                            item.speed += HT1.speedBonus;
                            item.hp += HT1.hpBonus;
                            item.MP = HT1.MP;
                            item.hitRange = HT1.hitRange;
                            item.Moves.Add(HT1.newMove);
                            item.sprite = HT1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "plant" && item.levelTier == 1) //can go to P2, C1, M1
                    {
                        if (examItem.itemName == "grass root" && item.reachedPlantTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT2.name;
                            item.elementType = PT2.elementType;
                            item.levelTier = PT2.levelTier;
                            item.attack += PT2.attackBonus;
                            item.defense += PT2.defenseBonus;
                            item.speed += PT2.speedBonus;
                            item.hp += PT2.hpBonus;
                            item.MP = PT2.MP;
                            item.hitRange = PT2.hitRange;
                            item.Moves.Add(PT2.newMove);
                            item.sprite = PT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = PT2.poisonChance;
                        }
                        else if (examItem.itemName == "cinder root" && item.reachedCharcoalTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT1.name;
                            item.elementType = CT1.elementType;
                            item.levelTier = CT1.levelTier;
                            item.attack += CT1.attackBonus;
                            item.defense += CT1.defenseBonus;
                            item.speed += CT1.speedBonus;
                            item.hp += CT1.hpBonus;
                            item.MP = CT1.MP;
                            item.hitRange = CT1.hitRange;
                            item.Moves.Add(CT1.newMove);
                            item.sprite = CT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = CT1.lifeLeechChance;
                            item.lifeLeechHeal = CT1.lifeLeechHeal;
                        }
                        else if (examItem.itemName == "algae root" && item.reachedMossTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT1.name;
                            item.elementType = MT1.elementType;
                            item.levelTier = MT1.levelTier;
                            item.attack += MT1.attackBonus;
                            item.defense += MT1.defenseBonus;
                            item.speed += MT1.speedBonus;
                            item.hp += MT1.hpBonus;
                            item.MP = MT1.MP;
                            item.hitRange = MT1.hitRange;
                            item.Moves.Add(MT1.newMove);
                            item.sprite = MT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = MT1.lifeLeechChance;
                            item.lifeLeechHeal = MT1.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "earth" && item.levelTier == 1) //can go to E2, M1, D1
                    {
                        if (examItem.itemName == "boulder root" && item.reachedEarthTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET2.name;
                            item.elementType = ET2.elementType;
                            item.levelTier = ET2.levelTier;
                            item.attack += ET2.attackBonus;
                            item.defense += ET2.defenseBonus;
                            item.speed += ET2.speedBonus;
                            item.hp += ET2.hpBonus;
                            item.MP = ET2.MP;
                            item.hitRange = ET2.hitRange;
                            item.Moves.Add(ET2.newMove);
                            item.sprite = ET2.sprite;
                        }
                        else if (examItem.itemName == "sand root" && item.reachedDustTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT1.name;
                            item.elementType = DT1.elementType;
                            item.levelTier = DT1.levelTier;
                            item.attack += DT1.attackBonus;
                            item.defense += DT1.defenseBonus;
                            item.speed += DT1.speedBonus;
                            item.hp += DT1.hpBonus;
                            item.MP = DT1.MP;
                            item.hitRange = DT1.hitRange;
                            item.Moves.Add(DT1.newMove);
                            item.sprite = DT1.sprite;
                        }
                        else if (examItem.itemName == "algae root" && item.reachedMossTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT1.name;
                            item.elementType = MT1.elementType;
                            item.levelTier = MT1.levelTier;
                            item.attack += MT1.attackBonus;
                            item.defense += MT1.defenseBonus;
                            item.speed += MT1.speedBonus;
                            item.hp += MT1.hpBonus;
                            item.MP = MT1.MP;
                            item.hitRange = MT1.hitRange;
                            item.Moves.Add(MT1.newMove);
                            item.sprite = MT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = MT1.lifeLeechChance;
                            item.lifeLeechHeal = MT1.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "air" && item.levelTier == 1) //can go to A2, D1, S1
                    {
                        if (examItem.itemName == "wind root" && item.reachedAirTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT2.name;
                            item.elementType = AT2.elementType;
                            item.levelTier = AT2.levelTier;
                            item.attack += AT2.attackBonus;
                            item.defense += AT2.defenseBonus;
                            item.speed += AT2.speedBonus;
                            item.hp += AT2.hpBonus;
                            item.MP = AT2.MP;
                            item.hitRange = AT2.hitRange;
                            item.Moves.Add(AT2.newMove);
                            item.sprite = AT2.sprite;
                        }
                        else if (examItem.itemName == "sand root" && item.reachedDustTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT1.name;
                            item.elementType = DT1.elementType;
                            item.levelTier = DT1.levelTier;
                            item.attack += DT1.attackBonus;
                            item.defense += DT1.defenseBonus;
                            item.speed += DT1.speedBonus;
                            item.hp += DT1.hpBonus;
                            item.MP = DT1.MP;
                            item.hitRange = DT1.hitRange;
                            item.Moves.Add(DT1.newMove);
                            item.sprite = DT1.sprite;
                        }
                        else if (examItem.itemName == "cloud root" && item.reachedStormTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST1.name;
                            item.elementType = ST1.elementType;
                            item.levelTier = ST1.levelTier;
                            item.attack += ST1.attackBonus;
                            item.defense += ST1.defenseBonus;
                            item.speed += ST1.speedBonus;
                            item.hp += ST1.hpBonus;
                            item.MP = ST1.MP;
                            item.hitRange = ST1.hitRange;
                            item.Moves.Add(ST1.newMove);
                            item.sprite = ST1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "water" && item.levelTier == 1) //can go to W2, S1, H1
                    {
                        if (examItem.itemName == "pond root" && item.reachedWaterTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT2.name;
                            item.elementType = WT2.elementType;
                            item.levelTier = WT2.levelTier;
                            item.attack += WT2.attackBonus;
                            item.defense += WT2.defenseBonus;
                            item.speed += WT2.speedBonus;
                            item.hp += WT2.hpBonus;
                            item.MP = WT2.MP;
                            item.hitRange = WT2.hitRange;
                            item.Moves.Add(WT2.newMove);
                            item.sprite = WT2.sprite;
                        }
                        else if (examItem.itemName == "evapo root" && item.reachedHydrothermTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT1.name;
                            item.elementType = HT1.elementType;
                            item.levelTier = HT1.levelTier;
                            item.attack += HT1.attackBonus;
                            item.defense += HT1.defenseBonus;
                            item.speed += HT1.speedBonus;
                            item.hp += HT1.hpBonus;
                            item.MP = HT1.MP;
                            item.hitRange = HT1.hitRange;
                            item.Moves.Add(HT1.newMove);
                            item.sprite = HT1.sprite;
                        }
                        else if (examItem.itemName == "cloud root" && item.reachedStormTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST1.name;
                            item.elementType = ST1.elementType;
                            item.levelTier = ST1.levelTier;
                            item.attack += ST1.attackBonus;
                            item.defense += ST1.defenseBonus;
                            item.speed += ST1.speedBonus;
                            item.hp += ST1.hpBonus;
                            item.MP = ST1.MP;
                            item.hitRange = ST1.hitRange;
                            item.Moves.Add(ST1.newMove);
                            item.sprite = ST1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "charcoal" && item.levelTier == 1) //can go to F1, P1
                    {
                        if (examItem.itemName == "tinder root" && item.reachedFireTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT1.name;
                            item.elementType = FT1.elementType;
                            item.levelTier = FT1.levelTier;
                            item.attack += FT1.attackBonus;
                            item.defense += FT1.defenseBonus;
                            item.speed += FT1.speedBonus;
                            item.hp += FT1.hpBonus;
                            item.MP = FT1.MP;
                            item.hitRange = FT1.hitRange;
                            item.Moves.Add(FT1.newMove);
                            item.sprite = FT1.sprite;
                        }
                        else if (examItem.itemName == "sprout root" && item.reachedPlantTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT1.name;
                            item.elementType = PT1.elementType;
                            item.levelTier = PT1.levelTier;
                            item.attack += PT1.attackBonus;
                            item.defense += PT1.defenseBonus;
                            item.speed += PT1.speedBonus;
                            item.hp += PT1.hpBonus;
                            item.MP = PT1.MP;
                            item.hitRange = PT1.hitRange;
                            item.Moves.Add(PT1.newMove);
                            item.sprite = PT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = PT1.lifeLeechChance;
                            item.lifeLeechHeal = PT1.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "moss" && item.levelTier == 1) //can go to P1, E1
                    {
                        if (examItem.itemName == "soil root" && item.reachedEarthTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET1.name;
                            item.elementType = ET1.elementType;
                            item.levelTier = ET1.levelTier;
                            item.attack += ET1.attackBonus;
                            item.defense += ET1.defenseBonus;
                            item.speed += ET1.speedBonus;
                            item.hp += ET1.hpBonus;
                            item.MP = ET1.MP;
                            item.hitRange = ET1.hitRange;
                            item.Moves.Add(ET1.newMove);
                            item.sprite = ET1.sprite;
                        }
                        else if (examItem.itemName == "sprout root" && item.reachedPlantTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT1.name;
                            item.elementType = PT1.elementType;
                            item.levelTier = PT1.levelTier;
                            item.attack += PT1.attackBonus;
                            item.defense += PT1.defenseBonus;
                            item.speed += PT1.speedBonus;
                            item.hp += PT1.hpBonus;
                            item.MP = PT1.MP;
                            item.hitRange = PT1.hitRange;
                            item.Moves.Add(PT1.newMove);
                            item.sprite = PT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = PT1.lifeLeechChance;
                            item.lifeLeechHeal = PT1.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "dust" && item.levelTier == 1) //can go to A1, E1
                    {
                        if (examItem.itemName == "soil root" && item.reachedEarthTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET1.name;
                            item.elementType = ET1.elementType;
                            item.levelTier = ET1.levelTier;
                            item.attack += ET1.attackBonus;
                            item.defense += ET1.defenseBonus;
                            item.speed += ET1.speedBonus;
                            item.hp += ET1.hpBonus;
                            item.MP = ET1.MP;
                            item.hitRange = ET1.hitRange;
                            item.Moves.Add(ET1.newMove);
                            item.sprite = ET1.sprite;
                        }
                        else if (examItem.itemName == "breeze root" && item.reachedAirTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT1.name;
                            item.elementType = AT1.elementType;
                            item.levelTier = AT1.levelTier;
                            item.attack += AT1.attackBonus;
                            item.defense += AT1.defenseBonus;
                            item.speed += AT1.speedBonus;
                            item.hp += AT1.hpBonus;
                            item.MP = AT1.MP;
                            item.hitRange = AT1.hitRange;
                            item.Moves.Add(AT1.newMove);
                            item.sprite = AT1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "storm" && item.levelTier == 1) //can go to A1, W1
                    {
                        if (examItem.itemName == "drop root" && item.reachedWaterTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT1.name;
                            item.elementType = WT1.elementType;
                            item.levelTier = WT1.levelTier;
                            item.attack += WT1.attackBonus;
                            item.defense += WT1.defenseBonus;
                            item.speed += WT1.speedBonus;
                            item.hp += WT1.hpBonus;
                            item.MP = WT1.MP;
                            item.hitRange = WT1.hitRange;
                            item.Moves.Add(WT1.newMove);
                            item.sprite = WT1.sprite;
                        }
                        else if (examItem.itemName == "breeze root" && item.reachedAirTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT1.name;
                            item.elementType = AT1.elementType;
                            item.levelTier = AT1.levelTier;
                            item.attack += AT1.attackBonus;
                            item.defense += AT1.defenseBonus;
                            item.speed += AT1.speedBonus;
                            item.hp += AT1.hpBonus;
                            item.MP = AT1.MP;
                            item.hitRange = AT1.hitRange;
                            item.Moves.Add(AT1.newMove);
                            item.sprite = AT1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "hydrotherm" && item.levelTier == 1) //can go to F1, W1
                    {
                        if (examItem.itemName == "drop root" && item.reachedWaterTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT1.name;
                            item.elementType = WT1.elementType;
                            item.levelTier = WT1.levelTier;
                            item.attack += WT1.attackBonus;
                            item.defense += WT1.defenseBonus;
                            item.speed += WT1.speedBonus;
                            item.hp += WT1.hpBonus;
                            item.MP = WT1.MP;
                            item.hitRange = WT1.hitRange;
                            item.Moves.Add(WT1.newMove);
                            item.sprite = WT1.sprite;
                        }
                        else if (examItem.itemName == "tinder root" && item.reachedFireTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT1.name;
                            item.elementType = FT1.elementType;
                            item.levelTier = FT1.levelTier;
                            item.attack += FT1.attackBonus;
                            item.defense += FT1.defenseBonus;
                            item.speed += FT1.speedBonus;
                            item.hp += FT1.hpBonus;
                            item.MP = FT1.MP;
                            item.hitRange = FT1.hitRange;
                            item.Moves.Add(FT1.newMove);
                            item.sprite = FT1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "fire" && item.levelTier == 2) //can go to F3, C2, H2
                    {
                        if (examItem.itemName == "flame root" && item.reachedFireTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT3.name;
                            item.elementType = FT3.elementType;
                            item.levelTier = FT3.levelTier;
                            item.attack += FT3.attackBonus;
                            item.defense += FT3.defenseBonus;
                            item.speed += FT3.speedBonus;
                            item.hp += FT3.hpBonus;
                            item.MP = FT3.MP;
                            item.hitRange = FT3.hitRange;
                            item.Moves.Add(FT3.newMove);
                            item.sprite = FT3.sprite;
                        }
                        else if (examItem.itemName == "ember root" && item.reachedCharcoalTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT2.name;
                            item.elementType = CT2.elementType;
                            item.levelTier = CT2.levelTier;
                            item.attack += CT2.attackBonus;
                            item.defense += CT2.defenseBonus;
                            item.speed += CT2.speedBonus;
                            item.hp += CT2.hpBonus;
                            item.MP = CT2.MP;
                            item.hitRange = CT2.hitRange;
                            item.Moves.Add(CT2.newMove);
                            item.sprite = CT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = CT2.poisonChance;
                        }
                        else if (examItem.itemName == "vapour root" && item.reachedHydrothermTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT2.name;
                            item.elementType = HT2.elementType;
                            item.levelTier = HT2.levelTier;
                            item.attack += HT2.attackBonus;
                            item.defense += HT2.defenseBonus;
                            item.speed += HT2.speedBonus;
                            item.hp += HT2.hpBonus;
                            item.MP = HT2.MP;
                            item.hitRange = HT2.hitRange;
                            item.Moves.Add(HT2.newMove);
                            item.sprite = HT2.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "plant" && item.levelTier == 2) //can go to P3, C2, M2
                    {
                        if (examItem.itemName == "vine root" && item.reachedPlantTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT3.name;
                            item.elementType = PT3.elementType;
                            item.levelTier = PT3.levelTier;
                            item.attack += PT3.attackBonus;
                            item.defense += PT3.defenseBonus;
                            item.speed += PT3.speedBonus;
                            item.hp += PT3.hpBonus;
                            item.MP = PT3.MP;
                            item.hitRange = PT3.hitRange;
                            item.Moves.Add(PT3.newMove);
                            item.sprite = PT3.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = PT3.lifeLeechChance;
                            item.lifeLeechHeal = PT3.lifeLeechHeal;
                        }
                        else if (examItem.itemName == "ember root" && item.reachedCharcoalTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT2.name;
                            item.elementType = CT2.elementType;
                            item.levelTier = CT2.levelTier;
                            item.attack += CT2.attackBonus;
                            item.defense += CT2.defenseBonus;
                            item.speed += CT2.speedBonus;
                            item.hp += CT2.hpBonus;
                            item.MP = CT2.MP;
                            item.hitRange = CT2.hitRange;
                            item.Moves.Add(CT2.newMove);
                            item.sprite = CT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = CT2.poisonChance;
                        }
                        else if (examItem.itemName == "lichen root" && item.reachedMossTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT2.name;
                            item.elementType = MT2.elementType;
                            item.levelTier = MT2.levelTier;
                            item.attack += MT2.attackBonus;
                            item.defense += MT2.defenseBonus;
                            item.speed += MT2.speedBonus;
                            item.hp += MT2.hpBonus;
                            item.MP = MT2.MP;
                            item.hitRange = MT2.hitRange;
                            item.Moves.Add(MT2.newMove);
                            item.sprite = MT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = MT2.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "earth" && item.levelTier == 2) //can go to E3, M2, D2
                    {
                        if (examItem.itemName == "terra root" && item.reachedEarthTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET3.name;
                            item.elementType = ET3.elementType;
                            item.levelTier = ET3.levelTier;
                            item.attack += ET3.attackBonus;
                            item.defense += ET3.defenseBonus;
                            item.speed += ET3.speedBonus;
                            item.hp += ET3.hpBonus;
                            item.MP = ET3.MP;
                            item.hitRange = ET3.hitRange;
                            item.Moves.Add(ET3.newMove);
                            item.sprite = ET3.sprite;
                        }
                        else if (examItem.itemName == "loess root" && item.reachedDustTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT2.name;
                            item.elementType = DT2.elementType;
                            item.levelTier = DT2.levelTier;
                            item.attack += DT2.attackBonus;
                            item.defense += DT2.defenseBonus;
                            item.speed += DT2.speedBonus;
                            item.hp += DT2.hpBonus;
                            item.MP = DT2.MP;
                            item.hitRange = DT2.hitRange;
                            item.Moves.Add(DT2.newMove);
                            item.sprite = DT2.sprite;
                        }
                        else if (examItem.itemName == "lichen root" && item.reachedMossTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT2.name;
                            item.elementType = MT2.elementType;
                            item.levelTier = MT2.levelTier;
                            item.attack += MT2.attackBonus;
                            item.defense += MT2.defenseBonus;
                            item.speed += MT2.speedBonus;
                            item.hp += MT2.hpBonus;
                            item.MP = MT2.MP;
                            item.hitRange = MT2.hitRange;
                            item.Moves.Add(MT2.newMove);
                            item.sprite = MT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = MT2.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "air" && item.levelTier == 2) //can go to A3, D2, S2
                    {
                        if (examItem.itemName == "sky root" && item.reachedAirTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT3.name;
                            item.elementType = AT3.elementType;
                            item.levelTier = AT3.levelTier;
                            item.attack += AT3.attackBonus;
                            item.defense += AT3.defenseBonus;
                            item.speed += AT3.speedBonus;
                            item.hp += AT3.hpBonus;
                            item.MP = AT3.MP;
                            item.hitRange = AT3.hitRange;
                            item.Moves.Add(AT3.newMove);
                            item.sprite = AT3.sprite;
                        }
                        else if (examItem.itemName == "loess root" && item.reachedDustTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT2.name;
                            item.elementType = DT2.elementType;
                            item.levelTier = DT2.levelTier;
                            item.attack += DT2.attackBonus;
                            item.defense += DT2.defenseBonus;
                            item.speed += DT2.speedBonus;
                            item.hp += DT2.hpBonus;
                            item.MP = DT2.MP;
                            item.hitRange = DT2.hitRange;
                            item.Moves.Add(DT2.newMove);
                            item.sprite = DT2.sprite;
                        }
                        else if (examItem.itemName == "hail root" && item.reachedStormTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST2.name;
                            item.elementType = ST2.elementType;
                            item.levelTier = ST2.levelTier;
                            item.attack += ST2.attackBonus;
                            item.defense += ST2.defenseBonus;
                            item.speed += ST2.speedBonus;
                            item.hp += ST2.hpBonus;
                            item.MP = ST2.MP;
                            item.hitRange = ST2.hitRange;
                            item.Moves.Add(ST2.newMove);
                            item.sprite = ST2.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "water" && item.levelTier == 2) //can go to W3, S2, H2
                    {
                        if (examItem.itemName == "lake root" && item.reachedWaterTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT3.name;
                            item.elementType = WT3.elementType;
                            item.levelTier = WT3.levelTier;
                            item.attack += WT3.attackBonus;
                            item.defense += WT3.defenseBonus;
                            item.speed += WT3.speedBonus;
                            item.hp += WT3.hpBonus;
                            item.MP = WT3.MP;
                            item.hitRange = WT3.hitRange;
                            item.Moves.Add(WT3.newMove);
                            item.sprite = WT3.sprite;
                        }
                        else if (examItem.itemName == "vapour root" && item.reachedHydrothermTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT2.name;
                            item.elementType = HT2.elementType;
                            item.levelTier = HT2.levelTier;
                            item.attack += HT2.attackBonus;
                            item.defense += HT2.defenseBonus;
                            item.speed += HT2.speedBonus;
                            item.hp += HT2.hpBonus;
                            item.MP = HT2.MP;
                            item.hitRange = HT2.hitRange;
                            item.Moves.Add(HT2.newMove);
                            item.sprite = HT2.sprite;
                        }
                        else if (examItem.itemName == "hail root" && item.reachedStormTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST2.name;
                            item.elementType = ST2.elementType;
                            item.levelTier = ST2.levelTier;
                            item.attack += ST2.attackBonus;
                            item.defense += ST2.defenseBonus;
                            item.speed += ST2.speedBonus;
                            item.hp += ST2.hpBonus;
                            item.MP = ST2.MP;
                            item.hitRange = ST2.hitRange;
                            item.Moves.Add(ST2.newMove);
                            item.sprite = ST2.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "charcoal" && item.levelTier == 2) //can go to F2, P2
                    {
                        if (examItem.itemName == "smoke root" && item.reachedFireTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT2.name;
                            item.elementType = FT2.elementType;
                            item.levelTier = FT2.levelTier;
                            item.attack += FT2.attackBonus;
                            item.defense += FT2.defenseBonus;
                            item.speed += FT2.speedBonus;
                            item.hp += FT2.hpBonus;
                            item.MP = FT2.MP;
                            item.hitRange = FT2.hitRange;
                            item.Moves.Add(FT2.newMove);
                            item.sprite = FT2.sprite;
                        }
                        else if (examItem.itemName == "grass root" && item.reachedPlantTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT2.name;
                            item.elementType = PT2.elementType;
                            item.levelTier = PT2.levelTier;
                            item.attack += PT2.attackBonus;
                            item.defense += PT2.defenseBonus;
                            item.speed += PT2.speedBonus;
                            item.hp += PT2.hpBonus;
                            item.MP = PT2.MP;
                            item.hitRange = PT2.hitRange;
                            item.Moves.Add(PT2.newMove);
                            item.sprite = PT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = PT2.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "moss" && item.levelTier == 2) //can go to P2, E2
                    {
                        if (examItem.itemName == "boulder root" && item.reachedEarthTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET2.name;
                            item.elementType = ET2.elementType;
                            item.levelTier = ET2.levelTier;
                            item.attack += ET2.attackBonus;
                            item.defense += ET2.defenseBonus;
                            item.speed += ET2.speedBonus;
                            item.hp += ET2.hpBonus;
                            item.MP = ET2.MP;
                            item.hitRange = ET2.hitRange;
                            item.Moves.Add(ET2.newMove);
                            item.sprite = ET2.sprite;
                        }
                        else if (examItem.itemName == "grass root" && item.reachedPlantTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT2.name;
                            item.elementType = PT2.elementType;
                            item.levelTier = PT2.levelTier;
                            item.attack += PT2.attackBonus;
                            item.defense += PT2.defenseBonus;
                            item.speed += PT2.speedBonus;
                            item.hp += PT2.hpBonus;
                            item.MP = PT2.MP;
                            item.hitRange = PT2.hitRange;
                            item.Moves.Add(PT2.newMove);
                            item.sprite = PT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = PT2.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "dust" && item.levelTier == 2) //can go to A2, E2
                    {
                        if (examItem.itemName == "boulder root" && item.reachedEarthTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET2.name;
                            item.elementType = ET2.elementType;
                            item.levelTier = ET2.levelTier;
                            item.attack += ET2.attackBonus;
                            item.defense += ET2.defenseBonus;
                            item.speed += ET2.speedBonus;
                            item.hp += ET2.hpBonus;
                            item.MP = ET2.MP;
                            item.hitRange = ET2.hitRange;
                            item.Moves.Add(ET2.newMove);
                            item.sprite = ET2.sprite;
                        }
                        else if (examItem.itemName == "wind root" && item.reachedAirTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT2.name;
                            item.elementType = AT2.elementType;
                            item.levelTier = AT2.levelTier;
                            item.attack += AT2.attackBonus;
                            item.defense += AT2.defenseBonus;
                            item.speed += AT2.speedBonus;
                            item.hp += AT2.hpBonus;
                            item.MP = AT2.MP;
                            item.hitRange = AT2.hitRange;
                            item.Moves.Add(AT2.newMove);
                            item.sprite = AT2.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "storm" && item.levelTier == 2) //can go to A2, W2
                    {
                        if (examItem.itemName == "pond root" && item.reachedWaterTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT2.name;
                            item.elementType = WT2.elementType;
                            item.levelTier = WT2.levelTier;
                            item.attack += WT2.attackBonus;
                            item.defense += WT2.defenseBonus;
                            item.speed += WT2.speedBonus;
                            item.hp += WT2.hpBonus;
                            item.MP = WT2.MP;
                            item.hitRange = WT2.hitRange;
                            item.Moves.Add(WT2.newMove);
                            item.sprite = WT2.sprite;
                        }
                        else if (examItem.itemName == "wind root" && item.reachedAirTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT2.name;
                            item.elementType = AT2.elementType;
                            item.levelTier = AT2.levelTier;
                            item.attack += AT2.attackBonus;
                            item.defense += AT2.defenseBonus;
                            item.speed += AT2.speedBonus;
                            item.hp += AT2.hpBonus;
                            item.MP = AT2.MP;
                            item.hitRange = AT2.hitRange;
                            item.Moves.Add(AT2.newMove);
                            item.sprite = AT2.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "hydrotherm" && item.levelTier == 2) //can go to F2, W2
                    {
                        if (examItem.itemName == "pond root" && item.reachedWaterTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT2.name;
                            item.elementType = WT2.elementType;
                            item.levelTier = WT2.levelTier;
                            item.attack += WT2.attackBonus;
                            item.defense += WT2.defenseBonus;
                            item.speed += WT2.speedBonus;
                            item.hp += WT2.hpBonus;
                            item.MP = WT2.MP;
                            item.hitRange = WT2.hitRange;
                            item.Moves.Add(WT2.newMove);
                            item.sprite = WT2.sprite;
                        }
                        else if (examItem.itemName == "smoke root" && item.reachedFireTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT2.name;
                            item.elementType = FT2.elementType;
                            item.levelTier = FT2.levelTier;
                            item.attack += FT2.attackBonus;
                            item.defense += FT2.defenseBonus;
                            item.speed += FT2.speedBonus;
                            item.hp += FT2.hpBonus;
                            item.MP = FT2.MP;
                            item.hitRange = FT2.hitRange;
                            item.Moves.Add(FT2.newMove);
                            item.sprite = FT2.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "fire" && item.levelTier == 3) //can go to F4, C3, H3
                    {
                        if (examItem.itemName == "inferno root" && item.reachedFireTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT4.name;
                            item.elementType = FT4.elementType;
                            item.levelTier = FT4.levelTier;
                            item.attack += FT4.attackBonus;
                            item.defense += FT4.defenseBonus;
                            item.speed += FT4.speedBonus;
                            item.hp += FT4.hpBonus;
                            item.MP = FT4.MP;
                            item.hitRange = FT4.hitRange;
                            item.Moves.Add(FT4.newMove);
                            item.sprite = FT4.sprite;
                        }
                        else if (examItem.itemName == "charred root" && item.reachedCharcoalTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT3.name;
                            item.elementType = CT3.elementType;
                            item.levelTier = CT3.levelTier;
                            item.attack += CT3.attackBonus;
                            item.defense += CT3.defenseBonus;
                            item.speed += CT3.speedBonus;
                            item.hp += CT3.hpBonus;
                            item.MP = CT3.MP;
                            item.hitRange = CT3.hitRange;
                            item.Moves.Add(CT3.newMove);
                            item.sprite = CT3.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = CT3.lifeLeechChance;
                            item.lifeLeechHeal = CT3.lifeLeechHeal;
                        }
                        else if (examItem.itemName == "vent root" && item.reachedHydrothermTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT3.name;
                            item.elementType = HT3.elementType;
                            item.levelTier = HT3.levelTier;
                            item.attack += HT3.attackBonus;
                            item.defense += HT3.defenseBonus;
                            item.speed += HT3.speedBonus;
                            item.hp += HT3.hpBonus;
                            item.MP = HT3.MP;
                            item.hitRange = HT3.hitRange;
                            item.Moves.Add(HT3.newMove);
                            item.sprite = HT3.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "plant" && item.levelTier == 3) //can go to P4, C3, M3
                    {
                        if (examItem.itemName == "forest root" && item.reachedPlantTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT4.name;
                            item.elementType = PT4.elementType;
                            item.levelTier = PT4.levelTier;
                            item.attack += PT4.attackBonus;
                            item.defense += PT4.defenseBonus;
                            item.speed += PT4.speedBonus;
                            item.hp += PT4.hpBonus;
                            item.MP = PT4.MP;
                            item.hitRange = PT4.hitRange;
                            item.Moves.Add(PT4.newMove);
                            item.sprite = PT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = PT4.poisonChance;
                        }
                        else if (examItem.itemName == "charred root" && item.reachedCharcoalTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT3.name;
                            item.elementType = CT3.elementType;
                            item.levelTier = CT3.levelTier;
                            item.attack += CT3.attackBonus;
                            item.defense += CT3.defenseBonus;
                            item.speed += CT3.speedBonus;
                            item.hp += CT3.hpBonus;
                            item.MP = CT3.MP;
                            item.hitRange = CT3.hitRange;
                            item.Moves.Add(CT3.newMove);
                            item.sprite = CT3.sprite;
                        }
                        else if (examItem.itemName == "bog root" && item.reachedMossTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT3.name;
                            item.elementType = MT3.elementType;
                            item.levelTier = MT3.levelTier;
                            item.attack += MT3.attackBonus;
                            item.defense += MT3.defenseBonus;
                            item.speed += MT3.speedBonus;
                            item.hp += MT3.hpBonus;
                            item.MP = MT3.MP;
                            item.hitRange = MT3.hitRange;
                            item.Moves.Add(MT3.newMove);
                            item.sprite = MT3.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = MT3.lifeLeechChance;
                            item.lifeLeechHeal = MT3.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "earth" && item.levelTier == 3) //can go to E4, M3, D3
                    {
                        if (examItem.itemName == "mount root" && item.reachedEarthTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET4.name;
                            item.elementType = ET4.elementType;
                            item.levelTier = ET4.levelTier;
                            item.attack += ET4.attackBonus;
                            item.defense += ET4.defenseBonus;
                            item.speed += ET4.speedBonus;
                            item.hp += ET4.hpBonus;
                            item.MP = ET4.MP;
                            item.hitRange = ET4.hitRange;
                            item.Moves.Add(ET4.newMove);
                            item.sprite = ET4.sprite;
                        }
                        else if (examItem.itemName == "dune root" && item.reachedDustTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT3.name;
                            item.elementType = DT3.elementType;
                            item.levelTier = DT3.levelTier;
                            item.attack += DT3.attackBonus;
                            item.defense += DT3.defenseBonus;
                            item.speed += DT3.speedBonus;
                            item.hp += DT3.hpBonus;
                            item.MP = DT3.MP;
                            item.hitRange = DT3.hitRange;
                            item.Moves.Add(DT3.newMove);
                            item.sprite = DT3.sprite;
                        }
                        else if (examItem.itemName == "bog root" && item.reachedMossTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT3.name;
                            item.elementType = MT3.elementType;
                            item.levelTier = MT3.levelTier;
                            item.attack += MT3.attackBonus;
                            item.defense += MT3.defenseBonus;
                            item.speed += MT3.speedBonus;
                            item.hp += MT3.hpBonus;
                            item.MP = MT3.MP;
                            item.hitRange = MT3.hitRange;
                            item.Moves.Add(MT3.newMove);
                            item.sprite = MT3.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = MT3.lifeLeechChance;
                            item.lifeLeechHeal = MT3.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "air" && item.levelTier == 3) //can go to A4, D3, S3
                    {
                        if (examItem.itemName == "atmos root" && item.reachedAirTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT4.name;
                            item.elementType = AT4.elementType;
                            item.levelTier = AT4.levelTier;
                            item.attack += AT4.attackBonus;
                            item.defense += AT4.defenseBonus;
                            item.speed += AT4.speedBonus;
                            item.hp += AT4.hpBonus;
                            item.MP = AT4.MP;
                            item.hitRange = AT4.hitRange;
                            item.Moves.Add(AT4.newMove);
                            item.sprite = AT4.sprite;
                        }
                        else if (examItem.itemName == "dune root" && item.reachedDustTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT3.name;
                            item.elementType = DT3.elementType;
                            item.levelTier = DT3.levelTier;
                            item.attack += DT3.attackBonus;
                            item.defense += DT3.defenseBonus;
                            item.speed += DT3.speedBonus;
                            item.hp += DT3.hpBonus;
                            item.MP = DT3.MP;
                            item.hitRange = DT3.hitRange;
                            item.Moves.Add(DT3.newMove);
                            item.sprite = DT3.sprite;
                        }
                        else if (examItem.itemName == "thunder root" && item.reachedStormTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST3.name;
                            item.elementType = ST3.elementType;
                            item.levelTier = ST3.levelTier;
                            item.attack += ST3.attackBonus;
                            item.defense += ST3.defenseBonus;
                            item.speed += ST3.speedBonus;
                            item.hp += ST3.hpBonus;
                            item.MP = ST3.MP;
                            item.hitRange = ST3.hitRange;
                            item.Moves.Add(ST3.newMove);
                            item.sprite = ST3.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "water" && item.levelTier == 3) //can go to W4, S3, H3
                    {
                        if (examItem.itemName == "ocean root" && item.reachedWaterTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT4.name;
                            item.elementType = WT4.elementType;
                            item.levelTier = WT4.levelTier;
                            item.attack += WT4.attackBonus;
                            item.defense += WT4.defenseBonus;
                            item.speed += WT4.speedBonus;
                            item.hp += WT4.hpBonus;
                            item.MP = WT4.MP;
                            item.hitRange = WT4.hitRange;
                            item.Moves.Add(WT4.newMove);
                            item.sprite = WT4.sprite;
                        }
                        else if (examItem.itemName == "vent root" && item.reachedHydrothermTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT3.name;
                            item.elementType = HT3.elementType;
                            item.levelTier = HT3.levelTier;
                            item.attack += HT3.attackBonus;
                            item.defense += HT3.defenseBonus;
                            item.speed += HT3.speedBonus;
                            item.hp += HT3.hpBonus;
                            item.MP = HT3.MP;
                            item.hitRange = HT3.hitRange;
                            item.Moves.Add(HT3.newMove);
                            item.sprite = HT3.sprite;
                        }
                        else if (examItem.itemName == "thunder root" && item.reachedStormTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST3.name;
                            item.elementType = ST3.elementType;
                            item.levelTier = ST3.levelTier;
                            item.attack += ST3.attackBonus;
                            item.defense += ST3.defenseBonus;
                            item.speed += ST3.speedBonus;
                            item.hp += ST3.hpBonus;
                            item.MP = ST3.MP;
                            item.hitRange = ST3.hitRange;
                            item.Moves.Add(ST3.newMove);
                            item.sprite = ST3.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "charcoal" && item.levelTier == 3) //can go to F3, P3
                    {
                        if (examItem.itemName == "flame root" && item.reachedFireTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT3.name;
                            item.elementType = FT3.elementType;
                            item.levelTier = FT3.levelTier;
                            item.attack += FT3.attackBonus;
                            item.defense += FT3.defenseBonus;
                            item.speed += FT3.speedBonus;
                            item.hp += FT3.hpBonus;
                            item.MP = FT3.MP;
                            item.hitRange = FT3.hitRange;
                            item.Moves.Add(FT3.newMove);
                            item.sprite = FT3.sprite;
                        }
                        else if (examItem.itemName == "vine root" && item.reachedPlantTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT3.name;
                            item.elementType = PT3.elementType;
                            item.levelTier = PT3.levelTier;
                            item.attack += PT3.attackBonus;
                            item.defense += PT3.defenseBonus;
                            item.speed += PT3.speedBonus;
                            item.hp += PT3.hpBonus;
                            item.MP = PT3.MP;
                            item.hitRange = PT3.hitRange;
                            item.Moves.Add(PT3.newMove);
                            item.sprite = PT3.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = PT3.lifeLeechChance;
                            item.lifeLeechHeal = PT3.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "moss" && item.levelTier == 3) //can go to P3, E3
                    {
                        if (examItem.itemName == "terra root" && item.reachedEarthTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET3.name;
                            item.elementType = ET3.elementType;
                            item.levelTier = ET3.levelTier;
                            item.attack += ET3.attackBonus;
                            item.defense += ET3.defenseBonus;
                            item.speed += ET3.speedBonus;
                            item.hp += ET3.hpBonus;
                            item.MP = ET3.MP;
                            item.hitRange = ET3.hitRange;
                            item.Moves.Add(ET3.newMove);
                            item.sprite = ET3.sprite;
                        }
                        else if (examItem.itemName == "vine root" && item.reachedPlantTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT3.name;
                            item.elementType = PT3.elementType;
                            item.levelTier = PT3.levelTier;
                            item.attack += PT3.attackBonus;
                            item.defense += PT3.defenseBonus;
                            item.speed += PT3.speedBonus;
                            item.hp += PT3.hpBonus;
                            item.MP = PT3.MP;
                            item.hitRange = PT3.hitRange;
                            item.Moves.Add(PT3.newMove);
                            item.sprite = PT3.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = PT3.lifeLeechChance;
                            item.lifeLeechHeal = PT3.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "dust" && item.levelTier == 3) //can go to A3, E3
                    {
                        if (examItem.itemName == "terra root" && item.reachedEarthTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET3.name;
                            item.elementType = ET3.elementType;
                            item.levelTier = ET3.levelTier;
                            item.attack += ET3.attackBonus;
                            item.defense += ET3.defenseBonus;
                            item.speed += ET3.speedBonus;
                            item.hp += ET3.hpBonus;
                            item.MP = ET3.MP;
                            item.hitRange = ET3.hitRange;
                            item.Moves.Add(ET3.newMove);
                            item.sprite = ET3.sprite;
                        }
                        else if (examItem.itemName == "sky root" && item.reachedAirTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT3.name;
                            item.elementType = AT3.elementType;
                            item.levelTier = AT3.levelTier;
                            item.attack += AT3.attackBonus;
                            item.defense += AT3.defenseBonus;
                            item.speed += AT3.speedBonus;
                            item.hp += AT3.hpBonus;
                            item.MP = AT3.MP;
                            item.hitRange = AT3.hitRange;
                            item.Moves.Add(AT3.newMove);
                            item.sprite = AT3.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "storm" && item.levelTier == 3) //can go to A3, W3
                    {
                        if (examItem.itemName == "lake root" && item.reachedWaterTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT3.name;
                            item.elementType = WT3.elementType;
                            item.levelTier = WT3.levelTier;
                            item.attack += WT3.attackBonus;
                            item.defense += WT3.defenseBonus;
                            item.speed += WT3.speedBonus;
                            item.hp += WT3.hpBonus;
                            item.MP = WT3.MP;
                            item.hitRange = WT3.hitRange;
                            item.Moves.Add(WT3.newMove);
                            item.sprite = WT3.sprite;
                        }
                        else if (examItem.itemName == "sky root" && item.reachedAirTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT3.name;
                            item.elementType = AT3.elementType;
                            item.levelTier = AT3.levelTier;
                            item.attack += AT3.attackBonus;
                            item.defense += AT3.defenseBonus;
                            item.speed += AT3.speedBonus;
                            item.hp += AT3.hpBonus;
                            item.MP = AT3.MP;
                            item.hitRange = AT3.hitRange;
                            item.Moves.Add(AT3.newMove);
                            item.sprite = AT3.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "hydrotherm" && item.levelTier == 3) //can go to F3, W3
                    {
                        if (examItem.itemName == "lake root" && item.reachedWaterTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT3.name;
                            item.elementType = WT3.elementType;
                            item.levelTier = WT3.levelTier;
                            item.attack += WT3.attackBonus;
                            item.defense += WT3.defenseBonus;
                            item.speed += WT3.speedBonus;
                            item.hp += WT3.hpBonus;
                            item.MP = WT3.MP;
                            item.hitRange = WT3.hitRange;
                            item.Moves.Add(WT3.newMove);
                            item.sprite = WT3.sprite;
                        }
                        else if (examItem.itemName == "flame root" && item.reachedFireTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT3.name;
                            item.elementType = FT3.elementType;
                            item.levelTier = FT3.levelTier;
                            item.attack += FT3.attackBonus;
                            item.defense += FT3.defenseBonus;
                            item.speed += FT3.speedBonus;
                            item.hp += FT3.hpBonus;
                            item.MP = FT3.MP;
                            item.hitRange = FT3.hitRange;
                            item.Moves.Add(FT3.newMove);
                            item.sprite = FT3.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "fire" && item.levelTier == 4) //can go to C4, H4
                    {
                        if (examItem.itemName == "ash root" && item.reachedCharcoalTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT4.name;
                            item.elementType = CT4.elementType;
                            item.levelTier = CT4.levelTier;
                            item.attack += CT4.attackBonus;
                            item.defense += CT4.defenseBonus;
                            item.speed += CT4.speedBonus;
                            item.hp += CT4.hpBonus;
                            item.MP = CT4.MP;
                            item.hitRange = CT4.hitRange;
                            item.Moves.Add(CT4.newMove);
                            item.sprite = CT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = CT4.poisonChance;
                        }
                        else if (examItem.itemName == "geyser root" && item.reachedHydrothermTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT4.name;
                            item.elementType = HT4.elementType;
                            item.levelTier = HT4.levelTier;
                            item.attack += HT4.attackBonus;
                            item.defense += HT4.defenseBonus;
                            item.speed += HT4.speedBonus;
                            item.hp += HT4.hpBonus;
                            item.MP = HT4.MP;
                            item.hitRange = HT4.hitRange;
                            item.Moves.Add(HT4.newMove);
                            item.sprite = HT4.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "plant" && item.levelTier == 4) //can go to C4, M4
                    {
                        if (examItem.itemName == "ash root" && item.reachedCharcoalTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT4.name;
                            item.elementType = CT4.elementType;
                            item.levelTier = CT4.levelTier;
                            item.attack += CT4.attackBonus;
                            item.defense += CT4.defenseBonus;
                            item.speed += CT4.speedBonus;
                            item.hp += CT4.hpBonus;
                            item.MP = CT4.MP;
                            item.hitRange = CT4.hitRange;
                            item.Moves.Add(CT4.newMove);
                            item.sprite = CT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = CT4.poisonChance;
                        }
                        else if (examItem.itemName == "swamp root" && item.reachedMossTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT4.name;
                            item.elementType = MT4.elementType;
                            item.levelTier = MT4.levelTier;
                            item.attack += MT4.attackBonus;
                            item.defense += MT4.defenseBonus;
                            item.speed += MT4.speedBonus;
                            item.hp += MT4.hpBonus;
                            item.MP = MT4.MP;
                            item.hitRange = MT4.hitRange;
                            item.Moves.Add(MT4.newMove);
                            item.sprite = MT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = MT4.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "earth" && item.levelTier == 4) //can go to M4, D4
                    {
                        if (examItem.itemName == "desert root" && item.reachedDustTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT4.name;
                            item.elementType = DT4.elementType;
                            item.levelTier = DT4.levelTier;
                            item.attack += DT4.attackBonus;
                            item.defense += DT4.defenseBonus;
                            item.speed += DT4.speedBonus;
                            item.hp += DT4.hpBonus;
                            item.MP = DT4.MP;
                            item.hitRange = DT4.hitRange;
                            item.Moves.Add(DT4.newMove);
                            item.sprite = DT4.sprite;
                        }
                        else if (examItem.itemName == "swamp root" && item.reachedMossTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT4.name;
                            item.elementType = MT4.elementType;
                            item.levelTier = MT4.levelTier;
                            item.attack += MT4.attackBonus;
                            item.defense += MT4.defenseBonus;
                            item.speed += MT4.speedBonus;
                            item.hp += MT4.hpBonus;
                            item.MP = MT4.MP;
                            item.hitRange = MT4.hitRange;
                            item.Moves.Add(MT4.newMove);
                            item.sprite = MT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = MT4.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "air" && item.levelTier == 4) //can go to D4, S4
                    {
                        if (examItem.itemName == "desert root" && item.reachedDustTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT4.name;
                            item.elementType = DT4.elementType;
                            item.levelTier = DT4.levelTier;
                            item.attack += DT4.attackBonus;
                            item.defense += DT4.defenseBonus;
                            item.speed += DT4.speedBonus;
                            item.hp += DT4.hpBonus;
                            item.MP = DT4.MP;
                            item.hitRange = DT4.hitRange;
                            item.Moves.Add(DT4.newMove);
                            item.sprite = DT4.sprite;
                        }
                        else if (examItem.itemName == "lightning root" && item.reachedStormTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST4.name;
                            item.elementType = ST4.elementType;
                            item.levelTier = ST4.levelTier;
                            item.attack += ST4.attackBonus;
                            item.defense += ST4.defenseBonus;
                            item.speed += ST4.speedBonus;
                            item.hp += ST4.hpBonus;
                            item.MP = ST4.MP;
                            item.hitRange = ST4.hitRange;
                            item.Moves.Add(ST4.newMove);
                            item.sprite = ST4.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "water" && item.levelTier == 4) //can go to S4, H4
                    {
                        if (examItem.itemName == "geyser root" && item.reachedHydrothermTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT4.name;
                            item.elementType = HT4.elementType;
                            item.levelTier = HT4.levelTier;
                            item.attack += HT4.attackBonus;
                            item.defense += HT4.defenseBonus;
                            item.speed += HT4.speedBonus;
                            item.hp += HT4.hpBonus;
                            item.MP = HT4.MP;
                            item.hitRange = HT4.hitRange;
                            item.Moves.Add(HT4.newMove);
                            item.sprite = HT4.sprite;
                        }
                        else if (examItem.itemName == "lightning root" && item.reachedStormTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST4.name;
                            item.elementType = ST4.elementType;
                            item.levelTier = ST4.levelTier;
                            item.attack += ST4.attackBonus;
                            item.defense += ST4.defenseBonus;
                            item.speed += ST4.speedBonus;
                            item.hp += ST4.hpBonus;
                            item.MP = ST4.MP;
                            item.hitRange = ST4.hitRange;
                            item.Moves.Add(ST4.newMove);
                            item.sprite = ST4.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "charcoal" && item.levelTier == 4) //can go to F4, P4
                    {
                        if (examItem.itemName == "inferno root" && item.reachedFireTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT4.name;
                            item.elementType = FT4.elementType;
                            item.levelTier = FT4.levelTier;
                            item.attack += FT4.attackBonus;
                            item.defense += FT4.defenseBonus;
                            item.speed += FT4.speedBonus;
                            item.hp += FT4.hpBonus;
                            item.MP = FT4.MP;
                            item.hitRange = FT4.hitRange;
                            item.Moves.Add(FT4.newMove);
                            item.sprite = FT4.sprite;
                        }
                        else if (examItem.itemName == "forest root" && item.reachedPlantTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT4.name;
                            item.elementType = PT4.elementType;
                            item.levelTier = PT4.levelTier;
                            item.attack += PT4.attackBonus;
                            item.defense += PT4.defenseBonus;
                            item.speed += PT4.speedBonus;
                            item.hp += PT4.hpBonus;
                            item.MP = PT4.MP;
                            item.hitRange = PT4.hitRange;
                            item.Moves.Add(PT4.newMove);
                            item.sprite = PT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = PT4.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "moss" && item.levelTier == 4) //can go to P4, E4
                    {
                        if (examItem.itemName == "mount root" && item.reachedEarthTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET4.name;
                            item.elementType = ET4.elementType;
                            item.levelTier = ET4.levelTier;
                            item.attack += ET4.attackBonus;
                            item.defense += ET4.defenseBonus;
                            item.speed += ET4.speedBonus;
                            item.hp += ET4.hpBonus;
                            item.MP = ET4.MP;
                            item.hitRange = ET4.hitRange;
                            item.Moves.Add(ET4.newMove);
                            item.sprite = ET4.sprite;
                        }
                        else if (examItem.itemName == "forest root" && item.reachedPlantTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT4.name;
                            item.elementType = PT4.elementType;
                            item.levelTier = PT4.levelTier;
                            item.attack += PT4.attackBonus;
                            item.defense += PT4.defenseBonus;
                            item.speed += PT4.speedBonus;
                            item.hp += PT4.hpBonus;
                            item.MP = PT4.MP;
                            item.hitRange = PT4.hitRange;
                            item.Moves.Add(PT4.newMove);
                            item.sprite = PT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = PT4.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "dust" && item.levelTier == 4) //can go to A4, E4
                    {
                        if (examItem.itemName == "mount root" && item.reachedEarthTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET4.name;
                            item.elementType = ET4.elementType;
                            item.levelTier = ET4.levelTier;
                            item.attack += ET4.attackBonus;
                            item.defense += ET4.defenseBonus;
                            item.speed += ET4.speedBonus;
                            item.hp += ET4.hpBonus;
                            item.MP = ET4.MP;
                            item.hitRange = ET4.hitRange;
                            item.Moves.Add(ET4.newMove);
                            item.sprite = ET4.sprite;
                        }
                        else if (examItem.itemName == "atmos root" && item.reachedAirTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT4.name;
                            item.elementType = AT4.elementType;
                            item.levelTier = AT4.levelTier;
                            item.attack += AT4.attackBonus;
                            item.defense += AT4.defenseBonus;
                            item.speed += AT4.speedBonus;
                            item.hp += AT4.hpBonus;
                            item.MP = AT4.MP;
                            item.hitRange = AT4.hitRange;
                            item.Moves.Add(AT4.newMove);
                            item.sprite = AT4.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "storm" && item.levelTier == 4) //can go to A4, W4
                    {
                        if (examItem.itemName == "ocean root" && item.reachedWaterTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT4.name;
                            item.elementType = WT4.elementType;
                            item.levelTier = WT4.levelTier;
                            item.attack += WT4.attackBonus;
                            item.defense += WT4.defenseBonus;
                            item.speed += WT4.speedBonus;
                            item.hp += WT4.hpBonus;
                            item.MP = WT4.MP;
                            item.hitRange = WT4.hitRange;
                            item.Moves.Add(WT4.newMove);
                            item.sprite = WT4.sprite;
                        }
                        else if (examItem.itemName == "atmos root" && item.reachedAirTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT4.name;
                            item.elementType = AT4.elementType;
                            item.levelTier = AT4.levelTier;
                            item.attack += AT4.attackBonus;
                            item.defense += AT4.defenseBonus;
                            item.speed += AT4.speedBonus;
                            item.hp += AT4.hpBonus;
                            item.MP = AT4.MP;
                            item.hitRange = AT4.hitRange;
                            item.Moves.Add(AT4.newMove);
                            item.sprite = AT4.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "hydrotherm" && item.levelTier == 4) //can go to F4, W4
                    {
                        if (examItem.itemName == "ocean root" && item.reachedWaterTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT4.name;
                            item.elementType = WT4.elementType;
                            item.levelTier = WT4.levelTier;
                            item.attack += WT4.attackBonus;
                            item.defense += WT4.defenseBonus;
                            item.speed += WT4.speedBonus;
                            item.hp += WT4.hpBonus;
                            item.MP = WT4.MP;
                            item.hitRange = WT4.hitRange;
                            item.Moves.Add(WT4.newMove);
                            item.sprite = WT4.sprite;
                        }
                        else if (examItem.itemName == "inferno root" && item.reachedFireTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT4.name;
                            item.elementType = FT4.elementType;
                            item.levelTier = FT4.levelTier;
                            item.attack += FT4.attackBonus;
                            item.defense += FT4.defenseBonus;
                            item.speed += FT4.speedBonus;
                            item.hp += FT4.hpBonus;
                            item.MP = FT4.MP;
                            item.hitRange = FT4.hitRange;
                            item.Moves.Add(FT4.newMove);
                            item.sprite = FT4.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }
                }
            }
        }

        public void EvolutionSprites()
        {
            ThisBattleMeebas.Clear();
            ThisBattleMeebas.Add(meeba);
            ThisBattleMeebas.Add(meeba2);
            foreach (var item in ThisBattleMeebas)
            {
                if (item.name == meeba.name && currentDNAMeeba.name == meeba.name
                    || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name)
                {
                    if (item.levelTier == 1)
                    {
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "ACTINOPTERYGII".ToLower()
                            || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "ACTINOPTERYGII".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"                       ",
                     @"    \\    _,.-~ -~-._  ",
                     @"    /\\, '          @\ ",
                     @"-_ .-''         }    / ",
                     @"\''-_______-///,,,_-'  ",
                     @" \\//// \ }  \} \ }    ",
                     @"  \///   }       '     ",
                     @"   }/                  "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AMPHIBIA".ToLower()
                       || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AMPHIBIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"        _,.-----.,_    ",
                     @"    .-'            @ \ ",
                     @"  ,'      ///// ( ____.",
                     @" {    _\ \____/ /,.-'  ",
                     @"{\ },'  m/    \m       ",
                     @" {\ }                  ",
                     @"    {\}                ",
                     @"      {\>              "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AVES".ToLower()
                          || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AVES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"         <<-<-_    _   ",
                     @"        <<-<-/ m  {@_> ",
                     @"         <<<-}   //'   ",
                     @"          <__\,_//     ",
                     @"    .nn,~'<    _/      ",
                     @"   {^n}\  /___/        ",
                     @" {^n^}  {'             ",
                     @"{^n^}   '<m            "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "CHONDRICTHYES".ToLower()
                      || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "CHONDRICTHYES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"            .\\        ",
                     @"           ,;\:\\      ",
                     @"/       \\,,.-~ -~-._  ",
                     @"|    \\\ '  o   o  @ '.",
                     @"\. \\''  o   o }      /",
                     @" '\-____ __--_.,,\_-'' ",
                     @"      \\}    ////}     ",
                     @"       }     //}       ",
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "MAMMALIA".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "MAMMALIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"  .=>      ,/}._       ",
                    @" //  _,.-~'      @'.   ",
                    @"// .'          ,    ', ",
                    @"||/            ,~.,_._p",
                    @"| '. -     /  /        ",
                    @"|     \_-~'<,{         ",
                    @" \__/ /     \\         ",
                    @"   (__l->m   \>m       "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "REPTILIA".ToLower()
                                || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "REPTILIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"                  ___  ",
                     @"          _,.---~' @ \ ",
                     @"     _.-''       ____/ ",
                     @"   .'       / /~'      ",
                     @"  /  ,  \-~ '-_m       ",
                     @" /  /  z )             ",
                     @"|  {. (_>m             ",
                     @" \___________>         "
                },
                };
                        }
                    }
                    else if (item.levelTier == 2)
                    {
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "ACTINOPTERYGII".ToLower()
                               || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "ACTINOPTERYGII".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"                       ",
                    @"     ,//////'.,        ",
                    @"   //-'        @ ______",
                    @"  //-       < , -w-wvw'",
                    @"<//-    <,.-''         ",
                    @"|\-   //               ",
                    @" \\_  \.,___      ,    ",
                    @"   \\_______>____//>   "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AMPHIBIA".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AMPHIBIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"                 ,_    ",
                     @"     _,.-~~-~~-~'  @ \ ",
                     @"  {/}           ( ____.",
                     @" {/}  _. \____/ /,.-'  ",
                     @"{\},-'  \/    \_m      ",
                     @" {\}   m'              ",
                     @"   {\}                 ",
                     @"     {\{\{\{\>         "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AVES".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AVES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"       <<-<-/          ",
                     @"    <<-<-<-}   \\\     ",
                     @"  \   <-<<-}  \{@_>    ",
                     @"  \\\    <<__\,//      ",
                     @"    \\\,~'<    /       ",
                     @"      \\  /___/        ",
                     @"        /'             ",
                     @"       _\<m            "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "CHONDRICTHYES".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "CHONDRICTHYES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"              \        ",
                    @",         _,.-|\^-.,   ",
                    @"|\    ,^'           @\ ",
                    @"} \,.'          {{{,.-'",
                    @" } ',-.,_  -___  .'    ",
                    @";  /     \/   | /      ",
                    @"| /           |/       ",
                    @"|/                     "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "MAMMALIA".ToLower()
                             || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "MAMMALIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"     ______. _.---_    ",
                    @"  .-'       '  <   @'. ",
                    @" /           . ,      o",
                    @"/ /   ;    '  \,~._-,.'",
                    @"|/\   \    |  /        ",
                    @"|| \  |_.~'\ |         ",
                    @"|| / /'     \\         ",
                    @"\\ \_lm      \lm       "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "REPTILIA".ToLower()
                           || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "REPTILIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @" _                 _-, ",
                    @"/                ,' @ \",
                    @"|         ,--~~'' _.-~'",
                    @"\\     ,-',.----}\=m   ",
                    @" \\===/._/__~-~-}      ",
                    @"      // }__~-~}       ",
                    @"     m)  }_-~}'        ",
                    @"         }_}'          "
                },
                };
                        }
                    }
                    else if (item.levelTier == 3)
                    {
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "ACTINOPTERYGII".ToLower()
                               || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "ACTINOPTERYGII".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"                       ",
                    @"     \\\\\\\'.,~~.,    ",
                    @"   \\'             '@, ",
                    @"  \'   ,_,.- '  _,.~-.'",
                    @" \' ///     {  <.,___, ",
                    @"|- //        {______/  ",
                    @" \_\.                  ",
                    @"  \______________>     "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AMPHIBIA".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AMPHIBIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"            ___        ",
                     @"     _,- ''   { ''@-._,",
                     @"  , '         . _-w-wv'",
                     @" /    _{  /__  ),.~''  ",
                     @"|\ }/' \_m   \_m       ",
                     @" \{\                   ",
                     @"  \{                   ",
                     @"    \>                 "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AVES".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AVES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"                 _     ",
                     @"               ( @\__  ",
                     @"         __    |.-www' ",
                     @"      <-<<-<<\/ /      ",
                     @"   <-<-<-<<   \ |      ",
                     @" <<-<-<-<</____/       ",
                     @" <-<  |/'              ",
                     @"      \\<m             "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "CHONDRICTHYES".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "CHONDRICTHYES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"            ,~~~,      ",
                    @"\          __) (__.,   ",
                    @"\\     ^-'          @\ ",
                    @" } \,-' ,________{{  _}",
                    @" } ',-.,_  -___  .--'  ",
                    @" / /  /  \/  /| /      ",
                    @"| /      '  ' |/       ",
                    @"|/            '        "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "MAMMALIA".ToLower()
                             || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "MAMMALIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"           _--,.-~^'@. ",
                    @"      _ - '    -   ,_,}",
                    @"  ,~'       \   };'    ",
                    @" /          .{  }      ",
                    @"/  \      ,.'| /'      ",
                    @" \  },.~'     \ |      ",
                    @" / /           \\      ",
                    @" m'             w      "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "REPTILIA".ToLower()
                           || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "REPTILIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"             ^\  ,_    ",
                    @"    ^^^^^^^^^^^^'  @'\ ",
                    @"  ^^    ^^^^^^    ____}",
                    @" ^^   _{  /___{ /'     ",
                    @"^\^}/' \_m    \_m      ",
                    @" ^{\                   ",
                    @"   ^{\                 ",
                    @"     ^{\>              "
                },
                };
                        }
                    }
                    else if (item.levelTier == 4)
                    {
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "ACTINOPTERYGII".ToLower()
                               || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "ACTINOPTERYGII".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"        ,-~.,_     ~,  ",
                    @"      \'      ', //  \ ",
                    @"\\  \'   \\\    ';_   ;",
                    @"\\\\      \\   @/>'   *",
                    @" \\          //>       ",
                    @"   ',       />       ^ ",
                    @"     ',     \_^_^_^_/| ",
                    @"       '.,___________/ "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AMPHIBIA".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AMPHIBIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"          _-~~~.,      ",
                     @"      ,-' o  ~  ~(@-,  ",
                     @"    .' ~  ~  o   ,___) ",
                     @"  ,' o  o           ;  ",
                     @" .;   ~   o   /,- ,'   ",
                     @"( \ ) o      /   ,'    ",
                     @"{ ,_}        ({  }     ",
                     @" \__m-____,-' {__m     "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AVES".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AVES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"           _ _         ",
                     @"      \ \-\ \ \\       ",
                     @"      \-\-\-\-\        ",
                     @"      <<<<\<\<\        ",
                     @"        <<<\<\<\       ",
                     @"   <<<< ~'< < \ '-._   ",
                     @"    <<<\\_       -,-@_>",
                     @"        m '-.,__/      "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "CHONDRICTHYES".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "CHONDRICTHYES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"             |\       ",
                    @"|\         __) \__.,   ",
                    @"\ \    .-'          @-_",
                    @" } \,-',________}} ___/",
                    @" }  >-.,_______  .--'  ",
                    @" } /          | /      ",
                    @"/ /           |/       ",
                    @"|/            '        "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "MAMMALIA".ToLower()
                             || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "MAMMALIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"     _.--._.---.       ",
                    @"   .'           'q,    ",
                    @"  /                \^  ",
                    @" /              \.  @\^",
                    @"{'   )       ) _/ \___/",
                    @"  \  }'~-.--' \ }      ",
                    @"  / /          ||      ",
                    @"  m'            m      "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "REPTILIA".ToLower()
                           || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "REPTILIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"                 ___   ",
                    @"    ^^^^^^^^^^^^' @ '-,",
                    @"  ^^^^^^^^^^^^^   wVwvw",
                    @" ^^^^^_{  /__{  /~~---'",
                    @"^\^}/' \__m  \__m      ",
                    @" ^{\                   ",
                    @"   ^{\                 ",
                    @"     ^{\>              "
                },
                };
                        }
                    }
                }
            }
        }

        public void WeaponArmourGrafting()
        {
            itemChoice = currentGraftWeaponItem;
            referenceCurrentItem();
            if (examItem.itemType == "evolveItem") //element augment
            {
                string elementAugmentType = examItem.elementType;
                itemChoice = currentGraftWeapon;
                referenceCurrentItem();
                examItem.weaponElement = elementAugmentType;
                if (examItem.weaponElement.ToLower() == "fire".ToLower())
                    examItem.weaponelementName = "fiery";
                else if (examItem.weaponElement.ToLower() == "plant".ToLower())
                    examItem.weaponelementName = "thorny";
                else if (examItem.weaponElement.ToLower() == "earth".ToLower())
                    examItem.weaponelementName = "geo";
                else if (examItem.weaponElement.ToLower() == "air".ToLower())
                    examItem.weaponelementName = "turbulent";
                else if (examItem.weaponElement.ToLower() == "water".ToLower())
                    examItem.weaponelementName = "aqueous";
                else if (examItem.weaponElement.ToLower() == "charcoal".ToLower())
                    examItem.weaponelementName = "cinder";
                else if (examItem.weaponElement.ToLower() == "moss".ToLower())
                    examItem.weaponelementName = "boggy";
                else if (examItem.weaponElement.ToLower() == "dust".ToLower())
                    examItem.weaponelementName = "aeolian";
                else if (examItem.weaponElement.ToLower() == "storm".ToLower())
                    examItem.weaponelementName = "tempestuous";
                else if (examItem.weaponElement.ToLower() == "hydrotherm".ToLower())
                    examItem.weaponelementName = "steamy";
                WriteLineText("YOU CREATED A " + examItem.weaponelementName.ToUpper() + examItem.itemName.ToUpper() + " OF " + examItem.weaponstatName.ToUpper());
            }
        }

        public void UpdateEXP()
        {
            foreach (KeyValuePair<int, int> level in Levels) //updates player level
            {
                if (playerStats.playerCurrentExp >= level.Key)
                    playerStats.playerLevel = level.Value;
            }
        }

        public void battle()
        {
            animFade(); //Intro fading animation
            Console.BackgroundColor = ConsoleColor.Black;
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.Clear();

            EnemyChoiceBattle(); //Chooses 3 enemies from list of enemies in the current area

            opponentOne.ID = 1;
            opponentTwo.ID = 2;
            opponentThree.ID = 3;

            //Chooses a random adjective from a list to add to the enemy's name
            randomMember1 = random.Next(enemyAdjectives.Length);
            randomMember2 = random.Next(enemyAdjectives.Length);
            randomMember3 = random.Next(enemyAdjectives.Length);

            //Sets enemies as active or inactive depending on how many enemies you are facing in the current battle
            int numberOfOpponents = random.Next(1, 4);
            if (numberOfOpponents == 1)
            {
                opponentOne.active = true;
                opponentTwo.active = false;
                opponentTwo.HP = 0;
                opponentThree.active = false;
                opponentThree.HP = 0;
            }
            else if (numberOfOpponents == 2)
            {
                opponentOne.active = true;
                opponentTwo.active = true;
                opponentThree.active = false;
                opponentThree.HP = 0;
            }
            else if (numberOfOpponents == 3)
            {
                opponentOne.active = true;
                opponentTwo.active = true;
                opponentThree.active = true;
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton cave")
            {
                opponentThree.active = false;
                opponentThree.HP = 0;
            }

            VSScreen(); //Vs Screen

            ThisBattleMeebas.Clear();
            if (storyCounter >= 2)
            {
                ThisBattleMeebas.Add(meeba);
                ThisBattleMeebas.Add(meeba2);
            }

            ColourResetGray(); //resets colour to gray from previous battle

            currentState = BattleState.Options;  //Resets battlestate           

            playerStats.hasTakenTurn = false;
            opponentOne.hasTakenTurn = false;
            opponentTwo.hasTakenTurn = false;
            opponentThree.hasTakenTurn = false;
            meeba.hasTakenTurn = false;
            meeba.hasTakenTurn = false;

            //stat change variables
            playerStats.tempDefenseStatChange = playerStats.playerMaxDefense; //semi-permanent stat increases, reset at start of each battle
            meeba.tempDefenseStatChange = meeba.defense;
            meeba2.tempDefenseStatChange = meeba2.defense;
            opponentOne.tempDefenseStatChange = opponentOne.defense;
            opponentTwo.tempDefenseStatChange = opponentTwo.defense;
            opponentThree.tempDefenseStatChange = opponentThree.defense;

            playerStats.tempAttack = playerStats.playerMaxStrength;
            meeba.tempAttack = meeba.attack;
            meeba2.tempAttack = meeba2.attack;
            opponentOne.tempAttack = opponentOne.strength;
            opponentTwo.tempAttack = opponentTwo.strength;
            opponentThree.tempAttack = opponentThree.strength;

            playerStats.tempSpeed = playerStats.playerMaxSpeed;
            meeba.tempSpeed = meeba.speed;
            meeba2.tempSpeed = meeba2.speed;
            opponentOne.tempSpeedStatChange = opponentOne.speed;
            opponentTwo.tempSpeedStatChange = opponentTwo.speed;
            opponentThree.tempSpeedStatChange = opponentThree.speed;

            playerStats.tempAccuracy = playerStats.playerAccuracy;
            meeba.tempAccuracy = meeba.currentMove.accuracy;
            meeba2.tempAccuracy = meeba2.currentMove.accuracy;
            opponentOne.tempAccuracy = opponentOne.accuracy;
            opponentTwo.tempAccuracy = opponentTwo.accuracy;
            opponentThree.tempAccuracy = opponentThree.accuracy;

            playerStats.tempDefense = playerStats.tempDefenseStatChange; //defend mode in battle, rather than stat increase, reset each options loop
            meeba.tempDefense = meeba.tempDefenseStatChange;
            meeba2.tempDefense = meeba2.tempDefenseStatChange;
            opponentOne.tempDefense = opponentOne.tempDefenseStatChange;
            opponentTwo.tempDefense = opponentTwo.tempDefenseStatChange;
            opponentThree.tempDefense = opponentThree.tempDefenseStatChange;

            opponentOne.ranAway = false;
            opponentTwo.ranAway = false;
            opponentThree.ranAway = false;

            meeba.CycloneCounter = 0;
            meeba2.CycloneCounter = 0;
            opponentOne.CycloneCounter = 0;
            opponentTwo.CycloneCounter = 0;
            opponentThree.CycloneCounter = 0;
            meeba.DustDevilCounter = 0;
            meeba2.DustDevilCounter = 0;
            opponentOne.DustDevilCounter = 0;
            opponentTwo.DustDevilCounter = 0;
            opponentThree.DustDevilCounter = 0;
            meeba.SnowStormCounter = 0;
            meeba2.SnowStormCounter = 0;
            opponentOne.SnowStormCounter = 0;
            opponentTwo.SnowStormCounter = 0;
            opponentThree.SnowStormCounter = 0;
            meeba.PyroclasticFlowCounter = 0;
            meeba2.PyroclasticFlowCounter = 0;
            opponentOne.PyroclasticFlowCounter = 0;
            opponentTwo.PyroclasticFlowCounter = 0;
            opponentThree.PyroclasticFlowCounter = 0;

            PlayAnimation();

            do //Main battle loop
            {
                Dictionary<string, double> battleSpeedsTemp = new Dictionary<string, double>(); //Battle speeds
                battleSpeedsTemp.Add("Player", playerStats.tempSpeed); //Set in main loop incase of stat changes mid-battle
                battleSpeedsTemp.Add("Opponent1", opponentOne.tempSpeedStatChange);
                battleSpeedsTemp.Add("Opponent2", opponentTwo.tempSpeedStatChange);
                battleSpeedsTemp.Add("Opponent3", opponentThree.tempSpeedStatChange);
                if (storyCounter >= 2) //fix all 
                {
                    battleSpeedsTemp.Add("Meeba1", meeba.tempSpeed);
                    battleSpeedsTemp.Add("Meeba2", meeba2.tempSpeed);
                }

                List<string> battleSpeeds = new List<string> { }; //Sorts speeds by descending and adds to a list
                foreach (var speeds in battleSpeedsTemp.OrderByDescending(key => key.Value))
                    battleSpeeds.Add(speeds.Key);

                Console.Clear();
                AllHPBars(); //assigns correct hp bar status to hp bar string for each opponent and ally
                AllMPBars();
                BattleSpriteRender(); //draws opponent, hp bars, and ally sprites
                Thread.Sleep(400);

                //meeba damage - updates based on current stats
                damageCalcAllyAttacking = 1 + Math.Round((((tempAllyAttack / tempOppDefense) * tempAllyMoveBasePower * tempAllyItemBonus * tempAllyTypeAdv * tempAllySTAB) / 100) * tempAllyHit); //how much damage opponent takes from ally
                damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit); //how much damage ally takes from opponent
                                                                                                                                                                                            //player damage
                damageCalcPlayerAttacking = 1 + Math.Round((((playerStats.tempAttack / tempOppDefense) * (playerStats.playerLevel / 2) * tempPlayerTypeAdv * tempAllyItemBonus) / 100) * tempAllyHit);

                if (currentState == BattleState.Exit)
                    break;

                switch (currentState) //Main switch-case loop
                {
                    case BattleState.Options:

                        resetStats(); //checks who is active, and resets defensive and targets
                        if (playerStats.isAsleep != true)
                            PlayerChoice(); //Player choice is made
                        if (resetMenu == true)
                        {
                            resetMenu = false;
                            break;
                        }
                        Console.Clear();
                        BattleSpriteRender();
                        if (storyCounter >= 2)
                        {
                            for (int j = 0; j < 2; j++) //Meeba choices are made
                            {
                                if (j == 0)
                                {
                                    meeba.isCurrent = true;
                                    meeba2.isCurrent = false;
                                }
                                else if (j == 1)
                                {
                                    meeba.isCurrent = false;
                                    meeba2.isCurrent = true;
                                }
                                MeebaChoice();
                                if (resetMenu == true)
                                {
                                    resetMenu = false;
                                    break;

                                }
                                Console.Clear();
                                BattleSpriteRender();
                            }
                        }
                        if (resetMenu == true)
                        {
                            resetMenu = false;
                            break;

                        }
                        EnemyAIChoice(); //Enemy choices are made
                        StatusChangeChecks(); //checks for poison, stun, sleep, status protect, damage protect, and cyclone, dust devil counters
                        PyroclasticFlowCheck(); //Checks Pyroclastic Flow Counter and attacks if necessary
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        break;

                    case BattleState.SpeedComparison:
                        ColourResetGray(); //sets all to gray
                        if (playerStats.playerCurrentHP <= 0)
                        {
                            currentState = BattleState.Lose;
                            break;
                        }
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                        {
                            currentState = BattleState.Win;
                            break;
                        }
                        if (playerStats.defensive == true && playerStats.hasTakenTurn != true)
                        {
                            if (playerStats.MoveChoice == 3)
                            {
                                currentState = BattleState.Defend;
                                playerStats.textColour = ConsoleColor.Yellow;
                            }
                            else if (playerStats.MoveChoice == 4)
                                currentState = BattleState.Run;
                            break;
                        }
                        if (meeba.defensive == true && meeba.hasTakenTurn != true && storyCounter >= 2)
                        {
                            currentState = BattleState.MeebaOneDefend;
                            meeba.textColour = ConsoleColor.Yellow;
                            break;
                        }
                        if (meeba2.defensive == true && meeba2.hasTakenTurn != true && storyCounter >= 2)
                        {
                            currentState = BattleState.MeebaTwoDefend;
                            meeba2.textColour = ConsoleColor.Yellow;
                            break;
                        }
                        if (opponentOne.defensive == true && opponentOne.hasTakenTurn != true)
                        {
                            if (opponentOne.choice == 2)
                            {
                                currentState = BattleState.EnemyOneDefend;
                                opponentOne.textColour = ConsoleColor.Yellow;
                            }
                            else if (opponentOne.choice == 3)
                                currentState = BattleState.EnemyOneRun;
                            break;
                        }
                        if (opponentTwo.defensive == true && opponentTwo.hasTakenTurn != true)
                        {
                            if (opponentTwo.choice == 2)
                            {
                                currentState = BattleState.EnemyTwoDefend;
                                opponentTwo.textColour = ConsoleColor.Yellow;
                            }
                            else if (opponentTwo.choice == 3)
                                currentState = BattleState.EnemyTwoRun;
                            break;
                        }
                        if (opponentThree.defensive == true && opponentThree.hasTakenTurn != true)
                        {
                            if (opponentThree.choice == 2)
                            {
                                currentState = BattleState.EnemyThreeDefend;
                                opponentThree.textColour = ConsoleColor.Yellow;
                            }

                            else if (opponentThree.choice == 3)
                                currentState = BattleState.EnemyThreeRun;
                            break;
                        }
                        for (int i = 0; i < 7; i++)
                        {
                            if (i == 6)
                            {
                                currentState = BattleState.Options;
                                break;
                            }
                            if (i == 4 && storyCounter < 2)
                            {
                                currentState = BattleState.Options;
                                break;
                            }
                            else if (battleSpeeds[i] == "Player" && playerStats.hasTakenTurn == false && playerStats.playerCurrentHP > 0)
                            {
                                currentState = BattleState.PlayerMove;
                                break;
                            }
                            else if (battleSpeeds[i] == "Opponent1" && opponentOne.hasTakenTurn == false && opponentOne.HP > 0)
                            {
                                currentState = BattleState.EnemyOneMove;
                                break;
                            }
                            else if (battleSpeeds[i] == "Opponent2" && opponentTwo.hasTakenTurn == false && opponentTwo.HP > 0)
                            {
                                currentState = BattleState.EnemyTwoMove;
                                break;
                            }
                            else if (battleSpeeds[i] == "Opponent3" && opponentThree.hasTakenTurn == false && opponentThree.HP > 0)
                            {
                                currentState = BattleState.EnemyThreeMove;
                                break;
                            }
                            else if (battleSpeeds[i] == "Meeba1" && meeba.hasTakenTurn == false && meeba.currentHp > 0)
                            {
                                currentState = BattleState.MeebaOneMove;
                                break;
                            }
                            else if (battleSpeeds[i] == "Meeba2" && meeba2.hasTakenTurn == false && meeba2.currentHp > 0)
                            {
                                currentState = BattleState.MeebaTwoMove;
                                break;
                            }
                            else if (playerStats.hasTakenTurn == true && opponentOne.hasTakenTurn == true && opponentTwo.hasTakenTurn == true && opponentThree.hasTakenTurn == true && meeba.hasTakenTurn == true && meeba2.hasTakenTurn == true)
                            {
                                currentState = BattleState.Options;
                                break;
                            }
                        }
                        break;

                    case BattleState.Run:
                        playerRun();
                        break;

                    case BattleState.Defend:
                        playerDefend();
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyOneMove:
                        enemyMove();
                        break;

                    case BattleState.EnemyOneAttack:
                        if (opponentOne.choice == 1)
                            EnemyAttack();
                        else if (opponentOne.choice == 4)
                        {
                            if (opponentOne.currentMove.attackType == "Offensive" || opponentOne.currentMove.attackType == "OffensiveAll"
                                || opponentOne.currentMove.attackType == "OffensiveAndDefensive" || opponentOne.currentMove.attackType == "OffensiveAndDefensiveAll")
                                EnemyOffensiveAttack();
                            if (opponentOne.currentMove.attackType == "Defensive" || opponentOne.currentMove.attackType == "DefensiveAll"
                                || opponentOne.currentMove.attackType == "OffensiveAndDefensive" || opponentOne.currentMove.attackType == "OffensiveAndDefensiveAll")
                                EnemyDefensiveAttack();
                        }
                        opponentOne.hasTakenTurn = true;
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyOneDefend:
                        enemyDefend();
                        currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyOneRun:
                        enemyRun();
                        break;

                    case BattleState.EnemyTwoMove:
                        enemyMove();
                        break;

                    case BattleState.EnemyTwoAttack:
                        if (opponentTwo.choice == 1)
                            EnemyAttack();
                        else if (opponentTwo.choice == 4)
                        {
                            if (opponentTwo.currentMove.attackType == "Offensive" || opponentTwo.currentMove.attackType == "OffensiveAll"
                                || opponentTwo.currentMove.attackType == "OffensiveAndDefensive" || opponentTwo.currentMove.attackType == "OffensiveAndDefensiveAll")
                                EnemyOffensiveAttack();
                            if (opponentTwo.currentMove.attackType == "Defensive" || opponentTwo.currentMove.attackType == "DefensiveAll"
                                || opponentTwo.currentMove.attackType == "OffensiveAndDefensive" || opponentTwo.currentMove.attackType == "OffensiveAndDefensiveAll")
                                EnemyDefensiveAttack();
                        }
                        opponentTwo.hasTakenTurn = true;
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyTwoDefend:
                        enemyDefend();
                        currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyTwoRun:
                        enemyRun();
                        break;

                    case BattleState.EnemyThreeMove:
                        enemyMove();
                        break;

                    case BattleState.EnemyThreeAttack:
                        if (opponentThree.choice == 1)
                            EnemyAttack();
                        else if (opponentThree.choice == 4)
                        {
                            if (opponentThree.currentMove.attackType == "Offensive" || opponentThree.currentMove.attackType == "OffensiveAll"
                                || opponentThree.currentMove.attackType == "OffensiveAndDefensive" || opponentThree.currentMove.attackType == "OffensiveAndDefensiveAll")
                                EnemyOffensiveAttack();
                            if (opponentThree.currentMove.attackType == "Defensive" || opponentThree.currentMove.attackType == "DefensiveAll"
                                || opponentThree.currentMove.attackType == "OffensiveAndDefensive" || opponentThree.currentMove.attackType == "OffensiveAndDefensiveAll")
                                EnemyDefensiveAttack();
                        }
                        opponentThree.hasTakenTurn = true;
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyThreeDefend:
                        enemyDefend();
                        currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyThreeRun:
                        enemyRun();
                        break;

                    case BattleState.PlayerMove:
                        playerStats.textColour = ConsoleColor.Yellow;
                        if (playerStats.MoveChoice == 1)
                        {
                            currentState = BattleState.PlayerAttack;
                            if (opponentOne.playerTarget == true)
                                opponentOne.textColour = ConsoleColor.Red;
                            if (opponentTwo.playerTarget == true)
                                opponentTwo.textColour = ConsoleColor.Red;
                            if (opponentThree.playerTarget == true)
                                opponentThree.textColour = ConsoleColor.Red;
                            if (meeba.playerTarget == true)
                                meeba.textColour = ConsoleColor.Green;
                            if (meeba2.playerTarget == true)
                                meeba2.textColour = ConsoleColor.Green;
                            if (playerStats.playerTarget == true)
                                playerStats.textColour = ConsoleColor.Green;
                        }
                        else if (playerStats.MoveChoice == 2)
                        {
                            currentState = BattleState.PlayerItem;
                            if (meeba.playerTarget == true)
                                meeba.textColour = ConsoleColor.Green;
                            if (meeba2.playerTarget == true)
                                meeba2.textColour = ConsoleColor.Green;
                            if (playerStats.playerTarget == true)
                                playerStats.textColour = ConsoleColor.Green;
                        }
                        break;

                    case BattleState.PlayerAttack:
                        playerAttack();
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.PlayerItem: //Add all item types to this
                        playerItem();
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP == 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.MeebaOneMove:
                        meeba.textColour = ConsoleColor.Yellow;
                        if (meeba.battleChoice == 1)
                        {
                            currentState = BattleState.MeebaOneSpecial;
                            if (opponentOne.meeba1Target == true && meeba.currentMove.name != "Pyroclastic Flow")
                                opponentOne.textColour = ConsoleColor.Red;
                            if (opponentTwo.meeba1Target == true && meeba.currentMove.name != "Pyroclastic Flow")
                                opponentTwo.textColour = ConsoleColor.Red;
                            if (opponentThree.meeba1Target == true && meeba.currentMove.name != "Pyroclastic Flow")
                                opponentThree.textColour = ConsoleColor.Red;
                            if (meeba.meeba1Target == true)
                                meeba.textColour = ConsoleColor.Green;
                            if (meeba2.meeba1Target == true)
                                meeba2.textColour = ConsoleColor.Green;
                            if (playerStats.meeba1Target == true)
                                playerStats.textColour = ConsoleColor.Green;
                        }
                        else if (meeba.battleChoice == 2)
                            currentState = BattleState.MeebaOneDefend;
                        break;

                    case BattleState.MeebaOneSpecial:
                        meeba.hasTakenTurn = true;
                        if (meeba.currentMove.attackType == "Offensive") //Attacking enemies
                        {
                            MeebaOffensiveAttack();
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                        }

                        else if (meeba.currentMove.attackType == "OffensiveAll")
                        {
                            foreach (var item in ThisBattleEnemies)
                            {
                                MeebaOffensiveAttack();
                                item.meeba1Target = false;
                            }
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                        }
                        else if (meeba.currentMove.attackType == "Defensive" || meeba.currentMove.attackType == "DefensiveAll")
                        {
                            if (playerStats.meeba1Target == true) //if meeba has targeted player
                                meebaDefensiveAttackPlayerTarget();
                            if (meeba.meeba1Target == true || meeba2.meeba1Target == true) //if meeba has targeted self or other meeba
                                meebaDefensiveAttack();
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                            break;
                        }
                        else if (meeba.currentMove.attackType == "OffensiveAndDefensive" || meeba.currentMove.attackType == "OffensiveAndDefensiveAll")
                        {
                            MeebaOffensiveAttack();
                            if (playerStats.meeba1Target == true) //if meeba has targeted player
                                meebaDefensiveAttackPlayerTarget();
                            if (meeba.meeba1Target == true || meeba2.meeba1Target == true) //if meeba has targeted self or other meeba
                                meebaDefensiveAttack();
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                            break;
                        }
                        else
                            currentState = BattleState.SpeedComparison;

                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.MeebaOneDefend:
                        MeebaDefend();
                        currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.MeebaTwoMove:
                        meeba2.textColour = ConsoleColor.Yellow;
                        if (meeba2.battleChoice == 1)
                        {
                            currentState = BattleState.MeebaTwoSpecial;
                            if (opponentOne.meeba2Target == true && meeba2.currentMove.name != "Pyroclastic Flow")
                                opponentOne.textColour = ConsoleColor.Red;
                            if (opponentTwo.meeba2Target == true && meeba2.currentMove.name != "Pyroclastic Flow")
                                opponentTwo.textColour = ConsoleColor.Red;
                            if (opponentThree.meeba2Target == true && meeba2.currentMove.name != "Pyroclastic Flow")
                                opponentThree.textColour = ConsoleColor.Red;
                            if (meeba.meeba2Target == true)
                                meeba.textColour = ConsoleColor.Green;
                            if (meeba2.meeba2Target == true)
                                meeba2.textColour = ConsoleColor.Green;
                            if (playerStats.meeba2Target == true)
                                playerStats.textColour = ConsoleColor.Green;
                        }
                        else if (meeba2.battleChoice == 2)
                            currentState = BattleState.MeebaTwoDefend;
                        break;

                    case BattleState.MeebaTwoSpecial:
                        meeba2.textColour = ConsoleColor.Gray;
                        meeba2.hasTakenTurn = true;
                        if (meeba2.currentMove.attackType == "Offensive") //Attacking enemies
                        {
                            MeebaOffensiveAttack();
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;

                        }
                        else if (meeba2.currentMove.attackType == "OffensiveAll")
                        {
                            foreach (var item in ThisBattleEnemies)
                            {
                                MeebaOffensiveAttack();
                                item.meeba2Target = false;
                            }
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                        }
                        else if (meeba2.currentMove.attackType == "Defensive" || meeba2.currentMove.attackType == "DefensiveAll")
                        {
                            if (playerStats.meeba2Target == true) //if meeba has targeted player
                                meebaDefensiveAttackPlayerTarget();
                            if (meeba.meeba2Target == true || meeba2.meeba2Target == true) //if meeba has targeted self or other meeba
                                meebaDefensiveAttack();
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                            break;
                        }
                        else if (meeba2.currentMove.attackType == "OffensiveAndDefensive" || meeba2.currentMove.attackType == "OffensiveAndDefensiveAll")
                        {
                            MeebaOffensiveAttack();
                            if (playerStats.meeba2Target == true) //if meeba has targeted player
                                meebaDefensiveAttackPlayerTarget();
                            if (meeba.meeba2Target == true || meeba2.meeba2Target == true) //if meeba has targeted self or other meeba
                                meebaDefensiveAttack();
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                            break;
                        }
                        else
                            currentState = BattleState.SpeedComparison;
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.MeebaTwoDefend:
                        MeebaDefend();
                        currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.Win:
                        Console.ForegroundColor = ConsoleColor.Gray;
                        Console.WriteLine("You won!");
                        Thread.Sleep(1000);
                        currentState = BattleState.Summary;
                        break;

                    case BattleState.Lose:
                        Console.ForegroundColor = ConsoleColor.Gray;
                        Console.WriteLine("You ran out of HP! \nYou escape from the battle quickly and make your way back to a safe place.");
                        Thread.Sleep(2000);
                        Console.Clear();
                        playerStats.playerCurrentExp -= (playerStats.playerCurrentExp * playerStats.playerCurrentExp);
                        if (CurrentMap == 0 || CurrentMap == 1 || CurrentMap == 2 || CurrentMap == 3 || CurrentMap == 4)
                        {
                            CurrentMap = 0; //Rifton
                            CurrentLocation = 15;
                        }
                        else if (CurrentMap == 5 || CurrentMap == 6 || CurrentMap == 7 || CurrentMap == 8 || CurrentMap == 9 || CurrentMap == 10 || CurrentMap == 11 || CurrentMap == 12 || CurrentMap == 13 || CurrentMap == 14 || CurrentMap == 15 || CurrentMap == 17 || CurrentMap == 18 || CurrentMap == 20 || CurrentMap == 21 || CurrentMap == 23 || CurrentMap == 24 || CurrentMap == 26 || CurrentMap == 27)
                        {
                            CurrentMap = 5; //Karstbay
                            CurrentLocation = 64;
                        }
                        else if (CurrentMap == 16 || CurrentMap == 29 || CurrentMap == 30 || CurrentMap == 31 || CurrentMap == 44 || CurrentMap == 45 || CurrentMap == 46)
                        {
                            CurrentMap = 16; //Laharva
                            CurrentLocation = 87;
                        }
                        else if (CurrentMap == 19 || CurrentMap == 32 || CurrentMap == 33 || CurrentMap == 34 || CurrentMap == 47 || CurrentMap == 48 || CurrentMap == 49)
                        {
                            CurrentMap = 19; //Arbelle
                            CurrentLocation = 45;
                        }
                        else if (CurrentMap == 22 || CurrentMap == 35 || CurrentMap == 36 || CurrentMap == 37 || CurrentMap == 50 || CurrentMap == 51 || CurrentMap == 52)
                        {
                            CurrentMap = 22; //Graben
                            CurrentLocation = 43;
                        }
                        else if (CurrentMap == 25 || CurrentMap == 38 || CurrentMap == 39 || CurrentMap == 40 || CurrentMap == 53 || CurrentMap == 54 || CurrentMap == 55)
                        {
                            CurrentMap = 25; //Mesetra
                            CurrentLocation = 44;
                        }
                        else if (CurrentMap == 28 || CurrentMap == 41 || CurrentMap == 42 || CurrentMap == 43 || CurrentMap == 56 || CurrentMap == 57 || CurrentMap == 58)
                        {
                            CurrentMap = 28; //Corallos
                            CurrentLocation = 64;
                        }
                        else if (CurrentMap == 59 || CurrentMap == 60 || CurrentMap == 61 || CurrentMap == 62 || CurrentMap == 63 || CurrentMap == 64 || CurrentMap == 65 || CurrentMap == 66)
                        {
                            CurrentMap = 59; //Corallos
                            CurrentLocation = 40; //CHANGE
                        }
                        fullHeal();
                        currentState = BattleState.Exit;
                        break;

                    case BattleState.Summary:
                        Console.ForegroundColor = ConsoleColor.Gray;
                        int money = 0;
                        double newExp = playerStats.playerCurrentExp;
                        foreach (var item in ThisBattleEnemies)
                        {
                            if (item.active == true && item.ranAway != true)
                            {
                                money += item.money;
                                newExp += item.exp; //Level up/Exp
                            }
                                
                        }
                        Console.WriteLine(playerStats.name + " earned " + money + " Ayu from battle research.");
                        Thread.Sleep(1500);
                        playerStats.playerMoney += money;
                        int newlevel = 0;
                        foreach (KeyValuePair<int, int> level in Levels)
                        {
                            if (newExp >= level.Key)
                                newlevel = level.Value;
                        }
                        double allEXP = 0;
                        foreach (var item in ThisBattleEnemies)
                        {
                            if (item.active == true && item.ranAway != true)
                                allEXP += item.exp;
                        }
                        Console.WriteLine("You gained {0} Exp!", allEXP);
                        if (newlevel != playerStats.playerLevel)
                        {
                            Console.WriteLine("You gained a level!");
                            Thread.Sleep(1500);
                        }
                        playerStats.playerCurrentExp = playerStats.playerCurrentExp + allEXP;
                        FoundItems(); //collect dropped items
                        Thread.Sleep(2000);
                        Console.Clear();
                        currentState = BattleState.Exit;
                        break;

                    case BattleState.Exit:
                        break;
                }
            } while (currentState != BattleState.Exit);
            ThisBattleEnemies.Clear();

            Console.BackgroundColor = backgroundColour;
            Console.ForegroundColor = foregroundColour;
            Console.Clear();
        }

        public void EnemyChoiceBattle()
        {
            List<Enemy> AllEnemies1 = new List<Enemy>() //update with all enemies
                {
                    new Fire1a(), new Fire1b(), new Fire2a(), new Fire2b(), new Fire3a(), new Fire3b(), new Fire4a(), new Fire4b(),
                    new Plant1a(), new Plant1b(), new Plant2a(), new Plant2b(), new Plant3a(), new Plant3b(), new Plant4a(), new Plant4b(),
                    new Earth1a(), new Earth1b(), new Earth2a(), new Earth2b(), new Earth3a(), new Earth3b(), new Earth4a(), new Earth4b(),
                    new Air1a(), new Air1b(), new Air2a(), new Air2b(), new Air3a(), new Air3b(), new Air4a(), new Air4b(),
                    new Water1a(), new Water1b(), new Water2a(), new Water2b(), new Water3a(), new Water3b(), new Water4a(), new Water4b(),
                    new Charcoal1a(), new Charcoal1b(), new Charcoal2(), new Charcoal3(), new Charcoal4(),
                    new Moss1a(), new Moss1b(), new Moss2(), new Moss3(), new Moss4(),
                    new Dust1a(), new Dust1b(), new Dust2(), new Dust3(), new Dust4(),
                    new Storm1a(), new Storm1b(), new Storm2(), new Storm3(), new Storm4(),
                    new Hydrotherm1a(), new Hydrotherm1b(), new Hydrotherm2(), new Hydrotherm3(), new Hydrotherm4()
                };
            List<Enemy> CurrentEnemies1 = new List<Enemy>() { };
            foreach (var Enemy1 in AllEnemies1)
            {
                if (Enemy1.area.Contains(WorldMapCells[CurrentMap][CurrentLocation].mapName))
                    CurrentEnemies1.Add(Enemy1);
            };
            int n = random.Next(0, CurrentEnemies1.Count());
            opponentOne = CurrentEnemies1[n];
            int name1 = random.Next(0, opponentOne.names.Count());
            opponentOne.name = opponentOne.names[name1];

            if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton cave")
            {
                opponentOne.strength *= 0.5;
                opponentOne.defense *= 0.5;
                opponentOne.speed *= 0.5;
                opponentOne.HP *= 0.5;
                opponentOne.MaxHP = opponentOne.HP;
                opponentOne.MP *= 0.5;
                opponentOne.MaxMP = opponentOne.MP;
            }

            else if (WorldMapCells[CurrentMap][CurrentLocation].visitNumber == 2)
            {
                opponentOne.strength *= 2;
                opponentOne.defense *= 2;
                opponentOne.speed *= 2;
                opponentOne.HP *= 2;
                opponentOne.MaxHP = opponentOne.HP;
                opponentOne.hit += 5;
                if (opponentOne.hit > 100)
                    opponentOne.hit = 100;
                opponentOne.MP *= 1.5;
                opponentOne.MaxMP = opponentOne.MP;
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation].visitNumber == 3)
            {
                opponentOne.strength *= 3;
                opponentOne.defense *= 3;
                opponentOne.speed *= 3;
                opponentOne.HP *= 3;
                opponentOne.MaxHP = opponentOne.HP;
                opponentOne.hit += 10;
                if (opponentOne.hit > 100)
                    opponentOne.hit = 100;
                opponentOne.MP *= 2;
                opponentOne.MaxMP = opponentOne.MP;
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation].visitNumber == 4)
            {
                opponentOne.strength *= 4;
                opponentOne.defense *= 4;
                opponentOne.speed *= 4;
                opponentOne.HP *= 4;
                opponentOne.MaxHP = opponentOne.HP;
                opponentOne.hit += 15;
                if (opponentOne.hit > 100)
                    opponentOne.hit = 100;
                opponentOne.MP *= 3;
                opponentOne.MaxMP = opponentOne.MP;
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation].visitNumber == 5)
            {
                opponentOne.strength *= 5;
                opponentOne.defense *= 5;
                opponentOne.speed *= 5;
                opponentOne.HP *= 5;
                opponentOne.MaxHP = opponentOne.HP;
                opponentOne.hit += 20;
                if (opponentOne.hit > 100)
                    opponentOne.hit = 100;
                opponentOne.MP *= 3.5;
                opponentOne.MaxMP = opponentOne.MP;
            }
            ThisBattleEnemies.Add(opponentOne);

            List<Enemy> AllEnemies2 = new List<Enemy>() //update with all enemies
                {
                   new Fire1a(), new Fire1b(), new Fire2a(), new Fire2b(), new Fire3a(), new Fire3b(), new Fire4a(), new Fire4b(),
                    new Plant1a(), new Plant1b(), new Plant2a(), new Plant2b(), new Plant3a(), new Plant3b(), new Plant4a(), new Plant4b(),
                    new Earth1a(), new Earth1b(), new Earth2a(), new Earth2b(), new Earth3a(), new Earth3b(), new Earth4a(), new Earth4b(),
                    new Air1a(), new Air1b(), new Air2a(), new Air2b(), new Air3a(), new Air3b(), new Air4a(), new Air4b(),
                    new Water1a(), new Water1b(), new Water2a(), new Water2b(), new Water3a(), new Water3b(), new Water4a(), new Water4b(),
                    new Charcoal1a(), new Charcoal1b(), new Charcoal2(), new Charcoal3(), new Charcoal4(),
                    new Moss1a(), new Moss1b(), new Moss2(), new Moss3(), new Moss4(),
                    new Dust1a(), new Dust1b(), new Dust2(), new Dust3(), new Dust4(),
                    new Storm1a(), new Storm1b(), new Storm2(), new Storm3(), new Storm4(),
                    new Hydrotherm1a(), new Hydrotherm1b(), new Hydrotherm2(), new Hydrotherm3(), new Hydrotherm4()
                };
            List<Enemy> CurrentEnemies2 = new List<Enemy>() { };
            foreach (var Enemy2 in AllEnemies2)
            {
                if (Enemy2.area.Contains(WorldMapCells[CurrentMap][CurrentLocation].mapName))
                    CurrentEnemies2.Add(Enemy2);
            };
            int o = random.Next(0, CurrentEnemies2.Count());
            opponentTwo = CurrentEnemies2[o];
            int name2 = random.Next(0, opponentTwo.names.Count());
            opponentTwo.name = opponentTwo.names[name2];
            if (WorldMapCells[CurrentMap][CurrentLocation].visitNumber == 2)
            {
                opponentTwo.strength *= 2;
                opponentTwo.defense *= 2;
                opponentTwo.speed *= 2;
                opponentTwo.HP *= 2;
                opponentTwo.MaxHP = opponentTwo.HP;
                opponentTwo.hit += 5;
                if (opponentTwo.hit > 100)
                    opponentTwo.hit = 100;
                opponentTwo.MP *= 1.5;
                opponentTwo.MaxMP = opponentTwo.MP;
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation].visitNumber == 3)
            {
                opponentTwo.strength *= 3;
                opponentTwo.defense *= 3;
                opponentTwo.speed *= 3;
                opponentTwo.HP *= 3;
                opponentTwo.MaxHP = opponentTwo.HP;
                opponentTwo.hit += 10;
                if (opponentTwo.hit > 100)
                    opponentTwo.hit = 100;
                opponentTwo.MP *= 2;
                opponentTwo.MaxMP = opponentTwo.MP;
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation].visitNumber == 4)
            {
                opponentTwo.strength *= 4;
                opponentTwo.defense *= 4;
                opponentTwo.speed *= 4;
                opponentTwo.HP *= 4;
                opponentTwo.MaxHP = opponentTwo.HP;
                opponentTwo.hit += 15;
                if (opponentTwo.hit > 100)
                    opponentTwo.hit = 100;
                opponentTwo.MP *= 3;
                opponentTwo.MaxMP = opponentTwo.MP;
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation].visitNumber == 5)
            {
                opponentTwo.strength *= 5;
                opponentTwo.defense *= 5;
                opponentTwo.speed *= 5;
                opponentTwo.HP *= 5;
                opponentTwo.MaxHP = opponentTwo.HP;
                opponentTwo.hit += 20;
                if (opponentTwo.hit > 100)
                    opponentTwo.hit = 100;
                opponentTwo.MP *= 3.5;
                opponentTwo.MaxMP = opponentTwo.MP;
            }
            ThisBattleEnemies.Add(opponentTwo);

            List<Enemy> AllEnemies3 = new List<Enemy>() //update with all enemies
                {
                   new Fire1a(), new Fire1b(), new Fire2a(), new Fire2b(), new Fire3a(), new Fire3b(), new Fire4a(), new Fire4b(),
                    new Plant1a(), new Plant1b(), new Plant2a(), new Plant2b(), new Plant3a(), new Plant3b(), new Plant4a(), new Plant4b(),
                    new Earth1a(), new Earth1b(), new Earth2a(), new Earth2b(), new Earth3a(), new Earth3b(), new Earth4a(), new Earth4b(),
                    new Air1a(), new Air1b(), new Air2a(), new Air2b(), new Air3a(), new Air3b(), new Air4a(), new Air4b(),
                    new Water1a(), new Water1b(), new Water2a(), new Water2b(), new Water3a(), new Water3b(), new Water4a(), new Water4b(),
                    new Charcoal1a(), new Charcoal1b(), new Charcoal2(), new Charcoal3(), new Charcoal4(),
                    new Moss1a(), new Moss1b(), new Moss2(), new Moss3(), new Moss4(),
                    new Dust1a(), new Dust1b(), new Dust2(), new Dust3(), new Dust4(),
                    new Storm1a(), new Storm1b(), new Storm2(), new Storm3(), new Storm4(),
                    new Hydrotherm1a(), new Hydrotherm1b(), new Hydrotherm2(), new Hydrotherm3(), new Hydrotherm4()
                };
            List<Enemy> CurrentEnemies3 = new List<Enemy>() { };
            foreach (var Enemy3 in AllEnemies3)
            {
                if (Enemy3.area.Contains(WorldMapCells[CurrentMap][CurrentLocation].mapName))
                    CurrentEnemies3.Add(Enemy3);
            };
            int p = random.Next(0, CurrentEnemies3.Count());
            opponentThree = CurrentEnemies3[p];
            int name3 = random.Next(0, opponentThree.names.Count());
            opponentThree.name = opponentThree.names[name3];
            if (WorldMapCells[CurrentMap][CurrentLocation].visitNumber == 2)
            {
                opponentThree.strength *= 2;
                opponentThree.defense *= 2;
                opponentThree.speed *= 2;
                opponentThree.HP *= 2;
                opponentThree.MaxHP = opponentThree.HP;
                opponentThree.hit += 5;
                if (opponentThree.hit > 100)
                    opponentThree.hit = 100;
                opponentThree.MP *= 1.5;
                opponentThree.MaxMP = opponentThree.MP;
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation].visitNumber == 3)
            {
                opponentThree.strength *= 3;
                opponentThree.defense *= 3;
                opponentThree.speed *= 3;
                opponentThree.HP *= 3;
                opponentThree.MaxHP = opponentThree.HP;
                opponentThree.hit += 10;
                if (opponentThree.hit > 100)
                    opponentThree.hit = 100;
                opponentThree.MP *= 2;
                opponentThree.MaxMP = opponentThree.MP;
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation].visitNumber == 4)
            {
                opponentThree.strength *= 4;
                opponentThree.defense *= 4;
                opponentThree.speed *= 4;
                opponentThree.HP *= 4;
                opponentThree.MaxHP = opponentThree.HP;
                opponentThree.hit += 15;
                if (opponentThree.hit > 100)
                    opponentThree.hit = 100;
                opponentThree.MP *= 3;
                opponentThree.MaxMP = opponentThree.MP;
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation].visitNumber == 5)
            {
                opponentThree.strength *= 5;
                opponentThree.defense *= 5;
                opponentThree.speed *= 5;
                opponentThree.HP *= 5;
                opponentThree.MaxHP = opponentThree.HP;
                opponentThree.hit += 20;
                if (opponentThree.hit > 100)
                    opponentThree.hit = 100;
                opponentThree.MP *= 3.5;
                opponentThree.MaxMP = opponentThree.MP;
            }
            ThisBattleEnemies.Add(opponentThree);
        }

        public void VSScreen()
        {
            int width = Console.WindowWidth;
            int oppOneNameLength = opponentOne.name.Length + enemyAdjectives[randomMember1].Length + 2;
            int oppTwoNameLength = opponentTwo.name.Length + enemyAdjectives[randomMember2].Length + 2;
            if (opponentTwo.active == false)
                oppTwoNameLength = 0;
            int oppThreeNameLength = opponentThree.name.Length + enemyAdjectives[randomMember3].Length + 2;
            if (opponentThree.active == false)
                oppThreeNameLength = 0;
            int meeba1NameLength = meeba.name.Length + 2;
            if (meeba.gotMeeba == false || meeba.currentHp <= 0 || storyCounter < 2)
                meeba1NameLength = 0;
            int meeba2NameLength = meeba2.name.Length + 2;
            if (meeba2.gotMeeba == false || meeba2.currentHp <= 0 || storyCounter < 2)
                meeba2NameLength = 0;
            int playerNameLength = playerStats.name.Length + 2;
            int hashRowStartPos = (width - 70) / 2;
            int oppStartPos = (width - (oppOneNameLength + oppTwoNameLength + oppThreeNameLength)) / 2;
            int playerStartPos = 1 + (width - (playerNameLength + meeba1NameLength + meeba2NameLength)) / 2;
            int VSStartPos = (width - 3) / 2;
            Console.SetCursorPosition(hashRowStartPos, 1);
            Console.WriteLine("######################################################################");
            Thread.Sleep(600);
            Console.SetCursorPosition(oppStartPos, 3);
            Console.Write(enemyAdjectives[randomMember1] + " " + opponentOne.name);
            if (opponentTwo.active == true)
                Console.Write(" + " + enemyAdjectives[randomMember2] + " " + opponentTwo.name);
            if (opponentThree.active == true)
                Console.Write(" + " + enemyAdjectives[randomMember3] + " " + opponentThree.name);
            Thread.Sleep(150);
            Console.SetCursorPosition(VSStartPos, 4);
            Console.WriteLine("VS.");
            Thread.Sleep(150);
            Console.SetCursorPosition(playerStartPos, 5);
            Console.Write(playerStats.name);
            if (meeba.gotMeeba == true && meeba.currentHp > 0 && storyCounter >= 2)
                Console.Write(" + " + meeba.name);
            if (meeba2.gotMeeba == true && meeba2.currentHp > 0 && storyCounter >= 2)
                Console.Write(" + " + meeba2.name);
            Thread.Sleep(150);
            Console.SetCursorPosition(hashRowStartPos, 7);
            Console.WriteLine("######################################################################");
            Thread.Sleep(2500);
            Console.Clear();
        }

        public void BattleSpriteRender()
        {
            int width = Console.WindowWidth;
            //Enemy sprites
            for (int i = 0; i < 8; i++)
            {
                if (opponentOne.active == true && opponentOne.HP > 0)
                {
                    Console.ForegroundColor = opponentOne.textColour;
                    Console.Write(opponentOne.animation[0, i] + "     ");
                }
                else
                    Console.Write("                            ");
                if (opponentTwo.active == true && opponentTwo.HP > 0)
                {
                    Console.ForegroundColor = opponentTwo.textColour;
                    Console.Write(opponentTwo.animation[0, i] + "     ");
                }
                else
                    Console.Write("                            ");
                if (opponentThree.active == true && opponentThree.HP > 0)
                {
                    Console.ForegroundColor = opponentThree.textColour;
                    Console.Write(opponentThree.animation[0, i]);
                    Console.Write(new string(' ', (width - 79)));
                }
                else
                    Console.Write(new string(' ', (width - 56)));
            }

            //Enemy HP bars
            Console.ForegroundColor = ConsoleColor.Gray;
            if (opponentOne.active == true && opponentOne.HP > 0)
                Console.Write(Environment.NewLine + opponentOne.HPBar);
            else
                Console.Write(Environment.NewLine + "  " + "                     ");
            if (opponentTwo.active == true && opponentTwo.HP > 0)
                Console.Write("     " + opponentTwo.HPBar);
            else
                Console.Write("       " + "                     ");
            if (opponentThree.active == true && opponentThree.HP > 0)
            {
                Console.Write("     " + opponentThree.HPBar);
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }
            else
            {
                Console.Write("       " + "                     ");
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }

            //Enemy MP bars
            if (opponentOne.active == true && opponentOne.HP > 0)
                Console.Write(opponentOne.MPBar);
            else
                Console.Write("  " + "                     ");
            if (opponentTwo.active == true && opponentTwo.HP > 0)
                Console.Write("     " + opponentTwo.MPBar);
            else
                Console.Write("       " + "                     ");
            if (opponentThree.active == true && opponentThree.HP > 0)
            {
                Console.Write("     " + opponentThree.MPBar);
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }
            else
            {
                Console.Write("       " + "                     ");
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }

            //Player HP bar
            Console.CursorTop += 1;
            if (playerStats.playerCurrentHP > 0)
                Console.Write(Environment.NewLine + playerStats.HPBar);
            else
                Console.Write(Environment.NewLine + "  " + "                     ");

            //Meeba HP bars
            if (meeba.currentHp > 0 && meeba.gotMeeba == true && storyCounter >= 2)
                Console.Write("     " + meeba.HPBar);
            else
                Console.Write("       " + "                     ");
            if (meeba2.currentHp > 0 && meeba2.gotMeeba == true && storyCounter >= 2)
            {
                Console.Write("     " + meeba2.HPBar);
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }
            else
            {
                Console.Write("       " + "                     ");
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }

            //Player MP bar
            if (playerStats.playerCurrentHP > 0)
                Console.Write("MP|                    ");
            else
                Console.Write("                       ");

            //Meeba MP bars
            if (meeba.currentHp > 0 && meeba.gotMeeba == true && storyCounter >= 2)
                Console.Write("     " + meeba.MPBar);
            else
                Console.Write("       " + "                     ");
            if (meeba2.currentHp > 0 && meeba2.gotMeeba == true && storyCounter >= 2)
            {
                Console.Write("     " + meeba2.MPBar);
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }
            else
            {
                Console.Write("       " + "                     ");
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }

            //Player and meeba sprites
            for (int i = 0; i < 8; i++)
            {
                if (playerStats.playerCurrentHP > 0)
                {
                    Console.ForegroundColor = playerStats.textColour;
                    Console.Write(playerStats.sprite[0, i] + "     ");
                }
                else
                    Console.Write("                            ");
                if (meeba.currentHp > 0 && meeba.gotMeeba == true && storyCounter >= 2)
                {
                    Console.ForegroundColor = meeba.textColour;
                    Console.Write(meeba.sprite[0, i] + "     ");
                }
                else
                    Console.Write("                            ");
                if (meeba2.currentHp > 0 && meeba2.gotMeeba == true && storyCounter >= 2)
                {
                    Console.ForegroundColor = meeba2.textColour;
                    Console.Write(meeba2.sprite[0, i]);
                    Console.Write(new string(' ', (width - 79)));
                }
                else
                {
                    Console.Write("                       ");
                    Console.Write(new string(' ', (width - 79)));
                }
            }
            Console.CursorTop += 1;
        }

        public void ColourResetGray()
        {
            opponentOne.textColour = ConsoleColor.Gray;  //Resets colours from previous battle
            opponentTwo.textColour = ConsoleColor.Gray;
            opponentThree.textColour = ConsoleColor.Gray;
            playerStats.textColour = ConsoleColor.Gray;
            meeba.textColour = ConsoleColor.Gray;
            meeba2.textColour = ConsoleColor.Gray;
        }

        public void AllHPBars()
        {
            double opp1HPInterval = opponentOne.MaxHP / 20; //Opponent1
            if (opponentOne.HP <= 0)
                opponentOne.HPBar = "                     ";
            else
            {
                opponentOne.HPBar = "HP|                    ";
                for (int i = 1; i < 21; i++) //20 intervals, one '/' for each
                {
                    if (opponentOne.HP <= (opp1HPInterval * i) && opponentOne.HP > (opp1HPInterval * (i - 1)))
                    {
                        opponentOne.HPBar = "HP|";
                        string slashes = new string('/', i); //prints one '/' for each HP interval the HP passes
                        opponentOne.HPBar += slashes;
                        string spaces = new string(' ', 20 - i); //fills the rest with spaces so it is the correct length
                        opponentOne.HPBar += spaces;
                    }
                }
            }

            double opp2HPInterval = opponentTwo.MaxHP / 20; //Opponent2
            if (opponentTwo.HP <= 0)
                opponentTwo.HPBar = "                     ";
            else
            {
                opponentTwo.HPBar = "HP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (opponentTwo.HP <= (opp2HPInterval * i) && opponentTwo.HP > (opp2HPInterval * (i - 1)))
                    {
                        opponentTwo.HPBar = "HP|";
                        string slashes = new string('/', i);
                        opponentTwo.HPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        opponentTwo.HPBar += spaces;
                    }
                }
            }

            double opp3HPInterval = opponentThree.MaxHP / 20; //Opponent3
            if (opponentThree.HP <= 0)
                opponentThree.HPBar = "                     ";
            else
            {
                opponentThree.HPBar = "HP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (opponentThree.HP <= (opp3HPInterval * i) && opponentThree.HP > (opp3HPInterval * (i - 1)))
                    {
                        opponentThree.HPBar = "HP|";
                        string slashes = new string('/', i);
                        opponentThree.HPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        opponentThree.HPBar += spaces;
                    }
                }
            }

            double PlayerHPInterval = playerStats.playerMaxHP / 20; //Player
            if (playerStats.playerCurrentHP <= 0)
                playerStats.HPBar = "                     ";
            else
            {
                playerStats.HPBar = "HP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (playerStats.playerCurrentHP <= (PlayerHPInterval * i) && playerStats.playerCurrentHP > (PlayerHPInterval * (i - 1)))
                    {
                        playerStats.HPBar = "HP|";
                        string slashes = new string('/', i);
                        playerStats.HPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        playerStats.HPBar += spaces;
                    }
                }
            }

            double meeba1HPInterval = meeba.hp / 20; //Meeba1
            if (meeba.currentHp <= 0)
                meeba.HPBar = "                     ";
            else
            {
                meeba.HPBar = "HP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (meeba.currentHp <= (meeba1HPInterval * i) && meeba.currentHp > (meeba1HPInterval * (i - 1)))
                    {
                        meeba.HPBar = "HP|";
                        string slashes = new string('/', i);
                        meeba.HPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        meeba.HPBar += spaces;
                    }
                }
            }

            double meeba2HPInterval = meeba2.hp / 20; //Meeba2
            if (meeba2.currentHp <= 0)
                meeba2.HPBar = "                     ";
            else
            {
                meeba2.HPBar = "HP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (meeba2.currentHp <= (meeba2HPInterval * i) && meeba2.currentHp > (meeba2HPInterval * (i - 1)))
                    {
                        meeba2.HPBar = "HP|";
                        string slashes = new string('/', i);
                        meeba2.HPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        meeba2.HPBar += spaces;
                    }
                }
            }
        }

        public void AllMPBars()
        {
            double opp1MPInterval = opponentOne.MaxMP / 20; //Opponent1
            if (opponentOne.MP <= 0)
                opponentOne.MPBar = "                     ";
            else
            {
                opponentOne.MPBar = "MP|                    ";
                for (int i = 1; i < 21; i++) //20 intervals, one '/' for each
                {
                    if (opponentOne.MP <= (opp1MPInterval * i) && opponentOne.MP > (opp1MPInterval * (i - 1)))
                    {
                        opponentOne.MPBar = "MP|";
                        string slashes = new string('*', i); //prints one '/' for each MP interval the MP passes
                        opponentOne.MPBar += slashes;
                        string spaces = new string(' ', 20 - i); //fills the rest with spaces so it is the correct length
                        opponentOne.MPBar += spaces;
                    }
                }
            }

            double opp2MPInterval = opponentTwo.MaxMP / 20; //Opponent2
            if (opponentTwo.MP <= 0)
                opponentTwo.MPBar = "                     ";
            else
            {
                opponentTwo.MPBar = "MP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (opponentTwo.MP <= (opp2MPInterval * i) && opponentTwo.MP > (opp2MPInterval * (i - 1)))
                    {
                        opponentTwo.MPBar = "MP|";
                        string slashes = new string('*', i);
                        opponentTwo.MPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        opponentTwo.MPBar += spaces;
                    }
                }
            }

            double opp3MPInterval = opponentThree.MaxMP / 20; //Opponent3
            if (opponentThree.MP <= 0)
                opponentThree.MPBar = "                     ";
            else
            {
                opponentThree.MPBar = "MP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (opponentThree.MP <= (opp3MPInterval * i) && opponentThree.MP > (opp3MPInterval * (i - 1)))
                    {
                        opponentThree.MPBar = "MP|";
                        string slashes = new string('*', i);
                        opponentThree.MPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        opponentThree.MPBar += spaces;
                    }
                }
            }

            double meeba1MPInterval = meeba.MP / 20; //Meeba1
            if (meeba.currentMP <= 0)
                meeba.MPBar = "                     ";
            else
            {
                meeba.MPBar = "MP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (meeba.currentMP <= (meeba1MPInterval * i) && meeba.currentMP > (meeba1MPInterval * (i - 1)))
                    {
                        meeba.MPBar = "MP|";
                        string slashes = new string('*', i);
                        meeba.MPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        meeba.MPBar += spaces;
                    }
                }
            }

            double meeba2MPInterval = meeba2.MP / 20; //Meeba2
            if (meeba2.currentMP <= 0)
                meeba2.MPBar = "                     ";
            else
            {
                meeba2.MPBar = "MP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (meeba2.currentMP <= (meeba2MPInterval * i) && meeba2.currentMP > (meeba2MPInterval * (i - 1)))
                    {
                        meeba2.MPBar = "MP|";
                        string slashes = new string('*', i);
                        meeba2.MPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        meeba2.MPBar += spaces;
                    }
                }
            }
        }

        public void resetStats()
        {
            playerStats.opponent1Target = false;
            playerStats.opponent2Target = false;
            playerStats.opponent3Target = false;
            playerStats.meeba1Target = false;
            playerStats.meeba2Target = false;
            playerStats.playerTarget = false;

            meeba.opponent1Target = false;
            meeba.opponent2Target = false;
            meeba.opponent3Target = false;
            meeba.meeba1Target = false;
            meeba.meeba2Target = false;
            meeba.playerTarget = false;

            meeba2.opponent1Target = false;
            meeba2.opponent2Target = false;
            meeba2.opponent3Target = false;
            meeba2.meeba1Target = false;
            meeba2.meeba2Target = false;
            meeba2.playerTarget = false;

            opponentOne.opponent1Target = false;
            opponentOne.opponent2Target = false;
            opponentOne.opponent3Target = false;
            opponentOne.playerTarget = false;
            opponentOne.meeba1Target = false;
            opponentOne.meeba2Target = false;

            opponentTwo.opponent1Target = false;
            opponentTwo.opponent2Target = false;
            opponentTwo.opponent3Target = false;
            opponentTwo.playerTarget = false;
            opponentTwo.meeba1Target = false;
            opponentTwo.meeba2Target = false;

            opponentThree.opponent1Target = false;
            opponentThree.opponent2Target = false;
            opponentThree.opponent3Target = false;
            opponentThree.playerTarget = false;
            opponentThree.meeba1Target = false;
            opponentThree.meeba2Target = false;

            if (playerStats.playerCurrentHP > 0)
                playerStats.hasTakenTurn = false;
            else
                currentState = BattleState.Lose;
            if (meeba.currentHp > 0 && meeba.gotMeeba == true)
                meeba.hasTakenTurn = false;
            else
                meeba.hasTakenTurn = true;
            if (meeba2.currentHp > 0 && meeba2.gotMeeba == true)
                meeba2.hasTakenTurn = false;
            else
                meeba2.hasTakenTurn = true;
            if (opponentOne.HP > 0 && opponentOne.active == true)
                opponentOne.hasTakenTurn = false;
            else
                opponentOne.hasTakenTurn = true;
            if (opponentTwo.HP > 0 && opponentTwo.active == true)
                opponentTwo.hasTakenTurn = false;
            else
                opponentTwo.hasTakenTurn = true;
            if (opponentThree.HP > 0 && opponentThree.active == true)
                opponentThree.hasTakenTurn = false;
            else
                opponentThree.hasTakenTurn = true;

            //reset defensive moves
            playerStats.tempDefense = playerStats.tempDefenseStatChange; //defend mode in battle, rather than stat increase, reset each options loop
            meeba.tempDefense = meeba.tempDefenseStatChange;
            meeba2.tempDefense = meeba2.tempDefenseStatChange;
            opponentOne.tempDefense = opponentOne.tempDefenseStatChange;
            opponentTwo.tempDefense = opponentTwo.tempDefenseStatChange;
            opponentThree.tempDefense = opponentThree.tempDefenseStatChange;

            //reset defensive
            playerStats.defensive = false;
            meeba.defensive = false;
            meeba2.defensive = false;
            opponentOne.defensive = false;
            opponentTwo.defensive = false;
            opponentThree.defensive = false;
        }

        public void StatusChangeChecks()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var item in ThisBattleEnemies) //if poisonone && poisontwo are true, it only does poisontwo damage
            {
                if (item.isPoisoned == true && item.HP > 0)
                {
                    item.poisonTracker += 1;
                    item.HP -= Math.Round(item.MaxHP / 10);
                    if (item.isPoisoned == true)
                        Console.WriteLine(item.name + " took " + Math.Round(item.MaxHP / 12) + " poison damage");
                    else if (item.isPoisonedTwo == true)
                        Console.WriteLine(item.name + " took " + Math.Round(item.MaxHP / 6) + " poison damage");
                    Thread.Sleep(1000);
                    if (item.poisonTracker == 3)
                    {
                        Console.WriteLine(item.name + " shook off the poison");
                        Thread.Sleep(1000);
                        item.isPoisoned = false;
                    }
                }
            }
            foreach (var meebaItem in ThisBattleMeebas) //if poisonone && poisontwo are true, it only does poisontwo damage
            {
                if (meebaItem.isPoisoned == true && meebaItem.currentHp > 0)
                {
                    meebaItem.poisonTracker += 1;
                    meebaItem.currentHp -= Math.Round(meebaItem.hp / 10);
                    if (meebaItem.isPoisoned == true)
                        Console.WriteLine(meebaItem.name + " took " + Math.Round(meebaItem.hp / 12) + " poison damage");
                    else if (meebaItem.isPoisonedTwo == true)
                        Console.WriteLine(meebaItem.name + " took " + Math.Round(meebaItem.hp / 6) + " poison damage");
                    Thread.Sleep(1000);
                    if (meebaItem.poisonTracker == 3)
                    {
                        Console.WriteLine(meebaItem.name + " shook off the poison");
                        Thread.Sleep(1000);
                        meebaItem.isPoisoned = false;
                    }
                }
            }
            if (playerStats.isPoisoned == true && playerStats.playerCurrentHP > 0)
            {
                playerStats.poisonTracker += 1;
                playerStats.playerCurrentHP -= Math.Round(playerStats.playerMaxHP / 10);
                if (playerStats.isPoisoned == true)
                    Console.WriteLine(playerStats.name + " took " + Math.Round(playerStats.playerMaxHP / 12) + " poison damage");
                else if (playerStats.isPoisonedTwo == true)
                    Console.WriteLine(playerStats.name + " took " + Math.Round(playerStats.playerMaxHP / 6) + " poison damage");
                Thread.Sleep(1000);
                if (playerStats.poisonTracker == 3)
                {
                    Console.WriteLine(playerStats.name + " shook off the poison");
                    Thread.Sleep(1000);
                    playerStats.isPoisoned = false;
                }
            }
            //Sleep Check
            foreach (var item in ThisBattleEnemies)
            {
                if (item.isAsleep == true && item.HP > 0 && item.active == true)
                {
                    int sleepCheck = random.Next(2);
                    if (sleepCheck == 0)
                    {
                        item.hasTakenTurn = true;
                        Console.WriteLine("Zzzzzz...   ...   ..." + item.name + " is asleep and cannot attack");
                        Thread.Sleep(1000);
                    }
                    else if (sleepCheck == 1)
                    {
                        Console.WriteLine(item.name + " woke up");
                        Thread.Sleep(1000);
                        item.isAsleep = false;
                    }
                }
            }
            if (playerStats.isAsleep == true && playerStats.playerCurrentHP > 0)
            {
                int sleepCheck = random.Next(2);
                if (sleepCheck == 0)
                {
                    playerStats.hasTakenTurn = true;
                    Console.WriteLine("Zzzzzz...   ...   ..." + playerStats.name + " is asleep and cannot attack");
                    Thread.Sleep(1000);
                }
                else if (sleepCheck == 1)
                {
                    Console.WriteLine(playerStats.name + " woke up");
                    Thread.Sleep(1000);
                    playerStats.isAsleep = false;
                }
            }
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.isAsleep == true && meebaItem.currentHp > 0)
                {
                    int sleepCheck = random.Next(2);
                    if (sleepCheck == 0)
                    {
                        meebaItem.hasTakenTurn = true;
                        Console.WriteLine("Zzzzzz...   ...   ..." + meebaItem.name + " is asleep and cannot attack");
                        Thread.Sleep(1000);
                    }
                    else if (sleepCheck == 1)
                    {
                        Console.WriteLine(meebaItem.name + " woke up");
                        Thread.Sleep(1000);
                        meebaItem.isAsleep = false;
                    }
                }
            }
            //Status protect check - add enemy ones too
            if (playerStats.StatusProtected == true)
            {
                if (playerStats.statusProtectCounterSS > 0)
                    playerStats.statusProtectCounterSS += 1;
                if (playerStats.statusProtectCounterSS == 3)
                {
                    playerStats.StatusProtected = false;
                    Console.WriteLine(playerStats.name + "'s status protection wore off");
                    Thread.Sleep(1000);
                }
                if (playerStats.statusProtectCounterRF > 0)
                    playerStats.statusProtectCounterRF += 1;
                if (playerStats.statusProtectCounterRF == 5)
                {
                    playerStats.StatusProtected = false;
                    Console.WriteLine(playerStats.name + "'s status protection wore off");
                    Thread.Sleep(1000);
                }
                if (playerStats.statusProtectCounterSW > 0)
                    playerStats.statusProtectCounterSW += 1;
                if (playerStats.statusProtectCounterSW == 4)
                {
                    playerStats.StatusProtected = false;
                    Console.WriteLine(playerStats.name + "'s status protection wore off");
                    Thread.Sleep(1000);
                }
            }
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.StatusProtected == true && meebaItem.currentHp > 0)
                {
                    if (meebaItem.statusProtectCounterSS > 0)
                        meebaItem.statusProtectCounterSS += 1;
                    if (meebaItem.statusProtectCounterSS == 3)
                    {
                        meebaItem.StatusProtected = false;
                        Console.WriteLine(meebaItem.name + "'s status protection wore off");
                        Thread.Sleep(1000);
                    }
                    if (meebaItem.statusProtectCounterRF > 0)
                        meebaItem.statusProtectCounterRF += 1;
                    if (meebaItem.statusProtectCounterRF == 5)
                    {
                        meebaItem.StatusProtected = false;
                        Console.WriteLine(meebaItem.name + "'s status protection wore off");
                        Thread.Sleep(1000);
                    }
                    if (meebaItem.statusProtectCounterSW > 0)
                        meebaItem.statusProtectCounterSW += 1;
                    if (meebaItem.statusProtectCounterSW == 4)
                    {
                        meebaItem.StatusProtected = false;
                        Console.WriteLine(meebaItem.name + "'s status protection wore off");
                        Thread.Sleep(1000);
                    }
                }
            }
            foreach (var item in ThisBattleEnemies)
            {
                if (item.statusProtectCounterSS > 0)
                    item.statusProtectCounterSS += 1;
                if (item.statusProtectCounterSS == 3)
                {
                    item.StatusProtected = false;
                    Console.WriteLine(item.name + "'s status protection wore off");
                    Thread.Sleep(1000);
                }
                if (item.statusProtectCounterRF > 0)
                    item.statusProtectCounterRF += 1;
                if (item.statusProtectCounterRF == 5)
                {
                    item.StatusProtected = false;
                    Console.WriteLine(item.name + "'s status protection wore off");
                    Thread.Sleep(1000);
                }
                if (item.statusProtectCounterSW > 0)
                    item.statusProtectCounterSW += 1;
                if (item.statusProtectCounterSW == 4)
                {
                    item.StatusProtected = false;
                    Console.WriteLine(item.name + "'s status protection wore off");
                    Thread.Sleep(1000);
                }
            }
            //Damage protect check
            if (playerStats.DamageProtected == true)
            {
                playerStats.damageProtectCounter += 1;
                if (playerStats.damageProtectCounter == 2)
                {
                    playerStats.DamageProtected = false;
                    Console.WriteLine(playerStats.name + "'s damage protection wore off");
                    Thread.Sleep(1000);
                }
            }
            foreach (var item in ThisBattleMeebas)
            {
                if (item.DamageProtected == true)
                {
                    item.damageProtectCounter += 1;
                    if (item.damageProtectCounter == 2)
                    {
                        item.DamageProtected = false;
                        Console.WriteLine(item.name + "'s damage protection wore off");
                        Thread.Sleep(1000);
                    }
                }
            }
            foreach (var item in ThisBattleEnemies)
            {
                if (item.DamageProtected == true)
                {
                    item.damageProtectCounter += 1;
                    if (item.damageProtectCounter == 2)
                    {
                        item.DamageProtected = false;
                        Console.WriteLine(item.name + "'s damage protection wore off");
                        Thread.Sleep(1000);
                    }
                }
            }
            foreach (var item in ThisBattleMeebas)
            {
                if (item.CycloneCounter > 0)
                    item.CycloneCounter += 1; //before = 0, choose move = 1, move 1 = 2
                if (item.DustDevilCounter > 0)
                    item.DustDevilCounter += 1;
                if (item.SnowStormCounter > 0)
                    item.SnowStormCounter += 1;

                if (item.CycloneCounter == 3 || item.CycloneCounter == 4)
                {
                    playerStats.tempSpeed *= 1.3;
                    meeba.tempSpeed *= 1.3;
                    meeba2.tempSpeed *= 1.3;
                    playerStats.tempDefenseStatChange *= 1.3;
                    meeba.tempDefenseStatChange *= 1.3;
                    meeba2.tempDefenseStatChange *= 1.3;
                    Console.WriteLine("The cyclone raised speed and defense of allies");
                    Thread.Sleep(1200);
                    if (item.CycloneCounter == 4)
                        item.CycloneCounter = 0;
                }
                if (item.DustDevilCounter == 3 || item.DustDevilCounter == 4)
                {
                    playerStats.tempDefenseStatChange *= 1.3;
                    meeba.tempDefenseStatChange *= 1.3;
                    meeba2.tempDefenseStatChange *= 1.3;
                    opponentOne.tempSpeedStatChange *= 0.8;
                    opponentTwo.tempSpeedStatChange *= 0.8;
                    opponentThree.tempSpeedStatChange *= 0.8;
                    Console.WriteLine("The dust devil raised defense of all allies, and reduced speed of all opponents");
                    Thread.Sleep(1200);
                    if (item.DustDevilCounter == 4)
                        item.DustDevilCounter = 0;
                }
                if (item.SnowStormCounter == 3 || item.SnowStormCounter == 4)
                {
                    playerStats.playerCurrentHP += Math.Round(playerStats.playerMaxHP * 0.1);
                    if (playerStats.playerCurrentHP > playerStats.playerMaxHP)
                        playerStats.playerCurrentHP = playerStats.playerMaxHP;
                    meeba.currentHp += Math.Round(meeba.hp * 0.1);
                    if (meeba.currentHp > meeba.hp)
                        meeba.currentHp = meeba.hp;
                    meeba2.currentHp += Math.Round(meeba2.hp * 0.1);
                    if (meeba2.currentHp > meeba2.hp)
                        meeba2.currentHp = meeba2.hp;
                    Console.WriteLine("The snowstorm healed all allies a little");
                    Thread.Sleep(1200);
                    if (item.SnowStormCounter == 4)
                        item.SnowStormCounter = 0;
                }
            }
            foreach (var item in ThisBattleEnemies)
            {
                if (item.CycloneCounter > 0)
                    item.CycloneCounter += 1;
                if (item.DustDevilCounter > 0)
                    item.DustDevilCounter += 1;
                if (item.SnowStormCounter > 0)
                    item.SnowStormCounter += 1;

                if (item.CycloneCounter == 3 || item.CycloneCounter == 4)
                {
                    opponentOne.tempSpeedStatChange *= 1.3;
                    opponentTwo.tempSpeedStatChange *= 1.3;
                    opponentThree.tempSpeedStatChange *= 1.3;
                    opponentOne.tempDefenseStatChange *= 1.3;
                    opponentTwo.tempDefenseStatChange *= 1.3;
                    opponentThree.tempDefenseStatChange *= 1.3;
                    Console.WriteLine("The cyclone raised speed and defense of opponents");
                    Thread.Sleep(1200);
                    if (item.CycloneCounter == 4)
                        item.CycloneCounter = 0;
                }
                if (item.DustDevilCounter == 3 || item.DustDevilCounter == 4)
                {
                    opponentOne.tempDefenseStatChange *= 1.3;
                    opponentTwo.tempDefenseStatChange *= 1.3;
                    opponentThree.tempDefenseStatChange *= 1.3;
                    playerStats.tempSpeed *= 0.8;
                    meeba.tempSpeed *= 0.8;
                    meeba2.tempSpeed *= 0.8;
                    Console.WriteLine("The dust devil raised defense of all opponents, and reduced speed of all allies");
                    Thread.Sleep(1200);
                    if (item.DustDevilCounter == 4)
                        item.DustDevilCounter = 0;
                }
                if (item.SnowStormCounter == 3 || item.SnowStormCounter == 4)
                {
                    opponentOne.HP += Math.Round(opponentOne.MaxHP * 0.1);
                    if (opponentOne.HP > opponentOne.MaxHP)
                        opponentOne.HP = opponentOne.MaxHP;
                    opponentTwo.HP += Math.Round(opponentTwo.MaxHP * 0.1);
                    if (opponentTwo.HP > opponentTwo.MaxHP)
                        opponentTwo.HP = opponentTwo.MaxHP;
                    opponentThree.HP += Math.Round(opponentThree.MaxHP * 0.1);
                    if (opponentThree.HP > opponentThree.MaxHP)
                        opponentThree.HP = opponentThree.MaxHP;
                    Console.WriteLine("The snowstorm healed all opponents a little");
                    Thread.Sleep(1200);
                    if (item.SnowStormCounter == 4)
                        item.SnowStormCounter = 0;
                }
            }
        }

        public void PyroclasticFlowCheck()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.PyroclasticFlowCounter == 2) //If move after pyroclastic flow was set
                {
                    foreach (var item1 in ThisBattleEnemies)
                    {
                        if (item1.active == true && item1.HP > 0)
                        {
                            Console.Clear();
                            AllHPBars();
                            AllMPBars();
                            BattleSpriteRender();
                            tempAllyAttack = meebaItem.tempAttack;
                            if (item1.defensive == true)
                                tempOppDefense = item1.tempDefense;
                            else if (item1.defensive == false)
                                tempOppDefense = item1.tempDefenseStatChange;
                            tempAllyMoveBasePower = 16;
                            TypeAdvantageAlly();
                            STABAlly(); //tempAllySTAB = fire in this case
                            tempAllyHit = random.Next(meebaItem.hitRange, 101);
                            damageCalcAllyAttacking = 1 + Math.Round((((tempAllyAttack / tempOppDefense) * tempAllyMoveBasePower * tempAllyItemBonus * tempAllyTypeAdv * tempAllySTAB) / 100) * tempAllyHit);
                            item1.HP -= damageCalcAllyAttacking;
                            if (item1.HP < 0)
                                item1.HP = 0;
                            Console.WriteLine("{0} attacked {1} with Pyroclastic Flow", meebaItem.name, item1.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(item1.name + " took {0} damage", damageCalcAllyAttacking);
                            Thread.Sleep(1000);
                            Console.WriteLine(item1.name + " has {0} HP", item1.HP);
                            Thread.Sleep(1000);
                            if ((item1.HP - damageCalcAllyAttacking) <= 0)
                            {
                                Console.WriteLine("{0} defeated {1}", meebaItem.name, item1.name);
                                Thread.Sleep(1000);
                            }
                        }
                    }
                    meebaItem.PyroclasticFlowCounter = 0;
                }
            }
            //foreachenemy
            foreach (var Item in ThisBattleEnemies)
            {
                if (Item.PyroclasticFlowCounter == 2) //If move after pyroclastic flow was set
                {
                    if (playerStats.playerCurrentHP > 0)
                    {
                        Console.Clear();
                        AllHPBars();
                        AllMPBars();
                        BattleSpriteRender();
                        tempOppAttack = Item.tempAttack;
                        if (playerStats.defensive == true)
                            tempAllyDefense = playerStats.tempDefense;
                        else if (playerStats.defensive == false)
                            tempAllyDefense = playerStats.tempDefenseStatChange;
                        tempOppMoveBasePower = 16;
                        TypeAdvantageOppPlayer();
                        STABOpp();
                        tempOppHit = random.Next(Item.hit, 101);
                        damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                        playerStats.playerCurrentHP -= damageCalcOppAttacking;
                        if (playerStats.playerCurrentHP < 0)
                            playerStats.playerCurrentHP = 0;
                        Console.WriteLine("{0} attacked {1} with Pyroclastic Flow", Item.name, playerStats.name);
                        Thread.Sleep(1000);
                        Console.WriteLine(playerStats.name + " took {0} damage", damageCalcOppAttacking);
                        Thread.Sleep(1000);
                        Console.WriteLine(playerStats.name + " has {0} HP", playerStats.playerCurrentHP);
                        Thread.Sleep(1000);
                        if ((playerStats.playerCurrentHP - damageCalcOppAttacking) <= 0)
                        {
                            Console.WriteLine("{0} defeated {1}", Item.name, playerStats.name);
                            Thread.Sleep(1000);
                            currentState = BattleState.Lose;
                            break;
                        }
                    }
                    foreach (var meebaItem in ThisBattleMeebas)
                    {
                        if (meebaItem.currentHp > 0)
                        {
                            Console.Clear();
                            AllHPBars();
                            AllMPBars();
                            BattleSpriteRender();
                            tempOppAttack = Item.tempAttack;
                            if (meebaItem.defensive == true)
                                tempAllyDefense = meebaItem.tempDefense;
                            else if (meebaItem.defensive == false)
                                tempAllyDefense = meebaItem.tempDefenseStatChange;
                            tempOppMoveBasePower = 16;
                            currentMeeba = meebaItem.name;
                            TypeAdvantageOpp();
                            STABOpp();
                            tempOppHit = random.Next(Item.hit, 101);
                            damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                            meebaItem.currentHp -= damageCalcOppAttacking;
                            if (meebaItem.currentHp < 0)
                                meebaItem.currentHp = 0;
                            Console.WriteLine("{0} attacked {1} with Pyroclastic Flow", Item.name, meebaItem.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(meebaItem.name + " took {0} damage", damageCalcOppAttacking);
                            Thread.Sleep(1000);
                            Console.WriteLine(meebaItem.name + " has {0} HP", meebaItem.currentHp);
                            Thread.Sleep(1000);
                            if ((meebaItem.currentHp - damageCalcOppAttacking) <= 0)
                            {
                                Console.WriteLine("{0} defeated {1}", Item.name, meebaItem.name);
                                Thread.Sleep(1000);
                            }
                        }
                    }
                    Item.PyroclasticFlowCounter = 0;
                }
            }
        }

        public void PlayerChoice()
        {
            if (playerStats.isStunned == true && playerStats.playerCurrentHP > 0)
            {
                int stunCheck = random.Next(2);
                if (stunCheck == 0)
                {
                    playerStats.hasTakenTurn = true;
                    Console.WriteLine(playerStats.name + " is in a daze and cannot attack");
                    Thread.Sleep(1000);
                    playerStats.isStunned = false;
                    currentState = BattleState.SpeedComparison;
                }
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Gray;
                Console.WriteLine("What will " + playerStats.name + " do?:\n1: Attack \n2: Item \n3: Defend \n4: Run\nPlease enter an option number");
                Console.Write("> ");
                string input = Console.ReadLine().ToLower().Trim();
                if (input.Length > 80) //makes input max of 80 chars
                {
                    double textlength = input.Length;
                    for (int i = 80; i <= textlength; i += 80)
                    {
                        Console.CursorTop -= 1;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 1;
                    }
                    input = input.Remove(80);
                }
                do
                {
                    if (string.IsNullOrEmpty(input) || input != "1" && input != "2" && input != "3" && input != "4")
                    {
                        Console.CursorTop -= 1;
                        Console.Write(new string(' ', Console.WindowWidth));
                        Console.CursorTop -= 7;
                        Console.WriteLine("What will " + playerStats.name + " do?:\n1: Attack \n2: Item \n3: Defend \n4: Run\nPlease enter an option number");
                        Console.Write("> ");
                        input = Console.ReadLine().ToLower().Trim();
                        if (input.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = input.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            input = input.Remove(80);
                        }
                    }

                    if (input == "1") //attack
                    {
                        playerStats.defensive = false;
                        playerStats.MoveChoice = 1;
                        bool validAttackChoice = false;
                        if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                        {
                            opponentOne.playerTarget = true;
                            validAttackChoice = true;
                            Console.WriteLine(playerStats.name + " will attack " + opponentOne.name);
                            Thread.Sleep(1000);
                            resetMenu = false;
                        }
                        else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                            Console.WriteLine("Which enemy will you attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                        else
                            Console.WriteLine("Which enemy will you attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                        if (validAttackChoice != true)
                        {
                            Console.Write("> ");
                            string playerAttackInput = Console.ReadLine().ToLower().Trim();
                            if (playerAttackInput.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = playerAttackInput.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    Console.CursorTop -= 1;
                                }
                                playerAttackInput = playerAttackInput.Remove(80);
                            }
                            if (playerAttackInput == "back" || playerAttackInput == "exit" || playerAttackInput == "cancel")
                            {
                                resetMenu = true;
                                currentState = BattleState.Options;
                                break;
                            }
                            do
                            {
                                if (string.IsNullOrEmpty(playerAttackInput) || playerAttackInput != "1" && playerAttackInput != "2" && playerAttackInput != "3" || playerAttackInput == "1" && opponentOne.HP <= 0 || playerAttackInput == "2" && opponentTwo.HP <= 0 || playerAttackInput == "3" && opponentThree.HP <= 0)
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                        Console.CursorTop -= 3;
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.CursorTop -= 4;
                                    else
                                        Console.CursorTop -= 5;
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        opponentOne.playerTarget = true;
                                        validAttackChoice = true;
                                        Console.WriteLine(playerStats.name + " will attack " + opponentOne.name);
                                        resetMenu = false;
                                        Thread.Sleep(1000);
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will you attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will you attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                    Console.Write("> ");
                                    playerAttackInput = Console.ReadLine().ToLower().Trim();
                                    if (playerAttackInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = playerAttackInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            Console.CursorTop -= 1;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            Console.CursorTop -= 1;
                                        }
                                        playerAttackInput = playerAttackInput.Remove(80);
                                    }
                                }
                                else if (playerAttackInput == "1" && opponentOne.HP > 0 && opponentOne.active == true)
                                {
                                    opponentOne.playerTarget = true;
                                    validAttackChoice = true;
                                    Console.WriteLine(playerStats.name + " will attack " + opponentOne.name);
                                    Thread.Sleep(1000);
                                    resetMenu = false;
                                }
                                else if (playerAttackInput == "2" && opponentTwo.HP > 0 && opponentTwo.active == true)
                                {
                                    opponentTwo.playerTarget = true;
                                    validAttackChoice = true;
                                    Console.WriteLine(playerStats.name + " will attack " + opponentTwo.name);
                                    Thread.Sleep(1000);
                                    resetMenu = false;
                                }
                                else if (playerAttackInput == "3" && opponentThree.HP > 0 && opponentThree.active == true)
                                {
                                    opponentThree.playerTarget = true;
                                    validAttackChoice = true;
                                    Console.WriteLine(playerStats.name + " will attack " + opponentThree.name);
                                    Thread.Sleep(1000);
                                    resetMenu = false;
                                }
                                else
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                        Console.CursorTop -= 3;
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.CursorTop -= 4;
                                    else
                                        Console.CursorTop -= 5;
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        opponentOne.playerTarget = true;
                                        validAttackChoice = true;
                                        Console.WriteLine(playerStats.name + " will attack " + opponentOne.name);
                                        Thread.Sleep(1000);
                                        resetMenu = false;
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will you attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will you attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                    Console.Write("> ");
                                    playerAttackInput = Console.ReadLine().ToLower().Trim();
                                    if (playerAttackInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = playerAttackInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            Console.CursorTop -= 1;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            Console.CursorTop -= 1;
                                        }
                                        playerAttackInput = playerAttackInput.Remove(80);
                                    }
                                }
                            } while (validAttackChoice == false);
                        }
                        currentState = BattleState.SpeedComparison;
                    }
                    if (input == "2") //items
                    {
                        bool exit = false;
                        if (inventory.dictionary.Count == 0)
                        {
                            Console.WriteLine("You have no items to use!");
                            Thread.Sleep(1000);
                            currentState = BattleState.Options;
                        }
                        else
                        {
                            playerStats.defensive = false;
                            playerStats.MoveChoice = 2;
                            List<string> newInv = new List<string>();
                            List<int> newInvValues = new List<int>();

                            do //choose who to use item on
                            {
                                resetMenu = false;
                                newInv.Clear();
                                newInvValues.Clear();
                                Console.WriteLine("What item would you like to use?");
                                foreach (KeyValuePair<string, int> item in inventory.dictionary) //creates dictionary in order to reference index of item
                                {
                                    if (item.Value != 0)
                                    {
                                        newInv.Add(item.Key);
                                        newInvValues.Add(item.Value);
                                    }

                                }
                                for (int i = 0; i < newInv.Count; i++)
                                {
                                    if (newInvValues[i] != 0)
                                        Console.WriteLine("{0}: {1} ({2})", (i + 1), UppercaseFirst(newInv[i]), newInvValues[i]);
                                }
                                Console.Write("> ");
                                playerStats.itemUserInput = Console.ReadLine().ToLower().Trim();
                                if (playerStats.itemUserInput.Length > 80) //makes input max of 80 chars
                                {
                                    double textlength = playerStats.itemUserInput.Length;
                                    for (int i = 80; i <= textlength; i += 80)
                                    {
                                        Console.CursorTop -= 1;
                                        Console.Write(new string(' ', Console.WindowWidth));
                                        Console.CursorTop -= 1;
                                    }
                                    playerStats.itemUserInput = playerStats.itemUserInput.Remove(80);
                                }
                                //if not valid input:
                                if (string.IsNullOrEmpty(playerStats.itemUserInput) || playerStats.itemUserInput != "1" && playerStats.itemUserInput != "2" && playerStats.itemUserInput != "3" && playerStats.itemUserInput != "4" && playerStats.itemUserInput != "5" && playerStats.itemUserInput != "6" && playerStats.itemUserInput != "7" && playerStats.itemUserInput != "8" && playerStats.itemUserInput != "9" && playerStats.itemUserInput != "10" && playerStats.itemUserInput != "11" && playerStats.itemUserInput != "12" && playerStats.itemUserInput != "13" && playerStats.itemUserInput != "14" && playerStats.itemUserInput != "15" && playerStats.itemUserInput != "16" && playerStats.itemUserInput != "17" && playerStats.itemUserInput != "18" && playerStats.itemUserInput != "19" && playerStats.itemUserInput != "20" || Convert.ToInt32(playerStats.itemUserInput) > inventory.dictionary.Count)
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    for (int i = 1; i < (inventory.dictionary.Count + 1); i++)
                                    {
                                        if (inventory.dictionary.Count == i)
                                            Console.CursorTop -= (i + 2);
                                    }
                                    useableItem = false;
                                }
                                else //valid input
                                {
                                    int itemChoiceBattleInt = Convert.ToInt32(playerStats.itemUserInput);
                                    for (int i = 1; i < (inventory.dictionary.Count + 1); i++)
                                    {
                                        if (itemChoiceBattleInt == i)
                                        {
                                            itemChoice = newInv[itemChoiceBattleInt - 1];
                                            referenceCurrentItem();
                                            if (examItem.itemType == "null" || examItem.itemType != "healthgain" && examItem.itemType != "battleOffensive" && examItem.itemType != "mpgain" && examItem.itemType != "antidote" && examItem.itemType != "awakening") //OR OTHER ONES THAT ARE USEABLE
                                            {
                                                Console.CursorTop -= 1;
                                                Console.Write(new string(' ', Console.WindowWidth));
                                                Console.CursorTop -= 1;
                                                Console.WriteLine("You can't use this right now");
                                                Thread.Sleep(1000);
                                                useableItem = false;
                                                Console.CursorTop -= 1;
                                                Console.Write(new string(' ', Console.WindowWidth));
                                                for (int l = 1; l < (inventory.dictionary.Count + 1); l++)
                                                {
                                                    if (inventory.dictionary.Count == l)
                                                        Console.CursorTop -= (l + 2);
                                                }
                                            }
                                            else
                                            {
                                                useableItem = true;
                                                Console.WriteLine(playerStats.name + " will use the " + examItem.itemName);
                                                Thread.Sleep(1000);
                                                resetMenu = false;
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (useableItem == true)
                                    break;
                                if (playerStats.itemUserInput == "back" || playerStats.itemUserInput == "exit" || playerStats.itemUserInput == "cancel")
                                {
                                    resetMenu = true;
                                    currentState = BattleState.Options;
                                    exit = true;
                                    break;
                                }
                            } while (useableItem == false && exit == false);
                        }
                        //Choose target for item
                        do
                        {
                            playerStats.itemTarget = false;
                            if (storyCounter >= 2)
                                Console.WriteLine("Who will you use the " + examItem.itemName + " on?");

                            if (examItem.opponentTargetBattle == true)
                            {
                                if (examItem.itemType == "battleOffensive")
                                {
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        opponentOne.playerTarget = true;
                                        playerStats.itemTarget = true;
                                        Console.WriteLine(playerStats.name + " will target " + opponentOne.name);
                                        Thread.Sleep(1000);
                                        resetMenu = false;
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will you target? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will you target? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));

                                    if (playerStats.itemTarget != true)
                                    {
                                        Console.Write("> ");
                                        string targetItemInput = Console.ReadLine().ToLower().Trim();
                                        if (targetItemInput.Length > 80) //makes input max of 80 chars
                                        {
                                            double textlength = targetItemInput.Length;
                                            for (int i = 80; i <= textlength; i += 80)
                                            {
                                                Console.CursorTop -= 1;
                                                Console.Write(new string(' ', Console.WindowWidth));
                                                Console.CursorTop -= 1;
                                            }
                                            targetItemInput = targetItemInput.Remove(80);
                                        }
                                        if (targetItemInput == "back" || targetItemInput == "exit" || targetItemInput == "cancel")
                                        {
                                            resetMenu = true;
                                            currentState = BattleState.Options;
                                            exit = true;
                                            break;
                                        }
                                        do
                                        {
                                            if (string.IsNullOrEmpty(targetItemInput) || targetItemInput != "1" && targetItemInput != "2" && targetItemInput != "3" || targetItemInput == "1" && opponentOne.HP <= 0 || targetItemInput == "2" && opponentTwo.HP <= 0 || targetItemInput == "3" && opponentThree.HP <= 0)
                                            {
                                                Console.CursorTop -= 1;
                                                Console.Write(new string(' ', Console.WindowWidth));
                                                if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                                    Console.CursorTop -= 3;
                                                else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                                    Console.CursorTop -= 4;
                                                else
                                                    Console.CursorTop -= 5;
                                                if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                                {
                                                    opponentOne.playerTarget = true;
                                                    playerStats.itemTarget = true;
                                                    Console.WriteLine(playerStats.name + " will target " + opponentOne.name);
                                                    resetMenu = false;
                                                    Thread.Sleep(1000);
                                                }
                                                else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                                    Console.WriteLine("Which enemy will you target? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                                else
                                                    Console.WriteLine("Which enemy will you target? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                                Console.Write("> ");
                                                targetItemInput = Console.ReadLine().ToLower().Trim();
                                                if (targetItemInput.Length > 80) //makes input max of 80 chars
                                                {
                                                    double textlength = targetItemInput.Length;
                                                    for (int i = 80; i <= textlength; i += 80)
                                                    {
                                                        Console.CursorTop -= 1;
                                                        Console.Write(new string(' ', Console.WindowWidth));
                                                        Console.CursorTop -= 1;
                                                    }
                                                    targetItemInput = targetItemInput.Remove(80);
                                                }
                                            }
                                            else if (targetItemInput == "1" && opponentOne.HP > 0 && opponentOne.active == true)
                                            {
                                                opponentOne.playerTarget = true;
                                                playerStats.itemTarget = true;
                                                Console.WriteLine(playerStats.name + " will target " + opponentOne.name);
                                                Thread.Sleep(1000);
                                                resetMenu = false;
                                            }
                                            else if (targetItemInput == "2" && opponentTwo.HP > 0 && opponentTwo.active == true)
                                            {
                                                opponentTwo.playerTarget = true;
                                                playerStats.itemTarget = true;
                                                Console.WriteLine(playerStats.name + " will target " + opponentTwo.name);
                                                Thread.Sleep(1000);
                                                resetMenu = false;
                                            }
                                            else if (targetItemInput == "3" && opponentThree.HP > 0 && opponentThree.active == true)
                                            {
                                                opponentThree.playerTarget = true;
                                                playerStats.itemTarget = true;
                                                Console.WriteLine(playerStats.name + " will target " + opponentThree.name);
                                                Thread.Sleep(1000);
                                                resetMenu = false;
                                            }
                                            else
                                            {
                                                Console.CursorTop -= 1;
                                                Console.Write(new string(' ', Console.WindowWidth));
                                                if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                                    Console.CursorTop -= 3;
                                                else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                                    Console.CursorTop -= 4;
                                                else
                                                    Console.CursorTop -= 5;
                                                if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                                {
                                                    opponentOne.playerTarget = true;
                                                    playerStats.itemTarget = true;
                                                    Console.WriteLine(playerStats.name + " will target " + opponentOne.name);
                                                    Thread.Sleep(1000);
                                                    resetMenu = false;
                                                }
                                                else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                                    Console.WriteLine("Which enemy will you target? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                                else
                                                    Console.WriteLine("Which enemy will you target? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                                Console.Write("> ");
                                                targetItemInput = Console.ReadLine().ToLower().Trim();
                                                if (targetItemInput.Length > 80) //makes input max of 80 chars
                                                {
                                                    double textlength = targetItemInput.Length;
                                                    for (int i = 80; i <= textlength; i += 80)
                                                    {
                                                        Console.CursorTop -= 1;
                                                        Console.Write(new string(' ', Console.WindowWidth));
                                                        Console.CursorTop -= 1;
                                                    }
                                                    targetItemInput = targetItemInput.Remove(80);
                                                }
                                            }
                                        } while (playerStats.itemTarget == false);
                                    }
                                }
                            }

                            else if (examItem.allyTargetBattle == true)
                            {
                                if (storyCounter < 2)
                                {
                                    playerStats.playerTarget = true;
                                    playerStats.itemTarget = true;
                                    Console.WriteLine("You will target yourself");
                                    Thread.Sleep(1000);
                                }
                                else
                                {
                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                        Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba2.name);
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                        Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba.name);
                                    else
                                        Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba.name + " \n3: " + meeba2.name);
                                    Console.Write("> ");
                                    string itemAllyTarget = Console.ReadLine().ToLower().Trim();
                                    if (itemAllyTarget.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = itemAllyTarget.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            Console.CursorTop -= 1;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            Console.CursorTop -= 1;
                                        }
                                        itemAllyTarget = itemAllyTarget.Remove(80);
                                    }
                                    do
                                    {
                                        if (string.IsNullOrEmpty(itemAllyTarget) || itemAllyTarget != "1" && itemAllyTarget != "2" && itemAllyTarget != "3" || itemAllyTarget == "1" && playerStats.playerCurrentHP <= 0 || itemAllyTarget == "2" && meeba.currentHp <= 0 || itemAllyTarget == "3" && meeba2.currentHp <= 0)
                                        {
                                            Console.CursorTop -= 1;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp <= 0)
                                                Console.CursorTop -= 3;
                                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                                Console.CursorTop -= 4;
                                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                                Console.CursorTop -= 4;
                                            else
                                                Console.CursorTop -= 5;

                                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                                Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba.name);
                                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                                Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba2.name);
                                            else
                                                Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba.name + " \n3: " + meeba2.name);
                                            Console.Write("> ");
                                            itemAllyTarget = Console.ReadLine().ToLower().Trim();
                                            if (itemAllyTarget.Length > 80) //makes input max of 80 chars
                                            {
                                                double textlength = itemAllyTarget.Length;
                                                for (int i = 80; i <= textlength; i += 80)
                                                {
                                                    Console.CursorTop -= 1;
                                                    Console.Write(new string(' ', Console.WindowWidth));
                                                    Console.CursorTop -= 1;
                                                }
                                                itemAllyTarget = itemAllyTarget.Remove(80);
                                            }
                                        }
                                        else if (itemAllyTarget == "1" && playerStats.playerCurrentHP > 0)
                                        {
                                            playerStats.playerTarget = true;
                                            playerStats.itemTarget = true;
                                            Console.WriteLine("You will target yourself");
                                            Thread.Sleep(1000);
                                        }
                                        else if (itemAllyTarget == "2" && meeba.currentHp > 0)
                                        {
                                            meeba.playerTarget = true;
                                            playerStats.itemTarget = true;
                                            Console.WriteLine("You will target " + meeba.name);
                                            Thread.Sleep(1000);
                                        }
                                        else if (itemAllyTarget == "2" && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                        {
                                            meeba2.playerTarget = true;
                                            playerStats.itemTarget = true;
                                            Console.WriteLine("You will target " + meeba2.name);
                                            Thread.Sleep(1000);
                                        }
                                        else if (itemAllyTarget == "3" && meeba2.currentHp > 0)
                                        {
                                            meeba2.playerTarget = true;
                                            playerStats.itemTarget = true;
                                            Console.WriteLine("You will target " + meeba2.name);
                                            Thread.Sleep(1000);
                                        }
                                        else
                                        {
                                            Console.CursorTop -= 1;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp <= 0)
                                                Console.CursorTop -= 3;
                                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                                Console.CursorTop -= 4;
                                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                                Console.CursorTop -= 4;
                                            else
                                                Console.CursorTop -= 5;

                                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                                Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba.name);
                                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                                Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba2.name);
                                            else
                                                Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba.name + " \n3: " + meeba2.name);
                                            Console.Write("> ");
                                            itemAllyTarget = Console.ReadLine().ToLower().Trim();
                                            if (itemAllyTarget.Length > 80) //makes input max of 80 chars
                                            {
                                                double textlength = itemAllyTarget.Length;
                                                for (int i = 80; i <= textlength; i += 80)
                                                {
                                                    Console.CursorTop -= 1;
                                                    Console.Write(new string(' ', Console.WindowWidth));
                                                    Console.CursorTop -= 1;
                                                }
                                                itemAllyTarget = itemAllyTarget.Remove(80);
                                            }
                                        }
                                    } while (playerStats.itemTarget == false);
                                }
                            }
                        } while (playerStats.itemTarget == false && exit == false);

                        if (resetMenu == true)
                            currentState = BattleState.Options;
                        else
                            currentState = BattleState.SpeedComparison;
                    }
                    if (input == "3") //defend
                    {
                        playerStats.defensive = true;
                        playerStats.MoveChoice = 3;
                        Console.WriteLine(playerStats.name + " will defend");
                        Thread.Sleep(1000);
                        currentState = BattleState.SpeedComparison;
                    }
                    if (input == "4") //run
                    {
                        playerStats.defensive = true;
                        playerStats.MoveChoice = 4;
                        Console.WriteLine(playerStats.name + " will attempt to run");
                        Thread.Sleep(1000);
                        currentState = BattleState.SpeedComparison;
                    }
                } while (string.IsNullOrEmpty(input) || input != "1" && input != "2" && input != "3" && input != "4");
                if (resetMenu == true)
                    currentState = BattleState.Options;
            }
        }

        public void MeebaChoice()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.isCurrent == true)
                {
                    if (meebaItem.gotMeeba == true && meebaItem.currentHp > 0 && meebaItem.isAsleep != true)
                    {
                        Console.WriteLine("What will " + meebaItem.name + " do?\n1: Attack \n2: Defend\nPlease enter an option number");
                        Console.Write("> ");
                        string meebaInput = Console.ReadLine().ToLower().Trim();
                        if (meebaInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = meebaInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 1;
                            }
                            meebaInput = meebaInput.Remove(80);
                        }
                        do
                        {
                            if (string.IsNullOrEmpty(meebaInput) || meebaInput != "1" && meebaInput != "2")
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                Console.CursorTop -= 5;
                                Console.WriteLine("What will " + meebaItem.name + " do?\n1: Attack \n2: Defend\nPlease enter an option number");
                                Console.Write("> ");
                                meebaInput = Console.ReadLine().ToLower().Trim();
                                if (meebaInput.Length > 80) //makes input max of 80 chars
                                {
                                    double textlength = meebaInput.Length;
                                    for (int i = 80; i <= textlength; i += 80)
                                    {
                                        Console.CursorTop -= 1;
                                        Console.Write(new string(' ', Console.WindowWidth));
                                        Console.CursorTop -= 1;
                                    }
                                    meebaInput = meebaInput.Remove(80);
                                }
                            }

                            if (meebaInput == "1")
                            {
                                meebaItem.battleChoice = 1;
                                Console.WriteLine("What move will " + meebaItem.name + " use?");
                                for (int i = 0; i < meebaItem.Moves.Count; i++)
                                {
                                    Console.WriteLine((i + 1) + ": " + meebaItem.Moves[i]);
                                }
                                meebaItem.SpecialChoiceValid = false;
                                do
                                {
                                    meebaChooseMove(); //instanciates move based on user input from list of meeba moves
                                } while (meebaItem.SpecialChoiceValid == false && resetMenu == false);
                                if (resetMenu == true)
                                {
                                    currentState = BattleState.Options;
                                    break;
                                }
                                meebaItem.validAttackChoice = false;
                                meebaItem.validDefenseChoice = false;
                                meebaChooseTarget(); //chooses target based on user input
                            }
                            if (meebaInput == "2")
                            {
                                meebaItem.battleChoice = 2;
                                meebaItem.defensive = true;
                                Console.WriteLine(meebaItem.name + " will defend");
                                Thread.Sleep(1000);
                            }
                        } while (string.IsNullOrEmpty(meebaInput) || meebaInput != "1" && meebaInput != "2");
                    }
                }
            }
        }

        public void EnemyAIChoice()
        {
            foreach (var enemy in ThisBattleEnemies)
            {
                if (enemy.HP > 0 && enemy.active == true)
                {
                    int enemyRandom1 = random.Next(0, 7);
                    int enemyRandomTarget1 = random.Next(0, 3);
                    int enemyRandomTarget21 = random.Next(0, 2);
                    if (enemy.HP > Math.Round((enemy.MaxHP / 5)))
                    {
                        int enemyRandomAttack = random.Next(0, 4);
                        if (enemy.MP < Math.Round(enemy.MaxMP / 5) || enemyRandomAttack == 2 || enemyRandomAttack == 3)
                        {
                            enemy.choice = 1; //attack 
                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp > 0 && storyCounter >= 2) //if all allies alive
                            {
                                //Targetting
                                if (enemyRandomTarget1 == 0)
                                {
                                    if (enemy == opponentOne)
                                        playerStats.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        playerStats.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        playerStats.opponent3Target = true;
                                }
                                else if (enemyRandomTarget1 == 1)
                                {
                                    if (enemy == opponentOne)
                                        meeba.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        meeba.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        meeba.opponent3Target = true;
                                }
                                else if (enemyRandomTarget1 == 2)
                                {
                                    if (enemy == opponentOne)
                                        meeba2.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        meeba2.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        meeba2.opponent3Target = true;
                                }
                            }
                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0 && storyCounter >= 2)
                            {
                                if (enemyRandomTarget21 == 0)
                                {
                                    if (enemy == opponentOne)
                                        playerStats.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        playerStats.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        playerStats.opponent3Target = true;
                                }
                                else if (enemyRandomTarget21 == 1)
                                {
                                    if (enemy == opponentOne)
                                        meeba.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        meeba.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        meeba.opponent3Target = true;
                                }
                            }
                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0 && storyCounter >= 2)
                            {
                                if (enemyRandomTarget21 == 0)
                                {
                                    if (enemy == opponentOne)
                                        playerStats.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        playerStats.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        playerStats.opponent3Target = true;
                                }
                                else if (enemyRandomTarget21 == 1)
                                {
                                    if (enemy == opponentOne)
                                        meeba2.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        meeba2.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        meeba2.opponent3Target = true;
                                }
                            }
                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp <= 0 && storyCounter >= 2)
                            {
                                if (enemy == opponentOne)
                                    playerStats.opponent1Target = true;
                                else if (enemy == opponentTwo)
                                    playerStats.opponent2Target = true;
                                else if (enemy == opponentThree)
                                    playerStats.opponent3Target = true;
                            }
                            else
                            {
                                if (enemy == opponentOne)
                                    playerStats.opponent1Target = true;
                                else if (enemy == opponentTwo)
                                    playerStats.opponent2Target = true;
                                else if (enemy == opponentThree)
                                    playerStats.opponent3Target = true;
                            }
                        }
                        else if ((enemy.MP >= Math.Round((enemy.MaxMP / 5))))
                        {
                            enemy.choice = 4; //special 
                            if (enemy.active == true && enemy.HP > 0)
                            {
                                if (enemyRandomAttack == 0)
                                {
                                    currentEnemy = enemy; //var to say which attack is chosen so can do this in attack method
                                    enemy.MoveChoice = enemy.Moves[0];
                                    referenceCurrentEnemyMove();
                                }
                                else if (enemyRandomAttack == 1)
                                {
                                    currentEnemy = enemy;
                                    enemy.MoveChoice = enemy.Moves[1];
                                    referenceCurrentEnemyMove();
                                }
                                if (enemy.currentMove.attackType == "Offensive" || enemy.currentMove.attackType == "OffensiveAndDefensive" || enemy.currentMove.attackType == "OffensiveAndDefensiveAll")
                                {
                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp > 0 && storyCounter >= 2) //if all allies alive
                                    {
                                        //Targetting
                                        if (enemyRandomTarget1 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                playerStats.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                playerStats.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                playerStats.opponent3Target = true;
                                        }
                                        else if (enemyRandomTarget1 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                meeba.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                meeba.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                meeba.opponent3Target = true;
                                        }
                                        else if (enemyRandomTarget1 == 2)
                                        {
                                            if (enemy == opponentOne)
                                                meeba2.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                meeba2.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                meeba2.opponent3Target = true;
                                        }
                                    }
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0 && storyCounter >= 2)
                                    {
                                        if (enemyRandomTarget21 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                playerStats.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                playerStats.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                playerStats.opponent3Target = true;
                                        }
                                        else if (enemyRandomTarget21 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                meeba.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                meeba.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                meeba.opponent3Target = true;
                                        }
                                    }
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0 && storyCounter >= 2)
                                    {
                                        if (enemyRandomTarget21 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                playerStats.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                playerStats.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                playerStats.opponent3Target = true;
                                        }
                                        else if (enemyRandomTarget21 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                meeba2.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                meeba2.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                meeba2.opponent3Target = true;
                                        }
                                    }
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp <= 0 && storyCounter >= 2)
                                    {
                                        if (enemy == opponentOne)
                                            playerStats.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            playerStats.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            playerStats.opponent3Target = true;
                                    }
                                    else
                                    {
                                        if (enemy == opponentOne)
                                            playerStats.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            playerStats.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            playerStats.opponent3Target = true;
                                    }
                                }
                                if (enemy.currentMove.attackType == "OffensiveAll")
                                {
                                    if (playerStats.playerCurrentHP > 0)
                                    {
                                        if (enemy == opponentOne)
                                            playerStats.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            playerStats.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            playerStats.opponent3Target = true;
                                    }
                                    if (meeba.currentHp > 0 && storyCounter >= 2)
                                    {
                                        if (enemy == opponentOne)
                                            meeba.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            meeba.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            meeba.opponent3Target = true;
                                    }
                                    if (meeba2.currentHp > 0 && storyCounter >= 2)
                                    {
                                        if (enemy == opponentOne)
                                            meeba2.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            meeba2.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            meeba2.opponent3Target = true;
                                    }
                                    if (enemy.currentMove.name == "Pyroclastic Flow")
                                        enemy.PyroclasticFlowCounter = 1;
                                }
                                if (enemy.currentMove.attackType == "Defensive")
                                {
                                    int oppRandomTarget1 = random.Next(0, 3);
                                    int oppRandomTarget21 = random.Next(0, 2);
                                    if (opponentOne.HP > 0 && opponentTwo.HP > 0 && opponentThree.HP > 0) //if all allies alive
                                    {
                                        //Targetting
                                        if (oppRandomTarget1 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                opponentOne.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentOne.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentOne.opponent3Target = true;
                                        }
                                        else if (oppRandomTarget1 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                opponentTwo.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentTwo.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentTwo.opponent3Target = true;
                                        }
                                        else if (oppRandomTarget1 == 2)
                                        {
                                            if (enemy == opponentOne)
                                                opponentThree.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentThree.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentThree.opponent3Target = true;
                                        }
                                    }
                                    else if (opponentOne.HP > 0 && opponentTwo.HP > 0 && opponentThree.HP <= 0)
                                    {
                                        if (oppRandomTarget21 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                opponentOne.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentOne.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentOne.opponent3Target = true;
                                        }
                                        else if (oppRandomTarget21 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                opponentTwo.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentTwo.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentTwo.opponent3Target = true;
                                        }
                                    }
                                    else if (opponentOne.HP > 0 && opponentTwo.HP <= 0 && opponentThree.HP > 0)
                                    {
                                        if (oppRandomTarget21 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                opponentOne.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentOne.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentOne.opponent3Target = true;
                                        }
                                        else if (oppRandomTarget21 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                opponentThree.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentThree.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentThree.opponent3Target = true;
                                        }
                                    }
                                    else if (opponentOne.HP <= 0 && opponentTwo.HP > 0 && opponentThree.HP > 0)
                                    {
                                        if (enemyRandomTarget21 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                opponentTwo.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentTwo.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentTwo.opponent3Target = true;
                                        }
                                        else if (enemyRandomTarget21 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                opponentThree.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentThree.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentThree.opponent3Target = true;
                                        }
                                    }
                                    else if (opponentOne.HP > 0 && opponentTwo.HP <= 0 && opponentThree.HP <= 0)
                                    {
                                        if (enemy == opponentOne)
                                            opponentOne.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            opponentOne.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            opponentOne.opponent3Target = true;
                                    }
                                    else if (opponentOne.HP <= 0 && opponentTwo.HP > 0 && opponentThree.HP <= 0)
                                    {
                                        if (enemy == opponentOne)
                                            opponentTwo.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            opponentTwo.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            opponentTwo.opponent3Target = true;
                                    }
                                    else if (opponentOne.HP <= 0 && opponentTwo.HP <= 0 && opponentThree.HP > 0)
                                    {
                                        if (enemy == opponentOne)
                                            opponentThree.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            opponentThree.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            opponentThree.opponent3Target = true;
                                    }
                                }
                                if (enemy.currentMove.attackType == "OffensiveAndDefensive")
                                {
                                    if (enemy == opponentOne)
                                        opponentOne.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        opponentTwo.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        opponentThree.opponent3Target = true;
                                }
                                if (enemy.currentMove.attackType == "DefensiveAll" || enemy.currentMove.attackType == "OffensiveAndDefensiveAll")
                                {
                                    if (opponentOne.HP > 0)
                                    {
                                        if (enemy == opponentOne)
                                            opponentOne.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            opponentOne.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            opponentOne.opponent3Target = true;
                                    }
                                    if (opponentTwo.HP > 0)
                                    {
                                        if (enemy == opponentOne)
                                            opponentTwo.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            opponentTwo.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            opponentTwo.opponent3Target = true;
                                    }
                                    if (opponentThree.HP > 0)
                                    {
                                        if (enemy == opponentOne)
                                            opponentThree.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            opponentThree.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            opponentThree.opponent3Target = true;
                                    }
                                }
                            }
                        }
                    }

                    else if (enemy.HP <= Math.Round(enemy.MaxHP / 5))
                    {
                        if (enemyRandom1 == 0)
                        {
                            enemy.choice = 3; //run
                            enemy.defensive = true;
                        }
                        else if (enemyRandom1 == 1 || enemyRandom1 == 2)
                        {
                            enemy.choice = 2; //defend
                            enemy.defensive = true;
                        }
                        else
                        {
                            enemy.choice = 1; //attack 
                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp > 0 && storyCounter >= 2) //if all allies alive
                            {
                                if (enemyRandomTarget1 == 0)
                                {
                                    if (enemy == opponentOne)
                                        playerStats.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        playerStats.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        playerStats.opponent3Target = true;
                                }
                                else if (enemyRandomTarget1 == 1 && storyCounter >= 2)
                                {
                                    if (enemy == opponentOne)
                                        meeba.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        meeba.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        meeba.opponent3Target = true;
                                }
                                else if (enemyRandomTarget1 == 2 && storyCounter >= 2)
                                {
                                    if (enemy == opponentOne)
                                        meeba2.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        meeba2.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        meeba2.opponent3Target = true;
                                }
                            }
                            else
                            {
                                if (enemy == opponentOne)
                                    playerStats.opponent1Target = true;
                                else if (enemy == opponentTwo)
                                    playerStats.opponent2Target = true;
                                else if (enemy == opponentThree)
                                    playerStats.opponent3Target = true;
                            }
                        }
                    }
                }
            }
        }

        public void referenceCurrentMeebaMove()
        {
            switch (meeba.MoveChoice)
            {
                case "Meeba Power":
                    meeba.currentMove = new MeebaPower();
                    break;
                case "Lava Bubble":
                    meeba.currentMove = new LavaBubble();
                    break;
                case "Phoenix Fire":
                    meeba.currentMove = new PhoenixFire();
                    break;
                case "Pyroclastic Flow":
                    meeba.currentMove = new PyroclasticFlow();
                    break;
                case "Inferno":
                    meeba.currentMove = new Inferno();
                    break;
                case "Poison Spores":
                    meeba.currentMove = new PoisonSpores();
                    break;
                case "Tangleweed":
                    meeba.currentMove = new Tangleweed();
                    break;
                case "Slumber Dust":
                    meeba.currentMove = new SlumberDust();
                    break;
                case "Thorn Grip":
                    meeba.currentMove = new ThornGrip();
                    break;
                case "Grainmail":
                    meeba.currentMove = new Grainmail();
                    break;
                case "Quake":
                    meeba.currentMove = new Quake();
                    break;
                case "Sand Shroud":
                    meeba.currentMove = new SandShroud();
                    break;
                case "Rock Fort":
                    meeba.currentMove = new RockFort();
                    break;
                case "Static Shock":
                    meeba.currentMove = new StaticShock();
                    break;
                case "Windstorm":
                    meeba.currentMove = new Windstorm();
                    break;
                case "Tailwind":
                    meeba.currentMove = new Tailwind();
                    break;
                case "Cyclone":
                    meeba.currentMove = new Cyclone();
                    break;
                case "Tide Pool":
                    meeba.currentMove = new TidePool();
                    break;
                case "Bubble Jet":
                    meeba.currentMove = new BubbleJet();
                    break;
                case "Deluge":
                    meeba.currentMove = new Deluge();
                    break;
                case "Monsoon":
                    meeba.currentMove = new Monsoon();
                    break;
                case "Bio Acid":
                    meeba.currentMove = new BioAcid();
                    break;
                case "Pyriscent Bullets":
                    meeba.currentMove = new PyriscentBullets();
                    break;
                case "Charcoal Smog":
                    meeba.currentMove = new CharcoalSmog();
                    break;
                case "Solar Flare":
                    meeba.currentMove = new SolarFlare();
                    break;
                case "Stonewort":
                    meeba.currentMove = new Stonewort();
                    break;
                case "Thicket Surge":
                    meeba.currentMove = new ThicketSurge();
                    break;
                case "Toxic Soil":
                    meeba.currentMove = new ToxicSoil();
                    break;
                case "Leaching Roots":
                    meeba.currentMove = new LeachingRoots();
                    break;
                case "Sandstorm":
                    meeba.currentMove = new Sandstorm();
                    break;
                case "Erode":
                    meeba.currentMove = new Erode();
                    break;
                case "Landslide":
                    meeba.currentMove = new Landslide();
                    break;
                case "Dust Devil":
                    meeba.currentMove = new DustDevil();
                    break;
                case "Hail":
                    meeba.currentMove = new Hail();
                    break;
                case "Snowstorm":
                    meeba.currentMove = new Snowstorm();
                    break;
                case "Curelonimbus":
                    meeba.currentMove = new Curelonimbus();
                    break;
                case "Cloud Burst":
                    meeba.currentMove = new CloudBurst();
                    break;
                case "Vaporise":
                    meeba.currentMove = new Vaporise();
                    break;
                case "Hot Spring":
                    meeba.currentMove = new HotSpring();
                    break;
                case "Geyser":
                    meeba.currentMove = new Geyser();
                    break;
                case "Hydrothermal Blast":
                    meeba.currentMove = new HydrothermalBlast();
                    break;
            }
        }

        public void referenceCurrentMeeba2Move()
        {
            switch (meeba2.MoveChoice)
            {
                case "Meeba Power":
                    meeba2.currentMove = new MeebaPower();
                    break;
                case "Lava Bubble":
                    meeba2.currentMove = new LavaBubble();
                    break;
                case "Phoenix Fire":
                    meeba2.currentMove = new PhoenixFire();
                    break;
                case "Pyroclastic Flow":
                    meeba2.currentMove = new PyroclasticFlow();
                    break;
                case "Inferno":
                    meeba2.currentMove = new Inferno();
                    break;
                case "Poison Spores":
                    meeba2.currentMove = new PoisonSpores();
                    break;
                case "Tangleweed":
                    meeba2.currentMove = new Tangleweed();
                    break;
                case "Slumber Dust":
                    meeba2.currentMove = new SlumberDust();
                    break;
                case "Thorn Grip":
                    meeba2.currentMove = new ThornGrip();
                    break;
                case "Grainmail":
                    meeba2.currentMove = new Grainmail();
                    break;
                case "Quake":
                    meeba2.currentMove = new Quake();
                    break;
                case "Sand Shroud":
                    meeba2.currentMove = new SandShroud();
                    break;
                case "Rock Fort":
                    meeba2.currentMove = new RockFort();
                    break;
                case "Static Shock":
                    meeba2.currentMove = new StaticShock();
                    break;
                case "Windstorm":
                    meeba2.currentMove = new Windstorm();
                    break;
                case "Tailwind":
                    meeba2.currentMove = new Tailwind();
                    break;
                case "Cyclone":
                    meeba2.currentMove = new Cyclone();
                    break;
                case "Tide Pool":
                    meeba2.currentMove = new TidePool();
                    break;
                case "Bubble Jet":
                    meeba2.currentMove = new BubbleJet();
                    break;
                case "Deluge":
                    meeba2.currentMove = new Deluge();
                    break;
                case "Monsoon":
                    meeba2.currentMove = new Monsoon();
                    break;
                case "Bio Acid":
                    meeba2.currentMove = new BioAcid();
                    break;
                case "Pyriscent Bullets":
                    meeba2.currentMove = new PyriscentBullets();
                    break;
                case "Charcoal Smog":
                    meeba2.currentMove = new CharcoalSmog();
                    break;
                case "Solar Flare":
                    meeba2.currentMove = new SolarFlare();
                    break;
                case "Stonewort":
                    meeba2.currentMove = new Stonewort();
                    break;
                case "Thicket Surge":
                    meeba2.currentMove = new ThicketSurge();
                    break;
                case "Toxic Soil":
                    meeba2.currentMove = new ToxicSoil();
                    break;
                case "Leaching Roots":
                    meeba2.currentMove = new LeachingRoots();
                    break;
                case "Sandstorm":
                    meeba2.currentMove = new Sandstorm();
                    break;
                case "Erode":
                    meeba2.currentMove = new Erode();
                    break;
                case "Landslide":
                    meeba2.currentMove = new Landslide();
                    break;
                case "Dust Devil":
                    meeba2.currentMove = new DustDevil();
                    break;
                case "Hail":
                    meeba2.currentMove = new Hail();
                    break;
                case "Snowstorm":
                    meeba2.currentMove = new Snowstorm();
                    break;
                case "Curelonimbus":
                    meeba2.currentMove = new Curelonimbus();
                    break;
                case "Cloud Burst":
                    meeba2.currentMove = new CloudBurst();
                    break;
                case "Vaporise":
                    meeba2.currentMove = new Vaporise();
                    break;
                case "Hot Spring":
                    meeba2.currentMove = new HotSpring();
                    break;
                case "Geyser":
                    meeba2.currentMove = new Geyser();
                    break;
                case "Hydrothermal Blast":
                    meeba2.currentMove = new HydrothermalBlast();
                    break;
            }
        }

        public void referenceCurrentEnemyMove()
        {
            foreach (var item in ThisBattleEnemies)
            {
                if (item.ID == 1 && currentEnemy == item || item.ID == 2 && currentEnemy == item || item.ID == 3 && currentEnemy == item)
                {
                    switch (item.MoveChoice)
                    {
                        case "Meeba Power":
                            item.currentMove = new MeebaPower();
                            break;
                        case "Lava Bubble":
                            item.currentMove = new LavaBubble();
                            break;
                        case "Phoenix Fire":
                            item.currentMove = new PhoenixFire();
                            break;
                        case "Pyroclastic Flow":
                            item.currentMove = new PyroclasticFlow();
                            break;
                        case "Inferno":
                            item.currentMove = new Inferno();
                            break;
                        case "Poison Spores":
                            item.currentMove = new PoisonSpores();
                            break;
                        case "Tangleweed":
                            item.currentMove = new Tangleweed();
                            break;
                        case "Slumber Dust":
                            item.currentMove = new SlumberDust();
                            break;
                        case "Thorn Grip":
                            item.currentMove = new ThornGrip();
                            break;
                        case "Grainmail":
                            item.currentMove = new Grainmail();
                            break;
                        case "Quake":
                            item.currentMove = new Quake();
                            break;
                        case "Sand Shroud":
                            item.currentMove = new SandShroud();
                            break;
                        case "Rock Fort":
                            item.currentMove = new RockFort();
                            break;
                        case "Static Shock":
                            item.currentMove = new StaticShock();
                            break;
                        case "Windstorm":
                            item.currentMove = new Windstorm();
                            break;
                        case "Tailwind":
                            item.currentMove = new Tailwind();
                            break;
                        case "Cyclone":
                            item.currentMove = new Cyclone();
                            break;
                        case "Tide Pool":
                            item.currentMove = new TidePool();
                            break;
                        case "Bubble Jet":
                            item.currentMove = new BubbleJet();
                            break;
                        case "Deluge":
                            item.currentMove = new Deluge();
                            break;
                        case "Monsoon":
                            item.currentMove = new Monsoon();
                            break;
                        case "Bio Acid":
                            item.currentMove = new BioAcid();
                            break;
                        case "Pyriscent Bullets":
                            item.currentMove = new PyriscentBullets();
                            break;
                        case "Charcoal Smog":
                            item.currentMove = new CharcoalSmog();
                            break;
                        case "Solar Flare":
                            item.currentMove = new SolarFlare();
                            break;
                        case "Stonewort":
                            item.currentMove = new Stonewort();
                            break;
                        case "Thicket Surge":
                            item.currentMove = new ThicketSurge();
                            break;
                        case "Toxic Soil":
                            item.currentMove = new ToxicSoil();
                            break;
                        case "Leaching Roots":
                            item.currentMove = new LeachingRoots();
                            break;
                        case "Sandstorm":
                            item.currentMove = new Sandstorm();
                            break;
                        case "Erode":
                            item.currentMove = new Erode();
                            break;
                        case "Landslide":
                            item.currentMove = new Landslide();
                            break;
                        case "Dust Devil":
                            item.currentMove = new DustDevil();
                            break;
                        case "Hail":
                            item.currentMove = new Hail();
                            break;
                        case "Snowstorm":
                            item.currentMove = new Snowstorm();
                            break;
                        case "Curelonimbus":
                            item.currentMove = new Curelonimbus();
                            break;
                        case "Cloud Burst":
                            item.currentMove = new CloudBurst();
                            break;
                        case "Vaporise":
                            item.currentMove = new Vaporise();
                            break;
                        case "Hot Spring":
                            item.currentMove = new HotSpring();
                            break;
                        case "Geyser":
                            item.currentMove = new Geyser();
                            break;
                        case "Hydrothermal Blast":
                            item.currentMove = new HydrothermalBlast();
                            break;
                    }
                }
            }
        }

        public void meebaChooseMove()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            resetMenu = false;

            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (resetMenu == true)
                    break;
                if (meebaItem.isCurrent == true)
                {
                    if (meebaItem.isStunned == true && meebaItem.currentHp > 0)
                    {
                        int stunCheck = random.Next(2);
                        if (stunCheck == 0)
                        {
                            meebaItem.hasTakenTurn = true;
                            Console.WriteLine(meebaItem.name + " is in a daze and cannot attack");
                            Thread.Sleep(1000);
                            meebaItem.isStunned = false;
                            currentState = BattleState.SpeedComparison;
                        }
                    }
                    else
                    {
                        do
                        {
                            Console.Write("> ");
                            meebaItem.SpecialChoice = Console.ReadLine().ToLower().Trim();
                            if (meebaItem.SpecialChoice.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = meebaItem.SpecialChoice.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    Console.CursorTop -= 1;
                                }
                                meebaItem.SpecialChoice = meebaItem.SpecialChoice.Remove(80);
                            }
                            if (meebaItem.SpecialChoice == "back" || meebaItem.SpecialChoice == "exit" || meebaItem.SpecialChoice == "cancel")
                            {
                                resetMenu = true;
                                currentState = BattleState.Options;
                                break;
                            }
                            if (string.IsNullOrEmpty(meebaItem.SpecialChoice) || meebaItem.SpecialChoice != "1" && meebaItem.SpecialChoice != "2" && meebaItem.SpecialChoice != "3" && meebaItem.SpecialChoice != "4" && meebaItem.SpecialChoice != "5" && meebaItem.SpecialChoice != "6" && meebaItem.SpecialChoice != "7" && meebaItem.SpecialChoice != "8" && meebaItem.SpecialChoice != "9" && meebaItem.SpecialChoice != "10" && meebaItem.SpecialChoice != "11" && meebaItem.SpecialChoice != "12" && meebaItem.SpecialChoice != "13" || Convert.ToInt32(meebaItem.SpecialChoice) > meebaItem.Moves.Count)
                            {
                                Console.CursorTop -= 1;
                                Console.Write(new string(' ', Console.WindowWidth));
                                for (int i = 1; i < (meebaItem.Moves.Count + 1); i++)
                                {
                                    if (meebaItem.Moves.Count == i)
                                        Console.CursorTop -= (i + 2);
                                }
                                Console.WriteLine("What move will " + meebaItem.name + " use?");
                                for (int i = 0; i < meebaItem.Moves.Count; i++)
                                {
                                    Console.WriteLine((i + 1) + ": " + meebaItem.Moves[i]);
                                }
                            }
                            else
                            {
                                meebaItem.SpecialChoiceInt = Convert.ToInt32(meebaItem.SpecialChoice);
                                for (int i = 1; i < (meebaItem.Moves.Count + 1); i++)
                                {
                                    if (meebaItem.SpecialChoiceInt == i)
                                    {
                                        meebaItem.MoveChoice = meebaItem.Moves[meebaItem.SpecialChoiceInt - 1];
                                        if (meebaItem == meeba)
                                            referenceCurrentMeebaMove();
                                        else if (meebaItem == meeba2)
                                            referenceCurrentMeeba2Move();
                                        if (meebaItem.currentMove.name == "Pyroclastic Flow" && meebaItem.PyroclasticFlowCounter == 2)
                                        {
                                            Console.WriteLine(meebaItem.name + " cannot summon another lava flow yet");
                                            Thread.Sleep(1000);
                                            Console.CursorTop -= 1;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            Console.CursorTop -= 2;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            for (int j = 1; j < (meebaItem.Moves.Count + 1); j++)
                                            {
                                                if (meebaItem.Moves.Count == j)
                                                    Console.CursorTop -= (j + 2);
                                            }
                                            Console.WriteLine("What move will " + meebaItem.name + " use?");
                                            for (int k = 0; k < meebaItem.Moves.Count; k++)
                                            {
                                                Console.WriteLine((k + 1) + ": " + meebaItem.Moves[k]);
                                            }
                                        }
                                        else if (meebaItem.currentMP >= meebaItem.currentMove.MP)
                                        {
                                            meebaItem.SpecialChoiceValid = true;
                                            Console.WriteLine(meebaItem.name + " will use " + meebaItem.currentMove.name);
                                            Thread.Sleep(1000);
                                            resetMenu = false;
                                        }
                                        else
                                        {
                                            Console.WriteLine(meebaItem.name + " does not have enough MP to use " + meebaItem.currentMove.name);
                                            Thread.Sleep(1000);
                                            Console.CursorTop -= 1;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            Console.CursorTop -= 2;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            for (int j = 1; j < (meebaItem.Moves.Count + 1); j++)
                                            {
                                                if (meebaItem.Moves.Count == j)
                                                    Console.CursorTop -= (j + 2);
                                            }
                                            Console.WriteLine("What move will " + meebaItem.name + " use?");
                                            for (int k = 0; k < meebaItem.Moves.Count; k++)
                                            {
                                                Console.WriteLine((k + 1) + ": " + meebaItem.Moves[k]);
                                            }
                                        }

                                    }
                                }
                            }
                        } while (meebaItem.SpecialChoiceValid == false);
                        if (meebaItem.currentMove.name == "Deluge")
                            meebaItem.tempSpeed += 1000;
                    }
                }
            }
        }

        public void meebaChooseTarget()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.isCurrent == true)
                {
                    if (meebaItem.currentMove.attackType == "Offensive")
                    {
                        if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                        {
                            if (meebaItem.ID == 1)
                                opponentOne.meeba1Target = true;
                            else if (meebaItem.ID == 2)
                                opponentOne.meeba2Target = true;
                            meebaItem.validAttackChoice = true;
                            Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                            Thread.Sleep(1000);
                        }
                        else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                            Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                        else
                            Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                        if (meebaItem.validAttackChoice != true)
                        {
                            Console.Write("> ");
                            string meeba1AttackInput = Console.ReadLine().ToLower().Trim();
                            if (meeba1AttackInput.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = meeba1AttackInput.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    Console.CursorTop -= 1;
                                }
                                meeba1AttackInput = meeba1AttackInput.Remove(80);
                            }
                            do
                            {
                                if (string.IsNullOrEmpty(meeba1AttackInput) || meeba1AttackInput != "1" && meeba1AttackInput != "2" && meeba1AttackInput != "3" || meeba1AttackInput == "1" && opponentOne.HP <= 0 || meeba1AttackInput == "2" && opponentTwo.HP <= 0 || meeba1AttackInput == "3" && opponentThree.HP <= 0)
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                        Console.CursorTop -= 3;
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.CursorTop -= 4;
                                    else
                                        Console.CursorTop -= 5;
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        if (meebaItem.ID == 1)
                                            opponentOne.meeba1Target = true;
                                        else if (meebaItem.ID == 2)
                                            opponentOne.meeba2Target = true;
                                        meebaItem.validAttackChoice = true;
                                        Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                                        Thread.Sleep(1000);
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                    Console.Write("> ");
                                    meeba1AttackInput = Console.ReadLine().ToLower().Trim();
                                    if (meeba1AttackInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = meeba1AttackInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            Console.CursorTop -= 1;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            Console.CursorTop -= 1;
                                        }
                                        meeba1AttackInput = meeba1AttackInput.Remove(80);
                                    }
                                }
                                else if (meeba1AttackInput == "1" && opponentOne.HP > 0 && opponentOne.active == true)
                                {
                                    if (meebaItem.ID == 1)
                                        opponentOne.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        opponentOne.meeba2Target = true;
                                    meebaItem.validAttackChoice = true;
                                    Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                                    Thread.Sleep(1000);
                                }
                                else if (meeba1AttackInput == "2" && opponentTwo.HP > 0 && opponentTwo.active == true)
                                {
                                    if (meebaItem == meeba)
                                        opponentTwo.meeba1Target = true;
                                    else if (meebaItem == meeba2)
                                        opponentTwo.meeba2Target = true;
                                    meebaItem.validAttackChoice = true;
                                    Console.WriteLine(meebaItem.name + " will attack " + opponentTwo.name);
                                    Thread.Sleep(1000);
                                }
                                else if (meeba1AttackInput == "3" && opponentThree.HP > 0 && opponentThree.active == true)
                                {
                                    if (meebaItem.ID == 1)
                                        opponentThree.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        opponentThree.meeba2Target = true;
                                    meebaItem.validAttackChoice = true;
                                    Console.WriteLine(meebaItem.name + " will attack " + opponentThree.name);
                                    Thread.Sleep(1000);
                                }
                                else
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                        Console.CursorTop -= 3;
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.CursorTop -= 4;
                                    else
                                        Console.CursorTop -= 5;
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        if (meebaItem.ID == 1)
                                            opponentOne.meeba1Target = true;
                                        else if (meebaItem.ID == 2)
                                            opponentOne.meeba2Target = true;
                                        meebaItem.validAttackChoice = true;
                                        Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                                        Thread.Sleep(1000);
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                    Console.Write("> ");
                                    meeba1AttackInput = Console.ReadLine().ToLower().Trim();
                                    if (meeba1AttackInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = meeba1AttackInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            Console.CursorTop -= 1;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            Console.CursorTop -= 1;
                                        }
                                        meeba1AttackInput = meeba1AttackInput.Remove(80);
                                    }
                                }
                            } while (meebaItem.validAttackChoice == false);
                        }
                    }
                    //If OffensiveAll
                    if (meebaItem.currentMove.attackType == "OffensiveAll")
                    {
                        Console.WriteLine(meebaItem.name + " will attack all opponents");
                        if (meebaItem.ID == 1)
                            opponentOne.meeba1Target = true;
                        else if (meebaItem.ID == 2)
                            opponentOne.meeba2Target = true;
                        if (meebaItem.ID == 1)
                            opponentTwo.meeba1Target = true;
                        else if (meebaItem.ID == 2)
                            opponentTwo.meeba2Target = true;
                        if (meebaItem.ID == 1)
                            opponentThree.meeba1Target = true;
                        else if (meebaItem.ID == 2)
                            opponentThree.meeba2Target = true;
                        if (meebaItem.currentMove.name == "Pyroclastic Flow")
                            meebaItem.PyroclasticFlowCounter = 1;
                        Thread.Sleep(1000);
                    }
                    //If Defensive - choose which ally, unless self
                    if (meebaItem.currentMove.attackType == "Defensive")
                    {
                        if (meebaItem.validDefenseChoice != true)
                        {
                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba2.name);
                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba.name);
                            else
                                Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba.name + " \n3: " + meeba2.name);
                            Console.Write("> ");
                            string meeba1DefenseInput = Console.ReadLine().ToLower().Trim();
                            if (meeba1DefenseInput.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = meeba1DefenseInput.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    Console.CursorTop -= 1;
                                }
                                meeba1DefenseInput = meeba1DefenseInput.Remove(80);
                            }
                            do
                            {
                                if (string.IsNullOrEmpty(meeba1DefenseInput) || meeba1DefenseInput != "1" && meeba1DefenseInput != "2" && meeba1DefenseInput != "3" || meeba1DefenseInput == "1" && playerStats.playerCurrentHP <= 0 || meeba1DefenseInput == "2" && meeba.currentHp <= 0 || meeba1DefenseInput == "3" && meeba2.currentHp <= 0)
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp <= 0)
                                        Console.CursorTop -= 3;
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                        Console.CursorTop -= 4;
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                        Console.CursorTop -= 4;
                                    else
                                        Console.CursorTop -= 5;

                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                        Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba.name);
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                        Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba2.name);
                                    else
                                        Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba.name + " \n3: " + meeba2.name);
                                    Console.Write("> ");
                                    meeba1DefenseInput = Console.ReadLine().ToLower().Trim();
                                    if (meeba1DefenseInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = meeba1DefenseInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            Console.CursorTop -= 1;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            Console.CursorTop -= 1;
                                        }
                                        meeba1DefenseInput = meeba1DefenseInput.Remove(80);
                                    }
                                }
                                else if (meeba1DefenseInput == "1" && playerStats.playerCurrentHP > 0)
                                {
                                    if (meebaItem.ID == 1)
                                        playerStats.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        playerStats.meeba2Target = true;
                                    meebaItem.validDefenseChoice = true;
                                    Console.WriteLine(meebaItem.name + " will target " + playerStats.name);
                                    Thread.Sleep(1000);
                                }
                                else if (meeba1DefenseInput == "2" && meeba.currentHp > 0)
                                {
                                    if (meebaItem.ID == 1)
                                        meeba.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        meeba.meeba2Target = true;
                                    meebaItem.validDefenseChoice = true;
                                    Console.WriteLine(meebaItem.name + " will target " + meeba.name);
                                    Thread.Sleep(1000);
                                }
                                else if (meeba1DefenseInput == "3" && meeba2.currentHp > 0)
                                {
                                    if (meebaItem.ID == 1)
                                        meeba2.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        meeba2.meeba2Target = true;
                                    meebaItem.validDefenseChoice = true;
                                    Console.WriteLine(meebaItem.name + " will target " + meeba2.name);
                                    Thread.Sleep(1000);
                                }
                                else
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp <= 0)
                                        Console.CursorTop -= 3;
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                        Console.CursorTop -= 4;
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                        Console.CursorTop -= 4;
                                    else
                                        Console.CursorTop -= 5;

                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                        Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba.name);
                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                        Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba2.name);
                                    else
                                        Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba.name + " \n3: " + meeba2.name);
                                    Console.Write("> ");
                                    meeba1DefenseInput = Console.ReadLine().ToLower().Trim();
                                    if (meeba1DefenseInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = meeba1DefenseInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            Console.CursorTop -= 1;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            Console.CursorTop -= 1;
                                        }
                                        meeba1DefenseInput = meeba1DefenseInput.Remove(80);
                                    }
                                }
                            } while (meebaItem.validDefenseChoice == false);
                        }
                    }

                    //If DefensiveAll
                    if (meebaItem.currentMove.attackType == "DefensiveAll")
                    {
                        if (meebaItem.ID == 1)
                            playerStats.meeba1Target = true;
                        else if (meebaItem.ID == 2)
                            playerStats.meeba2Target = true;
                        if (meebaItem.ID == 1)
                            meeba.meeba1Target = true;
                        else if (meebaItem.ID == 2)
                            meeba.meeba2Target = true;
                        if (meebaItem.ID == 1)
                            meeba2.meeba1Target = true;
                        else if (meebaItem.ID == 2)
                            meeba2.meeba2Target = true;
                        if (meebaItem.currentMove.name == "Cyclone")
                            meebaItem.CycloneCounter = 1;
                    }
                    //If OffensiveAndDefensive - choose which ally, unless self, and which opponent
                    if (meebaItem.currentMove.attackType == "OffensiveAndDefensive" || meebaItem.currentMove.attackType == "OffensiveAndDefensiveAll")
                    {
                        if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                        {
                            if (meebaItem.ID == 1)
                                opponentOne.meeba1Target = true;
                            else if (meebaItem.ID == 2)
                                opponentOne.meeba2Target = true;
                            meebaItem.validAttackChoice = true;
                            Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                            Thread.Sleep(1000);
                        }
                        else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                            Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                        else
                            Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                        if (meebaItem.validAttackChoice != true)
                        {
                            Console.Write("> ");
                            string meeba1AttackInput = Console.ReadLine().ToLower().Trim();
                            if (meeba1AttackInput.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = meeba1AttackInput.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    Console.CursorTop -= 1;
                                }
                                meeba1AttackInput = meeba1AttackInput.Remove(80);
                            }
                            do
                            {
                                if (string.IsNullOrEmpty(meeba1AttackInput) || meeba1AttackInput != "1" && meeba1AttackInput != "2" && meeba1AttackInput != "3" || meeba1AttackInput == "1" && opponentOne.HP <= 0 || meeba1AttackInput == "2" && opponentTwo.HP <= 0 || meeba1AttackInput == "3" && opponentThree.HP <= 0)
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                        Console.CursorTop -= 3;
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.CursorTop -= 4;
                                    else
                                        Console.CursorTop -= 5;
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        if (meebaItem.ID == 1)
                                            opponentOne.meeba1Target = true;
                                        else if (meebaItem.ID == 2)
                                            opponentOne.meeba2Target = true;
                                        meebaItem.validAttackChoice = true;
                                        Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                                        Thread.Sleep(1000);
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                    Console.Write("> ");
                                    meeba1AttackInput = Console.ReadLine().ToLower().Trim();
                                    if (meeba1AttackInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = meeba1AttackInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            Console.CursorTop -= 1;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            Console.CursorTop -= 1;
                                        }
                                        meeba1AttackInput = meeba1AttackInput.Remove(80);
                                    }
                                }
                                else if (meeba1AttackInput == "1" && opponentOne.HP > 0 && opponentOne.active == true)
                                {
                                    if (meebaItem.ID == 1)
                                        opponentOne.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        opponentOne.meeba2Target = true;
                                    meebaItem.validAttackChoice = true;
                                    Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                                    Thread.Sleep(1000);
                                }
                                else if (meeba1AttackInput == "2" && opponentTwo.HP > 0 && opponentTwo.active == true)
                                {
                                    if (meebaItem.ID == 1)
                                        opponentTwo.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        opponentTwo.meeba2Target = true;
                                    meebaItem.validAttackChoice = true;
                                    Console.WriteLine(meebaItem.name + " will attack " + opponentTwo.name);
                                    Thread.Sleep(1000);
                                }
                                else if (meeba1AttackInput == "3" && opponentThree.HP > 0 && opponentThree.active == true)
                                {
                                    if (meebaItem.ID == 1)
                                        opponentThree.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        opponentThree.meeba2Target = true;
                                    meebaItem.validAttackChoice = true;
                                    Console.WriteLine(meebaItem.name + " will attack " + opponentThree.name);
                                    Thread.Sleep(1000);
                                }
                                else
                                {
                                    Console.CursorTop -= 1;
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                        Console.CursorTop -= 3;
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.CursorTop -= 4;
                                    else
                                        Console.CursorTop -= 5;
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        if (meebaItem.ID == 1)
                                            opponentOne.meeba1Target = true;
                                        else if (meebaItem.ID == 2)
                                            opponentOne.meeba2Target = true;
                                        meebaItem.validAttackChoice = true;
                                        Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                                        Thread.Sleep(1000);
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                    Console.Write("> ");
                                    meeba1AttackInput = Console.ReadLine().ToLower().Trim();
                                    if (meeba1AttackInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = meeba1AttackInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            Console.CursorTop -= 1;
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            Console.CursorTop -= 1;
                                        }
                                        meeba1AttackInput = meeba1AttackInput.Remove(80);
                                    }
                                }
                            } while (meebaItem.validAttackChoice == false);
                        }

                        if (meebaItem.currentMove.attackType == "OffensiveAndDefensive")
                            if (meebaItem.ID == 1)
                                meebaItem.meeba1Target = true; //targets self for defensive
                            else if (meebaItem.ID == 2)
                                meebaItem.meeba2Target = true;
                            else if (meebaItem.currentMove.attackType == "OffensiveAndDefensiveAll")
                            {
                                if (meebaItem.ID == 1)
                                    playerStats.meeba1Target = true;
                                else if (meebaItem.ID == 2)
                                    playerStats.meeba2Target = true;
                                if (meebaItem.ID == 1)
                                    meeba.meeba1Target = true;
                                else if (meebaItem.ID == 2)
                                    meeba.meeba2Target = true;
                                if (meebaItem.ID == 1)
                                    meeba2.meeba1Target = true;
                                else if (meebaItem.ID == 2)
                                    meeba2.meeba2Target = true;
                                if (meebaItem.currentMove.name == "Dust Devil")
                                    meebaItem.DustDevilCounter = 1;
                                if (meebaItem.currentMove.name == "Snowstorm")
                                    meebaItem.SnowStormCounter = 1;
                            }
                    }
                }
            }
        }

        public void playerAttack()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            playerStats.hasTakenTurn = true;
            foreach (var item in ThisBattleEnemies)
            {
                if (item.playerTarget == true)
                {
                    if (item.HP == 0)
                    {
                        Console.WriteLine(playerStats.name + " tried to attack " + item.name);
                        Thread.Sleep(1000);
                        Console.WriteLine(item.name + " has already been defeated");
                        Thread.Sleep(1000);
                    }
                    else
                    {
                        int accurateHit = random.Next(100);
                        if (accurateHit <= playerStats.playerAccuracy)
                        {
                            TypeAdvantagePlayer();
                            if (item.defensive == true)
                                tempOppDefense = item.tempDefense;
                            else if (item.defensive == false)
                                tempOppDefense = item.tempDefenseStatChange;
                            tempAllyHit = random.Next(Convert.ToInt16(playerStats.playerMaxHit), 101);
                            damageCalcPlayerAttacking = 1 + Math.Round((((playerStats.tempAttack / tempOppDefense) * (playerStats.playerLevel / 2) * tempPlayerTypeAdv * tempAllyItemBonus) / 100) * tempAllyHit);
                            Console.WriteLine("You attacked " + item.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(item.name + " took {0} damage", damageCalcPlayerAttacking);
                            Thread.Sleep(1000);
                            if ((item.HP - damageCalcPlayerAttacking) > 0)
                                Console.WriteLine(item.name + " has {0} HP", (item.HP - damageCalcPlayerAttacking));
                            else
                                Console.WriteLine(item.name + " has 0 HP");
                            Thread.Sleep(1000);
                            if ((item.HP - damageCalcPlayerAttacking) <= 0)
                            {
                                Console.WriteLine("You defeated {0}", item.name);
                                Thread.Sleep(1000);
                            }

                            item.HP -= damageCalcPlayerAttacking;
                            if (item.HP < 0)
                                item.HP = 0;
                        }
                        else
                        {
                            Console.WriteLine(playerStats.name + "'s attack missed");
                            Thread.Sleep(1000);
                        }

                    }
                    if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                        currentState = BattleState.Win;
                    else if (playerStats.playerCurrentHP <= 0)
                        currentState = BattleState.Lose;
                    else
                        currentState = BattleState.SpeedComparison;
                    item.playerTarget = false;
                }
            }
        }

        public void playerDefend()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            playerStats.textColour = ConsoleColor.Yellow;
            playerStats.hasTakenTurn = true;
            Console.WriteLine("You are defending");
            Thread.Sleep(1000);
            playerStats.tempDefense *= 3;
        }

        public void playerItem()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            playerStats.hasTakenTurn = true;
            bool usedItem = false;
            do
            {
                if (itemChoice == examItem.itemName)
                {
                    if (examItem.allyTargetBattle == true)  //assign to tempallyitembonus if stat boost or something - CHANGE
                    {
                        //HP Gain
                        if (examItem.itemHPGain > 0)
                        {
                            if (playerStats.playerTarget == true)
                            {
                                Console.WriteLine("You used the {0}", examItem.itemName);
                                Thread.Sleep(1000);
                                if (playerStats.playerCurrentHP == playerStats.playerMaxHP)
                                {
                                    Console.WriteLine("You are already at maximum health");
                                    Thread.Sleep(1000);
                                }

                                else if (playerStats.playerCurrentHP < playerStats.playerMaxHP)
                                {
                                    double healthGainCalc = playerStats.playerMaxHP - playerStats.playerCurrentHP; //hp deficit
                                    Console.WriteLine("You restored {0} HP", healthGainCalc < examItem.itemHPGain ? healthGainCalc : examItem.itemHPGain);
                                    Thread.Sleep(1000);
                                    playerStats.playerCurrentHP += examItem.itemHPGain;
                                    if (playerStats.playerCurrentHP > playerStats.playerMaxHP)
                                        playerStats.playerCurrentHP = playerStats.playerMaxHP;
                                    Console.WriteLine("You have {0} HP", playerStats.playerCurrentHP);
                                    Thread.Sleep(1000);
                                }
                                inventory.dictionary[examItem.itemName] -= 1;
                                if (inventory.dictionary[examItem.itemName] == 0)
                                    inventory.dictionary.Remove(examItem.itemName);
                                usedItem = true;
                                playerStats.playerTarget = false;
                            }
                            else if (meeba.playerTarget == true || meeba2.playerTarget == true)
                            {
                                foreach (var meebaItem in ThisBattleMeebas)
                                {
                                    if (meebaItem.ID == 1 && meeba.playerTarget == true || meebaItem.ID == 2 && meeba2.playerTarget == true)
                                    {
                                        Console.WriteLine("You used the {0}", examItem.itemName);
                                        Thread.Sleep(1000);
                                        if (meebaItem.currentHp == meebaItem.hp)
                                        {
                                            Console.WriteLine(meebaItem.name + " is already at maximum health");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meebaItem.currentHp < meebaItem.hp)
                                        {
                                            double healthGainCalc = meebaItem.hp - meebaItem.currentHp; //hp deficit
                                            Console.WriteLine(meebaItem.name + " restored {0} HP", healthGainCalc < examItem.itemHPGain ? healthGainCalc : examItem.itemHPGain);
                                            Thread.Sleep(1000);
                                            meebaItem.currentHp += examItem.itemHPGain;
                                            if (meebaItem.currentHp > meebaItem.hp)
                                                meebaItem.currentHp = meebaItem.hp;
                                            Console.WriteLine(meebaItem.name + " has {0} HP", meebaItem.currentHp);
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                        usedItem = true;
                                        meebaItem.playerTarget = false;
                                    }
                                }
                            } //meeba target
                        } //hp gain
                        //mp gain
                        else if (examItem.itemMPGain > 0)
                        {
                            if (playerStats.playerTarget == true)
                            {
                                Console.WriteLine("You tried to use the {0}, but you have no MP to regain.", examItem.itemName);
                                Thread.Sleep(1000);
                                usedItem = true;
                                playerStats.playerTarget = false;
                            }
                            else if (meeba.playerTarget == true || meeba2.playerTarget == true)
                            {
                                foreach (var meebaItem in ThisBattleMeebas)
                                {
                                    if (meebaItem.ID == 1 && meeba.playerTarget == true || meebaItem.ID == 2 && meeba2.playerTarget == true)
                                    {
                                        Console.WriteLine("You used the {0}", examItem.itemName);
                                        Thread.Sleep(1000);
                                        if (meebaItem.currentMP == meebaItem.MP)
                                        {
                                            Console.WriteLine(meebaItem.name + " already has maximum MP");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meebaItem.currentMP < meebaItem.MP)
                                        {
                                            double MPGainCalc = meebaItem.MP - meebaItem.currentMP; //hp deficit
                                            Console.WriteLine(meebaItem.name + " restored {0} MP", MPGainCalc < examItem.itemMPGain ? MPGainCalc : examItem.itemMPGain);
                                            Thread.Sleep(1000);
                                            meebaItem.currentMP += examItem.itemMPGain;
                                            if (meebaItem.currentMP > meebaItem.MP)
                                                meebaItem.currentMP = meebaItem.MP;
                                            Console.WriteLine(meebaItem.name + " has {0} MP", meebaItem.currentMP);
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                        usedItem = true;
                                        meebaItem.playerTarget = false;
                                    }
                                }
                            } //meeba target
                        } //mp gain
                        //poison-antidote
                        else if (examItem.antidote == true)
                        {
                            if (playerStats.playerTarget == true)
                            {
                                Console.WriteLine("You used the {0}", examItem.itemName);
                                Thread.Sleep(1000);
                                if (playerStats.isPoisoned == false && playerStats.isPoisonedTwo == false)
                                {
                                    Console.WriteLine("But you do not need an antidote");
                                    Thread.Sleep(1000);
                                }

                                else if (playerStats.isPoisoned == true || playerStats.isPoisonedTwo == true)
                                {
                                    Console.WriteLine("You are no longer poisoned");
                                    Thread.Sleep(1000);
                                    playerStats.isPoisoned = false;
                                    playerStats.isPoisonedTwo = false;
                                }
                                inventory.dictionary[examItem.itemName] -= 1;
                                if (inventory.dictionary[examItem.itemName] == 0)
                                    inventory.dictionary.Remove(examItem.itemName);
                                usedItem = true;
                                playerStats.playerTarget = false;
                            }
                            else if (meeba.playerTarget == true || meeba2.playerTarget == true)
                            {
                                foreach (var meebaItem in ThisBattleMeebas)
                                {
                                    if (meebaItem.ID == 1 && meeba.playerTarget == true || meebaItem.ID == 2 && meeba2.playerTarget == true)
                                    {
                                        Console.WriteLine("You used the {0}", examItem.itemName);
                                        Thread.Sleep(1000);
                                        if (meebaItem.isPoisoned == false && meebaItem.isPoisonedTwo == false)
                                        {
                                            Console.WriteLine("But " + meebaItem.name + " does not need an antidote");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meebaItem.isPoisoned == true || meebaItem.isPoisonedTwo == true)
                                        {
                                            Console.WriteLine(meebaItem.name + " is no longer poisoned");
                                            Thread.Sleep(1000);
                                            meebaItem.isPoisoned = false;
                                            meebaItem.isPoisonedTwo = false;
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                        usedItem = true;
                                        meebaItem.playerTarget = false;
                                    }
                                }
                            } //meeba target
                        } //antidote
                        //awakening
                        else if (examItem.awaken == true)
                        {
                            if (playerStats.playerTarget == true)
                            {
                                Console.WriteLine("You used the {0}", examItem.itemName);
                                Thread.Sleep(1000);
                                if (playerStats.isAsleep)
                                {
                                    Console.WriteLine("But you do not need to be woken");
                                    Thread.Sleep(1000);
                                }
                                else if (playerStats.isAsleep == true)
                                {
                                    Console.WriteLine("You woke up");
                                    Thread.Sleep(1000);
                                    playerStats.isAsleep = false;
                                }
                                inventory.dictionary[examItem.itemName] -= 1;
                                if (inventory.dictionary[examItem.itemName] == 0)
                                    inventory.dictionary.Remove(examItem.itemName);
                                usedItem = true;
                                playerStats.playerTarget = false;
                            }
                            else if (meeba.playerTarget == true || meeba2.playerTarget == true)
                            {
                                foreach (var meebaItem in ThisBattleMeebas)
                                {
                                    if (meebaItem.ID == 1 && meeba.playerTarget == true || meebaItem.ID == 2 && meeba2.playerTarget == true)
                                    {
                                        Console.WriteLine("You used the {0}", examItem.itemName);
                                        Thread.Sleep(1000);
                                        if (meebaItem.isAsleep == false)
                                        {
                                            Console.WriteLine("But " + meebaItem.name + " does not need to be woken");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meebaItem.isAsleep == true)
                                        {
                                            Console.WriteLine(meebaItem.name + " woke up");
                                            Thread.Sleep(1000);
                                            meebaItem.isAsleep = false;
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                        usedItem = true;
                                        meebaItem.playerTarget = false;
                                    }
                                }
                            } //meeba target
                        } //awakening
                        //Defensive
                    }
                    //Offensive
                    if (examItem.opponentTargetBattle == true)
                    {
                        foreach (var item in ThisBattleEnemies)
                        {
                            if (item.playerTarget == true)
                            {
                                if (item.HP == 0)
                                {
                                    Console.WriteLine(playerStats.name + " tried to attack " + item.name);
                                    Thread.Sleep(1000);
                                    Console.WriteLine(item.name + " has already been defeated");
                                    Thread.Sleep(1000);
                                }
                                else if (item.DamageProtected != true)
                                {
                                    int accurateHit = random.Next(100);
                                    if (accurateHit <= playerStats.playerAccuracy)
                                    {
                                        if (item.defensive == true)
                                            tempOppDefense = item.tempDefense;
                                        else if (item.defensive == false)
                                            tempOppDefense = item.tempDefenseStatChange;
                                        tempAllyHit = random.Next(Convert.ToInt16(playerStats.playerMaxHit), 101);
                                        damageCalcPlayerAttacking = 1 + Math.Round((((examItem.battleDamage / tempOppDefense) * (playerStats.playerLevel / 2)) / 100) * tempAllyHit);
                                        Console.WriteLine("You attacked {0} with the {1}", item.name, examItem.itemName);
                                        Thread.Sleep(1000);
                                        Console.WriteLine(item.name + " took {0} damage", damageCalcPlayerAttacking);
                                        Thread.Sleep(1000);
                                        if ((item.HP - damageCalcPlayerAttacking) > 0)
                                            Console.WriteLine(item.name + " has {0} HP", (item.HP - damageCalcPlayerAttacking));
                                        else
                                            Console.WriteLine(item.name + " has 0 HP");
                                        Thread.Sleep(1000);
                                        if ((item.HP - damageCalcPlayerAttacking) <= 0)
                                        {
                                            Console.WriteLine("You defeated {0}", item.name);
                                            Thread.Sleep(1000);
                                        }
                                        item.HP -= damageCalcPlayerAttacking;
                                        if (item.HP < 0)
                                            item.HP = 0;
                                    }
                                    else
                                    {
                                        Console.WriteLine("You missed");
                                        Thread.Sleep(1000);
                                    }
                                    inventory.dictionary[examItem.itemName] -= 1;
                                    if (inventory.dictionary[examItem.itemName] == 0)
                                        inventory.dictionary.Remove(examItem.itemName);
                                }
                                else
                                    Console.WriteLine(item.name + " is protected from damage");
                                if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                    currentState = BattleState.Win;
                                else if (playerStats.playerCurrentHP <= 0)
                                    currentState = BattleState.Lose;
                                else
                                    currentState = BattleState.SpeedComparison;
                                usedItem = true;
                                item.playerTarget = false;
                            }
                        }
                    } //offensive
                    //status change
                    //if (meebaitem.StatusProtected == true)
                    //{
                    //    Console.WriteLine(meebaitem.name + "is protected from status changes");
                    //    Thread.Sleep(1000);
                    //}
                }
            } while (usedItem == false);
        }

        public void playerRun()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            playerStats.hasTakenTurn = true;
            playerStats.defensive = false;
            if (((opponentOne.speed + opponentTwo.speed + opponentThree.speed) / 3) >= playerStats.playerMaxSpeed)
            {
                if (random.Next(0, 3) == 0)
                {
                    Console.WriteLine("You failed to escape");
                    Thread.Sleep(1000);
                    currentState = BattleState.SpeedComparison;
                }
                else if (random.Next(0, 3) == 1 || random.Next(0, 3) == 2 || random.Next(0, 3) == 3)
                {
                    Console.WriteLine("You escaped the battle");
                    Thread.Sleep(1000);
                    Console.Clear();
                    currentState = BattleState.Exit;
                }
            }
            else
            {
                Console.WriteLine("You escaped the battle");
                Thread.Sleep(1000);
                Console.Clear();
                currentState = BattleState.Exit;
            }
        }

        public void MeebaDefend()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneDefend || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoDefend)
                {
                    meebaItem.textColour = ConsoleColor.Gray;
                    meebaItem.hasTakenTurn = true;
                    meebaItem.tempDefense *= 3;
                    Console.WriteLine("{0} is defending", meebaItem.name);
                    Thread.Sleep(1000);
                }
            }
        }

        public void MeebaOffensiveAttack()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneSpecial || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoSpecial)
                {
                    foreach (var item in ThisBattleEnemies)
                    {
                        if (meebaItem.ID == 1 && item.ID == 1 && item.meeba1Target == true
                            || meebaItem.ID == 1 && item.ID == 2 && item.meeba1Target == true
                            || meebaItem.ID == 1 && item.ID == 3 && item.meeba1Target == true
                            || meebaItem.ID == 2 && item.ID == 1 && item.meeba2Target == true
                            || meebaItem.ID == 2 && item.ID == 2 && item.meeba2Target == true
                            || meebaItem.ID == 2 && item.ID == 3 && item.meeba2Target == true)

                            if (item.HP == 0 && item.active == true && meebaItem.currentMove.name != "Pyroclastic Flow")
                            {
                                Console.WriteLine(meebaItem.name + " tried to attack " + item.name);
                                Thread.Sleep(1000);
                                Console.WriteLine(item.name + " has already been defeated");
                                Thread.Sleep(1000);
                            }
                            else if (item.active != false)
                            {
                                int accurateHit = random.Next(100);
                                if (accurateHit <= meebaItem.currentMove.accuracy)
                                {
                                    if (meebaItem.currentMove.BMP > 0)
                                    {
                                        if (meebaItem.PyroclasticFlowCounter == 1)
                                        {
                                            meebaItem.currentMP -= 13;
                                            if (meebaItem.currentMP < 0)
                                                meebaItem.currentMP = 0;
                                            Console.WriteLine(meebaItem.name + " summoned a lava flow");
                                            Thread.Sleep(1000);
                                            meebaItem.PyroclasticFlowCounter = 2;
                                        }
                                        else if (meebaItem.currentMove.name != "Pyroclastic Flow")
                                        {
                                            tempAllyAttack = meebaItem.tempAttack;
                                            if (item.defensive == true)
                                                tempOppDefense = item.tempDefense;
                                            else if (item.defensive == false)
                                                tempOppDefense = item.tempDefenseStatChange;
                                            tempAllyMoveBasePower = meebaItem.currentMove.BMP;
                                            TypeAdvantageAlly();
                                            STABAlly(); //tempAllySTAB =
                                            tempAllyHit = random.Next(meebaItem.hitRange, 101);
                                            damageCalcAllyAttacking = 1 + Math.Round((((tempAllyAttack / tempOppDefense) * tempAllyMoveBasePower * tempAllyItemBonus * tempAllyTypeAdv * tempAllySTAB) / 100) * tempAllyHit);
                                            meebaItem.currentMP -= meebaItem.currentMove.MP;
                                            if (meebaItem.currentMP < 0)
                                                meebaItem.currentMP = 0;
                                            Console.WriteLine("{0} attacked {1} with {2}", meebaItem.name, item.name, meebaItem.currentMove.name);
                                            Thread.Sleep(1000);
                                            Console.WriteLine(item.name + " took {0} damage", damageCalcAllyAttacking);
                                            Thread.Sleep(1000);
                                            if ((item.HP - damageCalcAllyAttacking) > 0)
                                                Console.WriteLine(item.name + " has {0} HP", (item.HP - damageCalcAllyAttacking));
                                            else
                                                Console.WriteLine(item.name + " has 0 HP");
                                            Thread.Sleep(1000);
                                            if ((item.HP - damageCalcAllyAttacking) <= 0)
                                            {
                                                Console.WriteLine(meebaItem.name + " defeated {0}", item.name);
                                                Thread.Sleep(1000);
                                            }
                                            item.HP -= damageCalcAllyAttacking;
                                            if (item.HP < 0)
                                                item.HP = 0;
                                            if (meebaItem.currentMove.name == "Deluge")
                                                meebaItem.tempSpeed -= 1000;
                                            if (meebaItem.currentMove.name == "Leaching Roots")
                                                meebaItem.LeachingRootsHP = 1 + Math.Round(damageCalcAllyAttacking * 0.4);
                                        }

                                        if (meebaItem.currentMove.name == "Pyriscent Bullets") //2 more attacks
                                        {
                                            tempAllyHit = random.Next(meebaItem.hitRange, 101);
                                            damageCalcAllyAttacking = 1 + Math.Round((((tempAllyAttack / tempOppDefense) * tempAllyMoveBasePower * tempAllyItemBonus * tempAllyTypeAdv * tempAllySTAB) / 100) * tempAllyHit);
                                            Console.WriteLine("{0} attacked {1} with {2}", meebaItem.name, item.name, meebaItem.currentMove.name);
                                            Thread.Sleep(1000);
                                            Console.WriteLine(item.name + " took {0} damage", damageCalcAllyAttacking);
                                            Thread.Sleep(1000);
                                            if ((item.HP - damageCalcAllyAttacking) > 0)
                                                Console.WriteLine(item.name + " has {0} HP", (item.HP - damageCalcAllyAttacking));
                                            else
                                                Console.WriteLine(item.name + " has 0 HP");
                                            Thread.Sleep(1000);
                                            if ((item.HP - damageCalcAllyAttacking) <= 0)
                                            {
                                                Console.WriteLine(meebaItem.name + " defeated {0}", item.name);
                                                Thread.Sleep(1000);
                                                break;
                                            }
                                            item.HP -= damageCalcAllyAttacking;
                                            if (item.HP < 0)
                                                item.HP = 0;

                                            tempAllyHit = random.Next(meebaItem.hitRange, 101);
                                            damageCalcAllyAttacking = 1 + Math.Round((((tempAllyAttack / tempOppDefense) * tempAllyMoveBasePower * tempAllyItemBonus * tempAllyTypeAdv * tempAllySTAB) / 100) * tempAllyHit);
                                            Console.WriteLine("{0} attacked {1} with {2}", meebaItem.name, item.name, meebaItem.currentMove.name);
                                            Thread.Sleep(1000);
                                            Console.WriteLine(item.name + " took {0} damage", damageCalcAllyAttacking);
                                            Thread.Sleep(1000);
                                            if ((item.HP - damageCalcAllyAttacking) > 0)
                                                Console.WriteLine(item.name + " has {0} HP", (item.HP - damageCalcAllyAttacking));
                                            else
                                                Console.WriteLine(item.name + " has 0 HP");
                                            Thread.Sleep(1000);
                                            if ((item.HP - damageCalcAllyAttacking) <= 0)
                                            {
                                                Console.WriteLine(meebaItem.name + " defeated {0}", item.name);
                                                Thread.Sleep(1000);
                                            }
                                            item.HP -= damageCalcAllyAttacking;
                                            if (item.HP < 0)
                                                item.HP = 0;
                                        }
                                    }
                                    //Opponent defense decrease
                                    if (meebaItem.currentMove.oppDefenseDecrease > 0)
                                    {
                                        if (item.StatusProtected == true)
                                        {
                                            Console.WriteLine(item.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (item.tempDefenseStatChange > (item.defense / 3))
                                        {
                                            Console.WriteLine(item.name + "'s defense decreased");
                                            Thread.Sleep(1000);
                                            item.tempDefenseStatChange *= meebaItem.currentMove.oppDefenseDecrease;
                                        }
                                        else
                                        {
                                            Console.WriteLine(item.name + "'s defense is at minimum capacity");
                                            Thread.Sleep(1000);
                                        }
                                    }
                                    //Opponent speed decrease
                                    if (meebaItem.currentMove.oppSpeedDecrease > 0)
                                    {
                                        if (item.StatusProtected == true)
                                        {
                                            Console.WriteLine(item.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (item.tempSpeedStatChange > (item.speed / 3))
                                        {
                                            Console.WriteLine(item.name + "'s speed decreased");
                                            Thread.Sleep(1000);
                                            item.tempSpeedStatChange *= meebaItem.currentMove.oppSpeedDecrease;
                                        }
                                        else
                                        {
                                            Console.WriteLine(item.name + "'s speed is at minimum capacity");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Posion Inflicted?
                                    if (meebaItem.currentMove.poisonChance > 0 && item.isPoisoned != true)
                                    {
                                        int poison = random.Next(100);
                                        if (item.StatusProtected == true)
                                        {
                                            Console.WriteLine(item.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (poison <= meebaItem.currentMove.poisonChance)
                                        {
                                            Console.WriteLine(meebaItem.name + " poisoned " + item.name);
                                            Thread.Sleep(1000);
                                            item.isPoisoned = true;
                                            item.poisonTracker = 0;
                                        }
                                        else
                                        {
                                            Console.WriteLine("The poison was ineffective");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Poison Passive Ability
                                    if (meebaItem.poisonChance > 0)
                                    {
                                        int poison = random.Next(100);
                                        if (item.StatusProtected == true)
                                        {
                                            Console.WriteLine(item.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (poison <= meebaItem.poisonChance)
                                        {
                                            Console.WriteLine(meebaItem.name + " poisoned " + item.name);
                                            Thread.Sleep(1000);
                                            if (meebaItem.poisonOne == true && meebaItem.poisonTwo != true)
                                                item.isPoisoned = true;
                                            else if (meebaItem.poisonTwo == true)
                                                item.isPoisonedTwo = true;
                                            item.poisonTracker = 0;
                                        }
                                        else
                                        {
                                            Console.WriteLine("The poison was ineffective");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Stun Inflicted?
                                    if (meebaItem.currentMove.stunChance > 0)
                                    {
                                        int stun = random.Next(100);
                                        if (item.StatusProtected == true)
                                        {
                                            Console.WriteLine(item.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (stun <= meebaItem.currentMove.stunChance)
                                        {
                                            Console.WriteLine(meebaItem.name + " stunned " + item.name + ", it may not attack");
                                            Thread.Sleep(1000);
                                            item.isStunned = true;
                                        }
                                    }
                                    //Sleep Inflicted?
                                    if (meebaItem.currentMove.sleepChance > 0)
                                    {
                                        int sleep = random.Next(100);
                                        if (item.StatusProtected == true)
                                        {
                                            Console.WriteLine(item.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (sleep <= meebaItem.currentMove.sleepChance)
                                        {
                                            Console.WriteLine(meebaItem.name + " lulled " + item.name + " to sleep");
                                            Thread.Sleep(1000);
                                            item.isAsleep = true;
                                        }
                                        else
                                        {
                                            Console.WriteLine(item.name + " stayed awake");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Life leech passive ability?
                                    if (meebaItem.lifeLeech == true && item.HP > 0 && meebaItem.currentMove.name != "Pyroclastic Flow")
                                    {
                                        int lifeleeach = random.Next(100);
                                        if (lifeleeach <= meebaItem.lifeLeechChance)
                                        {
                                            Console.WriteLine(meebaItem.name + " leeched some life from " + item.name);
                                            Thread.Sleep(1000);
                                            meebaItem.currentHp += Math.Round((meebaItem.hp / 100) * meebaItem.lifeLeechHeal);
                                            if (meebaItem.currentHp > meebaItem.hp)
                                                meebaItem.currentHp = meebaItem.hp;
                                        }
                                    }
                                }
                                else
                                {
                                    Console.WriteLine(meebaItem.name + "'s attack missed " + item.name);
                                    Thread.Sleep(1000);
                                }

                            }
                        if (meebaItem.ID == 1)
                            item.meeba1Target = false;
                        else if (meebaItem.ID == 2)
                            item.meeba2Target = false;
                    }
                }
            }
        }

        public void meebaDefensiveAttackPlayerTarget()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneSpecial || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoSpecial)
                {
                    int accurateHit = random.Next(100);
                    if (accurateHit <= meebaItem.currentMove.accuracy)
                    {
                        meebaItem.currentMP -= meebaItem.currentMove.MP;
                        if (meebaItem.currentMP < 0)
                            meebaItem.currentMP = 0;
                        Console.WriteLine("{0} targeted {1} with {2}", meebaItem.name, playerStats.name, meebaItem.currentMove.name);
                        Thread.Sleep(1000);

                        //Healing?
                        if (meebaItem.currentMove.healChance > 0)
                        {
                            int heal = random.Next(100);
                            if (heal <= meebaItem.currentMove.healChance)
                            {
                                double healHP = Math.Round((playerStats.playerMaxHP * meebaItem.currentMove.healAmount) / 100);
                                //prints heal amount or remaining hp if there is a remainder from the healhp
                                Console.WriteLine(meebaItem.name + " healed " + playerStats.name + " for {0} HP", healHP >= (playerStats.playerMaxHP - playerStats.playerCurrentHP) ? (playerStats.playerMaxHP - playerStats.playerCurrentHP) : healHP);
                                playerStats.playerCurrentHP += healHP;
                                if (playerStats.playerCurrentHP > playerStats.playerMaxHP) //cannot go above max hp
                                    playerStats.playerCurrentHP = playerStats.playerMaxHP;
                                Thread.Sleep(1000);
                            }
                            else
                            {
                                Console.WriteLine("No healing is needed for " + playerStats.name);
                                Thread.Sleep(1000);
                            }
                        }
                        //Stat Increase? - def
                        if (meebaItem.currentMove.defIncrease > 0)
                        {
                            if (playerStats.tempDefenseStatChange < (playerStats.playerMaxDefense * 3))
                            {
                                Console.WriteLine(playerStats.name + "'s defense increased");
                                Thread.Sleep(1000);
                                playerStats.tempDefenseStatChange *= meebaItem.currentMove.defIncrease;
                            }
                            else
                            {
                                Console.WriteLine(playerStats.name + "'s defense is at maximum capacity");
                                Thread.Sleep(1000);
                            }
                        }
                        //spd
                        if (meebaItem.currentMove.spdIncrease > 0)
                        {
                            if (playerStats.tempSpeed < (playerStats.playerMaxSpeed * 3))
                            {
                                Console.WriteLine(playerStats.name + "'s speed increased");
                                Thread.Sleep(1000);
                                playerStats.tempSpeed *= meebaItem.currentMove.spdIncrease;
                            }
                            else
                            {
                                Console.WriteLine(playerStats.name + "'s speed is at maximum capacity");
                                Thread.Sleep(1000);
                            }
                        }
                        //atk
                        if (meebaItem.currentMove.attackIncrease > 0)
                        {
                            if (playerStats.tempAttack < (playerStats.playerMaxStrength * 3))
                            {
                                Console.WriteLine(playerStats.name + "'s attack increased");
                                Thread.Sleep(1000);
                                playerStats.tempAttack *= meebaItem.currentMove.attackIncrease;
                            }
                            else
                            {
                                Console.WriteLine(playerStats.name + "'s attack is at maximum capacity");
                                Thread.Sleep(1000);
                            }
                        }
                        //Status protect
                        if (meebaItem.currentMove.statusProtection == true)
                        {
                            playerStats.StatusProtected = true;
                            if (meebaItem.currentMove.name == "Sand Shroud")
                                playerStats.statusProtectCounterSS = 1;
                            else if (meebaItem.currentMove.name == "Rock Fort")
                                playerStats.statusProtectCounterRF = 1;
                            else if (meebaItem.currentMove.name == "Stonewort")
                                playerStats.statusProtectCounterSW = 1;
                            Console.WriteLine(playerStats.name + " is protected from status changes");
                            Thread.Sleep(1000);
                        }
                        //Damage protect
                        if (meebaItem.currentMove.damageProtection == true)
                        {
                            playerStats.DamageProtected = true;
                            playerStats.damageProtectCounter = 1;
                            Console.WriteLine(playerStats.name + " is protected from damage");
                            Thread.Sleep(1000);
                        }
                    }
                    else
                    {
                        Console.WriteLine(meebaItem.name + "'s attack missed " + playerStats.name);
                        Thread.Sleep(1000);
                    }
                    if (meebaItem.ID == 1)
                        playerStats.meeba1Target = false;
                    else if (meebaItem.ID == 2)
                        playerStats.meeba2Target = false;
                }
            }
        }

        public void meebaDefensiveAttack()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas) //meeba1 attacking, meeba2 attacking
            {
                if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneSpecial || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoSpecial)
                {
                    foreach (var meebaItemTarget in ThisBattleMeebas) //meeba1 is target, meeba2 is target
                    {
                        if (meebaItem.ID == 1 && meebaItemTarget.ID == 1 && meebaItemTarget.meeba1Target == true
                            || meebaItem.ID == 1 && meebaItemTarget.ID == 2 && meebaItemTarget.meeba1Target == true
                            || meebaItem.ID == 2 && meebaItemTarget.ID == 1 && meebaItemTarget.meeba2Target == true
                            || meebaItem.ID == 2 && meebaItemTarget.ID == 2 && meebaItemTarget.meeba2Target == true)
                        {
                            int accurateHit = random.Next(100);
                            if (accurateHit <= meeba.currentMove.accuracy)
                            {
                                meebaItem.currentMP -= meebaItem.currentMove.MP;
                                if (meebaItem.currentMP < 0)
                                    meebaItem.currentMP = 0;
                                Console.WriteLine("{0} targeted {1} with {2}", meebaItem.name, meebaItemTarget.name, meebaItem.currentMove.name);
                                Thread.Sleep(1000);

                                //Healing?
                                if (meebaItem.currentMove.healChance > 0)
                                {
                                    int heal = random.Next(100);
                                    if (heal <= meebaItem.currentMove.healChance)
                                    {
                                        double healHP = 0;
                                        if (meebaItem.currentMove.name == "Leaching Roots")
                                            healHP = meebaItem.LeachingRootsHP;
                                        else
                                            healHP = Math.Round((meebaItemTarget.hp * meebaItemTarget.currentMove.healAmount) / 100);
                                        Console.WriteLine(meebaItem.name + " healed " + meebaItemTarget.name + " for {0} HP", healHP >= (meebaItemTarget.hp - meebaItemTarget.currentHp) ? (meebaItemTarget.hp - meebaItemTarget.currentHp) : healHP);
                                        meebaItemTarget.currentHp += healHP;
                                        if (meebaItemTarget.currentHp > meebaItemTarget.hp) //cannot go above max hp
                                            meebaItemTarget.currentHp = meebaItemTarget.hp;
                                        Thread.Sleep(1000);
                                    }
                                    else
                                    {
                                        Console.WriteLine("No healing is needed for " + meebaItemTarget.name);
                                        Thread.Sleep(1000);
                                    }
                                    if (meebaItem.ID == 1)
                                    {
                                        meebaItemTarget.meeba1Target = false; //No longer targeted by meeba1
                                        playerStats.meeba1Target = false;
                                    }
                                    if (meebaItem.ID == 2)
                                    {
                                        playerStats.meeba2Target = false; //No longer targeted by meeba2
                                        meebaItemTarget.meeba2Target = false;
                                    }
                                }
                                //Stat Increase? - def
                                if (meebaItem.currentMove.defIncrease > 0)
                                {
                                    if (meebaItemTarget.tempDefenseStatChange < (meebaItemTarget.defense * 3))
                                    {
                                        Console.WriteLine(meebaItemTarget.name + "'s defense increased");
                                        Thread.Sleep(1000);
                                        meebaItemTarget.tempDefenseStatChange *= meebaItem.currentMove.defIncrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(meebaItemTarget.name + "'s defense is at maximum capacity");
                                        Thread.Sleep(1000);
                                    }
                                    if (meebaItem.ID == 1)
                                    {
                                        meebaItemTarget.meeba1Target = false; //No longer targeted by meeba1
                                        playerStats.meeba1Target = false;
                                    }
                                    if (meebaItem.ID == 2)
                                    {
                                        playerStats.meeba2Target = false; //No longer targeted by meeba2
                                        meebaItemTarget.meeba2Target = false;
                                    }
                                }
                                //spd
                                if (meebaItem.currentMove.spdIncrease > 0)
                                {
                                    if (meebaItemTarget.tempSpeed < (meebaItemTarget.speed * 3))
                                    {
                                        Console.WriteLine(meebaItemTarget.name + "'s speed increased");
                                        Thread.Sleep(1000);
                                        meebaItemTarget.tempSpeed *= meebaItem.currentMove.spdIncrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(meebaItemTarget.name + "'s speed is at maximum capacity");
                                        Thread.Sleep(1000);
                                    }
                                    if (meebaItem.ID == 1)
                                    {
                                        meebaItemTarget.meeba1Target = false; //No longer targeted by meeba1
                                        playerStats.meeba1Target = false;
                                    }
                                    if (meebaItem.ID == 2)
                                    {
                                        playerStats.meeba2Target = false; //No longer targeted by meeba2
                                        meebaItemTarget.meeba2Target = false;
                                    }
                                }
                                //atk
                                if (meebaItem.currentMove.attackIncrease > 0)
                                {
                                    if (meebaItemTarget.tempAttack < (meebaItemTarget.attack * 3))
                                    {
                                        Console.WriteLine(meebaItemTarget.name + "'s attack increased");
                                        Thread.Sleep(1000);
                                        meebaItemTarget.tempAttack *= meebaItem.currentMove.attackIncrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(meebaItemTarget.name + "'s attack is at maximum capacity");
                                        Thread.Sleep(1000);
                                    }
                                    if (meebaItem.ID == 1)
                                    {
                                        meebaItemTarget.meeba1Target = false; //No longer targeted by meeba1
                                        playerStats.meeba1Target = false;
                                    }
                                    if (meebaItem.ID == 2)
                                    {
                                        playerStats.meeba2Target = false; //No longer targeted by meeba2
                                        meebaItemTarget.meeba2Target = false;
                                    }
                                }
                                //Status protect
                                if (meebaItem.currentMove.statusProtection == true)
                                {
                                    meebaItemTarget.StatusProtected = true;
                                    if (meebaItem.currentMove.name == "Sand Shroud")
                                        meebaItemTarget.statusProtectCounterSS = 1;
                                    else if (meebaItem.currentMove.name == "Rock Fort")
                                        meebaItemTarget.statusProtectCounterRF = 1;
                                    else if (meebaItem.currentMove.name == "Stonewort")
                                        meebaItemTarget.statusProtectCounterSW = 1;
                                    Console.WriteLine(meebaItemTarget.name + " is protected from status changes");
                                    Thread.Sleep(1000);
                                    if (meebaItem.ID == 1)
                                    {
                                        meebaItemTarget.meeba1Target = false; //No longer targeted by meeba1
                                        playerStats.meeba1Target = false;
                                    }
                                    if (meebaItem.ID == 2)
                                    {
                                        playerStats.meeba2Target = false; //No longer targeted by meeba2
                                        meebaItemTarget.meeba2Target = false;
                                    }
                                }
                                //Damage protect
                                if (meebaItem.currentMove.damageProtection == true)
                                {
                                    meebaItemTarget.DamageProtected = true;
                                    meebaItemTarget.damageProtectCounter = 1;
                                    Console.WriteLine(meebaItemTarget.name + " is protected from damage");
                                    Thread.Sleep(1000);
                                    if (meebaItem.ID == 1)
                                    {
                                        meebaItemTarget.meeba1Target = false; //No longer targeted by meeba1
                                        playerStats.meeba1Target = false;
                                    }
                                    if (meebaItem.ID == 2)
                                    {
                                        playerStats.meeba2Target = false; //No longer targeted by meeba2
                                        meebaItemTarget.meeba2Target = false;
                                    }
                                }
                            }
                            else
                            {
                                Console.WriteLine(meebaItem.name + "'s attack missed " + meebaItemTarget.name);
                                Thread.Sleep(1000);
                            }
                            if (meebaItem.ID == 1)
                                meebaItemTarget.meeba1Target = false;
                            else if (meebaItem.ID == 2)
                                meebaItemTarget.meeba2Target = false;
                        }
                    }
                }
            }
        }

        public void enemyMove()
        {
            foreach (var item in ThisBattleEnemies)
            {
                if (item.active == true && item.HP > 0)
                {
                    if (item.isStunned == true && item.HP > 0)
                    {
                        int stunCheck = random.Next(2);
                        if (stunCheck == 0)
                        {
                            item.hasTakenTurn = true;
                            Console.WriteLine(item.name + " is in a daze and cannot attack");
                            Thread.Sleep(1000);
                            item.isStunned = false;
                            currentState = BattleState.SpeedComparison;
                        }
                    }
                    if (item.choice == 1 && item.hasTakenTurn == false || item.choice == 4 && item.hasTakenTurn == false)
                    {
                        if (item.ID == 1 && currentState == BattleState.EnemyOneMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyOneAttack;
                        }
                        else if (item.ID == 2 && currentState == BattleState.EnemyTwoMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyTwoAttack;
                        }
                        else if (item.ID == 3 && currentState == BattleState.EnemyThreeMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyThreeAttack;
                        }
                        if (playerStats.opponent1Target == true && item.ID == 1 && currentState == BattleState.EnemyOneAttack)
                            playerStats.textColour = ConsoleColor.Red;
                        else if (playerStats.opponent2Target == true && item.ID == 2 && currentState == BattleState.EnemyTwoAttack)
                            playerStats.textColour = ConsoleColor.Red;
                        else if (playerStats.opponent3Target == true && item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                            playerStats.textColour = ConsoleColor.Red;

                        if (meeba.opponent1Target == true && item.ID == 1 && currentState == BattleState.EnemyOneAttack)
                            meeba.textColour = ConsoleColor.Red;
                        else if (meeba.opponent2Target == true && item.ID == 2 && currentState == BattleState.EnemyTwoAttack)
                            meeba.textColour = ConsoleColor.Red;
                        else if (meeba.opponent3Target == true && item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                            meeba.textColour = ConsoleColor.Red;

                        if (meeba2.opponent1Target == true && item.ID == 1 && currentState == BattleState.EnemyOneAttack)
                            meeba2.textColour = ConsoleColor.Red;
                        else if (meeba2.opponent2Target == true && item.ID == 2 && currentState == BattleState.EnemyTwoAttack)
                            meeba2.textColour = ConsoleColor.Red;
                        else if (meeba2.opponent3Target == true && item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                            meeba2.textColour = ConsoleColor.Red;

                        if (opponentOne.opponent1Target == true && item.ID == 1 && currentState == BattleState.EnemyOneAttack)
                            opponentOne.textColour = ConsoleColor.Green;
                        else if (opponentOne.opponent2Target == true && item.ID == 2 && currentState == BattleState.EnemyTwoAttack)
                            opponentOne.textColour = ConsoleColor.Green;
                        else if (opponentOne.opponent3Target == true && item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                            opponentOne.textColour = ConsoleColor.Green;
                        
                        if (opponentTwo.opponent1Target == true && item.ID == 1 && currentState == BattleState.EnemyOneAttack)
                            opponentTwo.textColour = ConsoleColor.Green;
                        else if (opponentTwo.opponent2Target == true && item.ID == 2 && currentState == BattleState.EnemyTwoAttack)
                            opponentTwo.textColour = ConsoleColor.Green;
                        else if (opponentTwo.opponent3Target == true && item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                            opponentTwo.textColour = ConsoleColor.Green;

                        if (opponentThree.opponent1Target == true && item.ID == 1 && currentState == BattleState.EnemyOneAttack)
                            opponentThree.textColour = ConsoleColor.Green;
                        else if (opponentThree.opponent2Target == true && item.ID == 2 && currentState == BattleState.EnemyTwoAttack)
                            opponentThree.textColour = ConsoleColor.Green;
                        else if (opponentThree.opponent3Target == true && item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                            opponentThree.textColour = ConsoleColor.Green;

                    }
                    else if (item.choice == 2 && item.hasTakenTurn == false)
                    {
                        if (item.ID == 1 && currentState == BattleState.EnemyOneMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyOneDefend;
                        }
                        else if (item.ID == 2 && currentState == BattleState.EnemyTwoMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyTwoDefend;
                        }
                        if (item.ID == 3 && currentState == BattleState.EnemyThreeMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyThreeDefend;
                        }
                    }

                    else if (item.choice == 3 && item.hasTakenTurn == false)
                    {
                        if (item.ID == 1 && currentState == BattleState.EnemyOneMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyOneRun;
                        }
                        else if (item.ID == 2 && currentState == BattleState.EnemyTwoMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyTwoRun;
                        }
                        if (item.ID == 3 && currentState == BattleState.EnemyThreeMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyThreeRun;
                        }
                    }
                }
            }
        }

        public void EnemyAttack()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var item in ThisBattleEnemies)
            {
                if (item.ID == 1 && currentState == BattleState.EnemyOneAttack || item.ID == 2 && currentState == BattleState.EnemyTwoAttack || item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                {
                    item.hasTakenTurn = true;
                    if (item.ID == 1 && currentState == BattleState.EnemyOneAttack && playerStats.opponent1Target == true
                        || item.ID == 2 && currentState == BattleState.EnemyTwoAttack && playerStats.opponent2Target == true
                        || item.ID == 3 && currentState == BattleState.EnemyThreeAttack && playerStats.opponent3Target == true)
                    {
                        if (playerStats.playerCurrentHP == 0)
                        {
                            Console.WriteLine(item.name + " tried to attack " + playerStats.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(playerStats.name + " has already been defeated");
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            int accurateHit = random.Next(100);
                            if (accurateHit <= item.accuracy)
                            {
                                if (playerStats.DamageProtected != true)
                                {
                                    if (playerStats.defensive == true)
                                        tempAllyDefense = playerStats.tempDefense;
                                    else if (playerStats.defensive == false)
                                        tempAllyDefense = playerStats.tempDefenseStatChange;
                                    tempOppAttack = item.tempAttack;
                                    tempOppMoveBasePower = item.currentMove.BMP;
                                    TypeAdvantageOppPlayer();
                                    STABOpp();
                                    tempOppHit = random.Next(item.hit, 101);
                                    damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                    Console.WriteLine(item.name + " attacked " + playerStats.name);
                                    Thread.Sleep(1000);
                                    Console.WriteLine("You took {0} damage", damageCalcOppAttacking);
                                    Thread.Sleep(1000);
                                    if ((playerStats.playerCurrentHP - damageCalcOppAttacking) > 0)
                                        Console.WriteLine(playerStats.name + " has {0} HP", (playerStats.playerCurrentHP - damageCalcOppAttacking));
                                    else
                                        Console.WriteLine(playerStats.name + " has 0 HP");
                                    Thread.Sleep(1000);
                                    if ((playerStats.playerCurrentHP - damageCalcOppAttacking) <= 0)
                                    {
                                        Console.WriteLine(item.name + " defeated " + playerStats.name);
                                        Thread.Sleep(1000);
                                    }
                                    playerStats.playerCurrentHP -= damageCalcOppAttacking;
                                    if (playerStats.playerCurrentHP < 0)
                                        playerStats.playerCurrentHP = 0;
                                }
                                else
                                    Console.WriteLine(playerStats.name + " is protected from damage");
                            }
                            else
                            {
                                Console.WriteLine(item.name + "'s attack missed");
                                Thread.Sleep(1000);
                            }

                        }
                        if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        if (item.ID == 1)
                            playerStats.opponent1Target = false;
                        else if (item.ID == 2)
                            playerStats.opponent2Target = false;
                        else if (item.ID == 3)
                            playerStats.opponent3Target = false;
                    }
                    else if (item.ID == 1 && currentState == BattleState.EnemyOneAttack && meeba.opponent1Target == true
                      || item.ID == 2 && currentState == BattleState.EnemyTwoAttack && meeba.opponent2Target == true
                      || item.ID == 3 && currentState == BattleState.EnemyThreeAttack && meeba.opponent3Target == true)
                    {
                        if (meeba.currentHp == 0)
                        {
                            Console.WriteLine(item.name + " tried to attack " + meeba.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(meeba.name + " has already been defeated");
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            int accurateHit = random.Next(100);
                            if (accurateHit <= item.accuracy)
                            {
                                if (meeba.DamageProtected != true)
                                {
                                    if (meeba.defensive == true)
                                        tempAllyDefense = meeba.tempDefense;
                                    else if (meeba.defensive == false)
                                        tempAllyDefense = meeba.tempDefenseStatChange;
                                    tempOppAttack = item.tempAttack;
                                    tempOppMoveBasePower = item.currentMove.BMP;
                                    currentMeeba = meeba.name;
                                    TypeAdvantageOpp();
                                    STABOpp();
                                    tempOppHit = random.Next(item.hit, 101);
                                    damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                    Console.WriteLine(item.name + " attacked " + meeba.name);
                                    Thread.Sleep(1000);
                                    Console.WriteLine(meeba.name + " took {0} damage", damageCalcOppAttacking);
                                    Thread.Sleep(1000);
                                    if ((meeba.currentHp - damageCalcOppAttacking) > 0)
                                        Console.WriteLine(meeba.name + " has {0} HP", (meeba.currentHp - damageCalcOppAttacking));
                                    else
                                        Console.WriteLine(meeba.name + " has 0 HP");
                                    Thread.Sleep(1000);
                                    if ((meeba.currentHp - damageCalcOppAttacking) <= 0)
                                    {
                                        Console.WriteLine(item.name + " defeated " + meeba.name);
                                        Thread.Sleep(1000);
                                    }
                                    meeba.currentHp -= damageCalcOppAttacking; //put in variables here
                                    if (meeba.currentHp < 0)
                                        meeba.currentHp = 0;
                                }
                                else
                                    Console.WriteLine(meeba.name + " is protected from damage");
                            }
                            else
                            {
                                Console.WriteLine(item.name + "'s attack missed");
                                Thread.Sleep(1000);
                            }
                        }
                        if (item.ID == 1)
                            meeba.opponent1Target = false;
                        else if (item.ID == 2)
                            meeba.opponent2Target = false;
                        else if (item.ID == 3)
                            meeba.opponent3Target = false;
                    }
                    else if (item.ID == 1 && currentState == BattleState.EnemyOneAttack && meeba2.opponent1Target == true
                      || item.ID == 2 && currentState == BattleState.EnemyTwoAttack && meeba2.opponent2Target == true
                      || item.ID == 3 && currentState == BattleState.EnemyThreeAttack && meeba2.opponent3Target == true)
                    {
                        if (meeba2.currentHp == 0)
                        {
                            Console.WriteLine(item.name + " tried to attack " + meeba2.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(meeba2.name + " has already been defeated");
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            int accurateHit = random.Next(100);
                            if (accurateHit <= item.accuracy)
                            {
                                if (meeba2.DamageProtected != true)
                                {
                                    if (meeba2.defensive == true)
                                        tempAllyDefense = meeba2.tempDefense;
                                    else if (meeba2.defensive == false)
                                        tempAllyDefense = meeba2.tempDefenseStatChange;
                                    tempOppAttack = item.tempAttack;
                                    tempOppMoveBasePower = item.currentMove.BMP;
                                    currentMeeba = meeba2.name;
                                    TypeAdvantageOpp();
                                    STABOpp();
                                    tempOppHit = random.Next(item.hit, 101);
                                    damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                    Console.WriteLine(item.name + " attacked " + meeba2.name);
                                    Thread.Sleep(1000);
                                    Console.WriteLine(meeba2.name + " took {0} damage", damageCalcOppAttacking);
                                    Thread.Sleep(1000);
                                    if ((meeba2.currentHp - damageCalcOppAttacking) > 0)
                                        Console.WriteLine(meeba2.name + " has {0} HP", (meeba2.currentHp - damageCalcOppAttacking));
                                    else
                                        Console.WriteLine(meeba2.name + " has 0 HP");
                                    Thread.Sleep(1000);
                                    if ((meeba2.currentHp - damageCalcOppAttacking) <= 0)
                                    {
                                        Console.WriteLine(item.name + " defeated " + meeba2.name);
                                        Thread.Sleep(1000);
                                    }
                                    meeba2.currentHp -= damageCalcOppAttacking; //put in variables here
                                    if (meeba2.currentHp < 0)
                                        meeba2.currentHp = 0;
                                }
                                else
                                    Console.WriteLine(meeba2.name + " is protected from damage");
                            }
                            else
                            {
                                Console.WriteLine(item.name + "'s attack missed");
                                Thread.Sleep(1000);
                            }

                        }
                        if (item.ID == 1)
                            meeba2.opponent1Target = false;
                        else if (item.ID == 2)
                            meeba2.opponent2Target = false;
                        else if (item.ID == 3)
                            meeba2.opponent3Target = false;
                    }
                }
            }
        }

        public void EnemyOffensiveAttack()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var Item in ThisBattleEnemies)
            {
                if (Item.ID == 1 && currentState == BattleState.EnemyOneAttack || Item.ID == 2 && currentState == BattleState.EnemyTwoAttack || Item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                {
                    foreach (var meebaitem in ThisBattleMeebas)
                    {
                        if (meebaitem.ID == 1 && Item.ID == 1 && meeba.opponent1Target == true
                            || meebaitem.ID == 1 && Item.ID == 2 && meeba.opponent2Target == true
                            || meebaitem.ID == 1 && Item.ID == 3 && meeba.opponent3Target == true
                            || meebaitem.ID == 2 && Item.ID == 1 && meeba2.opponent1Target == true
                            || meebaitem.ID == 2 && Item.ID == 2 && meeba2.opponent2Target == true
                            || meebaitem.ID == 2 && Item.ID == 3 && meeba2.opponent2Target == true)

                            if (meebaitem.currentHp == 0 && Item.currentMove.name != "Pyroclastic Flow")
                            {
                                Console.WriteLine(Item.name + " tried to attack " + meebaitem.name);
                                Thread.Sleep(1000);
                                Console.WriteLine(meebaitem.name + " has already been defeated");
                                Thread.Sleep(1000);
                            }
                            else if (meebaitem.currentHp > 0)
                            {
                                int accurateHit = random.Next(100);
                                if (accurateHit <= Item.currentMove.accuracy)
                                {
                                    Console.WriteLine("{0} attacked {1} with {2}", Item.name, meebaitem.name, Item.currentMove.name);
                                    Thread.Sleep(1000);
                                    if (Item.currentMove.BMP > 0)
                                    {
                                        if (Item.PyroclasticFlowCounter == 1)
                                        {
                                            Item.MP -= 13;
                                            if (Item.MP < 0)
                                                Item.MP = 0;
                                            Console.WriteLine(Item.name + " summoned a lava flow");
                                            Thread.Sleep(1000);
                                            Item.PyroclasticFlowCounter = 2;
                                        }
                                        else if (Item.currentMove.name != "Pyroclastic Flow" && meebaitem.DamageProtected != true)
                                        {
                                            tempOppAttack = Item.tempAttack;
                                            if (meebaitem.defensive == true)
                                                tempAllyDefense = meebaitem.tempDefense;
                                            else if (meebaitem.defensive == false)
                                                tempAllyDefense = meebaitem.tempDefenseStatChange;
                                            tempOppMoveBasePower = Item.currentMove.BMP;
                                            currentMeeba = meebaitem.name;
                                            TypeAdvantageOpp();
                                            STABOpp();
                                            tempOppHit = random.Next(Item.hit, 101);
                                            damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                            Item.MP -= Item.currentMove.MP;
                                            if (Item.MP < 0)
                                                Item.MP = 0;
                                            Console.WriteLine(meebaitem.name + " took {0} damage", damageCalcOppAttacking);
                                            Thread.Sleep(1000);
                                            if ((meebaitem.currentHp - damageCalcOppAttacking) > 0)
                                                Console.WriteLine(meebaitem.name + " has {0} HP", (meebaitem.currentHp - damageCalcOppAttacking));
                                            else
                                                Console.WriteLine(meebaitem.name + " has 0 HP");
                                            Thread.Sleep(1000);
                                            if ((meebaitem.currentHp - damageCalcOppAttacking) <= 0)
                                            {
                                                Console.WriteLine(Item.name + " defeated {0}", meebaitem.name);
                                                Thread.Sleep(1000);
                                            }
                                            meebaitem.currentHp -= damageCalcOppAttacking;
                                            if (meebaitem.currentHp < 0)
                                                meebaitem.currentHp = 0;
                                            if (Item.currentMove.name == "Deluge")
                                                Item.tempSpeedStatChange -= 1000;
                                            if (Item.currentMove.name == "Leaching Roots")
                                                Item.LeachingRootsHP = 1 + Math.Round(damageCalcOppAttacking * 0.4);
                                            if (Item.currentMove.name == "Pyriscent Bullets") //2 more attacks
                                            {
                                                tempOppHit = random.Next(Item.hit, 101);
                                                damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                                Console.WriteLine("{0} attacked {1} with {2}", Item.name, meebaitem.name, Item.currentMove.name);
                                                Thread.Sleep(1000);
                                                Console.WriteLine(meebaitem.name + " took {0} damage", damageCalcOppAttacking);
                                                Thread.Sleep(1000);
                                                if ((meebaitem.currentHp - damageCalcOppAttacking) > 0)
                                                    Console.WriteLine(meebaitem.name + " has {0} HP", (meebaitem.currentHp - damageCalcOppAttacking));
                                                else
                                                    Console.WriteLine(meebaitem.name + " has 0 HP");
                                                Thread.Sleep(1000);
                                                if ((meebaitem.currentHp - damageCalcOppAttacking) <= 0)
                                                {
                                                    Console.WriteLine(Item.name + " defeated {0}", meebaitem.name);
                                                    Thread.Sleep(1000);
                                                    break;
                                                }
                                                meebaitem.currentHp -= damageCalcOppAttacking;
                                                if (meebaitem.currentHp < 0)
                                                    meebaitem.currentHp = 0;

                                                tempOppHit = random.Next(Item.hit, 101);
                                                damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                                Console.WriteLine("{0} attacked {1} with {2}", Item.name, meebaitem.name, Item.currentMove.name);
                                                Thread.Sleep(1000);
                                                Console.WriteLine(meebaitem.name + " took {0} damage", damageCalcOppAttacking);
                                                Thread.Sleep(1000);
                                                if ((meebaitem.currentHp - damageCalcOppAttacking) > 0)
                                                    Console.WriteLine(meebaitem.name + " has {0} HP", (meebaitem.currentHp - damageCalcOppAttacking));
                                                else
                                                    Console.WriteLine(meebaitem.name + " has 0 HP");
                                                Thread.Sleep(1000);
                                                if ((meebaitem.currentHp - damageCalcOppAttacking) <= 0)
                                                {
                                                    Console.WriteLine(Item.name + " defeated {0}", meebaitem.name);
                                                    Thread.Sleep(1000);
                                                }
                                                meebaitem.currentHp -= damageCalcOppAttacking;
                                                if (meebaitem.currentHp < 0)
                                                    meebaitem.currentHp = 0;
                                            }
                                        }
                                        else
                                            Console.WriteLine(meebaitem.name + " is protected from damage");
                                    }
                                    //Opponent defense decrease
                                    if (Item.currentMove.oppDefenseDecrease > 0)
                                    {
                                        if (meebaitem.StatusProtected == true)
                                        {
                                            Console.WriteLine(meebaitem.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meebaitem.tempDefenseStatChange > (meebaitem.defense / 3))
                                        {
                                            Console.WriteLine(meebaitem.name + "'s defense decreased");
                                            Thread.Sleep(1000);
                                            meebaitem.tempDefenseStatChange *= Item.currentMove.oppDefenseDecrease;
                                        }
                                        else
                                        {
                                            Console.WriteLine(meebaitem.name + "'s defense is at minimum capacity");
                                            Thread.Sleep(1000);
                                        }
                                    }
                                    //Opponent speed decrease
                                    if (Item.currentMove.oppSpeedDecrease > 0)
                                    {
                                        if (meebaitem.StatusProtected == true)
                                        {
                                            Console.WriteLine(meebaitem.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meebaitem.tempSpeed > (meebaitem.speed / 3))
                                        {
                                            Console.WriteLine(meebaitem.name + "'s speed decreased");
                                            Thread.Sleep(1000);
                                            meebaitem.tempSpeed *= Item.currentMove.oppSpeedDecrease;
                                        }
                                        else
                                        {
                                            Console.WriteLine(meebaitem.name + "'s speed is at minimum capacity");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Posion Inflicted?
                                    if (Item.currentMove.poisonChance > 0 && meebaitem.isPoisoned != true)
                                    {
                                        int poison = random.Next(100);
                                        if (meebaitem.StatusProtected == true)
                                        {
                                            Console.WriteLine(meebaitem.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (poison <= Item.currentMove.poisonChance)
                                        {
                                            Console.WriteLine(Item.name + " poisoned " + meebaitem.name);
                                            Thread.Sleep(1000);
                                            meebaitem.isPoisoned = true;
                                            meebaitem.poisonTracker = 0;
                                        }
                                        else
                                        {
                                            Console.WriteLine("The poison was ineffective");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Poison Passive Ability
                                    if (Item.poisonChance > 0)
                                    {
                                        int poison = random.Next(100);
                                        if (meebaitem.StatusProtected == true)
                                        {
                                            Console.WriteLine(meebaitem.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (poison <= Item.poisonChance)
                                        {
                                            Console.WriteLine(Item.name + " poisoned " + meebaitem.name);
                                            Thread.Sleep(1000);
                                            if (Item.poisonOne == true && Item.poisonTwo != true)
                                                meebaitem.isPoisoned = true;
                                            else if (Item.poisonTwo == true)
                                                meebaitem.isPoisonedTwo = true;
                                            meebaitem.poisonTracker = 0;
                                        }
                                        else
                                        {
                                            Console.WriteLine("The poison was ineffective");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Stun Inflicted?
                                    if (Item.currentMove.stunChance > 0)
                                    {
                                        int stun = random.Next(100);
                                        if (meebaitem.StatusProtected == true)
                                        {
                                            Console.WriteLine(meebaitem.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (stun <= Item.currentMove.stunChance)
                                        {
                                            Console.WriteLine(Item.name + " stunned " + meebaitem.name + ", it may not attack");
                                            Thread.Sleep(1000);
                                            meebaitem.isStunned = true;
                                        }
                                    }
                                    //Sleep Inflicted?
                                    if (Item.currentMove.sleepChance > 0)
                                    {
                                        int sleep = random.Next(100);
                                        if (meebaitem.StatusProtected == true)
                                        {
                                            Console.WriteLine(meebaitem.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (sleep <= Item.currentMove.sleepChance)
                                        {
                                            Console.WriteLine(Item.name + " lulled " + meebaitem.name + " to sleep");
                                            Thread.Sleep(1000);
                                            meebaitem.isAsleep = true;
                                        }
                                        else
                                        {
                                            Console.WriteLine(meebaitem.name + " stayed awake");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Life leech passive ability?
                                    if (Item.lifeLeech == true && meebaitem.currentHp > 0)
                                    {
                                        int lifeleeach = random.Next(100);
                                        if (lifeleeach <= Item.lifeLeechChance)
                                        {
                                            Console.WriteLine(Item.name + " leeched some life from " + meebaitem.name);
                                            Thread.Sleep(1000);
                                            Item.HP += Math.Round((Item.MaxHP / 100) * Item.lifeLeechHeal);
                                            if (Item.HP > Item.MaxHP)
                                                Item.HP = Item.MaxHP;
                                        }
                                    }
                                }
                                else
                                {
                                    Console.WriteLine(Item.name + "'s attack missed " + meebaitem.name);
                                    Thread.Sleep(1000);
                                }

                            }
                        if (Item.ID == 1)
                            meebaitem.opponent1Target = false;
                        else if (Item.ID == 2)
                            meebaitem.opponent2Target = false;
                        else if (Item.ID == 3)
                            meebaitem.opponent3Target = false;
                    }
                    if (Item.ID == 1 && playerStats.opponent1Target == true || Item.ID == 2 && playerStats.opponent2Target == true
                        || Item.ID == 3 && playerStats.opponent3Target == true)
                    {
                        if (playerStats.playerCurrentHP == 0 && Item.currentMove.name != "Pyroclastic Flow")
                        {
                            Console.WriteLine(Item.name + " tried to attack " + playerStats.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(playerStats.name + " has already been defeated");
                            Thread.Sleep(1000);
                        }
                        else if (playerStats.playerCurrentHP > 0)
                        {
                            int accurateHit = random.Next(100);
                            if (accurateHit <= Item.currentMove.accuracy)
                            {
                                if (Item.currentMove.BMP > 0)
                                {
                                    if (Item.PyroclasticFlowCounter == 1)
                                    {
                                        Item.MP -= 13;
                                        if (Item.MP < 0)
                                            Item.MP = 0;
                                        Console.WriteLine(Item.name + " summoned a lava flow");
                                        Thread.Sleep(1000);
                                        Item.PyroclasticFlowCounter = 2;
                                    }
                                    else if (Item.currentMove.name != "Pyroclastic Flow" && playerStats.DamageProtected != true)
                                    {
                                        tempOppAttack = Item.tempAttack;
                                        tempAllyDefense = playerStats.playerMaxDefense;
                                        tempOppMoveBasePower = Item.currentMove.BMP;
                                        TypeAdvantageOppPlayer();
                                        STABOpp();
                                        tempOppHit = random.Next(Item.hit, 101);
                                        damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                        Item.MP -= Item.currentMove.MP;
                                        if (Item.MP < 0)
                                            Item.MP = 0;
                                        Console.WriteLine("{0} attacked {1} with {2}", Item.name, playerStats.name, Item.currentMove.name);
                                        Thread.Sleep(1000);
                                        Console.WriteLine(playerStats.name + " took {0} damage", damageCalcOppAttacking);
                                        Thread.Sleep(1000);
                                        if ((playerStats.playerCurrentHP - damageCalcOppAttacking) > 0)
                                            Console.WriteLine(playerStats.name + " has {0} HP", (playerStats.playerCurrentHP - damageCalcOppAttacking));
                                        else
                                            Console.WriteLine(playerStats.name + " has 0 HP");
                                        Thread.Sleep(1000);
                                        if ((playerStats.playerCurrentHP - damageCalcOppAttacking) <= 0)
                                        {
                                            Console.WriteLine(Item.name + " defeated {0}", playerStats.name);
                                            Thread.Sleep(1000);
                                        }
                                        playerStats.playerCurrentHP -= damageCalcOppAttacking;
                                        if (playerStats.playerCurrentHP < 0)
                                            playerStats.playerCurrentHP = 0;
                                        if (Item.currentMove.name == "Deluge")
                                            Item.tempSpeedStatChange -= 1000;
                                        if (Item.currentMove.name == "Leaching Roots")
                                            Item.LeachingRootsHP = 1 + Math.Round(damageCalcOppAttacking * 0.4);
                                        if (Item.currentMove.name == "Pyriscent Bullets") //2 more attacks
                                        {
                                            tempOppHit = random.Next(Item.hit, 101);
                                            damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                            Console.WriteLine("{0} attacked {1} with {2}", Item.name, playerStats.name, Item.currentMove.name);
                                            Thread.Sleep(1000);
                                            Console.WriteLine(playerStats.name + " took {0} damage", damageCalcOppAttacking);
                                            Thread.Sleep(1000);
                                            if ((playerStats.playerCurrentHP - damageCalcOppAttacking) > 0)
                                                Console.WriteLine(playerStats.name + " has {0} HP", (playerStats.playerCurrentHP - damageCalcOppAttacking));
                                            else
                                                Console.WriteLine(playerStats.name + " has 0 HP");
                                            Thread.Sleep(1000);
                                            if ((playerStats.playerCurrentHP - damageCalcOppAttacking) <= 0)
                                            {
                                                Console.WriteLine(Item.name + " defeated {0}", playerStats.name);
                                                Thread.Sleep(1000);
                                                break;
                                            }
                                            playerStats.playerCurrentHP -= damageCalcOppAttacking;
                                            if (playerStats.playerCurrentHP < 0)
                                                playerStats.playerCurrentHP = 0;

                                            tempOppHit = random.Next(Item.hit, 101);
                                            damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                            Console.WriteLine("{0} attacked {1} with {2}", Item.name, playerStats.name, Item.currentMove.name);
                                            Thread.Sleep(1000);
                                            Console.WriteLine(playerStats.name + " took {0} damage", damageCalcOppAttacking);
                                            Thread.Sleep(1000);
                                            if ((playerStats.playerCurrentHP - damageCalcOppAttacking) > 0)
                                                Console.WriteLine(playerStats.name + " has {0} HP", (playerStats.playerCurrentHP - damageCalcOppAttacking));
                                            else
                                                Console.WriteLine(playerStats.name + " has 0 HP");
                                            Thread.Sleep(1000);
                                            if ((playerStats.playerCurrentHP - damageCalcOppAttacking) <= 0)
                                            {
                                                Console.WriteLine(Item.name + " defeated {0}", playerStats.name);
                                                Thread.Sleep(1000);
                                            }
                                            playerStats.playerCurrentHP -= damageCalcOppAttacking;
                                            if (playerStats.playerCurrentHP < 0)
                                                playerStats.playerCurrentHP = 0;
                                        }
                                    }
                                    else
                                        Console.WriteLine(playerStats.name + " is protected from damage");

                                }
                                //Player tep
                                if (Item.currentMove.oppDefenseDecrease > 0)
                                {
                                    if (playerStats.tempDefenseStatChange > (playerStats.playerMaxDefense / 3))
                                    {
                                        Console.WriteLine(playerStats.name + "'s defense decreased");
                                        Thread.Sleep(1000);
                                        playerStats.tempDefenseStatChange *= Item.currentMove.oppDefenseDecrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(playerStats.name + "'s defense is at minimum capacity");
                                        Thread.Sleep(1000);
                                    }
                                }
                                //Player speed decrease
                                if (Item.currentMove.oppSpeedDecrease > 0)
                                {
                                    if (playerStats.tempSpeed > (playerStats.playerMaxSpeed / 3))
                                    {
                                        Console.WriteLine(playerStats.name + "'s speed decreased");
                                        Thread.Sleep(1000);
                                        playerStats.tempSpeed *= Item.currentMove.oppSpeedDecrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(playerStats.name + "'s speed is at minimum capacity");
                                        Thread.Sleep(1000);
                                    }
                                }

                                //Posion Inflicted?
                                if (Item.currentMove.poisonChance > 0 && playerStats.isPoisoned != true)
                                {
                                    int poison = random.Next(100);
                                    if (poison <= Item.currentMove.poisonChance)
                                    {
                                        Console.WriteLine(Item.name + " poisoned " + playerStats.name);
                                        Thread.Sleep(1000);
                                        playerStats.isPoisoned = true;
                                        playerStats.poisonTracker = 0;
                                    }
                                    else
                                    {
                                        Console.WriteLine("The poison was ineffective");
                                        Thread.Sleep(1000);
                                    }
                                }
                                //Poison Passive Ability
                                if (Item.poisonChance > 0)
                                {
                                    int poison = random.Next(100);
                                    if (poison <= Item.poisonChance)
                                    {
                                        Console.WriteLine(Item.name + " poisoned " + playerStats.name);
                                        Thread.Sleep(1000);
                                        if (Item.poisonOne == true && Item.poisonTwo != true)
                                            playerStats.isPoisoned = true;
                                        else if (Item.poisonTwo == true)
                                            playerStats.isPoisonedTwo = true;
                                        playerStats.poisonTracker = 0;
                                    }
                                    else
                                    {
                                        Console.WriteLine("The poison was ineffective");
                                        Thread.Sleep(1000);
                                    }
                                }
                                //Stun Inflicted?
                                if (Item.currentMove.stunChance > 0)
                                {
                                    int stun = random.Next(100);
                                    if (stun <= Item.currentMove.stunChance)
                                    {
                                        Console.WriteLine(Item.name + " stunned " + playerStats.name + ", it may not attack");
                                        Thread.Sleep(1000);
                                        playerStats.isStunned = true;
                                    }
                                }
                                //Sleep Inflicted?
                                if (Item.currentMove.sleepChance > 0)
                                {
                                    int sleep = random.Next(100);
                                    if (sleep <= Item.currentMove.sleepChance)
                                    {
                                        Console.WriteLine(Item.name + " lulled " + playerStats.name + " to sleep");
                                        Thread.Sleep(1000);
                                        playerStats.isAsleep = true;
                                    }
                                    else
                                    {
                                        Console.WriteLine(playerStats.name + " stayed awake");
                                        Thread.Sleep(1000);
                                    }
                                }
                                //Life leech passive ability?
                                if (Item.lifeLeech == true && playerStats.playerCurrentHP > 0)
                                {
                                    int lifeleeach = random.Next(100);
                                    if (lifeleeach <= Item.lifeLeechChance)
                                    {
                                        Console.WriteLine(Item.name + " leeched some life from " + playerStats.name);
                                        Thread.Sleep(1000);
                                        Item.HP += Math.Round((Item.MaxHP / 100) * Item.lifeLeechHeal);
                                        if (Item.HP > Item.MaxHP)
                                            Item.HP = Item.MaxHP;
                                    }
                                }
                            }
                            else
                            {
                                Console.WriteLine(Item.name + "'s attack missed " + playerStats.name);
                                Thread.Sleep(1000);
                            }
                        }
                        if (Item.ID == 1)
                            playerStats.opponent1Target = false;
                        else if (Item.ID == 2)
                            playerStats.opponent2Target = false;
                        else if (Item.ID == 3)
                            playerStats.opponent3Target = false;
                    }
                }
            }
        }

        public void EnemyDefensiveAttack()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var Item in ThisBattleEnemies) //meeba1 attacking, meeba2 attacking
            {
                if (Item.ID == 1 && currentState == BattleState.EnemyOneAttack || Item.ID == 2 && currentState == BattleState.EnemyTwoAttack || Item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                {
                    foreach (var ItemTarget in ThisBattleEnemies) //meeba1 is target, meeba2 is target
                    {
                        if (Item.ID == 1 && ItemTarget.ID == 1 && ItemTarget.opponent1Target == true
                            || Item.ID == 1 && ItemTarget.ID == 2 && ItemTarget.opponent1Target == true
                            || Item.ID == 1 && ItemTarget.ID == 3 && ItemTarget.opponent1Target == true
                            || Item.ID == 2 && ItemTarget.ID == 1 && ItemTarget.opponent2Target == true
                            || Item.ID == 2 && ItemTarget.ID == 2 && ItemTarget.opponent2Target == true
                            || Item.ID == 2 && ItemTarget.ID == 3 && ItemTarget.opponent2Target == true
                            || Item.ID == 3 && ItemTarget.ID == 1 && ItemTarget.opponent3Target == true
                            || Item.ID == 3 && ItemTarget.ID == 2 && ItemTarget.opponent3Target == true
                            || Item.ID == 3 && ItemTarget.ID == 3 && ItemTarget.opponent3Target == true)
                        {
                            Console.WriteLine("{0} targeted {1} with {2}", Item.name, ItemTarget.name, Item.currentMove.name);
                            Thread.Sleep(1000);
                            int accurateHit = random.Next(100);
                            if (accurateHit <= Item.currentMove.accuracy)
                            {
                                Item.MP -= Item.currentMove.MP;
                                if (Item.MP < 0)
                                    Item.MP = 0;

                                //Healing?
                                if (Item.currentMove.healChance > 0)
                                {
                                    int heal = random.Next(100);
                                    if (heal <= Item.currentMove.healChance)
                                    {
                                        double healHP = 0;
                                        if (Item.currentMove.name == "Leaching Roots")
                                            healHP = Item.LeachingRootsHP;
                                        else
                                            healHP = Math.Round((ItemTarget.MaxHP * ItemTarget.currentMove.healAmount) / 100);
                                        Console.WriteLine(Item.name + " healed " + ItemTarget.name + " for {0} HP", healHP >= (ItemTarget.MaxHP - ItemTarget.HP) ? (ItemTarget.MaxHP - ItemTarget.HP) : healHP);
                                        ItemTarget.HP += healHP;
                                        if (ItemTarget.HP > ItemTarget.MaxHP) //cannot go above max hp
                                            ItemTarget.HP = ItemTarget.MaxHP;
                                        Thread.Sleep(1000);
                                    }
                                    else
                                    {
                                        Console.WriteLine("No healing is needed for " + ItemTarget.name);
                                        Thread.Sleep(1000);
                                    }
                                    if (Item.ID == 1)
                                        ItemTarget.opponent1Target = false; //No longer targeted by 
                                    if (Item.ID == 2)
                                        ItemTarget.opponent2Target = false;
                                    if (Item.ID == 3)
                                        ItemTarget.opponent3Target = false;
                                }
                                //Stat Increase? - def
                                if (Item.currentMove.defIncrease > 0)
                                {
                                    if (ItemTarget.tempDefenseStatChange < (ItemTarget.defense * 3))
                                    {
                                        Console.WriteLine(ItemTarget.name + "'s defense increased");
                                        Thread.Sleep(1000);
                                        ItemTarget.tempDefenseStatChange *= Item.currentMove.defIncrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(ItemTarget.name + "'s defense is at maximum capacity");
                                        Thread.Sleep(1000);
                                    }
                                    if (Item.ID == 1)
                                        ItemTarget.opponent1Target = false; //No longer targeted by 
                                    if (Item.ID == 2)
                                        ItemTarget.opponent2Target = false;
                                    if (Item.ID == 3)
                                        ItemTarget.opponent3Target = false;
                                }
                                //spd
                                if (Item.currentMove.spdIncrease > 0)
                                {
                                    if (ItemTarget.tempSpeedStatChange < (ItemTarget.speed * 3))
                                    {
                                        Console.WriteLine(ItemTarget.name + "'s speed increased");
                                        Thread.Sleep(1000);
                                        ItemTarget.tempSpeedStatChange *= Item.currentMove.spdIncrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(ItemTarget.name + "'s speed is at maximum capacity");
                                        Thread.Sleep(1000);
                                    }
                                    if (Item.ID == 1)
                                        ItemTarget.opponent1Target = false; //No longer targeted by 
                                    if (Item.ID == 2)
                                        ItemTarget.opponent2Target = false;
                                    if (Item.ID == 3)
                                        ItemTarget.opponent3Target = false;
                                }
                                //atk
                                if (Item.currentMove.attackIncrease > 0)
                                {
                                    if (ItemTarget.tempAttack < (ItemTarget.strength * 3))
                                    {
                                        Console.WriteLine(ItemTarget.name + "'s attack increased");
                                        Thread.Sleep(1000);
                                        ItemTarget.tempAttack *= Item.currentMove.attackIncrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(ItemTarget.name + "'s attack is at maximum capacity");
                                        Thread.Sleep(1000);
                                    }
                                    if (Item.ID == 1)
                                        ItemTarget.opponent1Target = false; //No longer targeted by 
                                    if (Item.ID == 2)
                                        ItemTarget.opponent2Target = false;
                                    if (Item.ID == 3)
                                        ItemTarget.opponent3Target = false;
                                }
                                //Status protect
                                if (Item.currentMove.statusProtection == true)
                                {
                                    ItemTarget.StatusProtected = true;
                                    if (Item.currentMove.name == "Sand Shroud")
                                        ItemTarget.statusProtectCounterSS = 1;
                                    else if (Item.currentMove.name == "Rock Fort")
                                        ItemTarget.statusProtectCounterRF = 1;
                                    else if (Item.currentMove.name == "Stonewort")
                                        ItemTarget.statusProtectCounterSW = 1;
                                    Console.WriteLine(ItemTarget.name + " is protected from status changes");
                                    Thread.Sleep(1000);
                                    if (Item.ID == 1)
                                        ItemTarget.opponent1Target = false; //No longer targeted by 
                                    if (Item.ID == 2)
                                        ItemTarget.opponent2Target = false;
                                    if (Item.ID == 3)
                                        ItemTarget.opponent3Target = false;
                                }
                                //Damage protect
                                if (Item.currentMove.damageProtection == true)
                                {
                                    ItemTarget.DamageProtected = true;
                                    ItemTarget.damageProtectCounter = 1;
                                    Console.WriteLine(ItemTarget.name + " is protected from damage");
                                    Thread.Sleep(1000);
                                    if (Item.ID == 1)
                                        ItemTarget.opponent1Target = false; //No longer targeted by 
                                    if (Item.ID == 2)
                                        ItemTarget.opponent2Target = false;
                                    if (Item.ID == 3)
                                        ItemTarget.opponent3Target = false;
                                }
                            }
                            else
                            {
                                Console.WriteLine(Item.name + "'s attack missed " + ItemTarget.name);
                                Thread.Sleep(1000);
                            }
                            if (Item.ID == 1)
                                ItemTarget.opponent1Target = false; //No longer targeted by 
                            if (Item.ID == 2)
                                ItemTarget.opponent2Target = false;
                            if (Item.ID == 3)
                                ItemTarget.opponent3Target = false;
                        }
                    }
                }
            }
        }

        public void enemyDefend()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var item in ThisBattleEnemies)
            {
                if (item.ID == 1 && currentState == BattleState.EnemyOneDefend || item.ID == 2 && currentState == BattleState.EnemyTwoDefend || item.ID == 3 && currentState == BattleState.EnemyThreeDefend)
                {
                    item.hasTakenTurn = true;
                    item.tempDefense *= 3;
                    Console.WriteLine(item.name + " is defending");
                    Thread.Sleep(1000);
                }
            }
        }

        public void enemyRun()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var item in ThisBattleEnemies)
            {
                if (item.ID == 1 && currentState == BattleState.EnemyOneRun || item.ID == 2 && currentState == BattleState.EnemyTwoRun || item.ID == 3 && currentState == BattleState.EnemyThreeRun)
                {
                    item.hasTakenTurn = true;
                    item.defensive = false;
                    if (playerStats.playerMaxSpeed >= item.speed)
                    {
                        if (random.Next(0, 3) == 0)
                        {
                            Console.WriteLine(item.name + " tried and failed to escape from the battle");
                            Thread.Sleep(1000);
                            currentState = BattleState.SpeedComparison;
                        }
                        else if (random.Next(0, 3) == 1 || random.Next(0, 3) == 2 || random.Next(0, 3) == 3)
                        {
                            Console.WriteLine(item.name + " escaped from the battle");
                            item.HP = 0;
                            item.ranAway = true;
                            Thread.Sleep(1000);
                            Console.Clear();
                            currentState = BattleState.SpeedComparison;
                        }
                    }
                    else
                    {
                        Console.WriteLine(item.name + " escaped from the battle");
                        item.HP = 0;
                        item.ranAway = true;
                        Thread.Sleep(1000);
                        Console.Clear();
                        currentState = BattleState.SpeedComparison;
                    }
                }
            }
        }

        public void TypeAdvantagePlayer()
        {
            foreach (var item in ThisBattleEnemies)
            {
                if (playerStats.weaponElement.ToLower() == "Neutral".ToLower())
                    tempPlayerTypeAdv = 1;
                else if (playerStats.weaponElement.ToLower() == "Fire".ToLower())
                {
                    if (item.elementType == "Fire")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Plant" || item.elementType == "Air" || item.elementType == "Storm" || item.elementType == "Moss")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Dust" || item.elementType == "Water" || item.elementType == "Earth")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Plant".ToLower())
                {
                    if (item.elementType == "Plant")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Earth" || item.elementType == "Water" || item.elementType == "Hydrotherm" || item.elementType == "Dust")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Air" || item.elementType == "Fire" || item.elementType == "Storm")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Earth".ToLower())
                {
                    if (item.elementType == "Earth")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Fire" || item.elementType == "Air" || item.elementType == "Storm" || item.elementType == "Charcoal")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Plant" || item.elementType == "Water" || item.elementType == "Hydrotherm")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Air".ToLower())
                {
                    if (item.elementType == "Air")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Plant" || item.elementType == "Water" || item.elementType == "Hydrotherm" || item.elementType == "Moss")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Earth" || item.elementType == "Fire" || item.elementType == "Charcoal")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Water".ToLower())
                {
                    if (item.elementType == "Water")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Fire" || item.elementType == "Earth" || item.elementType == "Charcoal" || item.elementType == "Dust")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Air" || item.elementType == "Plant" || item.elementType == "Moss")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Charcoal".ToLower())
                {
                    if (item.elementType == "Charcoal")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Moss" || item.elementType == "Storm" || item.elementType == "Air")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Dust" || item.elementType == "Hydrotherm" || item.elementType == "Earth" || item.elementType == "Water")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Moss".ToLower())
                {
                    if (item.elementType == "Moss")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Dust" || item.elementType == "Hydrotherm" || item.elementType == "Water")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Charcoal" || item.elementType == "Storm" || item.elementType == "Fire" || item.elementType == "Air")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Dust".ToLower())
                {
                    if (item.elementType == "Dust")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Charcoal" || item.elementType == "Storm" || item.elementType == "Fire")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Hydrotherm" || item.elementType == "Moss" || item.elementType == "Water" || item.elementType == "Plant")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Storm".ToLower())
                {
                    if (item.elementType == "Storm")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Hydrotherm" || item.elementType == "Moss" || item.elementType == "Plant")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Dust" || item.elementType == "Charcoal" || item.elementType == "Fire" || item.elementType == "Earth")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Hydrotherm".ToLower())
                {
                    if (item.elementType == "Hydrotherm")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Charcoal" || item.elementType == "Dust" || item.elementType == "Earth")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Storm" || item.elementType == "Moss" || item.elementType == "Air" || item.elementType == "Plant")
                        tempPlayerTypeAdv = 0.75;
                }
            }
        }

        public void TypeAdvantageAlly()
        {
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneSpecial || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoSpecial
                    || meebaItem.ID == 1 && meebaItem.PyroclasticFlowCounter == 2 || meebaItem.ID == 2 && meebaItem.PyroclasticFlowCounter == 2)
                {
                    foreach (var item in ThisBattleEnemies)
                    {
                        if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneSpecial && item.meeba1Target == true && item.HP > 0
                            || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoSpecial && item.meeba2Target == true && item.HP > 0)
                        {
                            if (meeba.elementType == "Neutral")
                                tempAllyTypeAdv = 1;
                            else if (meeba.elementType == "Fire")
                            {
                                if (item.elementType == "Fire")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Plant" || item.elementType == "Air" || item.elementType == "Storm" || item.elementType == "Moss")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Dust" || item.elementType == "Water" || item.elementType == "Earth")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Plant")
                            {
                                if (item.elementType == "Plant")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Earth" || item.elementType == "Water" || item.elementType == "Hydrotherm" || item.elementType == "Dust")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Air" || item.elementType == "Fire" || item.elementType == "Storm")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Earth")
                            {
                                if (item.elementType == "Earth")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Fire" || item.elementType == "Air" || item.elementType == "Storm" || item.elementType == "Charcoal")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Plant" || item.elementType == "Water" || item.elementType == "Hydrotherm")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Air")
                            {
                                if (item.elementType == "Air")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Plant" || item.elementType == "Water" || item.elementType == "Hydrotherm" || item.elementType == "Moss")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Earth" || item.elementType == "Fire" || item.elementType == "Charcoal")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Water")
                            {
                                if (item.elementType == "Water")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Fire" || item.elementType == "Earth" || item.elementType == "Charcoal" || item.elementType == "Dust")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Air" || item.elementType == "Plant" || item.elementType == "Moss")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Charcoal")
                            {
                                if (item.elementType == "Charcoal")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Moss" || item.elementType == "Storm" || item.elementType == "Air")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Dust" || item.elementType == "Hydrotherm" || item.elementType == "Earth" || item.elementType == "Water")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Moss")
                            {
                                if (item.elementType == "Moss")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Dust" || item.elementType == "Hydrotherm" || item.elementType == "Water")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Charcoal" || item.elementType == "Storm" || item.elementType == "Fire" || item.elementType == "Air")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Dust")
                            {
                                if (item.elementType == "Dust")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Charcoal" || item.elementType == "Storm" || item.elementType == "Fire")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Hydrotherm" || item.elementType == "Moss" || item.elementType == "Water" || item.elementType == "Plant")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Storm")
                            {
                                if (item.elementType == "Storm")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Hydrotherm" || item.elementType == "Moss" || item.elementType == "Plant")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Dust" || item.elementType == "Charcoal" || item.elementType == "Fire" || item.elementType == "Earth")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Hydrotherm")
                            {
                                if (item.elementType == "Hydrotherm")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Charcoal" || item.elementType == "Dust" || item.elementType == "Earth")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Storm" || item.elementType == "Moss" || item.elementType == "Air" || item.elementType == "Plant")
                                    tempAllyTypeAdv = 0.75;
                            }
                        }
                    }
                }
            }
        }

        public void TypeAdvantageOpp()
        {
            foreach (var item in ThisBattleEnemies)
            {
                if (item.ID == 1 && currentState == BattleState.EnemyOneAttack || item.ID == 2 && currentState == BattleState.EnemyTwoAttack || item.ID == 3 && currentState == BattleState.EnemyThreeAttack
                    || item.ID == 1 && item.PyroclasticFlowCounter == 2 || item.ID == 2 && item.PyroclasticFlowCounter == 2 || item.ID == 3 && item.PyroclasticFlowCounter == 2)
                {
                    foreach (var meebaItem in ThisBattleMeebas)
                    {
                        if (item.ID == 1 && currentState == BattleState.EnemyOneAttack && meebaItem.opponent1Target == true && meebaItem.hp > 0 && currentMeeba == meebaItem.name
                            || item.ID == 2 && currentState == BattleState.EnemyTwoAttack && meebaItem.opponent2Target == true && meebaItem.hp > 0 && currentMeeba == meebaItem.name
                            || item.ID == 3 && currentState == BattleState.EnemyThreeAttack && meebaItem.opponent3Target == true && meebaItem.hp > 0 && currentMeeba == meebaItem.name)
                        {
                            if (meebaItem.elementType == "Neutral")
                                tempOppTypeAdv = 1;
                            else if (item.elementType == "Fire")
                            {
                                if (meebaItem.elementType == "Fire")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Plant" || meebaItem.elementType == "Air" || meebaItem.elementType == "Storm" || meebaItem.elementType == "Moss")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Dust" || meebaItem.elementType == "Water" || meebaItem.elementType == "Earth")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Plant")
                            {
                                if (meebaItem.elementType == "Plant")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Earth" || meebaItem.elementType == "Water" || meebaItem.elementType == "Hydrotherm" || meebaItem.elementType == "Dust")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Air" || meebaItem.elementType == "Fire" || meebaItem.elementType == "Storm")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Earth")
                            {
                                if (meebaItem.elementType == "Earth")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Fire" || meebaItem.elementType == "Air" || meebaItem.elementType == "Storm" || meebaItem.elementType == "Charcoal")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Plant" || meebaItem.elementType == "Water" || meebaItem.elementType == "Hydrotherm")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Air")
                            {
                                if (meebaItem.elementType == "Air")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Plant" || meebaItem.elementType == "Water" || meebaItem.elementType == "Hydrotherm" || meebaItem.elementType == "Moss")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Earth" || meebaItem.elementType == "Fire" || meebaItem.elementType == "Charcoal")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Water")
                            {
                                if (meebaItem.elementType == "Water")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Fire" || meebaItem.elementType == "Earth" || meebaItem.elementType == "Charcoal" || meebaItem.elementType == "Dust")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Air" || meebaItem.elementType == "Plant" || meebaItem.elementType == "Moss")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Charcoal")
                            {
                                if (meebaItem.elementType == "Charcoal")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Moss" || meebaItem.elementType == "Storm" || meebaItem.elementType == "Air")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Dust" || meebaItem.elementType == "Hydrotherm" || meebaItem.elementType == "Earth" || meebaItem.elementType == "Water")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Moss")
                            {
                                if (meebaItem.elementType == "Moss")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Dust" || meebaItem.elementType == "Hydrotherm" || meebaItem.elementType == "Water")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Charcoal" || meebaItem.elementType == "Storm" || meebaItem.elementType == "Fire" || meebaItem.elementType == "Air")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Dust")
                            {
                                if (meebaItem.elementType == "Dust")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Charcoal" || meebaItem.elementType == "Storm" || meebaItem.elementType == "Fire")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Hydrotherm" || meebaItem.elementType == "Moss" || meebaItem.elementType == "Water" || meebaItem.elementType == "Plant")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Storm")
                            {
                                if (meebaItem.elementType == "Storm")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Hydrotherm" || meebaItem.elementType == "Moss" || meebaItem.elementType == "Plant")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Dust" || meebaItem.elementType == "Charcoal" || meebaItem.elementType == "Fire" || meebaItem.elementType == "Earth")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Hydrotherm")
                            {
                                if (meebaItem.elementType == "Hydrotherm")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Charcoal" || meebaItem.elementType == "Dust" || meebaItem.elementType == "Earth")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Storm" || meebaItem.elementType == "Moss" || meebaItem.elementType == "Air" || meebaItem.elementType == "Plant")
                                    tempOppTypeAdv = 0.75;
                            }
                        }
                    }
                }
            }
        }

        public void TypeAdvantageOppPlayer()
        {
            foreach (var item in ThisBattleEnemies)
            {
                if (item.ID == 1 && currentState == BattleState.EnemyOneAttack || item.ID == 2 && currentState == BattleState.EnemyTwoAttack || item.ID == 3 && currentState == BattleState.EnemyThreeAttack
                    || item.ID == 1 && item.PyroclasticFlowCounter == 2 || item.ID == 2 && item.PyroclasticFlowCounter == 2 || item.ID == 3 && item.PyroclasticFlowCounter == 2)
                {
                    if (playerStats.armourElement.ToLower() == "Neutral".ToLower())
                        tempOppTypeAdv = 1;
                    else if (item.elementType.ToLower() == "Fire".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Fire".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Plant".ToLower() || playerStats.armourElement.ToLower() == "Air".ToLower() || playerStats.armourElement.ToLower() == "Storm".ToLower() || playerStats.armourElement.ToLower() == "Moss".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Dust".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower() || playerStats.armourElement.ToLower() == "Earth".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType.ToLower() == "Plant".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Plant".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Earth".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower() || playerStats.armourElement.ToLower() == "Hydrotherm".ToLower() || playerStats.armourElement.ToLower() == "Dust".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Air".ToLower() || playerStats.armourElement.ToLower() == "Fire".ToLower() || playerStats.armourElement.ToLower() == "Storm".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType.ToLower() == "Earth".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Earth".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Fire".ToLower() || playerStats.armourElement.ToLower() == "Air".ToLower() || playerStats.armourElement.ToLower() == "Storm".ToLower() || playerStats.armourElement.ToLower() == "Charcoal".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Plant".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower() || playerStats.armourElement.ToLower() == "Hydrotherm".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Air".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Air".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Plant".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower() || playerStats.armourElement.ToLower() == "Hydrotherm".ToLower() || playerStats.armourElement.ToLower() == "Moss".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Earth".ToLower() || playerStats.armourElement.ToLower() == "Fire".ToLower() || playerStats.armourElement.ToLower() == "Charcoal".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Water".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Water".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Fire".ToLower() || playerStats.armourElement.ToLower() == "Earth".ToLower() || playerStats.armourElement.ToLower() == "Charcoal".ToLower() || playerStats.armourElement.ToLower() == "Dust".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Air".ToLower() || playerStats.armourElement.ToLower() == "Plant".ToLower() || playerStats.armourElement.ToLower() == "Moss".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Charcoal".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Charcoal".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Moss".ToLower() || playerStats.armourElement.ToLower() == "Storm".ToLower() || playerStats.armourElement.ToLower() == "Air".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Dust".ToLower() || playerStats.armourElement.ToLower() == "Hydrotherm".ToLower() || playerStats.armourElement.ToLower() == "Earth".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Moss".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Moss".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Dust".ToLower() || playerStats.armourElement.ToLower() == "Hydrotherm".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Charcoal".ToLower() || playerStats.armourElement.ToLower() == "Storm".ToLower() || playerStats.armourElement.ToLower() == "Fire".ToLower() || playerStats.armourElement.ToLower() == "Air".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Dust".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Dust".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Charcoal".ToLower() || playerStats.armourElement.ToLower() == "Storm".ToLower() || playerStats.armourElement.ToLower() == "Fire".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Hydrotherm".ToLower() || playerStats.armourElement.ToLower() == "Moss".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower() || playerStats.armourElement.ToLower() == "Plant".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Storm".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Storm".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Hydrotherm".ToLower() || playerStats.armourElement.ToLower() == "Moss".ToLower() || playerStats.armourElement.ToLower() == "Plant".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Dust".ToLower() || playerStats.armourElement.ToLower() == "Charcoal".ToLower() || playerStats.armourElement.ToLower() == "Fire".ToLower() || playerStats.armourElement.ToLower() == "Earth".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Hydrotherm".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Hydrotherm".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Charcoal".ToLower() || playerStats.armourElement.ToLower() == "Dust".ToLower() || playerStats.armourElement.ToLower() == "Earth".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Storm".ToLower() || playerStats.armourElement.ToLower() == "Moss".ToLower() || playerStats.armourElement.ToLower() == "Air".ToLower() || playerStats.armourElement.ToLower() == "Plant".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                }
            }
        }

        public void STABAlly() //tempAllySTAB
        {
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.PyroclasticFlowCounter == 2)
                    meebaItem.currentMove.moveType = "Fire";

                if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneSpecial || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoSpecial
                    || meebaItem.ID == 1 && meebaItem.PyroclasticFlowCounter == 2 || meebaItem.ID == 2 && meebaItem.PyroclasticFlowCounter == 2)
                {
                    if (meebaItem.elementType == "Neutral")
                        tempAllySTAB = 1;
                    if (meebaItem.elementType == "Fire")
                    {
                        if (meebaItem.currentMove.moveType == "Fire")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Charcoal" || meebaItem.currentMove.moveType == "Hydrotherm")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Plant" || meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Moss")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Air" || meebaItem.currentMove.moveType == "Earth" || meebaItem.currentMove.moveType == "Dust")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Water")
                    {
                        if (meebaItem.currentMove.moveType == "Water")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Hydrotherm")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Air" || meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Dust" || meebaItem.currentMove.moveType == "Charcoal")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Earth" || meebaItem.currentMove.moveType == "Plant" || meebaItem.currentMove.moveType == "Moss")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Plant")
                    {
                        if (meebaItem.currentMove.moveType == "Plant")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Charcoal" || meebaItem.currentMove.moveType == "Moss")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Earth" || meebaItem.currentMove.moveType == "Hydrotherm" || meebaItem.currentMove.moveType == "Dust")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Air" || meebaItem.currentMove.moveType == "Storm")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Earth")
                    {
                        if (meebaItem.currentMove.moveType == "Earth")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Moss" || meebaItem.currentMove.moveType == "Dust")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Air" || meebaItem.currentMove.moveType == "Plant" || meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Charcoal")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Hydrotherm")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Air")
                    {
                        if (meebaItem.currentMove.moveType == "Air")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Dust")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Earth" || meebaItem.currentMove.moveType == "Hydrotherm" || meebaItem.currentMove.moveType == "Moss")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Plant" || meebaItem.currentMove.moveType == "Charcoal")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Charcoal")
                    {
                        if (meebaItem.currentMove.moveType == "Charcoal")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Plant")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Hydrotherm" || meebaItem.currentMove.moveType == "Moss" || meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Earth")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Air" || meebaItem.currentMove.moveType == "Dust")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Moss")
                    {
                        if (meebaItem.currentMove.moveType == "Moss")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Plant" || meebaItem.currentMove.moveType == "Earth")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Charcoal" || meebaItem.currentMove.moveType == "Dust" || meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Air")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Hydrotherm" || meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Water")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Dust")
                    {
                        if (meebaItem.currentMove.moveType == "Dust")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Air" || meebaItem.currentMove.moveType == "Earth")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Moss" || meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Plant")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Hydrotherm" || meebaItem.currentMove.moveType == "Charcoal" || meebaItem.currentMove.moveType == "Fire")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Storm")
                    {
                        if (meebaItem.currentMove.moveType == "Storm")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Air")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Dust" || meebaItem.currentMove.moveType == "Hydrotherm" || meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Earth")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Moss" || meebaItem.currentMove.moveType == "Charcoal" || meebaItem.currentMove.moveType == "Plant")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Hydrotherm")
                    {
                        if (meebaItem.currentMove.moveType == "Hydrotherm")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Fire")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Charcoal" || meebaItem.currentMove.moveType == "Plant" || meebaItem.currentMove.moveType == "Air")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Moss" || meebaItem.currentMove.moveType == "Dust" || meebaItem.currentMove.moveType == "Earth")
                            tempAllySTAB = 0.5;
                    }
                }
            }
        }

        public void STABOpp() //tempOppSTAB
        {
            foreach (var item in ThisBattleEnemies)
            {
                if (item.PyroclasticFlowCounter == 2)
                    item.currentMove.moveType = "Fire";

                if (item.ID == 1 && currentState == BattleState.EnemyOneAttack || item.ID == 2 && currentState == BattleState.EnemyTwoAttack || item.ID == 3 && currentState == BattleState.EnemyThreeAttack
                    || item.ID == 1 && item.PyroclasticFlowCounter == 2 || item.ID == 2 && item.PyroclasticFlowCounter == 2 || item.ID == 3 && item.PyroclasticFlowCounter == 2)
                {
                    if (item.elementType == "Neutral")
                        tempOppSTAB = 1;
                    if (item.elementType == "Fire")
                    {
                        if (item.currentMove.moveType == "Fire")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Charcoal" || item.currentMove.moveType == "Hydrotherm")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Water" || item.currentMove.moveType == "Plant" || item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Moss")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Air" || item.currentMove.moveType == "Earth" || item.currentMove.moveType == "Dust")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Water")
                    {
                        if (item.currentMove.moveType == "Water")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Hydrotherm")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Air" || item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Dust" || item.currentMove.moveType == "Charcoal")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Earth" || item.currentMove.moveType == "Plant" || item.currentMove.moveType == "Moss")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Plant")
                    {
                        if (item.currentMove.moveType == "Plant")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Charcoal" || item.currentMove.moveType == "Moss")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Earth" || item.currentMove.moveType == "Hydrotherm" || item.currentMove.moveType == "Dust")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Water" || item.currentMove.moveType == "Air" || item.currentMove.moveType == "Storm")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Earth")
                    {
                        if (item.currentMove.moveType == "Earth")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Moss" || item.currentMove.moveType == "Dust")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Air" || item.currentMove.moveType == "Plant" || item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Charcoal")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Water" || item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Hydrotherm")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Air")
                    {
                        if (item.currentMove.moveType == "Air")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Dust")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Water" || item.currentMove.moveType == "Earth" || item.currentMove.moveType == "Hydrotherm" || item.currentMove.moveType == "Moss")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Plant" || item.currentMove.moveType == "Charcoal")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Charcoal")
                    {
                        if (item.currentMove.moveType == "Charcoal")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Plant")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Hydrotherm" || item.currentMove.moveType == "Moss" || item.currentMove.moveType == "Water" || item.currentMove.moveType == "Earth")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Air" || item.currentMove.moveType == "Dust")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Moss")
                    {
                        if (item.currentMove.moveType == "Moss")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Plant" || item.currentMove.moveType == "Earth")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Charcoal" || item.currentMove.moveType == "Dust" || item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Air")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Hydrotherm" || item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Water")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Dust")
                    {
                        if (item.currentMove.moveType == "Dust")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Air" || item.currentMove.moveType == "Earth")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Moss" || item.currentMove.moveType == "Water" || item.currentMove.moveType == "Plant")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Hydrotherm" || item.currentMove.moveType == "Charcoal" || item.currentMove.moveType == "Fire")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Storm")
                    {
                        if (item.currentMove.moveType == "Storm")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Water" || item.currentMove.moveType == "Air")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Dust" || item.currentMove.moveType == "Hydrotherm" || item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Earth")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Moss" || item.currentMove.moveType == "Charcoal" || item.currentMove.moveType == "Plant")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Hydrotherm")
                    {
                        if (item.currentMove.moveType == "Hydrotherm")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Water" || item.currentMove.moveType == "Fire")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Charcoal" || item.currentMove.moveType == "Plant" || item.currentMove.moveType == "Air")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Moss" || item.currentMove.moveType == "Dust" || item.currentMove.moveType == "Earth")
                            tempOppSTAB = 0.5;
                    }
                }
            }
        }

        public void FoundItems()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            //Found items
            int itemChance = random.Next(10);
            if (opponentOne.active == true && opponentOne.ranAway != true)
            {
                if (itemChance == 0 || itemChance == 1 || itemChance == 2)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentOne.itemDrop[0]), opponentOne.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentOne.itemDrop[0]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentOne.itemDrop[0]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentOne.itemDrop[0], out currentCount);
                        inventory.dictionary[opponentOne.itemDrop[0]] = currentCount + 1;
                    }

                }
                else if (itemChance == 4 || itemChance == 5)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentOne.itemDrop[1]), opponentOne.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentOne.itemDrop[1]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentOne.itemDrop[1]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentOne.itemDrop[1], out currentCount);
                        inventory.dictionary[opponentOne.itemDrop[1]] = currentCount + 1;
                    }

                }
                else if (itemChance == 6)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentOne.itemDrop[2]), opponentOne.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentOne.itemDrop[2]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentOne.itemDrop[2]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentOne.itemDrop[2], out currentCount);
                        inventory.dictionary[opponentOne.itemDrop[2]] = currentCount + 1;
                    }

                }
                else if (itemChance == 7 || itemChance == 8 || itemChance == 9 || itemChance == 3)
                {
                    Console.WriteLine("There were no items to be found from the " + opponentOne.name);
                }
                Thread.Sleep(1200);
            }
            int itemChance1 = random.Next(10);
            if (opponentTwo.active == true && opponentTwo.ranAway != true)
            {
                if (itemChance1 == 0 || itemChance1 == 1 || itemChance1 == 2 || itemChance1 == 3)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentTwo.itemDrop[0]), opponentTwo.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentTwo.itemDrop[0]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentTwo.itemDrop[0]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentTwo.itemDrop[0], out currentCount);
                        inventory.dictionary[opponentTwo.itemDrop[0]] = currentCount + 1;
                    }

                }
                else if (itemChance1 == 4 || itemChance1 == 5)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentTwo.itemDrop[1]), opponentTwo.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentTwo.itemDrop[1]))
                    {
                        Console.WriteLine("You have no space for the {0}", opponentTwo.itemDrop[1]);
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentTwo.itemDrop[1], out currentCount);
                        inventory.dictionary[opponentTwo.itemDrop[1]] = currentCount + 1;
                    }

                }
                else if (itemChance1 == 6)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentTwo.itemDrop[2]), opponentTwo.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentTwo.itemDrop[2]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentTwo.itemDrop[2]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentTwo.itemDrop[2], out currentCount);
                        inventory.dictionary[opponentTwo.itemDrop[2]] = currentCount + 1;
                    }

                }
                else if (itemChance1 == 7 || itemChance1 == 8 || itemChance1 == 9)
                {
                    Console.WriteLine("There were no items to be found from the " + opponentTwo.name);
                }
                Thread.Sleep(1200);
            }
            int itemChance2 = random.Next(10);
            if (opponentThree.active == true && opponentThree.ranAway != true)
            {
                if (itemChance2 == 0 || itemChance2 == 1 || itemChance2 == 2 || itemChance2 == 3)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentThree.itemDrop[0]), opponentThree.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentThree.itemDrop[0]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentThree.itemDrop[0]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentThree.itemDrop[0], out currentCount);
                        inventory.dictionary[opponentThree.itemDrop[0]] = currentCount + 1;
                    }
                }
                else if (itemChance2 == 4 || itemChance2 == 5)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentThree.itemDrop[1]), opponentThree.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentThree.itemDrop[1]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentThree.itemDrop[1]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentThree.itemDrop[1], out currentCount);
                        inventory.dictionary[opponentThree.itemDrop[1]] = currentCount + 1;
                    }
                }
                else if (itemChance2 == 6)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentThree.itemDrop[2]), opponentThree.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentThree.itemDrop[2]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentThree.itemDrop[2]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentThree.itemDrop[2], out currentCount);
                        inventory.dictionary[opponentThree.itemDrop[2]] = currentCount + 1;
                    }
                }
                else if (itemChance2 == 7 || itemChance2 == 8 || itemChance2 == 9)
                {
                    Console.WriteLine("There were no items to be found from the " + opponentThree.name);
                }
                Thread.Sleep(1200);
            }
        }

        static void animFade() //Fades to white then back to black
        {
            Console.Clear();
            Console.BackgroundColor = ConsoleColor.DarkGray;
            Thread.Sleep(50);
            Console.Clear();
            Console.BackgroundColor = ConsoleColor.Gray;
            Thread.Sleep(50);
            Console.Clear();
            Console.BackgroundColor = ConsoleColor.White;
            Thread.Sleep(50);
            Console.Clear();
            Console.BackgroundColor = ConsoleColor.Gray;
            Thread.Sleep(50);
            Console.Clear();
            Console.BackgroundColor = ConsoleColor.DarkGray;
            Thread.Sleep(50);
            Console.Clear();
            Console.BackgroundColor = ConsoleColor.Black;
            Thread.Sleep(50);
            Console.Clear();
        }

        public void PlayAnimation()
        {
            for (int j = 0; j < 5; j++) //For each of first 5 frames (0,1,2,3,4)
            {
                for (int i = 0; i < 8; i++) //For each 8 lines of sprite
                {
                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                        Console.WriteLine(opponentOne.animation[j, i]);
                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                        Console.WriteLine(opponentOne.animation[j, i] + "     " + opponentTwo.animation[j, i]);
                    else
                        Console.WriteLine(opponentOne.animation[j, i] + "     " + opponentTwo.animation[j, i] + "     " + opponentThree.animation[j, i]);
                }
                Thread.Sleep(200);
                Console.Clear();
            }

            for (int j = 3; j > 0; j--) //For each of last 3 frames (3,2,1)
            {
                for (int i = 0; i < 8; i++)
                {
                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                        Console.WriteLine(opponentOne.animation[j, i]);
                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                        Console.WriteLine(opponentOne.animation[j, i] + "     " + opponentTwo.animation[j, i]);
                    else
                        Console.WriteLine(opponentOne.animation[j, i] + "     " + opponentTwo.animation[j, i] + "     " + opponentThree.animation[j, i]);
                }
                Thread.Sleep(200);
                Console.Clear();
            }
        }

        static void BoatAnimation()
        {
            string[,] boatArray = new string[44, 6]
            {
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
            };



            for (int i = 0; i < 44; i++) //For each 6 lines of sprite
            {
                Console.WriteLine(boatArray[i, 0] + "\n" + boatArray[i, 1] + "\n" + boatArray[i, 2] + "\n" + boatArray[i, 3] + "\n" + boatArray[i, 4] + "\n" + boatArray[i, 5]);
                if (i < 43)
                {
                    Thread.Sleep(300);
                    Console.Clear();
                }
                else if (i == 43)
                {
                    Thread.Sleep(800);
                    Console.Clear();
                }
            }
            Thread.Sleep(1000);
            Console.Clear();
        }

        static ConsoleColor getRandomColor()
        {
            Random rand = new Random();
            {
                var consoleColors = Enum.GetValues(typeof(ConsoleColor));
                return (ConsoleColor)consoleColors.GetValue(rand.Next(consoleColors.Length));
            }
        }

        public void DiscoRoom()
        {
            while (!Console.KeyAvailable)
            {
                Console.Clear();
                Console.BackgroundColor = getRandomColor();
                Thread.Sleep(80);
            }
            if (Console.ReadKey(true).Key != ConsoleKey.Escape)
            {
                Console.BackgroundColor = ConsoleColor.Black;
                Console.Clear();
            }
        }

        public void summonCthulhu()
        {
            Console.ForegroundColor = foregroundColour;
            WriteLineText("Cthulhu was summoned... ");
            Console.ReadLine();
            WriteLineText("...");
            Console.ReadLine();
            WriteLineText("...");
            Console.ReadLine();
            WriteLineText("A mere adventurer like you cannot handle Cthulhu's might");
            Console.ReadLine();
            WriteLineText("");
        }
    }
}