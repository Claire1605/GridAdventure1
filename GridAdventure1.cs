using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Timers;
using System.IO;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace GridAdventure1
{
    public class Program
    {
        static void Main(string[] args)
        {
            PlayGame game = new PlayGame();
            Menu menu = new Menu();
            menu.MainMenu();
        }
    }

    [JsonObject]
    public class PlayGame
    {
        [JsonIgnore]
        public Menu MainMenu;
        public PlayerStats playerStats = new PlayerStats();
        public int CurrentMap = 0;
        public int CurrentLocation = 15;
        public int textSpeed = 20;
        [JsonIgnore]
        public WorldMap worldMap = new WorldMap();

        public WorldMap[][] WorldMapCells;
        public Meeba meeba = new Meeba();
        public Meeba meeba2 = new Meeba();
        public Inventory inventory = new Inventory();
        public Dictionary<string, int> getInvDictionary1()
        {
            return inventory.getInvDictionary();
        }
        public Dictionary<string, int> ComputerStorage = new Dictionary<string, int>(); //Computer Storage
        public Dictionary<string, int> ComputerDNAItemStorage = new Dictionary<string, int>(); //Evolve item Storage
        public List<string> questLog = new List<string> { };
        //Counters
        public bool playerHasSavedOnce;
        public int storyCounter = 0; //CHANGE
        public bool vanyaTalk = false;
        public int librarianCounter = 0;
        public int boatguyCounter = 0;
        public int librarysketchymanCounter = 0;
        public int libraryoldmanCounter = 0;
        public int minerCounter = 0;
        public bool useableItem; //in item menu in battle - to check if a useable item has been selected
        public int cityVisitor = 0;
        public int antonCounter = 0;
        public bool boatToKarstbay = true; //false == ToRifton
        public bool takeCoins = false;
        public bool WaterfallQuestBranch1 = false;
        public bool WaterfallQuestBranch2 = false;
        public bool WaterfallQuestBranch3 = false;
        public bool miniBossOneDefeat = false;
        public bool miniBossBattle = false;
        public Stick Stick = new Stick();
        public Sword Sword = new Sword();
        public Axe Axe = new Axe();
        public Mace Mace = new Mace();
        public Spear Spear = new Spear();
        public Bow Bow = new Bow();
        public Shield Shield = new Shield();
        public MegaSword MegaSword = new MegaSword();
        public LacqueredShield LacqueredShield = new LacqueredShield();

        //PUBLIC VARIABLES - don't save
        [JsonIgnore]
        public ConsoleColor backgroundColour = ConsoleColor.Black;
        [JsonIgnore]
        public ConsoleColor foregroundColour = ConsoleColor.Gray;
        [JsonIgnore]
        public Random random = new Random();
        [JsonIgnore]
        public string itemChoice;
        [JsonIgnore]
        public Item examItem = new Item();
        [JsonIgnore]
        public int currentCount;
        [JsonIgnore]
        public Enemy opponentOne;
        [JsonIgnore]
        public Enemy opponentTwo;
        [JsonIgnore]
        public Enemy opponentThree;
        [JsonIgnore]
        public Meeba currentDNAMeeba;
        [JsonIgnore]
        public bool torchOn = false;
        [JsonIgnore]
        public string userValue;
        [JsonIgnore]
        public string userValueItem;
        [JsonIgnore]
        public string[] GridMap;
        [JsonIgnore]
        public Dictionary<int, int> Levels = new Dictionary<int, int>
            {
                {0,1 }, {12,2 }, {51,3 }, {115,4 }, {202,5 }, {311,6 }, {441,7 }, {591,8 }, {761,9 }, {949, 10 },
                {1155,11 }, {1380, 12 }, {1623, 13 }, {1884, 14 }, {2164, 15 }, {2464, 16 }, {2784, 17 }, {3126, 18 }, {3490, 19 }, {3879, 20 },
                {4294, 21 }, {4736, 22 }, {5208, 23 }, {5713, 24 }, {6252, 25 }, {6829, 26 }, {7446, 27 }, {8106, 28 }, {8813, 29 }, {9571, 30 },
                {10383, 31 }, {11252, 32 }, {12184, 33 }, {13182, 34 }, {14251, 35 }, {15396, 36 }, {16621, 37 }, {17932, 38 }, {19334, 39 }, {20833, 40 },
                {22434, 41 }, {24144, 42 }, {25968, 43 }, {27913, 44 }, {29986, 45 }, {32193, 46 }, { 34541, 47 }, { 37038, 48}, { 39691, 49}, { 42507, 50}
            };  //Dictionary of exp and levels. Key = exp, Value - level. exp = y = 0.034x^3 - 1.096x^2 + 29.892x -16.83
        [JsonIgnore]
        public List<int> westernBorder = new List<int> { 0, 10, 20, 30, 40, 50, 60, 70, 80, 90 }; //west and east boundaries of grid
        [JsonIgnore]
        public List<int> easternBorder = new List<int> { 9, 19, 29, 39, 49, 59, 69, 79, 89, 99 };
        //Battle public vars
        [JsonIgnore]
        public List<Enemy> ThisBattleEnemies = new List<Enemy>() { }; //list for use in battle of chosen enemies
        [JsonIgnore]
        public List<Meeba> ThisBattleMeebas = new List<Meeba>() { }; //list for use in battle of current meeba
        //meeba damage
        [JsonIgnore]
        public double damageCalcAllyAttacking;
        [JsonIgnore]
        public double damageCalcOppAttacking;
        //player damage
        [JsonIgnore]
        public double damageCalcPlayerAttacking;
        //damage calculation
        [JsonIgnore]
        public double tempAllyAttack = 1; //in e.g. meeba1 attack - sub in meeba1 values
        [JsonIgnore]
        public double tempOppDefense = 1;
        [JsonIgnore]
        public double tempAllyMoveBasePower = 1;
        [JsonIgnore]
        public double tempAllyItemBonus = 1;
        [JsonIgnore]
        public double tempAllyHit = 100;
        [JsonIgnore]
        public double tempOppAttack = 1;
        [JsonIgnore]
        public double tempAllyDefense = 1;
        [JsonIgnore]
        public double tempOppMoveBasePower = 1;
        [JsonIgnore]
        public double tempOppItemBonus = 1;
        [JsonIgnore]
        public double tempOppHit = 100;
        [JsonIgnore]
        public double tempAllySTAB = 1;
        [JsonIgnore]
        public double tempAllyTypeAdv = 1;
        [JsonIgnore]
        public double tempPlayerTypeAdv = 1;
        [JsonIgnore]
        public double tempOppSTAB = 1;
        [JsonIgnore]
        public double tempOppTypeAdv = 1;
        [JsonIgnore]
        public string[] enemyAdjectives = new string[] { "An Angry", "A Fuming", "A Vehement", "A Grouchy", "A Podgy", "A Placid", "A Debatable", "A Hairy", "An Enormous", "A Tiny", "An Ugly", "A Scary", "A Ravenous", "An Edacious", "A Viking", "A Tantalising", "A Bearded", "A Terrifying" };
        [JsonIgnore]
        public int randomMember1;
        [JsonIgnore]
        public int randomMember2;
        [JsonIgnore]
        public int randomMember3;
        [JsonIgnore]
        public Enemy currentEnemy;
        [JsonIgnore]
        public string currentMeeba;
        [JsonIgnore]
        public bool resetMenu = false;
        //Meeba states
        [JsonIgnore]
        public Tinder FT1 = new Tinder();
        [JsonIgnore]
        public Smoke FT2 = new Smoke();
        [JsonIgnore]
        public Flame FT3 = new Flame();
        [JsonIgnore]
        public Infernus FT4 = new Infernus();
        [JsonIgnore]
        public Sprout PT1 = new Sprout();
        [JsonIgnore]
        public Grass PT2 = new Grass();
        [JsonIgnore]
        public Vine PT3 = new Vine();
        [JsonIgnore]
        public Forest PT4 = new Forest();
        [JsonIgnore]
        public Soil ET1 = new Soil();
        [JsonIgnore]
        public Boulder ET2 = new Boulder();
        [JsonIgnore]
        public Terra ET3 = new Terra();
        [JsonIgnore]
        public Mount ET4 = new Mount();
        [JsonIgnore]
        public Breeze AT1 = new Breeze();
        [JsonIgnore]
        public Wind AT2 = new Wind();
        [JsonIgnore]
        public Sky AT3 = new Sky();
        [JsonIgnore]
        public Atmos AT4 = new Atmos();
        [JsonIgnore]
        public Drop WT1 = new Drop();
        [JsonIgnore]
        public Pond WT2 = new Pond();
        [JsonIgnore]
        public Lake WT3 = new Lake();
        [JsonIgnore]
        public Ocean WT4 = new Ocean();
        [JsonIgnore]
        public Cinder CT1 = new Cinder();
        [JsonIgnore]
        public Ember CT2 = new Ember();
        [JsonIgnore]
        public Charred CT3 = new Charred();
        [JsonIgnore]
        public Ash CT4 = new Ash();
        [JsonIgnore]
        public Algae MT1 = new Algae();
        [JsonIgnore]
        public Lichen MT2 = new Lichen();
        [JsonIgnore]
        public Bog MT3 = new Bog();
        [JsonIgnore]
        public Swamp MT4 = new Swamp();
        [JsonIgnore]
        public Sand DT1 = new Sand();
        [JsonIgnore]
        public Loess DT2 = new Loess();
        [JsonIgnore]
        public Dune DT3 = new Dune();
        [JsonIgnore]
        public Desert DT4 = new Desert();
        [JsonIgnore]
        public Cloud ST1 = new Cloud();
        [JsonIgnore]
        public Hailstone ST2 = new Hailstone();
        [JsonIgnore]
        public Thunder ST3 = new Thunder();
        [JsonIgnore]
        public Lightning ST4 = new Lightning();
        [JsonIgnore]
        public Evapo HT1 = new Evapo();
        [JsonIgnore]
        public Vapour HT2 = new Vapour();
        [JsonIgnore]
        public Vent HT3 = new Vent();
        [JsonIgnore]
        public WaterFireTier4 HT4 = new WaterFireTier4();
        //Items
        public FavDrink FavDrink = new FavDrink();
        [JsonIgnore]
        public bool meebaEvolved;
        [JsonIgnore]
        public string currentGraftWeapon;
        [JsonIgnore]
        public string currentGraftWeaponItem;
        [JsonIgnore]
        public string message;
        [JsonIgnore]
        public bool skip = false;
        //Input phrases
        [JsonIgnore]
        public List<string> InvPhrases = new List<string>() { "inventory", "inv", "invent", "check inventory", "bag", "stash", "treasure", "i" };
        [JsonIgnore]
        public List<string> NorthPhrases = new List<string>() { "n", "north", "go north", "head north", "wander north", "move north", "walk north", "up", "go up", "head up", "move up", "walk up", "wander up" };
        [JsonIgnore]
        public List<string> SouthPhrases = new List<string>() { "s", "south", "go south", "head south", "wander south", "move south", "walk south", "down", "go down", "head down", "move down", "walk down", "wander down" };
        [JsonIgnore]
        public List<string> EastPhrases = new List<string>() { "e", "east", "go east", "head east", "wander east", "move east", "walk east", "right", "go right", "head right", "move right", "walk right", "wander right" };
        [JsonIgnore]
        public List<string> WestPhrases = new List<string>() { "w", "west", "go west", "head west", "wander west", "move west", "walk west", "left", "go left", "head left", "move left", "walk left", "wander left" };
        [JsonIgnore]
        public List<string> LookPhrases = new List<string>() { "look", "look around", "inspect", "stare", "observe", "see", "behold", "explore", "l", "look round" };
        [JsonIgnore]
        public List<string> TakePhrases = new List<string>() { "take", "get", "gimme", "grab", "snatch", "steal", "loot", "gnab" };
        [JsonIgnore]
        public List<string> TakeAllPhrases = new List<string>() { "take all", "get all", "gimme all", "grab all", "snatch all", "steal all", "loot all", "gnab all", "take everything", "get everything", "gimme everything", "grab everything", "snatch everything", "steal everything", "loot everything", "gnab everything" };
        [JsonIgnore]
        public List<string> ExaminePhrases = new List<string>() { "examine", "exam", "inspect", "insp", "x" };
        [JsonIgnore]
        public List<string> DropPhrases = new List<string>() { "drop", "lose", "throw", "toss" };
        [JsonIgnore]
        public List<string> DropAllPhrases = new List<string>() { "drop all", "lose all", "throw all", "toss all", "throw away all", "drop everything", "lose everything", "throw everything", "toss everything", "throw away everything" };
        [JsonIgnore]
        public List<string> TorchOnPhrases = new List<string>() { "light", "turn", "use", "ignite" };
        [JsonIgnore]
        public List<string> TorchOffPhrases = new List<string>() { "flashlight off", "turn off flashlight", "turn flashlight off", "end flashlight", "uv flashlight off", "turn off uv flashlight", "end uv flashlight", "put out flashlight" };
        [JsonIgnore]
        public List<string> UsePhrases = new List<string>() { "Use", "use" };
        [JsonIgnore]
        public List<string> EquipPhrases = new List<string>() { "equip", "wear", "use", "don" };
        [JsonIgnore]
        public List<string> UnEquipPhrases = new List<string>() { "unequip", "un-equip", "remove" };
        [JsonIgnore]
        public List<string> EatPhrases = new List<string>() { "eat", "drink", "consume" };
        //Regex
        [JsonIgnore]
        public string talkPhrases = @"\btalk\b|\bspeak\b|\bhi\b|\bhello\b|\bhey\b|\bask\b|\bgreet\b|\bgreetings\b|\bgood morning\b|\bgood afternoon\b|\bgood evening\b|\bgood day\b|\bgood night\b|\bhowdy\b|\byo\b"; //all possible phrases
        [JsonIgnore]
        public string equipPhrases = @"\bequip\b|\bwear\b|\bdon\b|\bput on\b";
        [JsonIgnore]
        public string labcompPhrases = @"\buse computer\b|\bcomputer\b|\bturn on computer\b|\blog on comuter\b|\blog onto computer\b|\blog on to computer\b|\baccess computer\b";
        [JsonIgnore]
        public string affirmativePhrases = @"\byes\b|\byeah\b|\byep\b|\bok\b|\byes please\b";
        [JsonIgnore]
        public string negativePhrases = @"\bno\b|\bnope\b|\bnah\b|\bno way\b";
        [JsonIgnore]
        public string takecoinPhrases = @"\bcoin\b|\bcoins\b|\btake coins\b";
        [JsonIgnore]
        public QRCodes qrcodes = new QRCodes();
        //NPCCodes
        [JsonIgnore]
        public string NPCIdentifier = "NPC";
        [JsonIgnore]
        public string ENDNPCIdentifier = "ENDNPC";
        [JsonIgnore]
        public string NPCName = "";
        [JsonIgnore]
        public int NPCConvStage = 0;
        //Quest vars
        [JsonIgnore]
        public string branchdrop = @"\bdrop branch\b|\bdrop large branch\b|\bput branch in waterfall\b|\bput branch in water\b|\bbuild dam with branch\b|\bblock water with branch\b|\bput branch\b|\bplace branch\b|\bput large branch\b|\bplace large branch\b|\bthrow branch\b|\bthrow large branch\b|\buse branch\b|\buse large branch\b";
        [JsonIgnore]
        public string libraryoldmanbook = @"\bgive book to man\b|\bgive book to elderly man\b|\bgive book to old man\b|\bgive soil book to old man\b|\bgive soil book to man\b|\bgive soil book to elderly man\b|\bgive soil quality and gardening book to old man\b|\bgive soil quality and gardening book to man\b|\bgive soil quality and gardening book to elderly man\b|\bgive soil quality and gardening to old man\b|\bgive soil quality and gardening to man\b|\bgive soil quality and gardening to elderly man\b|\bgive him book\b|\bgive him the book\b";
        [JsonIgnore]
        public string poolHealPhrases = @"\bdrink\b|\bjump in\b|\bget in\b|\bfall in\b|\bgo in\b|\benter\b|\bpool\b";
        [JsonIgnore]
        public string helpPhrases = @"\bhelp\b|\bhint\b|\bhints\b|\bclue\b|\bstuck\b|\blost\b";
        [JsonIgnore]
        public string digPhrases = @"\bdig\b|\bpickaxe\b|\bexcavate\b";
        [JsonIgnore]
        public string BookMapPhrases = @"\bread\b|\bview\b|\blook at\b|\bopen\b";
        [JsonIgnore]
        public string MapPhrases = @"\bmap\b";
        [JsonIgnore]
        public string altMovePhrases = @"\bleave\b|\benter\b|\boutside\b|\binside\b";

        enum MainMenuState { MainMenu, Inventory, Stats, Equipment, Monsters, Settings, QuestLog, Help, Save, ExitMenu }
        MainMenuState currentMainMenuState = MainMenuState.MainMenu;

        enum BattleState { Options, Run, Defend, SpeedComparison, EnemyOneMove, EnemyOneAttack, EnemyOneDefend, EnemyOneRun, EnemyTwoMove, EnemyTwoAttack, EnemyTwoDefend, EnemyTwoRun, EnemyThreeMove, EnemyThreeAttack, EnemyThreeDefend, EnemyThreeRun, PlayerMove, PlayerAttack, PlayerItem, PlayerMonster, MeebaOneMove, MeebaOneSpecial, MeebaOneDefend, MeebaTwoMove, MeebaTwoSpecial, MeebaTwoDefend, Win, Lose, Summary, Exit }
        BattleState currentState = BattleState.Options;

        //MAIN GAME METHOD
        public void Game()
        {
            //SETUP VARIABLES BEFORE DO-WHILE LOOP
            meeba.Moves.Add("Meeba Power");
            meeba2.Moves.Add("Meeba Power");
            meeba.name = "Icthymeeba";
            meeba2.name = "Meeberyx";
            meeba.ID = 1;
            meeba2.ID = 2;

            if (skip != true && playerHasSavedOnce != true)
            {
                Console.Clear();
                Console.ForegroundColor = ConsoleColor.Green;
                Thread.Sleep(800);
                WriteLineText("WELCOME TO THE BIO LAB SYSTEM V. 22.1\n");
                Thread.Sleep(1000);
                WriteLineText("BEFORE YOU BEGIN YOUR RESEARCH WITH US, PLEASE FILL OUT THE FOLLOWING FOR OUR RECORDS\n\n");
                Thread.Sleep(1000);
                WriteLineText("NAME:");
                do
                {
                    Console.Write("> ");
                    playerStats.name = Console.ReadLine();
                    if (playerStats.name.Length > 15)
                    {
                        WriteLineText("THIS NAME EXCEEDS THE MAXIMUM CAPACITY OF 15 CHARACTERS  - PLEASE TRY A SHORTER VERSION:\n");
                    }
                    else if (!string.IsNullOrEmpty(playerStats.name))
                        break;
                    else
                    {
                        MainMenu.DecrementCursorTop(1);
                    }
                } while (string.IsNullOrEmpty(playerStats.name) || playerStats.name.Length > 12);
                WriteLineText("\nPRIMARY AREA OF BIOLOGICAL EXPERTISE [VERTEBRATE CLASS]");
                WriteLineText("1: RAY-FINNED FISHES (ACTINOPTERYGII)\n2: AMPHIBIANS (AMPHIBIA)\n3: BIRDS (AVES)\n4: SHARKS, RAYS AND SKATES (CHONDRICTHYES)\n5: MAMMALS (MAMMALIA)\n6: REPTILES (REPTILIA)");
                bool validChoice = false;
                do
                {
                    Console.Write("> ");
                    string choice = Console.ReadLine().ToLower().Trim();
                    if (choice.Length > 80) //makes input max of 80 chars
                    {
                        double textlength = choice.Length;
                        for (int i = 80; i <= textlength; i += 80)
                        {
                            MainMenu.DecrementCursorTop(1);
                            Console.Write(new string(' ', Console.WindowWidth));
                            MainMenu.DecrementCursorTop(1);
                        }
                        choice = choice.Remove(80);
                    }
                    if (choice != "1" && choice != "2" && choice != "3" && choice != "4" && choice != "5" && choice != "6" && choice != "ACTINOPTERYGII".ToLower() && choice != "AMPHIBIA".ToLower() && choice != "AVES".ToLower() && choice != "CHONDRICTHYES".ToLower() && choice != "MAMMALIA".ToLower() && choice != "REPTILIA".ToLower())
                    {
                        WriteLineText("PLEASE CHOOSE A VALID OPTION:\n");
                        Thread.Sleep(800);
                        MainMenu.DecrementCursorTop(1);
                        Console.Write(new string(' ', Console.WindowWidth));
                        MainMenu.DecrementCursorTop(2);
                        Console.Write(new string(' ', Console.WindowWidth));
                        MainMenu.DecrementCursorTop(1);
                    }
                    else if (choice == "1" || choice == "ACTINOPTERYGII".ToLower() || choice == "RAY-FINNED FISHES".ToLower())
                    {
                        playerStats.vertExpertise = "ACTINOPTERYGII".ToLower();
                        validChoice = true;
                        break;
                    }
                    else if (choice == "2" || choice == "AMPHIBIA".ToLower() || choice == "AMPHIBIANS".ToLower())
                    {
                        playerStats.vertExpertise = "AMPHIBIA".ToLower();
                        validChoice = true;
                        break;
                    }
                    else if (choice == "3" || choice == "AVES".ToLower() || choice == "BIRDS".ToLower())
                    {
                        playerStats.vertExpertise = "AVES".ToLower();
                        validChoice = true;
                        break;
                    }
                    else if (choice == "4" || choice == "CHONDRICTHYES".ToLower() || choice == "SHARKS, RAYS AND SKATES".ToLower())
                    {
                        playerStats.vertExpertise = "CHONDRICTHYES".ToLower();
                        validChoice = true;
                        break;
                    }
                    else if (choice == "5" || choice == "MAMMALIA".ToLower() || choice == "MAMMALS".ToLower())
                    {
                        playerStats.vertExpertise = "MAMMALIA".ToLower();
                        validChoice = true;
                        break;
                    }
                    else if (choice == "6" || choice == "REPTILIA".ToLower() || choice == "REPTILES".ToLower())
                    {
                        playerStats.vertExpertise = "REPTILIA".ToLower();
                        validChoice = true;
                        break;
                    }
                    else
                        MainMenu.DecrementCursorTop(1);
                } while (validChoice == false);
                WriteLineText("\nSECONDARY AREA OF BIOLOGICAL EXPERTISE [VERTEBRATE CLASS]:");
                WriteLineText("1: RAY-FINNED FISHES (ACTINOPTERYGII)\n2: AMPHIBIANS (AMPHIBIA)\n3: BIRDS (AVES)\n4: SHARKS, RAYS AND SKATES (CHONDRICTHYES)\n5: MAMMALS (MAMMALIA)\n6: REPTILES (REPTILIA)");
                bool validChoice2 = false;
                do
                {
                    Console.Write("> ");
                    string choice = Console.ReadLine().ToLower().Trim();
                    if (choice.Length > 80) //makes input max of 80 chars
                    {
                        double textlength = choice.Length;
                        for (int i = 80; i <= textlength; i += 80)
                        {
                            MainMenu.DecrementCursorTop(1);
                            Console.Write(new string(' ', Console.WindowWidth));
                            MainMenu.DecrementCursorTop(1);
                        }
                        choice = choice.Remove(80);
                    }
                    if (choice != "1" && choice != "2" && choice != "3" && choice != "4" && choice != "5" && choice != "6" && choice != "ACTINOPTERYGII".ToLower() && choice != "AMPHIBIA".ToLower() && choice != "AVES".ToLower() && choice != "CHONDRICTHYES".ToLower() && choice != "MAMMALIA".ToLower() && choice != "REPTILIA".ToLower())
                    {
                        WriteLineText("PLEASE CHOOSE A VALID OPTION:\n");
                        Thread.Sleep(800);
                        MainMenu.DecrementCursorTop(1);
                        Console.Write(new string(' ', Console.WindowWidth));
                        MainMenu.DecrementCursorTop(2);
                        Console.Write(new string(' ', Console.WindowWidth));
                        MainMenu.DecrementCursorTop(1);
                    }
                    else if (choice == "1" || choice == "ACTINOPTERYGII".ToLower() || choice == "RAY-FINNED FISHES".ToLower())
                    {
                        playerStats.vertExpertise2 = "ACTINOPTERYGII".ToLower();
                        validChoice2 = true;
                        break;
                    }
                    else if (choice == "2" || choice == "AMPHIBIA".ToLower() || choice == "AMPHIBIANS".ToLower())
                    {
                        playerStats.vertExpertise2 = "AMPHIBIA".ToLower();
                        validChoice2 = true;
                        break;
                    }
                    else if (choice == "3" || choice == "AVES".ToLower() || choice == "BIRDS".ToLower())
                    {
                        playerStats.vertExpertise2 = "AVES".ToLower();
                        validChoice2 = true;
                        break;
                    }
                    else if (choice == "4" || choice == "CHONDRICTHYES".ToLower() || choice == "SHARKS, RAYS AND SKATES".ToLower())
                    {
                        playerStats.vertExpertise2 = "CHONDRICTHYES".ToLower();
                        validChoice2 = true;
                        break;
                    }
                    else if (choice == "5" || choice == "MAMMALIA".ToLower() || choice == "MAMMALS".ToLower())
                    {
                        playerStats.vertExpertise2 = "MAMMALIA".ToLower();
                        validChoice2 = true;
                        break;
                    }
                    else if (choice == "6" || choice == "REPTILIA".ToLower() || choice == "REPTILES".ToLower())
                    {
                        playerStats.vertExpertise2 = "REPTILIA".ToLower();
                        validChoice2 = true;
                        break;
                    }
                    else
                    {
                        MainMenu.DecrementCursorTop(1);
                    }

                } while (validChoice2 == false);

                Thread.Sleep(1000);
                Console.Beep(400, 100);
                Console.Beep(600, 100);
                Console.Beep(800, 100);
                Thread.Sleep(1000);
                WriteLineText("\nWELCOME, " + playerStats.name.ToUpper() + "\nWE WOULD LIKE TO WELCOME YOU TO ASSIST OUR RESIDENT BIOCHEMIST, DR.DIGBY, IN HIS CURRENT WORK REGARDING HIGH LEVELS OF RADIATION IN LOCAL ORGANISMS.\n\n");
                Thread.Sleep(1500);
                WriteLineText("PLEASE MAKE YOUR WAY TO THE LAB IN THE NORTH OF THE VILLAGE NOW FOR YOUR OFFICIAL BRIEF.\n");
                Thread.Sleep(1000);
                WriteLineText("FOR NOW PLEASE ACCESS YOUR GUIDE BY TYPING 'MENU' FOR ANY QUERIES.\nACCESS YOUR MAP ANYTIME BY TYPING 'MAP'.\nLOGGING OFF...");
                Console.Beep(800, 100);
                Console.Beep(600, 100);
                Console.Beep(400, 100);
                Thread.Sleep(1000);
                WriteLineText("\nPress ENTER to continue");
                Thread.Sleep(1000);
                do
                {
                    Console.Write("> ");
                    userValue = Console.ReadLine();
                    if (userValue == "")
                        break;
                } while (userValue != "");
                Console.Clear();

                Console.ForegroundColor = ConsoleColor.Gray;
                WriteLineText("GUIDE TO INTERACTING WITH THE WORLD AND ITS INHABITANTS");
                Console.WriteLine("_______________________________________________________\n");
                WriteLineText("COMMAND EXAMPLES: \nMovement: \n'go north' OR 'north' OR 'n'\n'go south' OR 'south' OR 's'\n'go east' OR 'east' OR 'e'\n'go west' OR 'west' OR 'w'\n\nNavigation: \n'map'\n");
                WriteLineText("Interaction: \n'look'\n'examine' OR 'exam' OR 'x'\n'take [item]'\n'take all'\n'drop [item]'\n'talk to [name]'\n");
                WriteLineText("Menu: \n'menu'\n'inventory' OR 'inv'\n'stats'\n'equipment'\n'help'\n\nItem use: \n'Use [item]'\n'Read [item]'\n'Eat [item]'\n'Drink [item]'\n'[Verb] [item]'");
                Thread.Sleep(1000);
                WriteLineText("\nPress Enter when you are ready - type 'help' any time to review these commands");
                string enter;
                do
                {
                    Console.Write("> ");
                    enter = Console.ReadLine();
                } while (enter != "");
                WriteLineText("GUIDE TO NAVIGATING THE WORLD OF TERETHIA");
                Console.WriteLine("_________________________________________");
                Map();
                WriteLineText("\nMAP: \n| | You have not been here \n|x| You have been here \n|o| You are currently here \nAccess to new maps is shown in white\n");
                Thread.Sleep(1000);
                WriteLineText("Press Enter when you are ready - type 'help' any time to review these commands");
                string enter1;
                do
                {
                    Console.Write("> ");
                    enter1 = Console.ReadLine();
                } while (enter1 != "");
            }
            Console.Clear();
            WriteLineText("DECAY OF TERETHIA");
            LookAround();

            //MAIN GAME LOOP - user input
            do
            {
                Console.Title = "CURRENT LOCATION: " + WorldMapCells[CurrentMap][CurrentLocation].mapName.ToUpper() + " - " + WorldMapCells[CurrentMap][CurrentLocation].cellName.ToUpper();
                WorldMapCells[CurrentMap][CurrentLocation].visited = true; //for map purposes to display |o|
                Console.BackgroundColor = backgroundColour; //updates colours after battles, exiting menus etc.
                Console.ForegroundColor = foregroundColour;


                if (playerStats.playerCurrentHP > playerStats.playerMaxHP) //makes sure currentHP never goes above maxHP
                    playerStats.playerCurrentHP = playerStats.playerMaxHP;

                Console.Write("> ");
                userValue = Console.ReadLine().ToLower().Trim(); //removes blank space at start and end
                userValueItem = userValue;
                char[] space = new char[1] { ' ' };
                string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                if (verbItemWholeString.Length > 1)
                    userValueItem = verbItemWholeString[1].Trim(); //If more than one word, takes the second half, so usually the item, e.g. 'crown' or 'pond water'

                if (userValue.Length > 80) //makes input max of 80 chars
                {
                    double textlength = userValue.Length;
                    for (int i = 80; i <= textlength; i += 80)
                    {
                        MainMenu.DecrementCursorTop(1);
                        Console.Write(new string(' ', Console.WindowWidth));
                        MainMenu.DecrementCursorTop(1);
                    }
                    userValue = userValue.Remove(80);
                }

                

                //if (playerStats.playerLevel >= 5) //allotment side-quest
                //    WorldMapCells[0][35].lookArrayNumber = 3;
                //if (playerStats.playerLevel >= 10)
                //{
                //    WorldMapCells[0][35].lookArrayNumber = 4;
                //    WorldMapCells[0][35].digItems.Add("tiny parsnip"); //CHANGE
                //   // WorldMapCells[0][35].digItemsAvailable = true;
                //}

                //Testing
                //Qr-code quest
                if (userValue == "quest test")
                {
                    storyCounter = 1;
                }
                //Battle
                else if (userValue == "battle test")
                {
                    storyCounter = 4;
                    CurrentLocation = 15;
                    CurrentMap = 1;
                }
                //Evolution
                else if (userValue == "evo test")
                {
                    CurrentMap = 0;
                    CurrentLocation = 4;
                    storyCounter = 4;
                    inventory.dictionary.Add("ellondite", 2);
                    inventory.dictionary.Add("fire fang", 5);
                    inventory.dictionary.Add("thorn", 5);
                    inventory.dictionary.Add("seed", 5);
                    inventory.dictionary.Add("chitin wing", 5);
                    inventory.dictionary.Add("muddy fur", 5);
                    inventory.dictionary.Add("stick", 1);
                }

                //Movement
                else if (NorthPhrases.Contains(userValue) && CurrentLocation > 9 && WorldMapCells[CurrentMap][CurrentLocation - 10].accessible == true || NorthPhrases.Contains(userValue) && CurrentLocation > 9 && WorldMapCells[CurrentMap][CurrentLocation - 10].Gateway == true)
                    NorthMovement();
                else if (SouthPhrases.Contains(userValue) && CurrentLocation < 90 && WorldMapCells[CurrentMap][CurrentLocation + 10].accessible == true || SouthPhrases.Contains(userValue) && CurrentLocation < 90 && WorldMapCells[CurrentMap][CurrentLocation + 10].Gateway == true)
                    SouthMovement();
                else if (WestPhrases.Contains(userValue) && !westernBorder.Contains(CurrentLocation) && WorldMapCells[CurrentMap][CurrentLocation - 1].accessible == true || WestPhrases.Contains(userValue) && !westernBorder.Contains(CurrentLocation) && WorldMapCells[CurrentMap][CurrentLocation - 1].Gateway == true)
                    WestMovement();
                else if (EastPhrases.Contains(userValue) && !easternBorder.Contains(CurrentLocation) && WorldMapCells[CurrentMap][CurrentLocation + 1].accessible == true || EastPhrases.Contains(userValue) && !easternBorder.Contains(CurrentLocation) && WorldMapCells[CurrentMap][CurrentLocation + 1].Gateway == true)
                    EastMovement();
                else if (NorthPhrases.Contains(userValue) && CurrentLocation < 10 || NorthPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation - 10].accessible == false || SouthPhrases.Contains(userValue) && CurrentLocation > 89 || SouthPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation + 10].accessible == false || WestPhrases.Contains(userValue) && westernBorder.Contains(CurrentLocation) || WestPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation - 1].accessible == false || EastPhrases.Contains(userValue) && easternBorder.Contains(CurrentLocation) || EastPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation + 1].accessible == false)
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("There is no way to get through in that direction.");
                }

                else if (((Regex.IsMatch(userValue, altMovePhrases, RegexOptions.IgnoreCase)) && WorldMapCells[CurrentMap][CurrentLocation].cellName != "outside a small cottage"))
                    WriteLineText("Which direction are you trying to move in?");

                //Quest-specific
                else if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton forest" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 72 && Regex.IsMatch(userValue, branchdrop, RegexOptions.IgnoreCase) && inventory.dictionary.ContainsKey("large branch") && storyCounter > 2)
                {
                    PlayGame game = this;
                    Waterfall Quest = new Waterfall(game);
                    Quest.Use();
                }
                else if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton cave" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 57 && Regex.IsMatch(userValue, poolHealPhrases, RegexOptions.IgnoreCase)
                    || WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton cave" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 61 && Regex.IsMatch(userValue, poolHealPhrases, RegexOptions.IgnoreCase))
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You went over to the pool and took a drink from it.");
                    Thread.Sleep(800);
                    WriteLineText("You feel fully revitalised");
                    Thread.Sleep(800);
                    fullHeal();
                }
                else if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 34 && Regex.IsMatch(userValue, takecoinPhrases, RegexOptions.IgnoreCase))
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You took all the coins out of the fountain.");
                    Thread.Sleep(1000);
                    WriteLineText("...");
                    Thread.Sleep(1000);
                    WriteLineText("10Ayu. Was that really worth it?");
                    Thread.Sleep(800);
                    playerStats.playerMoney += 10;
                    takeCoins = true;
                }
                else if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 13 && inventory.dictionary.ContainsKey("soil quality and gardening") && Regex.IsMatch(userValue, libraryoldmanbook, RegexOptions.IgnoreCase))
                {
                    libraryoldmanCounter = 1;
                    PlayGame game = this;
                    NPCElderlyLibraryMan NPC = new NPCElderlyLibraryMan(game);
                    NPC.Use();
                   // WorldMapCells[0][35].lookArrayNumber = 2;
                }
                else if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton beach" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 15)
                {
                    WriteLineText("The relaxing atmosphere of the beach hut soothes your physical and mental aches and pains.");
                    Thread.Sleep(800);
                    fullHeal();
                }

                //Take Items
                else if (TakePhrases.Contains(Verb))
                {
                    Console.ForegroundColor = foregroundColour;
                    getInvDictionary1();
                    if (verbItemWholeString.Length < 2) //user just types "Take"
                        WriteLineText("Take what?");
                    else if (inventory.dictionary.Keys.Count < 20) //Limit on inventory size
                    {
                        if (TakeAllPhrases.Contains(userValue) && !WorldMapCells[CurrentMap][CurrentLocation].gridItems.All(e => e == "")
                            || TakeAllPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation].secondLook == true && !WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems.All(e => e == "")) //Take All
                            TakeAll();
                        else if (TakeAllPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation].gridItems.All(e => e == "")
                            || TakeAllPhrases.Contains(userValue) && WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems.All(e => e == "")) //Take All
                            WriteLineText("There is nothing to take");
                        if (TakePhrases.Contains(Verb) && !userValue.Contains("all"))
                        {
                            bool success = false;
                            if (userValue == "take book")
                            {
                                for (int i = 0; i < WorldMapCells[CurrentMap][CurrentLocation].gridItems.Count; i++)
                                {
                                    itemChoice = WorldMapCells[CurrentMap][CurrentLocation].gridItems[i];
                                    referenceCurrentItem();
                                    if (examItem.itemType == "book")
                                    {
                                        success = true;
                                        TakeIndividual();
                                        break;
                                    }
                                }
                                if (WorldMapCells[CurrentMap][CurrentLocation].secondLook == true)
                                {
                                    for (int i = 0; i < WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems.Count; i++)
                                    {
                                        itemChoice = WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems[i];
                                        referenceCurrentItem();
                                        if (examItem.itemType == "book")
                                        {
                                            success = true;
                                            TakeIndividual();
                                            break;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                for (int i = 0; i < WorldMapCells[CurrentMap][CurrentLocation].gridItems.Count; i++)
                                {
                                    if (Regex.IsMatch(userValueItem, WorldMapCells[CurrentMap][CurrentLocation].gridItems[i].TrimStart('*'), RegexOptions.IgnoreCase)
                                        || Regex.IsMatch(userValueItem, WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems[i], RegexOptions.IgnoreCase))
                                    {
                                        success = true;
                                        TakeIndividual();
                                        break;
                                    }
                                }
                                if (success == false)
                                    WriteLineText("You cannot take that.");
                            }
                        }
                    }
                    else
                        WriteLineText("Your bag is full, drop some items first"); //if inventory limit has been reached
                }

                //Drop Items
                else if (DropPhrases.Contains(Verb))
                {
                    Console.ForegroundColor = foregroundColour;
                    getInvDictionary1();
                    if (verbItemWholeString.Length < 2) // user just types "Drop"
                        WriteLineText("Drop what?");
                    if (DropPhrases.Contains(Verb))
                    {
                        foreach (var item in inventory.dictionary)
                        {
                            if (Regex.IsMatch(userValueItem, item.Key, RegexOptions.IgnoreCase))
                            {
                                DropIndividual();
                                break;
                            }
                        }
                    }
                }

                //Look around
                else if (LookPhrases.Contains(userValue))
                    LookAround();

                else if (Regex.IsMatch(userValue, WorldMapCells[CurrentMap][CurrentLocation].regexSecondLevelLook, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].regexSecondLevelLook != "")
                    LookSecondLevel();

                else if (Regex.IsMatch(userValue, WorldMapCells[CurrentMap][CurrentLocation].regexDeeperLookItems, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].regexDeeperLookItems != "")
                {
                    //if regex = itemnumber 1 in dictionary etc.?-
                    var results = from result in WorldMapCells[CurrentMap][CurrentLocation].deeperLook
                                  where Regex.Match(userValue, result.Key, RegexOptions.Singleline | RegexOptions.IgnoreCase).Success
                                  select result;
                    foreach (var result in results)
                    {
                        Console.ForegroundColor = foregroundColour;
                        WriteLineText(result.Value);
                    }
                }

                //Use shovel/dig
                else if (Regex.IsMatch(userValue, digPhrases, RegexOptions.IgnoreCase) && inventory.dictionary.ContainsKey("pickaxe"))
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You dug at the ground with the pickaxe...");
                    Thread.Sleep(1000);
                    if (!WorldMapCells[CurrentMap][CurrentLocation].digItems.Contains(""))
                    {
                        if (inventory.dictionary.Count < 20)
                        {
                            foreach (var item in WorldMapCells[CurrentMap][CurrentLocation].digItems)
                            {
                                WriteLineText("You found a " + item);
                                Thread.Sleep(800);
                                if (inventory.dictionary.ContainsKey(item))
                                    inventory.dictionary[item] += 1;
                                else
                                    inventory.dictionary.Add(item, 1);
                            }
                            WorldMapCells[CurrentMap][CurrentLocation].digItems.Clear();
                            //WorldMapCells[CurrentMap][CurrentLocation].digItemsAvailable = false;
                            if (WorldMapCells[CurrentMap][CurrentLocation].mapLocation == 8 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 26 && storyCounter == 5)
                                storyCounter = 6;
                        }
                        else
                        {
                            WriteLineText("There is something here, but you don't have any space to hold more items.");
                            Thread.Sleep(800);
                        }
                    }
                    else
                    {
                        WriteLineText("But nothing could be found");
                        Thread.Sleep(800);
                    }
                }

                //Examine Items
                else if (ExaminePhrases.Contains(Verb))
                {
                    Console.ForegroundColor = foregroundColour;
                    getInvDictionary1();
                    if (verbItemWholeString.Length < 2)
                        WriteLineText("Examine what?"); //user just types "Examine" etc.
                    itemChoice = userValueItem;
                    if (inventory.dictionary.ContainsKey(itemChoice) || WorldMapCells[CurrentMap][CurrentLocation].gridItems.Contains(itemChoice))
                        Examine(); //gives name and description of item based on its stats
                    else
                        WriteLineText("There's nothing in particular to examine here.");
                }

                //Access Inventory outside of menu
                else if (InvPhrases.Contains(userValue))
                    AccessInventory();

                //Access Stats outside of menu
                else if (userValue == "stats")
                    AccessStats();

                //Access Equipment outside of menu
                else if (userValue == "equipment")
                    AccessEquipment();

                //Access Help outside of menu
                else if (Regex.IsMatch(userValue, helpPhrases, RegexOptions.IgnoreCase))
                    AccessHelp();

                //Access QuestLog outside of menu
                else if (Regex.IsMatch(userValue, "quest log", RegexOptions.IgnoreCase) || Regex.IsMatch(userValue, "quest", RegexOptions.IgnoreCase))
                    AccessQuestLog();

                else if (Regex.IsMatch(userValue, "save", RegexOptions.IgnoreCase))
                    MainMenu.Save();

                else if (Regex.IsMatch(userValue, "saveTest", RegexOptions.IgnoreCase))
                {
                    playerStats.name = "blob";
                    playerStats.playerLevel = 20;
                    playerStats.playerMoney = 3000;
                    playerStats.armour = "bra";
                }

                else if (Regex.IsMatch(userValue, "load", RegexOptions.IgnoreCase))
                    MainMenu.LoadSaveData();

                //Menu - Inventory, Stats, Equipment, Meeba, Settings, Help, Save, Exit to Game
                else if (userValue == "menu")
                {
                    currentMainMenuState = MainMenuState.MainMenu;
                    InGameMenu();
                }

                //Lab computer
                else if (Regex.IsMatch(userValue, labcompPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 4
                    || Regex.IsMatch(userValue, labcompPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "karstbay" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 64)
                {
                    PlayGame game = this;
                    Computer LabComputer = new Computer(game); //dependency injection
                    LabComputer.Use();
                }

                //Personal computer
                else if (Regex.IsMatch(userValue, labcompPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 15)
                {
                    PlayGame game = this;
                    PersonalComputer PersonalComputer = new PersonalComputer(game); //dependency injection
                    PersonalComputer.Use();
                }

                //NPCs
                else if (Regex.IsMatch(userValue, talkPhrases, RegexOptions.IgnoreCase)) //Talk/speak/greet
                {
                    string vanyaphrases = @"\bvanya\b|\bflatmate\b";
                    string rufusPhrases = @"\brufus\b|\bdr.digby\b|\bdr. digby\b|\bdr digby\b|\brufus digby\b|\bdigby\b"; //all possible phrases
                    string drtanakaPhrases = @"\basuka\b|\bdr.tanaka\b|\bdr. tanaka\b|\bdr tanaka\b|\basuka tanaka\b|\bresearcher\b|\btanaka\b";
                    string librarianPhrases = @"\blibrarian\b";
                    string libraryelderlymanPhrases = @"\belderly man\b|\bold man\b|\bstraw hat man\b";
                    string librarydarkhairwomanPhrases = @"\bwoman\b|\bdark-haired woman\b|\bdark haired woman\b|\bwoman with dark hair";
                    string librarysketchymanPhrases = @"\bsuit man\b|\bsuited man\b|\bman in suit\b|\bman with oiled hair\b|\bman with oily hair\b|\boiled hair man\b|\boily man\b|\boiled hair\b|\boily hair\b|\bman\b";
                    string cottageelderlywomanPhrases = @"\belderly woman\b|\bold woman\b|\bwoman\b";
                    string drinksvendorPhrases = @"\bdrinks vendor\b|\bdrinks\b|\bvendor\b";
                    string boatguyPhrases = @"\bsailor\b|\bboat guy\b|\bfisherman\b|\bman on quay\b";
                    string brigittePhrases = @"\bbrigitte\b|\bfournier\b|\bprofessor\b";
                    string weaponwomanPhrases = @"\byoung woman\b|\bwoman\b|\bassistant\b|\bstaff\b";
                    string riftonshopkeeperphrases = @"\bshopkeeper\b|\bassistant\b|\bstaff\b";
                    string fountainmanphrases = @"\bman\b|\bwoman\b";
                    string teenagersphrases = @"\bteenage\b|\bteenager\b|\bteenagers\b";
                    string blacksmithPhrases = @"\bblacksmith\b";
                    string hospReceptPhrases = @"\breceptionist\b|\bhim\b";
                    string THReceptPhrases = @"\breceptionist\b|\bher\b";
                    string restaurantPhrases = @"\bstaff\b|\bmember\b";
                    //Dr Rufus Digby
                    if (Regex.IsMatch(userValue.ToLower(), rufusPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 4)
                    {
                        PlayGame game = this;
                        NPCRufusDigby NPC = new NPCRufusDigby(game);
                        NPC.Use();
                    }
                    //Vanya - Room-mate
                    else if (Regex.IsMatch(userValue.ToLower(), vanyaphrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 15)
                    {
                        PlayGame game = this;
                        NPCVanyaPetrov NPC = new NPCVanyaPetrov(game);
                        NPC.Use();
                    }
                    //Asuka - Visitng lab researcher
                    else if (Regex.IsMatch(userValue.ToLower(), drtanakaPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 4)
                    {
                        PlayGame game = this;
                        NPCDrTanaka NPC = new NPCDrTanaka(game);
                        NPC.Use();
                    }
                    //Librarian - rifton
                    else if (Regex.IsMatch(userValue.ToLower(), librarianPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 13)
                    {
                        PlayGame game = this;
                        NPCLibrarian NPC = new NPCLibrarian(game);
                        NPC.Use();
                    }
                    else if (Regex.IsMatch(userValue.ToLower(), libraryelderlymanPhrases, RegexOptions.IgnoreCase) && librarianCounter > 0 && libraryoldmanCounter < 1 && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 13)
                    {
                        PlayGame game = this;
                        NPCElderlyLibraryMan NPC = new NPCElderlyLibraryMan(game);
                        NPC.Use();
                    }
                    else if (Regex.IsMatch(userValue.ToLower(), librarydarkhairwomanPhrases, RegexOptions.IgnoreCase) && librarianCounter > 0 && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 13)
                    {
                        PlayGame game = this;
                        NPCDarkHairedLibraryWoman NPC = new NPCDarkHairedLibraryWoman(game);
                        NPC.Use();
                    }
                    else if (Regex.IsMatch(userValue.ToLower(), librarysketchymanPhrases, RegexOptions.IgnoreCase) && librarianCounter > 0 && librarysketchymanCounter < 3 && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 13)
                    {
                        PlayGame game = this;
                        NPCSketchyLibraryMan NPC = new NPCSketchyLibraryMan(game);
                        NPC.Use();
                    }
                    //Cottage elderly lady
                    else if (Regex.IsMatch(userValue.ToLower(), cottageelderlywomanPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 24)
                    {
                        PlayGame game = this;
                        NPCElderlyCottageWoman NPC = new NPCElderlyCottageWoman(game);
                        NPC.Use();
                    }
                    //Allotment
                    else if (Regex.IsMatch(userValue.ToLower(), libraryelderlymanPhrases, RegexOptions.IgnoreCase) && librarianCounter > 0 && libraryoldmanCounter >= 3 && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 35)
                    {
                        PlayGame game = this;
                        NPCElderlyLibraryMan NPC = new NPCElderlyLibraryMan(game);
                        NPC.Use();
                    }
                    //Village square
                    else if (Regex.IsMatch(userValue.ToLower(), fountainmanphrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 34)
                    {
                        PlayGame game = this;
                        NPCFountainMan NPC = new NPCFountainMan(game);
                        NPC.Use();
                    }
                    //Weapons shop
                    else if (Regex.IsMatch(userValue.ToLower(), weaponwomanPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 21)
                    {
                        PlayGame game = this;
                        NPCWeaponsWoman NPC = new NPCWeaponsWoman(game);
                        NPC.Use();
                    }
                    //Rifton shop
                    else if (Regex.IsMatch(userValue.ToLower(), riftonshopkeeperphrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 30
                        || Regex.IsMatch(userValue.ToLower(), riftonshopkeeperphrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "karstbay" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 47)
                    {
                        PlayGame game = this;
                        NPCRiftonShopKeeper NPC = new NPCRiftonShopKeeper(game);
                        NPC.Use();
                    }
                    //Drinks vendor
                    else if (Regex.IsMatch(userValue.ToLower(), drinksvendorPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 43)
                    {
                        PlayGame game = this;
                        NPCDrinksVendor NPC = new NPCDrinksVendor(game);
                        NPC.Use();
                    }
                    //Guto - miner
                    else if (Regex.IsMatch(userValue.ToLower(), "guto".ToLower(), RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 11)
                    {
                        PlayGame game = this;
                        NPCGutoMiner NPC = new NPCGutoMiner(game);
                        NPC.Use();
                    }
                    //Bart - miner
                    else if (Regex.IsMatch(userValue.ToLower(), "bart".ToLower(), RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 11)
                    {
                        PlayGame game = this;
                        NPCBartMiner NPC = new NPCBartMiner(game);
                        NPC.Use();
                    }
                    //Boat guy
                    else if (Regex.IsMatch(userValue.ToLower(), boatguyPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton beach" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 17)
                    {
                        PlayGame game = this;
                        NPCBoatGuy NPC = new NPCBoatGuy(game);
                        NPC.Use();
                    }
                    else if (Regex.IsMatch(userValue.ToLower(), teenagersphrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton beach" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 31)
                    {
                        PlayGame game = this;
                        NPCTeenagers NPC = new NPCTeenagers(game);
                        NPC.Use();
                    }
                    //Prof. Fournier
                    else if (Regex.IsMatch(userValue.ToLower(), brigittePhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "karstbay" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 64)
                    {
                        PlayGame game = this;
                        NPCBrigitteFournier NPC = new NPCBrigitteFournier(game);
                        NPC.Use();
                    }
                    //Anton - blacksmith
                    else if (Regex.IsMatch(userValue.ToLower(), blacksmithPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "karstbay" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 37)
                    {
                        PlayGame game = this;
                        NPCRiftonShopKeeper NPC = new NPCRiftonShopKeeper(game);
                        NPC.Use();
                    }
                    //Hospital receptionist
                    else if (Regex.IsMatch(userValue.ToLower(), hospReceptPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "karstbay" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 36)
                    {
                        PlayGame game = this;
                        NPCHospitalReceptionist NPC = new NPCHospitalReceptionist(game);
                        NPC.Use();
                    }
                    //Restaurant staff
                    else if (Regex.IsMatch(userValue.ToLower(), restaurantPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "karstbay" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 44)
                    {
                        PlayGame game = this;
                        NPCHospitalReceptionist NPC = new NPCHospitalReceptionist(game);
                        NPC.Use();
                    }
                    //Town hall staff
                    else if (Regex.IsMatch(userValue.ToLower(), THReceptPhrases, RegexOptions.IgnoreCase) && WorldMapCells[CurrentMap][CurrentLocation].mapName == "karstbay" && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 45)
                    {
                        PlayGame game = this;
                        NPCTownHallReceptionist NPC = new NPCTownHallReceptionist(game);
                        NPC.Use();
                    }
                    else
                    {
                        WriteLineText("Who are you talking to?");
                        Thread.Sleep(800);
                    }
                }

                //Use Items
                else if (UsePhrases.Contains(Verb) && verbItemWholeString.Length < 2)
                    WriteLineText(UppercaseFirst(Verb) + " what?");

                //Turn off/stop using items
                else if (TorchOffPhrases.Contains(userValue) || userValue == "flashlight" && torchOn == true)
                    TurnOffTorch();

                //Torches
                else if (TorchOnPhrases.Contains(Verb) && userValueItem == "flashlight" && inventory.dictionary.ContainsKey("flashlight") || userValue == "flashlight" && inventory.dictionary.ContainsKey("flashlight") || userValue == "turn on flashlight" && inventory.dictionary.ContainsKey("flashlight"))
                    useTorch();
                else if (TorchOnPhrases.Contains(Verb) && userValueItem == "detector" && inventory.dictionary.ContainsKey("detector") || userValue == "detector" && inventory.dictionary.ContainsKey("detector") || userValue == "turn on detector" && inventory.dictionary.ContainsKey("detector"))
                    useDetector();

                //Map
                else if (Regex.IsMatch(userValue, BookMapPhrases, RegexOptions.IgnoreCase) && Regex.IsMatch(userValue, MapPhrases, RegexOptions.IgnoreCase)
                    || userValue == "map" || userValue == "m") //maybe torch only shows up certain things? && only if in inventory
                    Map();

                //Books
                else if (Verb == "read" && inventory.dictionary.ContainsKey(userValueItem.ToLower()))
                {
                    itemChoice = userValueItem;
                    referenceCurrentItem();
                    if (examItem.itemType == "book")
                    {
                        WriteLineText(examItem.itemDescription);
                        Thread.Sleep(1000);
                    }
                    else
                    {
                        Console.ForegroundColor = foregroundColour;
                        WriteLineText("There's nothing to read.");
                    }
                }

                //Access Quest Log
                else if (userValue == "q" || userValue == "quest log")
                    AccessQuestLog();

                //Equip items
                else if (Regex.IsMatch(userValue, equipPhrases, RegexOptions.IgnoreCase))
                {
                    Console.ForegroundColor = foregroundColour;
                    getInvDictionary1();
                    if (EquipPhrases.Contains(Verb) && verbItemWholeString.Length < 2) //if user just types "Equip"
                        WriteLineText(UppercaseFirst(userValue) + " what?");
                    else if (Regex.IsMatch(userValue, equipPhrases, RegexOptions.IgnoreCase))
                    {
                        itemChoice = userValueItem;
                        EquipItems();
                    }
                }

                //UnEquip items
                else if (UnEquipPhrases.Contains(Verb))
                {
                    Console.ForegroundColor = foregroundColour;
                    getInvDictionary1();
                    if (UnEquipPhrases.Contains(Verb) && verbItemWholeString.Length < 2) //if user just types "Equip"
                        WriteLineText(UppercaseFirst(userValue) + " what?");
                    else if (UnEquipPhrases.Contains(Verb) && verbItemWholeString.Length > 1) //if item is equippable
                    {
                        itemChoice = userValueItem;
                        UnequipItems();
                    }
                }

                //Eat/drink something
                else if (EatPhrases.Contains(Verb.ToLower()))
                {
                    Console.ForegroundColor = foregroundColour;
                    if (EatPhrases.Contains(Verb) && verbItemWholeString.Length < 2) //if user just types "Eat"
                        WriteLineText(UppercaseFirst(userValue) + " what?");
                    else if (EatPhrases.Contains(Verb) && verbItemWholeString.Length > 1) //if item is edible
                        EatDrinkSomething();
                }

                //Use other items -needs to go after all other verb phrase options that also contain 'use' as a phrase
                else if (UsePhrases.Contains(Verb) && inventory.dictionary.ContainsKey(userValueItem))
                {
                    itemChoice = userValueItem;
                    referenceCurrentItem();
                    UseItem();
                }

                //Summon Cthulhu
                else if (userValue == "summon cthulhu".ToLower())
                {
                    summonCthulhu();
                    Game();
                }
                //Konami Code
                else if (userValue == "up up down down left left right right b a")
                    DiscoRoom();

                //Unknown input
                else if (!string.IsNullOrEmpty(userValue))
                    unknownInput();
                else if (string.IsNullOrEmpty(userValue))
                    MainMenu.DecrementCursorTop(1);
            }
            while (userValue != "exit game".ToLower());
        }

        //METHODS
        static string UppercaseFirst(string s)
        {
            if (string.IsNullOrEmpty(s))
            {
                return string.Empty;
            }
            char[] a = s.ToCharArray();
            a[0] = char.ToUpper(a[0]);
            return new string(a);
        }

        

        public void WriteLineText(string message)
        {
            string[] words = message.Split(' ');
            string line = "";

            //if the message exceeds the window width
            if (message.Length > Console.WindowWidth)
            {
                foreach (var word in words)
                {
                    //for each word in the message, if it makes the message so far less than the window width..   
                    if (line.Length + word.Length + 1 < Console.WindowWidth)
                    {
                        line += word + " ";
                        for (int i = 0; i < word.Length; i++)
                        {
                            Console.Write(word[i]);
                            Thread.Sleep(textSpeed);
                        }
                        Console.Write(" ");
                        Thread.Sleep(textSpeed);
                    }
                    else //if the word makes the line go over the window width, print what we have so far
                    {
                        Console.Write("\n");
                        for (int i = 0; i < word.Length; i++)
                        {
                            Console.Write(word[i]);
                            Thread.Sleep(textSpeed);
                        }
                        Console.Write(" ");
                        Thread.Sleep(textSpeed);
                        line = word + " ";
                    }
                }
            }
            else //if the message is within the window width
            {
                for (int i = 0; i < message.Length; i++)
                {
                    Console.Write(message[i]);
                    Thread.Sleep(textSpeed);
                }
            }
            Console.Write(Environment.NewLine);
        }

        public void WriteText(string message)
        {
            string[] words = message.Split(' ');
            string line = "";

            //if the message exceeds the window width
            if (message.Length > Console.WindowWidth)
            {
                foreach (var word in words)
                {
                    //for each word in the message, if it makes the message so far less than the window width..   
                    if (line.Length + word.Length + 1 < Console.WindowWidth)
                    {
                        line += word + " ";
                        for (int i = 0; i < word.Length; i++)
                        {
                            Console.Write(word[i]);
                            Thread.Sleep(textSpeed);
                        }
                        Console.Write(" ");
                        Thread.Sleep(textSpeed);
                    }
                    else //if the word makes the line go over the window width, print what we have so far
                    {
                        Console.Write("\n");
                        for (int i = 0; i < word.Length; i++)
                        {
                            Console.Write(word[i]);
                            Thread.Sleep(textSpeed);
                        }
                        Console.Write(" ");
                        Thread.Sleep(textSpeed);
                        line = word + " ";
                    }
                }
            }
            else //if the message is within the window width
            {
                for (int i = 0; i < message.Length; i++)
                {
                    Console.Write(message[i]);
                    Thread.Sleep(textSpeed);
                }
            }
        }

        public void NorthMovement()
        {
            int randomMember = random.Next(WorldMapCells[CurrentMap][CurrentLocation].encounterRate);
            if (randomMember == 1)
            {
                battle(); //battle starts if random generated number falls between min 0 and max encounterRate of area
                LookAround();
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation - 10].Gateway == true) //If you are moving to a new map
            {
                int tempMap = WorldMapCells[CurrentMap][CurrentLocation - 10].newMap; //Creates a temporary int value so it can assign location and map at same time
                int tempLocation = WorldMapCells[CurrentMap][CurrentLocation - 10].newLocation;
                CurrentMap = tempMap;
                CurrentLocation = tempLocation;
                WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                if (WorldMapCells[CurrentMap][CurrentLocation].cave == false)
                TurnOffTorch();
                Console.ForegroundColor = foregroundColour;
                WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                Thread.Sleep(1000);
                WriteLineText("Type 'map' to see the current map.");
                Thread.Sleep(800);
                LookAround();
            }
            else //Normal movement
            {
                CurrentLocation -= 10;
                WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                LookAround();
            }
        }

        public void SouthMovement()
        {
            int randomMember = random.Next(WorldMapCells[CurrentMap][CurrentLocation].encounterRate);
            if (randomMember == 1)
            {
                battle();
                LookAround();
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapLocation == 0 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 4 && storyCounter == 2 && !questLog.Contains("Find another source of the radiation") && !questLog.Contains("*Find another source of the radiation"))
            {
                Console.ForegroundColor = foregroundColour;
                WriteLineText("Dr. Tanaka wants to talk to you before you leave");
                Thread.Sleep(800);
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapLocation == 0 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 15 && vanyaTalk == false)
            {
                Console.ForegroundColor = foregroundColour;
                WriteLineText("Vanya wants to talk to you before you leave");
                Thread.Sleep(800);
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation + 10].Gateway == true)
            {
                if (WorldMapCells[CurrentMap][CurrentLocation + 10].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation + 10].cellLocation == 64 && storyCounter < 2)
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You should probably go to Dr. Digby's Lab before you leave the village.");
                    Thread.Sleep(800);
                }
                else if (WorldMapCells[CurrentMap][CurrentLocation + 10].mapName == "rifton" && WorldMapCells[CurrentMap][CurrentLocation + 10].cellLocation == 64 && storyCounter >= 2 && playerStats.weapon == "fists")
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You should find a weapon to use before you go outside the village.");
                    Thread.Sleep(800);
                }
                else
                {
                    int tempMap = WorldMapCells[CurrentMap][CurrentLocation + 10].newMap;
                    int tempLocation = WorldMapCells[CurrentMap][CurrentLocation + 10].newLocation;
                    CurrentMap = tempMap;
                    CurrentLocation = tempLocation;
                    if (WorldMapCells[CurrentMap][CurrentLocation].cave == false)
                    TurnOffTorch();
                    WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                    Thread.Sleep(1000);
                    WriteLineText("Type 'map' to see the current map.");
                    Thread.Sleep(800);
                    LookAround();
                }
            }
            else
            {
                CurrentLocation += 10;
                WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                LookAround();
            }
        }

        public void WestMovement()
        {
            int randomMember = random.Next(WorldMapCells[CurrentMap][CurrentLocation].encounterRate);
            if (randomMember == 1)
            {
                battle();
                LookAround();
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapLocation == 1 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 33 && WorldMapCells[1][32].accessible == false)
            {
                if (inventory.dictionary.ContainsKey("key"))
                {
                    WriteLineText("You try the key you got from the treehouse in the lock. It sticks at first, but eventually creaks and turns.");
                    inventory.dictionary.Remove("key");
                    WorldMapCells[1][32].accessible = true;
                }
                else
                {
                    WriteLineText("You can't get past the locked door.");
                }
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapLocation == 0 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 11 && !inventory.dictionary.ContainsKey("flashlight"))
            {
                Console.ForegroundColor = foregroundColour;
                WriteLineText("You should get a flashlight from Dr.Digby first");
                Thread.Sleep(800);
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapLocation == 0 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 15 && vanyaTalk == false)
            {
                Console.ForegroundColor = foregroundColour;
                WriteLineText("Vanya wants to talk to you before you leave");
                Thread.Sleep(800);
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation - 1].mapName == "karstbay" && WorldMapCells[CurrentMap][CurrentLocation - 1].cellLocation == 40 && boatguyCounter >= 2)
            {
                Console.ForegroundColor = foregroundColour;
                WriteLineText("You boarded the ship. Would you like to look around or wait for the ship to reach its destination?");
                Thread.Sleep(800);
                boatToKarstbay = false;

                //Console.ForegroundColor = foregroundColour;
                //WriteLineText("You boarded the ship.");
                //Thread.Sleep(800);
                //boatToKarstbay = true;
                //BoatAnimation();
                //        CurrentMap = 5;
                //        CurrentLocation = 41;
                //        WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                //        WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                //        Thread.Sleep(1000);
                //        WriteLineText("Type 'map' to see the current map.");
                //        Thread.Sleep(800);
                //        LookAround();
            }
            else if (WorldMapCells[CurrentMap][CurrentLocation - 1].Gateway == true)
            {
                int tempMap = WorldMapCells[CurrentMap][CurrentLocation - 1].newMap;
                int tempLocation = WorldMapCells[CurrentMap][CurrentLocation - 1].newLocation;
                CurrentMap = tempMap;
                CurrentLocation = tempLocation;
                WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                if (WorldMapCells[CurrentMap][CurrentLocation].cave == false)
                TurnOffTorch();
                Console.ForegroundColor = foregroundColour;
                WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                Thread.Sleep(1000);
                WriteLineText("Type 'map' to see the current map.");
                Thread.Sleep(800);
                LookAround();
            }
            else
            {
                CurrentLocation -= 1;
                WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                LookAround();
            }
        }

        public void EastMovement()
        {
            if (WorldMapCells[CurrentMap][CurrentLocation + 1].mapName == "rifton beach" && WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation == 35 && miniBossOneDefeat == false)
            {
                miniBossBattle = true;
                battle();
            }
            else
            {
                int randomMember = random.Next(WorldMapCells[CurrentMap][CurrentLocation].encounterRate);
                if (randomMember == 1)
                {
                    battle();
                    LookAround();
                }
                else if (WorldMapCells[CurrentMap][CurrentLocation + 1].mapName == "rifton beach" && WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation == 1 && WaterfallQuestBranch3 == false)
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("The waterfall is too powerful to cross.");
                    Thread.Sleep(800);
                }
                else if (WorldMapCells[CurrentMap][CurrentLocation + 1].mapName == "rifton beach" && WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation == 19 && boatguyCounter < 2)
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You need a ticket to board the ship.");
                    Thread.Sleep(800);
                }
                else if (WorldMapCells[CurrentMap][CurrentLocation + 1].mapName == "rifton beach" && WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation == 19 && boatguyCounter >= 2)
                {
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You boarded the ship.");
                    Thread.Sleep(800);
                    boatToKarstbay = true;
                    BoatAnimation();
                    //        CurrentMap = 5;
                    //        CurrentLocation = 41;
                    //        WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                    //        WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                    //        Thread.Sleep(1000);
                    //        WriteLineText("Type 'map' to see the current map.");
                    //        Thread.Sleep(800);
                    //        LookAround();
                    WriteLineText("You reach the mainland and the town of Karstbay, headed to visit Professor Fournier and discover more about the Meeba and their connection to the world of Terethia.");
                    Thread.Sleep(2000);
                    WriteLineText("End of Chapter 1.");
                    Thread.Sleep(1000);
                    WriteLineText("Thank you for playing!");
                    Thread.Sleep(2000);
                    MainMenu.MainMenu();
                }
                else if (WorldMapCells[CurrentMap][CurrentLocation + 1].Gateway == true)
                {
                    int tempMap = WorldMapCells[CurrentMap][CurrentLocation + 1].newMap;
                    int tempLocation = WorldMapCells[CurrentMap][CurrentLocation + 1].newLocation;
                    CurrentMap = tempMap;
                    CurrentLocation = tempLocation;
                    WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                    if (WorldMapCells[CurrentMap][CurrentLocation].cave == false)
                    TurnOffTorch();
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("You have entered " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName));
                    Thread.Sleep(1000);
                    WriteLineText("Type 'map' to see the current map.");
                    Thread.Sleep(800);
                    LookAround();
                }
                else
                {
                    CurrentLocation += 1;
                    WorldMapCells[CurrentMap][CurrentLocation].visited = true;
                    LookAround();
                }
            }
        }

        public void VisitOrder()
        {
        //    if (WorldMapCells[CurrentMap][CurrentLocation].mapName == WorldMapCells[6][85].mapName && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == WorldMapCells[6][85].cellLocation && WorldMapCells[6][85].firstVisit == true) //fire
        //    {
        //        WorldMapCells[6][85].firstVisit = false;
        //        if (WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false)
        //        {
        //            WorldMapCells[6][0].visitNumber = WorldMapCells[6][1].visitNumber = WorldMapCells[6][2].visitNumber = WorldMapCells[6][3].visitNumber = WorldMapCells[6][4].visitNumber = WorldMapCells[6][5].visitNumber = WorldMapCells[6][6].visitNumber = WorldMapCells[6][7].visitNumber = WorldMapCells[6][8].visitNumber = WorldMapCells[6][9].visitNumber = WorldMapCells[6][10].visitNumber = WorldMapCells[6][11].visitNumber = WorldMapCells[6][12].visitNumber = WorldMapCells[6][13].visitNumber = WorldMapCells[6][14].visitNumber = WorldMapCells[6][15].visitNumber = WorldMapCells[6][16].visitNumber = WorldMapCells[6][17].visitNumber = WorldMapCells[6][18].visitNumber = WorldMapCells[6][19].visitNumber = WorldMapCells[6][20].visitNumber = WorldMapCells[6][21].visitNumber = WorldMapCells[6][22].visitNumber = WorldMapCells[6][23].visitNumber = WorldMapCells[6][24].visitNumber = WorldMapCells[6][25].visitNumber = WorldMapCells[6][26].visitNumber = WorldMapCells[6][27].visitNumber = WorldMapCells[6][28].visitNumber = WorldMapCells[6][29].visitNumber = WorldMapCells[6][30].visitNumber = WorldMapCells[6][31].visitNumber = WorldMapCells[6][32].visitNumber = WorldMapCells[6][33].visitNumber = WorldMapCells[6][34].visitNumber = WorldMapCells[6][35].visitNumber = WorldMapCells[6][36].visitNumber = WorldMapCells[6][37].visitNumber = WorldMapCells[6][38].visitNumber = WorldMapCells[6][39].visitNumber = WorldMapCells[6][40].visitNumber = WorldMapCells[6][41].visitNumber = WorldMapCells[6][42].visitNumber = WorldMapCells[6][43].visitNumber = WorldMapCells[6][44].visitNumber = WorldMapCells[6][45].visitNumber = WorldMapCells[6][46].visitNumber = WorldMapCells[6][47].visitNumber = WorldMapCells[6][48].visitNumber = WorldMapCells[6][49].visitNumber = WorldMapCells[6][50].visitNumber = WorldMapCells[6][51].visitNumber = WorldMapCells[6][52].visitNumber = WorldMapCells[6][53].visitNumber = WorldMapCells[6][54].visitNumber = WorldMapCells[6][55].visitNumber = WorldMapCells[6][56].visitNumber = WorldMapCells[6][57].visitNumber = WorldMapCells[6][58].visitNumber = WorldMapCells[6][59].visitNumber = WorldMapCells[6][60].visitNumber = WorldMapCells[6][61].visitNumber = WorldMapCells[6][62].visitNumber = WorldMapCells[6][63].visitNumber = WorldMapCells[6][64].visitNumber = WorldMapCells[6][65].visitNumber = WorldMapCells[6][66].visitNumber = WorldMapCells[6][67].visitNumber = WorldMapCells[6][68].visitNumber = WorldMapCells[6][69].visitNumber = WorldMapCells[6][70].visitNumber = WorldMapCells[6][71].visitNumber = WorldMapCells[6][72].visitNumber = WorldMapCells[6][73].visitNumber = WorldMapCells[6][74].visitNumber = WorldMapCells[6][75].visitNumber = WorldMapCells[6][76].visitNumber = WorldMapCells[6][77].visitNumber = WorldMapCells[6][78].visitNumber = WorldMapCells[6][79].visitNumber = WorldMapCells[6][80].visitNumber = WorldMapCells[6][81].visitNumber = WorldMapCells[6][82].visitNumber = WorldMapCells[6][83].visitNumber = WorldMapCells[6][84].visitNumber = WorldMapCells[6][85].visitNumber = WorldMapCells[6][86].visitNumber = WorldMapCells[6][87].visitNumber = WorldMapCells[6][88].visitNumber = WorldMapCells[6][89].visitNumber = WorldMapCells[6][90].visitNumber = WorldMapCells[6][91].visitNumber = WorldMapCells[6][92].visitNumber = WorldMapCells[6][93].visitNumber = WorldMapCells[6][94].visitNumber = WorldMapCells[6][95].visitNumber = WorldMapCells[6][96].visitNumber = WorldMapCells[6][97].visitNumber = WorldMapCells[6][98].visitNumber = WorldMapCells[6][99].visitNumber = 1;
        //            WorldMapCells[14][0].visitNumber = WorldMapCells[14][1].visitNumber = WorldMapCells[14][2].visitNumber = WorldMapCells[14][3].visitNumber = WorldMapCells[14][4].visitNumber = WorldMapCells[14][5].visitNumber = WorldMapCells[14][6].visitNumber = WorldMapCells[14][7].visitNumber = WorldMapCells[14][8].visitNumber = WorldMapCells[14][9].visitNumber = WorldMapCells[14][10].visitNumber = WorldMapCells[14][11].visitNumber = WorldMapCells[14][12].visitNumber = WorldMapCells[14][13].visitNumber = WorldMapCells[14][14].visitNumber = WorldMapCells[14][15].visitNumber = WorldMapCells[14][16].visitNumber = WorldMapCells[14][17].visitNumber = WorldMapCells[14][18].visitNumber = WorldMapCells[14][19].visitNumber = WorldMapCells[14][20].visitNumber = WorldMapCells[14][21].visitNumber = WorldMapCells[14][22].visitNumber = WorldMapCells[14][23].visitNumber = WorldMapCells[14][24].visitNumber = WorldMapCells[14][25].visitNumber = WorldMapCells[14][26].visitNumber = WorldMapCells[14][27].visitNumber = WorldMapCells[14][28].visitNumber = WorldMapCells[14][29].visitNumber = WorldMapCells[14][30].visitNumber = WorldMapCells[14][31].visitNumber = WorldMapCells[14][32].visitNumber = WorldMapCells[14][33].visitNumber = WorldMapCells[14][34].visitNumber = WorldMapCells[14][35].visitNumber = WorldMapCells[14][36].visitNumber = WorldMapCells[14][37].visitNumber = WorldMapCells[14][38].visitNumber = WorldMapCells[14][39].visitNumber = WorldMapCells[14][40].visitNumber = WorldMapCells[14][41].visitNumber = WorldMapCells[14][42].visitNumber = WorldMapCells[14][43].visitNumber = WorldMapCells[14][44].visitNumber = WorldMapCells[14][45].visitNumber = WorldMapCells[14][46].visitNumber = WorldMapCells[14][47].visitNumber = WorldMapCells[14][48].visitNumber = WorldMapCells[14][49].visitNumber = WorldMapCells[14][50].visitNumber = WorldMapCells[14][51].visitNumber = WorldMapCells[14][52].visitNumber = WorldMapCells[14][53].visitNumber = WorldMapCells[14][54].visitNumber = WorldMapCells[14][55].visitNumber = WorldMapCells[14][56].visitNumber = WorldMapCells[14][57].visitNumber = WorldMapCells[14][58].visitNumber = WorldMapCells[14][59].visitNumber = WorldMapCells[14][60].visitNumber = WorldMapCells[14][61].visitNumber = WorldMapCells[14][62].visitNumber = WorldMapCells[14][63].visitNumber = WorldMapCells[14][64].visitNumber = WorldMapCells[14][65].visitNumber = WorldMapCells[14][66].visitNumber = WorldMapCells[14][67].visitNumber = WorldMapCells[14][68].visitNumber = WorldMapCells[14][69].visitNumber = WorldMapCells[14][70].visitNumber = WorldMapCells[14][71].visitNumber = WorldMapCells[14][72].visitNumber = WorldMapCells[14][73].visitNumber = WorldMapCells[14][74].visitNumber = WorldMapCells[14][75].visitNumber = WorldMapCells[14][76].visitNumber = WorldMapCells[14][77].visitNumber = WorldMapCells[14][78].visitNumber = WorldMapCells[14][79].visitNumber = WorldMapCells[14][80].visitNumber = WorldMapCells[14][81].visitNumber = WorldMapCells[14][82].visitNumber = WorldMapCells[14][83].visitNumber = WorldMapCells[14][84].visitNumber = WorldMapCells[14][85].visitNumber = WorldMapCells[14][86].visitNumber = WorldMapCells[14][87].visitNumber = WorldMapCells[14][88].visitNumber = WorldMapCells[14][89].visitNumber = WorldMapCells[14][90].visitNumber = WorldMapCells[14][91].visitNumber = WorldMapCells[14][92].visitNumber = WorldMapCells[14][93].visitNumber = WorldMapCells[14][94].visitNumber = WorldMapCells[14][95].visitNumber = WorldMapCells[14][96].visitNumber = WorldMapCells[14][97].visitNumber = WorldMapCells[14][98].visitNumber = WorldMapCells[14][99].visitNumber = 1;
        //            WorldMapCells[15][0].visitNumber = WorldMapCells[15][1].visitNumber = WorldMapCells[15][2].visitNumber = WorldMapCells[15][3].visitNumber = WorldMapCells[15][4].visitNumber = WorldMapCells[15][5].visitNumber = WorldMapCells[15][6].visitNumber = WorldMapCells[15][7].visitNumber = WorldMapCells[15][8].visitNumber = WorldMapCells[15][9].visitNumber = WorldMapCells[15][10].visitNumber = WorldMapCells[15][11].visitNumber = WorldMapCells[15][12].visitNumber = WorldMapCells[15][13].visitNumber = WorldMapCells[15][14].visitNumber = WorldMapCells[15][15].visitNumber = WorldMapCells[15][16].visitNumber = WorldMapCells[15][17].visitNumber = WorldMapCells[15][18].visitNumber = WorldMapCells[15][19].visitNumber = WorldMapCells[15][20].visitNumber = WorldMapCells[15][21].visitNumber = WorldMapCells[15][22].visitNumber = WorldMapCells[15][23].visitNumber = WorldMapCells[15][24].visitNumber = WorldMapCells[15][25].visitNumber = WorldMapCells[15][26].visitNumber = WorldMapCells[15][27].visitNumber = WorldMapCells[15][28].visitNumber = WorldMapCells[15][29].visitNumber = WorldMapCells[15][30].visitNumber = WorldMapCells[15][31].visitNumber = WorldMapCells[15][32].visitNumber = WorldMapCells[15][33].visitNumber = WorldMapCells[15][34].visitNumber = WorldMapCells[15][35].visitNumber = WorldMapCells[15][36].visitNumber = WorldMapCells[15][37].visitNumber = WorldMapCells[15][38].visitNumber = WorldMapCells[15][39].visitNumber = WorldMapCells[15][40].visitNumber = WorldMapCells[15][41].visitNumber = WorldMapCells[15][42].visitNumber = WorldMapCells[15][43].visitNumber = WorldMapCells[15][44].visitNumber = WorldMapCells[15][45].visitNumber = WorldMapCells[15][46].visitNumber = WorldMapCells[15][47].visitNumber = WorldMapCells[15][48].visitNumber = WorldMapCells[15][49].visitNumber = WorldMapCells[15][50].visitNumber = WorldMapCells[15][51].visitNumber = WorldMapCells[15][52].visitNumber = WorldMapCells[15][53].visitNumber = WorldMapCells[15][54].visitNumber = WorldMapCells[15][55].visitNumber = WorldMapCells[15][56].visitNumber = WorldMapCells[15][57].visitNumber = WorldMapCells[15][58].visitNumber = WorldMapCells[15][59].visitNumber = WorldMapCells[15][60].visitNumber = WorldMapCells[15][61].visitNumber = WorldMapCells[15][62].visitNumber = WorldMapCells[15][63].visitNumber = WorldMapCells[15][64].visitNumber = WorldMapCells[15][65].visitNumber = WorldMapCells[15][66].visitNumber = WorldMapCells[15][67].visitNumber = WorldMapCells[15][68].visitNumber = WorldMapCells[15][69].visitNumber = WorldMapCells[15][70].visitNumber = WorldMapCells[15][71].visitNumber = WorldMapCells[15][72].visitNumber = WorldMapCells[15][73].visitNumber = WorldMapCells[15][74].visitNumber = WorldMapCells[15][75].visitNumber = WorldMapCells[15][76].visitNumber = WorldMapCells[15][77].visitNumber = WorldMapCells[15][78].visitNumber = WorldMapCells[15][79].visitNumber = WorldMapCells[15][80].visitNumber = WorldMapCells[15][81].visitNumber = WorldMapCells[15][82].visitNumber = WorldMapCells[15][83].visitNumber = WorldMapCells[15][84].visitNumber = WorldMapCells[15][85].visitNumber = WorldMapCells[15][86].visitNumber = WorldMapCells[15][87].visitNumber = WorldMapCells[15][88].visitNumber = WorldMapCells[15][89].visitNumber = WorldMapCells[15][90].visitNumber = WorldMapCells[15][91].visitNumber = WorldMapCells[15][92].visitNumber = WorldMapCells[15][93].visitNumber = WorldMapCells[15][94].visitNumber = WorldMapCells[15][95].visitNumber = WorldMapCells[15][96].visitNumber = WorldMapCells[15][97].visitNumber = WorldMapCells[15][98].visitNumber = WorldMapCells[15][99].visitNumber = 1;
        //        }
        //        else if (WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false)
        //        {
        //            WorldMapCells[6][0].visitNumber = WorldMapCells[6][1].visitNumber = WorldMapCells[6][2].visitNumber = WorldMapCells[6][3].visitNumber = WorldMapCells[6][4].visitNumber = WorldMapCells[6][5].visitNumber = WorldMapCells[6][6].visitNumber = WorldMapCells[6][7].visitNumber = WorldMapCells[6][8].visitNumber = WorldMapCells[6][9].visitNumber = WorldMapCells[6][10].visitNumber = WorldMapCells[6][11].visitNumber = WorldMapCells[6][12].visitNumber = WorldMapCells[6][13].visitNumber = WorldMapCells[6][14].visitNumber = WorldMapCells[6][15].visitNumber = WorldMapCells[6][16].visitNumber = WorldMapCells[6][17].visitNumber = WorldMapCells[6][18].visitNumber = WorldMapCells[6][19].visitNumber = WorldMapCells[6][20].visitNumber = WorldMapCells[6][21].visitNumber = WorldMapCells[6][22].visitNumber = WorldMapCells[6][23].visitNumber = WorldMapCells[6][24].visitNumber = WorldMapCells[6][25].visitNumber = WorldMapCells[6][26].visitNumber = WorldMapCells[6][27].visitNumber = WorldMapCells[6][28].visitNumber = WorldMapCells[6][29].visitNumber = WorldMapCells[6][30].visitNumber = WorldMapCells[6][31].visitNumber = WorldMapCells[6][32].visitNumber = WorldMapCells[6][33].visitNumber = WorldMapCells[6][34].visitNumber = WorldMapCells[6][35].visitNumber = WorldMapCells[6][36].visitNumber = WorldMapCells[6][37].visitNumber = WorldMapCells[6][38].visitNumber = WorldMapCells[6][39].visitNumber = WorldMapCells[6][40].visitNumber = WorldMapCells[6][41].visitNumber = WorldMapCells[6][42].visitNumber = WorldMapCells[6][43].visitNumber = WorldMapCells[6][44].visitNumber = WorldMapCells[6][45].visitNumber = WorldMapCells[6][46].visitNumber = WorldMapCells[6][47].visitNumber = WorldMapCells[6][48].visitNumber = WorldMapCells[6][49].visitNumber = WorldMapCells[6][50].visitNumber = WorldMapCells[6][51].visitNumber = WorldMapCells[6][52].visitNumber = WorldMapCells[6][53].visitNumber = WorldMapCells[6][54].visitNumber = WorldMapCells[6][55].visitNumber = WorldMapCells[6][56].visitNumber = WorldMapCells[6][57].visitNumber = WorldMapCells[6][58].visitNumber = WorldMapCells[6][59].visitNumber = WorldMapCells[6][60].visitNumber = WorldMapCells[6][61].visitNumber = WorldMapCells[6][62].visitNumber = WorldMapCells[6][63].visitNumber = WorldMapCells[6][64].visitNumber = WorldMapCells[6][65].visitNumber = WorldMapCells[6][66].visitNumber = WorldMapCells[6][67].visitNumber = WorldMapCells[6][68].visitNumber = WorldMapCells[6][69].visitNumber = WorldMapCells[6][70].visitNumber = WorldMapCells[6][71].visitNumber = WorldMapCells[6][72].visitNumber = WorldMapCells[6][73].visitNumber = WorldMapCells[6][74].visitNumber = WorldMapCells[6][75].visitNumber = WorldMapCells[6][76].visitNumber = WorldMapCells[6][77].visitNumber = WorldMapCells[6][78].visitNumber = WorldMapCells[6][79].visitNumber = WorldMapCells[6][80].visitNumber = WorldMapCells[6][81].visitNumber = WorldMapCells[6][82].visitNumber = WorldMapCells[6][83].visitNumber = WorldMapCells[6][84].visitNumber = WorldMapCells[6][85].visitNumber = WorldMapCells[6][86].visitNumber = WorldMapCells[6][87].visitNumber = WorldMapCells[6][88].visitNumber = WorldMapCells[6][89].visitNumber = WorldMapCells[6][90].visitNumber = WorldMapCells[6][91].visitNumber = WorldMapCells[6][92].visitNumber = WorldMapCells[6][93].visitNumber = WorldMapCells[6][94].visitNumber = WorldMapCells[6][95].visitNumber = WorldMapCells[6][96].visitNumber = WorldMapCells[6][97].visitNumber = WorldMapCells[6][98].visitNumber = WorldMapCells[6][99].visitNumber = 2;
        //            WorldMapCells[14][0].visitNumber = WorldMapCells[14][1].visitNumber = WorldMapCells[14][2].visitNumber = WorldMapCells[14][3].visitNumber = WorldMapCells[14][4].visitNumber = WorldMapCells[14][5].visitNumber = WorldMapCells[14][6].visitNumber = WorldMapCells[14][7].visitNumber = WorldMapCells[14][8].visitNumber = WorldMapCells[14][9].visitNumber = WorldMapCells[14][10].visitNumber = WorldMapCells[14][11].visitNumber = WorldMapCells[14][12].visitNumber = WorldMapCells[14][13].visitNumber = WorldMapCells[14][14].visitNumber = WorldMapCells[14][15].visitNumber = WorldMapCells[14][16].visitNumber = WorldMapCells[14][17].visitNumber = WorldMapCells[14][18].visitNumber = WorldMapCells[14][19].visitNumber = WorldMapCells[14][20].visitNumber = WorldMapCells[14][21].visitNumber = WorldMapCells[14][22].visitNumber = WorldMapCells[14][23].visitNumber = WorldMapCells[14][24].visitNumber = WorldMapCells[14][25].visitNumber = WorldMapCells[14][26].visitNumber = WorldMapCells[14][27].visitNumber = WorldMapCells[14][28].visitNumber = WorldMapCells[14][29].visitNumber = WorldMapCells[14][30].visitNumber = WorldMapCells[14][31].visitNumber = WorldMapCells[14][32].visitNumber = WorldMapCells[14][33].visitNumber = WorldMapCells[14][34].visitNumber = WorldMapCells[14][35].visitNumber = WorldMapCells[14][36].visitNumber = WorldMapCells[14][37].visitNumber = WorldMapCells[14][38].visitNumber = WorldMapCells[14][39].visitNumber = WorldMapCells[14][40].visitNumber = WorldMapCells[14][41].visitNumber = WorldMapCells[14][42].visitNumber = WorldMapCells[14][43].visitNumber = WorldMapCells[14][44].visitNumber = WorldMapCells[14][45].visitNumber = WorldMapCells[14][46].visitNumber = WorldMapCells[14][47].visitNumber = WorldMapCells[14][48].visitNumber = WorldMapCells[14][49].visitNumber = WorldMapCells[14][50].visitNumber = WorldMapCells[14][51].visitNumber = WorldMapCells[14][52].visitNumber = WorldMapCells[14][53].visitNumber = WorldMapCells[14][54].visitNumber = WorldMapCells[14][55].visitNumber = WorldMapCells[14][56].visitNumber = WorldMapCells[14][57].visitNumber = WorldMapCells[14][58].visitNumber = WorldMapCells[14][59].visitNumber = WorldMapCells[14][60].visitNumber = WorldMapCells[14][61].visitNumber = WorldMapCells[14][62].visitNumber = WorldMapCells[14][63].visitNumber = WorldMapCells[14][64].visitNumber = WorldMapCells[14][65].visitNumber = WorldMapCells[14][66].visitNumber = WorldMapCells[14][67].visitNumber = WorldMapCells[14][68].visitNumber = WorldMapCells[14][69].visitNumber = WorldMapCells[14][70].visitNumber = WorldMapCells[14][71].visitNumber = WorldMapCells[14][72].visitNumber = WorldMapCells[14][73].visitNumber = WorldMapCells[14][74].visitNumber = WorldMapCells[14][75].visitNumber = WorldMapCells[14][76].visitNumber = WorldMapCells[14][77].visitNumber = WorldMapCells[14][78].visitNumber = WorldMapCells[14][79].visitNumber = WorldMapCells[14][80].visitNumber = WorldMapCells[14][81].visitNumber = WorldMapCells[14][82].visitNumber = WorldMapCells[14][83].visitNumber = WorldMapCells[14][84].visitNumber = WorldMapCells[14][85].visitNumber = WorldMapCells[14][86].visitNumber = WorldMapCells[14][87].visitNumber = WorldMapCells[14][88].visitNumber = WorldMapCells[14][89].visitNumber = WorldMapCells[14][90].visitNumber = WorldMapCells[14][91].visitNumber = WorldMapCells[14][92].visitNumber = WorldMapCells[14][93].visitNumber = WorldMapCells[14][94].visitNumber = WorldMapCells[14][95].visitNumber = WorldMapCells[14][96].visitNumber = WorldMapCells[14][97].visitNumber = WorldMapCells[14][98].visitNumber = WorldMapCells[14][99].visitNumber = 2;
        //            WorldMapCells[15][0].visitNumber = WorldMapCells[15][1].visitNumber = WorldMapCells[15][2].visitNumber = WorldMapCells[15][3].visitNumber = WorldMapCells[15][4].visitNumber = WorldMapCells[15][5].visitNumber = WorldMapCells[15][6].visitNumber = WorldMapCells[15][7].visitNumber = WorldMapCells[15][8].visitNumber = WorldMapCells[15][9].visitNumber = WorldMapCells[15][10].visitNumber = WorldMapCells[15][11].visitNumber = WorldMapCells[15][12].visitNumber = WorldMapCells[15][13].visitNumber = WorldMapCells[15][14].visitNumber = WorldMapCells[15][15].visitNumber = WorldMapCells[15][16].visitNumber = WorldMapCells[15][17].visitNumber = WorldMapCells[15][18].visitNumber = WorldMapCells[15][19].visitNumber = WorldMapCells[15][20].visitNumber = WorldMapCells[15][21].visitNumber = WorldMapCells[15][22].visitNumber = WorldMapCells[15][23].visitNumber = WorldMapCells[15][24].visitNumber = WorldMapCells[15][25].visitNumber = WorldMapCells[15][26].visitNumber = WorldMapCells[15][27].visitNumber = WorldMapCells[15][28].visitNumber = WorldMapCells[15][29].visitNumber = WorldMapCells[15][30].visitNumber = WorldMapCells[15][31].visitNumber = WorldMapCells[15][32].visitNumber = WorldMapCells[15][33].visitNumber = WorldMapCells[15][34].visitNumber = WorldMapCells[15][35].visitNumber = WorldMapCells[15][36].visitNumber = WorldMapCells[15][37].visitNumber = WorldMapCells[15][38].visitNumber = WorldMapCells[15][39].visitNumber = WorldMapCells[15][40].visitNumber = WorldMapCells[15][41].visitNumber = WorldMapCells[15][42].visitNumber = WorldMapCells[15][43].visitNumber = WorldMapCells[15][44].visitNumber = WorldMapCells[15][45].visitNumber = WorldMapCells[15][46].visitNumber = WorldMapCells[15][47].visitNumber = WorldMapCells[15][48].visitNumber = WorldMapCells[15][49].visitNumber = WorldMapCells[15][50].visitNumber = WorldMapCells[15][51].visitNumber = WorldMapCells[15][52].visitNumber = WorldMapCells[15][53].visitNumber = WorldMapCells[15][54].visitNumber = WorldMapCells[15][55].visitNumber = WorldMapCells[15][56].visitNumber = WorldMapCells[15][57].visitNumber = WorldMapCells[15][58].visitNumber = WorldMapCells[15][59].visitNumber = WorldMapCells[15][60].visitNumber = WorldMapCells[15][61].visitNumber = WorldMapCells[15][62].visitNumber = WorldMapCells[15][63].visitNumber = WorldMapCells[15][64].visitNumber = WorldMapCells[15][65].visitNumber = WorldMapCells[15][66].visitNumber = WorldMapCells[15][67].visitNumber = WorldMapCells[15][68].visitNumber = WorldMapCells[15][69].visitNumber = WorldMapCells[15][70].visitNumber = WorldMapCells[15][71].visitNumber = WorldMapCells[15][72].visitNumber = WorldMapCells[15][73].visitNumber = WorldMapCells[15][74].visitNumber = WorldMapCells[15][75].visitNumber = WorldMapCells[15][76].visitNumber = WorldMapCells[15][77].visitNumber = WorldMapCells[15][78].visitNumber = WorldMapCells[15][79].visitNumber = WorldMapCells[15][80].visitNumber = WorldMapCells[15][81].visitNumber = WorldMapCells[15][82].visitNumber = WorldMapCells[15][83].visitNumber = WorldMapCells[15][84].visitNumber = WorldMapCells[15][85].visitNumber = WorldMapCells[15][86].visitNumber = WorldMapCells[15][87].visitNumber = WorldMapCells[15][88].visitNumber = WorldMapCells[15][89].visitNumber = WorldMapCells[15][90].visitNumber = WorldMapCells[15][91].visitNumber = WorldMapCells[15][92].visitNumber = WorldMapCells[15][93].visitNumber = WorldMapCells[15][94].visitNumber = WorldMapCells[15][95].visitNumber = WorldMapCells[15][96].visitNumber = WorldMapCells[15][97].visitNumber = WorldMapCells[15][98].visitNumber = WorldMapCells[15][99].visitNumber = 2;
        //        }
        //        else if (WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true)
        //        {
        //            WorldMapCells[6][0].visitNumber = WorldMapCells[6][1].visitNumber = WorldMapCells[6][2].visitNumber = WorldMapCells[6][3].visitNumber = WorldMapCells[6][4].visitNumber = WorldMapCells[6][5].visitNumber = WorldMapCells[6][6].visitNumber = WorldMapCells[6][7].visitNumber = WorldMapCells[6][8].visitNumber = WorldMapCells[6][9].visitNumber = WorldMapCells[6][10].visitNumber = WorldMapCells[6][11].visitNumber = WorldMapCells[6][12].visitNumber = WorldMapCells[6][13].visitNumber = WorldMapCells[6][14].visitNumber = WorldMapCells[6][15].visitNumber = WorldMapCells[6][16].visitNumber = WorldMapCells[6][17].visitNumber = WorldMapCells[6][18].visitNumber = WorldMapCells[6][19].visitNumber = WorldMapCells[6][20].visitNumber = WorldMapCells[6][21].visitNumber = WorldMapCells[6][22].visitNumber = WorldMapCells[6][23].visitNumber = WorldMapCells[6][24].visitNumber = WorldMapCells[6][25].visitNumber = WorldMapCells[6][26].visitNumber = WorldMapCells[6][27].visitNumber = WorldMapCells[6][28].visitNumber = WorldMapCells[6][29].visitNumber = WorldMapCells[6][30].visitNumber = WorldMapCells[6][31].visitNumber = WorldMapCells[6][32].visitNumber = WorldMapCells[6][33].visitNumber = WorldMapCells[6][34].visitNumber = WorldMapCells[6][35].visitNumber = WorldMapCells[6][36].visitNumber = WorldMapCells[6][37].visitNumber = WorldMapCells[6][38].visitNumber = WorldMapCells[6][39].visitNumber = WorldMapCells[6][40].visitNumber = WorldMapCells[6][41].visitNumber = WorldMapCells[6][42].visitNumber = WorldMapCells[6][43].visitNumber = WorldMapCells[6][44].visitNumber = WorldMapCells[6][45].visitNumber = WorldMapCells[6][46].visitNumber = WorldMapCells[6][47].visitNumber = WorldMapCells[6][48].visitNumber = WorldMapCells[6][49].visitNumber = WorldMapCells[6][50].visitNumber = WorldMapCells[6][51].visitNumber = WorldMapCells[6][52].visitNumber = WorldMapCells[6][53].visitNumber = WorldMapCells[6][54].visitNumber = WorldMapCells[6][55].visitNumber = WorldMapCells[6][56].visitNumber = WorldMapCells[6][57].visitNumber = WorldMapCells[6][58].visitNumber = WorldMapCells[6][59].visitNumber = WorldMapCells[6][60].visitNumber = WorldMapCells[6][61].visitNumber = WorldMapCells[6][62].visitNumber = WorldMapCells[6][63].visitNumber = WorldMapCells[6][64].visitNumber = WorldMapCells[6][65].visitNumber = WorldMapCells[6][66].visitNumber = WorldMapCells[6][67].visitNumber = WorldMapCells[6][68].visitNumber = WorldMapCells[6][69].visitNumber = WorldMapCells[6][70].visitNumber = WorldMapCells[6][71].visitNumber = WorldMapCells[6][72].visitNumber = WorldMapCells[6][73].visitNumber = WorldMapCells[6][74].visitNumber = WorldMapCells[6][75].visitNumber = WorldMapCells[6][76].visitNumber = WorldMapCells[6][77].visitNumber = WorldMapCells[6][78].visitNumber = WorldMapCells[6][79].visitNumber = WorldMapCells[6][80].visitNumber = WorldMapCells[6][81].visitNumber = WorldMapCells[6][82].visitNumber = WorldMapCells[6][83].visitNumber = WorldMapCells[6][84].visitNumber = WorldMapCells[6][85].visitNumber = WorldMapCells[6][86].visitNumber = WorldMapCells[6][87].visitNumber = WorldMapCells[6][88].visitNumber = WorldMapCells[6][89].visitNumber = WorldMapCells[6][90].visitNumber = WorldMapCells[6][91].visitNumber = WorldMapCells[6][92].visitNumber = WorldMapCells[6][93].visitNumber = WorldMapCells[6][94].visitNumber = WorldMapCells[6][95].visitNumber = WorldMapCells[6][96].visitNumber = WorldMapCells[6][97].visitNumber = WorldMapCells[6][98].visitNumber = WorldMapCells[6][99].visitNumber = 3;
        //            WorldMapCells[14][0].visitNumber = WorldMapCells[14][1].visitNumber = WorldMapCells[14][2].visitNumber = WorldMapCells[14][3].visitNumber = WorldMapCells[14][4].visitNumber = WorldMapCells[14][5].visitNumber = WorldMapCells[14][6].visitNumber = WorldMapCells[14][7].visitNumber = WorldMapCells[14][8].visitNumber = WorldMapCells[14][9].visitNumber = WorldMapCells[14][10].visitNumber = WorldMapCells[14][11].visitNumber = WorldMapCells[14][12].visitNumber = WorldMapCells[14][13].visitNumber = WorldMapCells[14][14].visitNumber = WorldMapCells[14][15].visitNumber = WorldMapCells[14][16].visitNumber = WorldMapCells[14][17].visitNumber = WorldMapCells[14][18].visitNumber = WorldMapCells[14][19].visitNumber = WorldMapCells[14][20].visitNumber = WorldMapCells[14][21].visitNumber = WorldMapCells[14][22].visitNumber = WorldMapCells[14][23].visitNumber = WorldMapCells[14][24].visitNumber = WorldMapCells[14][25].visitNumber = WorldMapCells[14][26].visitNumber = WorldMapCells[14][27].visitNumber = WorldMapCells[14][28].visitNumber = WorldMapCells[14][29].visitNumber = WorldMapCells[14][30].visitNumber = WorldMapCells[14][31].visitNumber = WorldMapCells[14][32].visitNumber = WorldMapCells[14][33].visitNumber = WorldMapCells[14][34].visitNumber = WorldMapCells[14][35].visitNumber = WorldMapCells[14][36].visitNumber = WorldMapCells[14][37].visitNumber = WorldMapCells[14][38].visitNumber = WorldMapCells[14][39].visitNumber = WorldMapCells[14][40].visitNumber = WorldMapCells[14][41].visitNumber = WorldMapCells[14][42].visitNumber = WorldMapCells[14][43].visitNumber = WorldMapCells[14][44].visitNumber = WorldMapCells[14][45].visitNumber = WorldMapCells[14][46].visitNumber = WorldMapCells[14][47].visitNumber = WorldMapCells[14][48].visitNumber = WorldMapCells[14][49].visitNumber = WorldMapCells[14][50].visitNumber = WorldMapCells[14][51].visitNumber = WorldMapCells[14][52].visitNumber = WorldMapCells[14][53].visitNumber = WorldMapCells[14][54].visitNumber = WorldMapCells[14][55].visitNumber = WorldMapCells[14][56].visitNumber = WorldMapCells[14][57].visitNumber = WorldMapCells[14][58].visitNumber = WorldMapCells[14][59].visitNumber = WorldMapCells[14][60].visitNumber = WorldMapCells[14][61].visitNumber = WorldMapCells[14][62].visitNumber = WorldMapCells[14][63].visitNumber = WorldMapCells[14][64].visitNumber = WorldMapCells[14][65].visitNumber = WorldMapCells[14][66].visitNumber = WorldMapCells[14][67].visitNumber = WorldMapCells[14][68].visitNumber = WorldMapCells[14][69].visitNumber = WorldMapCells[14][70].visitNumber = WorldMapCells[14][71].visitNumber = WorldMapCells[14][72].visitNumber = WorldMapCells[14][73].visitNumber = WorldMapCells[14][74].visitNumber = WorldMapCells[14][75].visitNumber = WorldMapCells[14][76].visitNumber = WorldMapCells[14][77].visitNumber = WorldMapCells[14][78].visitNumber = WorldMapCells[14][79].visitNumber = WorldMapCells[14][80].visitNumber = WorldMapCells[14][81].visitNumber = WorldMapCells[14][82].visitNumber = WorldMapCells[14][83].visitNumber = WorldMapCells[14][84].visitNumber = WorldMapCells[14][85].visitNumber = WorldMapCells[14][86].visitNumber = WorldMapCells[14][87].visitNumber = WorldMapCells[14][88].visitNumber = WorldMapCells[14][89].visitNumber = WorldMapCells[14][90].visitNumber = WorldMapCells[14][91].visitNumber = WorldMapCells[14][92].visitNumber = WorldMapCells[14][93].visitNumber = WorldMapCells[14][94].visitNumber = WorldMapCells[14][95].visitNumber = WorldMapCells[14][96].visitNumber = WorldMapCells[14][97].visitNumber = WorldMapCells[14][98].visitNumber = WorldMapCells[14][99].visitNumber = 3;
        //            WorldMapCells[15][0].visitNumber = WorldMapCells[15][1].visitNumber = WorldMapCells[15][2].visitNumber = WorldMapCells[15][3].visitNumber = WorldMapCells[15][4].visitNumber = WorldMapCells[15][5].visitNumber = WorldMapCells[15][6].visitNumber = WorldMapCells[15][7].visitNumber = WorldMapCells[15][8].visitNumber = WorldMapCells[15][9].visitNumber = WorldMapCells[15][10].visitNumber = WorldMapCells[15][11].visitNumber = WorldMapCells[15][12].visitNumber = WorldMapCells[15][13].visitNumber = WorldMapCells[15][14].visitNumber = WorldMapCells[15][15].visitNumber = WorldMapCells[15][16].visitNumber = WorldMapCells[15][17].visitNumber = WorldMapCells[15][18].visitNumber = WorldMapCells[15][19].visitNumber = WorldMapCells[15][20].visitNumber = WorldMapCells[15][21].visitNumber = WorldMapCells[15][22].visitNumber = WorldMapCells[15][23].visitNumber = WorldMapCells[15][24].visitNumber = WorldMapCells[15][25].visitNumber = WorldMapCells[15][26].visitNumber = WorldMapCells[15][27].visitNumber = WorldMapCells[15][28].visitNumber = WorldMapCells[15][29].visitNumber = WorldMapCells[15][30].visitNumber = WorldMapCells[15][31].visitNumber = WorldMapCells[15][32].visitNumber = WorldMapCells[15][33].visitNumber = WorldMapCells[15][34].visitNumber = WorldMapCells[15][35].visitNumber = WorldMapCells[15][36].visitNumber = WorldMapCells[15][37].visitNumber = WorldMapCells[15][38].visitNumber = WorldMapCells[15][39].visitNumber = WorldMapCells[15][40].visitNumber = WorldMapCells[15][41].visitNumber = WorldMapCells[15][42].visitNumber = WorldMapCells[15][43].visitNumber = WorldMapCells[15][44].visitNumber = WorldMapCells[15][45].visitNumber = WorldMapCells[15][46].visitNumber = WorldMapCells[15][47].visitNumber = WorldMapCells[15][48].visitNumber = WorldMapCells[15][49].visitNumber = WorldMapCells[15][50].visitNumber = WorldMapCells[15][51].visitNumber = WorldMapCells[15][52].visitNumber = WorldMapCells[15][53].visitNumber = WorldMapCells[15][54].visitNumber = WorldMapCells[15][55].visitNumber = WorldMapCells[15][56].visitNumber = WorldMapCells[15][57].visitNumber = WorldMapCells[15][58].visitNumber = WorldMapCells[15][59].visitNumber = WorldMapCells[15][60].visitNumber = WorldMapCells[15][61].visitNumber = WorldMapCells[15][62].visitNumber = WorldMapCells[15][63].visitNumber = WorldMapCells[15][64].visitNumber = WorldMapCells[15][65].visitNumber = WorldMapCells[15][66].visitNumber = WorldMapCells[15][67].visitNumber = WorldMapCells[15][68].visitNumber = WorldMapCells[15][69].visitNumber = WorldMapCells[15][70].visitNumber = WorldMapCells[15][71].visitNumber = WorldMapCells[15][72].visitNumber = WorldMapCells[15][73].visitNumber = WorldMapCells[15][74].visitNumber = WorldMapCells[15][75].visitNumber = WorldMapCells[15][76].visitNumber = WorldMapCells[15][77].visitNumber = WorldMapCells[15][78].visitNumber = WorldMapCells[15][79].visitNumber = WorldMapCells[15][80].visitNumber = WorldMapCells[15][81].visitNumber = WorldMapCells[15][82].visitNumber = WorldMapCells[15][83].visitNumber = WorldMapCells[15][84].visitNumber = WorldMapCells[15][85].visitNumber = WorldMapCells[15][86].visitNumber = WorldMapCells[15][87].visitNumber = WorldMapCells[15][88].visitNumber = WorldMapCells[15][89].visitNumber = WorldMapCells[15][90].visitNumber = WorldMapCells[15][91].visitNumber = WorldMapCells[15][92].visitNumber = WorldMapCells[15][93].visitNumber = WorldMapCells[15][94].visitNumber = WorldMapCells[15][95].visitNumber = WorldMapCells[15][96].visitNumber = WorldMapCells[15][97].visitNumber = WorldMapCells[15][98].visitNumber = WorldMapCells[15][99].visitNumber = 3;
        //        }
        //        else if (WorldMapCells[7][41].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true)
        //        {
        //            WorldMapCells[6][0].visitNumber = WorldMapCells[6][1].visitNumber = WorldMapCells[6][2].visitNumber = WorldMapCells[6][3].visitNumber = WorldMapCells[6][4].visitNumber = WorldMapCells[6][5].visitNumber = WorldMapCells[6][6].visitNumber = WorldMapCells[6][7].visitNumber = WorldMapCells[6][8].visitNumber = WorldMapCells[6][9].visitNumber = WorldMapCells[6][10].visitNumber = WorldMapCells[6][11].visitNumber = WorldMapCells[6][12].visitNumber = WorldMapCells[6][13].visitNumber = WorldMapCells[6][14].visitNumber = WorldMapCells[6][15].visitNumber = WorldMapCells[6][16].visitNumber = WorldMapCells[6][17].visitNumber = WorldMapCells[6][18].visitNumber = WorldMapCells[6][19].visitNumber = WorldMapCells[6][20].visitNumber = WorldMapCells[6][21].visitNumber = WorldMapCells[6][22].visitNumber = WorldMapCells[6][23].visitNumber = WorldMapCells[6][24].visitNumber = WorldMapCells[6][25].visitNumber = WorldMapCells[6][26].visitNumber = WorldMapCells[6][27].visitNumber = WorldMapCells[6][28].visitNumber = WorldMapCells[6][29].visitNumber = WorldMapCells[6][30].visitNumber = WorldMapCells[6][31].visitNumber = WorldMapCells[6][32].visitNumber = WorldMapCells[6][33].visitNumber = WorldMapCells[6][34].visitNumber = WorldMapCells[6][35].visitNumber = WorldMapCells[6][36].visitNumber = WorldMapCells[6][37].visitNumber = WorldMapCells[6][38].visitNumber = WorldMapCells[6][39].visitNumber = WorldMapCells[6][40].visitNumber = WorldMapCells[6][41].visitNumber = WorldMapCells[6][42].visitNumber = WorldMapCells[6][43].visitNumber = WorldMapCells[6][44].visitNumber = WorldMapCells[6][45].visitNumber = WorldMapCells[6][46].visitNumber = WorldMapCells[6][47].visitNumber = WorldMapCells[6][48].visitNumber = WorldMapCells[6][49].visitNumber = WorldMapCells[6][50].visitNumber = WorldMapCells[6][51].visitNumber = WorldMapCells[6][52].visitNumber = WorldMapCells[6][53].visitNumber = WorldMapCells[6][54].visitNumber = WorldMapCells[6][55].visitNumber = WorldMapCells[6][56].visitNumber = WorldMapCells[6][57].visitNumber = WorldMapCells[6][58].visitNumber = WorldMapCells[6][59].visitNumber = WorldMapCells[6][60].visitNumber = WorldMapCells[6][61].visitNumber = WorldMapCells[6][62].visitNumber = WorldMapCells[6][63].visitNumber = WorldMapCells[6][64].visitNumber = WorldMapCells[6][65].visitNumber = WorldMapCells[6][66].visitNumber = WorldMapCells[6][67].visitNumber = WorldMapCells[6][68].visitNumber = WorldMapCells[6][69].visitNumber = WorldMapCells[6][70].visitNumber = WorldMapCells[6][71].visitNumber = WorldMapCells[6][72].visitNumber = WorldMapCells[6][73].visitNumber = WorldMapCells[6][74].visitNumber = WorldMapCells[6][75].visitNumber = WorldMapCells[6][76].visitNumber = WorldMapCells[6][77].visitNumber = WorldMapCells[6][78].visitNumber = WorldMapCells[6][79].visitNumber = WorldMapCells[6][80].visitNumber = WorldMapCells[6][81].visitNumber = WorldMapCells[6][82].visitNumber = WorldMapCells[6][83].visitNumber = WorldMapCells[6][84].visitNumber = WorldMapCells[6][85].visitNumber = WorldMapCells[6][86].visitNumber = WorldMapCells[6][87].visitNumber = WorldMapCells[6][88].visitNumber = WorldMapCells[6][89].visitNumber = WorldMapCells[6][90].visitNumber = WorldMapCells[6][91].visitNumber = WorldMapCells[6][92].visitNumber = WorldMapCells[6][93].visitNumber = WorldMapCells[6][94].visitNumber = WorldMapCells[6][95].visitNumber = WorldMapCells[6][96].visitNumber = WorldMapCells[6][97].visitNumber = WorldMapCells[6][98].visitNumber = WorldMapCells[6][99].visitNumber = 4;
        //            WorldMapCells[14][0].visitNumber = WorldMapCells[14][1].visitNumber = WorldMapCells[14][2].visitNumber = WorldMapCells[14][3].visitNumber = WorldMapCells[14][4].visitNumber = WorldMapCells[14][5].visitNumber = WorldMapCells[14][6].visitNumber = WorldMapCells[14][7].visitNumber = WorldMapCells[14][8].visitNumber = WorldMapCells[14][9].visitNumber = WorldMapCells[14][10].visitNumber = WorldMapCells[14][11].visitNumber = WorldMapCells[14][12].visitNumber = WorldMapCells[14][13].visitNumber = WorldMapCells[14][14].visitNumber = WorldMapCells[14][15].visitNumber = WorldMapCells[14][16].visitNumber = WorldMapCells[14][17].visitNumber = WorldMapCells[14][18].visitNumber = WorldMapCells[14][19].visitNumber = WorldMapCells[14][20].visitNumber = WorldMapCells[14][21].visitNumber = WorldMapCells[14][22].visitNumber = WorldMapCells[14][23].visitNumber = WorldMapCells[14][24].visitNumber = WorldMapCells[14][25].visitNumber = WorldMapCells[14][26].visitNumber = WorldMapCells[14][27].visitNumber = WorldMapCells[14][28].visitNumber = WorldMapCells[14][29].visitNumber = WorldMapCells[14][30].visitNumber = WorldMapCells[14][31].visitNumber = WorldMapCells[14][32].visitNumber = WorldMapCells[14][33].visitNumber = WorldMapCells[14][34].visitNumber = WorldMapCells[14][35].visitNumber = WorldMapCells[14][36].visitNumber = WorldMapCells[14][37].visitNumber = WorldMapCells[14][38].visitNumber = WorldMapCells[14][39].visitNumber = WorldMapCells[14][40].visitNumber = WorldMapCells[14][41].visitNumber = WorldMapCells[14][42].visitNumber = WorldMapCells[14][43].visitNumber = WorldMapCells[14][44].visitNumber = WorldMapCells[14][45].visitNumber = WorldMapCells[14][46].visitNumber = WorldMapCells[14][47].visitNumber = WorldMapCells[14][48].visitNumber = WorldMapCells[14][49].visitNumber = WorldMapCells[14][50].visitNumber = WorldMapCells[14][51].visitNumber = WorldMapCells[14][52].visitNumber = WorldMapCells[14][53].visitNumber = WorldMapCells[14][54].visitNumber = WorldMapCells[14][55].visitNumber = WorldMapCells[14][56].visitNumber = WorldMapCells[14][57].visitNumber = WorldMapCells[14][58].visitNumber = WorldMapCells[14][59].visitNumber = WorldMapCells[14][60].visitNumber = WorldMapCells[14][61].visitNumber = WorldMapCells[14][62].visitNumber = WorldMapCells[14][63].visitNumber = WorldMapCells[14][64].visitNumber = WorldMapCells[14][65].visitNumber = WorldMapCells[14][66].visitNumber = WorldMapCells[14][67].visitNumber = WorldMapCells[14][68].visitNumber = WorldMapCells[14][69].visitNumber = WorldMapCells[14][70].visitNumber = WorldMapCells[14][71].visitNumber = WorldMapCells[14][72].visitNumber = WorldMapCells[14][73].visitNumber = WorldMapCells[14][74].visitNumber = WorldMapCells[14][75].visitNumber = WorldMapCells[14][76].visitNumber = WorldMapCells[14][77].visitNumber = WorldMapCells[14][78].visitNumber = WorldMapCells[14][79].visitNumber = WorldMapCells[14][80].visitNumber = WorldMapCells[14][81].visitNumber = WorldMapCells[14][82].visitNumber = WorldMapCells[14][83].visitNumber = WorldMapCells[14][84].visitNumber = WorldMapCells[14][85].visitNumber = WorldMapCells[14][86].visitNumber = WorldMapCells[14][87].visitNumber = WorldMapCells[14][88].visitNumber = WorldMapCells[14][89].visitNumber = WorldMapCells[14][90].visitNumber = WorldMapCells[14][91].visitNumber = WorldMapCells[14][92].visitNumber = WorldMapCells[14][93].visitNumber = WorldMapCells[14][94].visitNumber = WorldMapCells[14][95].visitNumber = WorldMapCells[14][96].visitNumber = WorldMapCells[14][97].visitNumber = WorldMapCells[14][98].visitNumber = WorldMapCells[14][99].visitNumber = 4;
        //            WorldMapCells[15][0].visitNumber = WorldMapCells[15][1].visitNumber = WorldMapCells[15][2].visitNumber = WorldMapCells[15][3].visitNumber = WorldMapCells[15][4].visitNumber = WorldMapCells[15][5].visitNumber = WorldMapCells[15][6].visitNumber = WorldMapCells[15][7].visitNumber = WorldMapCells[15][8].visitNumber = WorldMapCells[15][9].visitNumber = WorldMapCells[15][10].visitNumber = WorldMapCells[15][11].visitNumber = WorldMapCells[15][12].visitNumber = WorldMapCells[15][13].visitNumber = WorldMapCells[15][14].visitNumber = WorldMapCells[15][15].visitNumber = WorldMapCells[15][16].visitNumber = WorldMapCells[15][17].visitNumber = WorldMapCells[15][18].visitNumber = WorldMapCells[15][19].visitNumber = WorldMapCells[15][20].visitNumber = WorldMapCells[15][21].visitNumber = WorldMapCells[15][22].visitNumber = WorldMapCells[15][23].visitNumber = WorldMapCells[15][24].visitNumber = WorldMapCells[15][25].visitNumber = WorldMapCells[15][26].visitNumber = WorldMapCells[15][27].visitNumber = WorldMapCells[15][28].visitNumber = WorldMapCells[15][29].visitNumber = WorldMapCells[15][30].visitNumber = WorldMapCells[15][31].visitNumber = WorldMapCells[15][32].visitNumber = WorldMapCells[15][33].visitNumber = WorldMapCells[15][34].visitNumber = WorldMapCells[15][35].visitNumber = WorldMapCells[15][36].visitNumber = WorldMapCells[15][37].visitNumber = WorldMapCells[15][38].visitNumber = WorldMapCells[15][39].visitNumber = WorldMapCells[15][40].visitNumber = WorldMapCells[15][41].visitNumber = WorldMapCells[15][42].visitNumber = WorldMapCells[15][43].visitNumber = WorldMapCells[15][44].visitNumber = WorldMapCells[15][45].visitNumber = WorldMapCells[15][46].visitNumber = WorldMapCells[15][47].visitNumber = WorldMapCells[15][48].visitNumber = WorldMapCells[15][49].visitNumber = WorldMapCells[15][50].visitNumber = WorldMapCells[15][51].visitNumber = WorldMapCells[15][52].visitNumber = WorldMapCells[15][53].visitNumber = WorldMapCells[15][54].visitNumber = WorldMapCells[15][55].visitNumber = WorldMapCells[15][56].visitNumber = WorldMapCells[15][57].visitNumber = WorldMapCells[15][58].visitNumber = WorldMapCells[15][59].visitNumber = WorldMapCells[15][60].visitNumber = WorldMapCells[15][61].visitNumber = WorldMapCells[15][62].visitNumber = WorldMapCells[15][63].visitNumber = WorldMapCells[15][64].visitNumber = WorldMapCells[15][65].visitNumber = WorldMapCells[15][66].visitNumber = WorldMapCells[15][67].visitNumber = WorldMapCells[15][68].visitNumber = WorldMapCells[15][69].visitNumber = WorldMapCells[15][70].visitNumber = WorldMapCells[15][71].visitNumber = WorldMapCells[15][72].visitNumber = WorldMapCells[15][73].visitNumber = WorldMapCells[15][74].visitNumber = WorldMapCells[15][75].visitNumber = WorldMapCells[15][76].visitNumber = WorldMapCells[15][77].visitNumber = WorldMapCells[15][78].visitNumber = WorldMapCells[15][79].visitNumber = WorldMapCells[15][80].visitNumber = WorldMapCells[15][81].visitNumber = WorldMapCells[15][82].visitNumber = WorldMapCells[15][83].visitNumber = WorldMapCells[15][84].visitNumber = WorldMapCells[15][85].visitNumber = WorldMapCells[15][86].visitNumber = WorldMapCells[15][87].visitNumber = WorldMapCells[15][88].visitNumber = WorldMapCells[15][89].visitNumber = WorldMapCells[15][90].visitNumber = WorldMapCells[15][91].visitNumber = WorldMapCells[15][92].visitNumber = WorldMapCells[15][93].visitNumber = WorldMapCells[15][94].visitNumber = WorldMapCells[15][95].visitNumber = WorldMapCells[15][96].visitNumber = WorldMapCells[15][97].visitNumber = WorldMapCells[15][98].visitNumber = WorldMapCells[15][99].visitNumber = 4;
        //        }
        //        else if (WorldMapCells[7][41].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true)
        //        {
        //            WorldMapCells[6][0].visitNumber = WorldMapCells[6][1].visitNumber = WorldMapCells[6][2].visitNumber = WorldMapCells[6][3].visitNumber = WorldMapCells[6][4].visitNumber = WorldMapCells[6][5].visitNumber = WorldMapCells[6][6].visitNumber = WorldMapCells[6][7].visitNumber = WorldMapCells[6][8].visitNumber = WorldMapCells[6][9].visitNumber = WorldMapCells[6][10].visitNumber = WorldMapCells[6][11].visitNumber = WorldMapCells[6][12].visitNumber = WorldMapCells[6][13].visitNumber = WorldMapCells[6][14].visitNumber = WorldMapCells[6][15].visitNumber = WorldMapCells[6][16].visitNumber = WorldMapCells[6][17].visitNumber = WorldMapCells[6][18].visitNumber = WorldMapCells[6][19].visitNumber = WorldMapCells[6][20].visitNumber = WorldMapCells[6][21].visitNumber = WorldMapCells[6][22].visitNumber = WorldMapCells[6][23].visitNumber = WorldMapCells[6][24].visitNumber = WorldMapCells[6][25].visitNumber = WorldMapCells[6][26].visitNumber = WorldMapCells[6][27].visitNumber = WorldMapCells[6][28].visitNumber = WorldMapCells[6][29].visitNumber = WorldMapCells[6][30].visitNumber = WorldMapCells[6][31].visitNumber = WorldMapCells[6][32].visitNumber = WorldMapCells[6][33].visitNumber = WorldMapCells[6][34].visitNumber = WorldMapCells[6][35].visitNumber = WorldMapCells[6][36].visitNumber = WorldMapCells[6][37].visitNumber = WorldMapCells[6][38].visitNumber = WorldMapCells[6][39].visitNumber = WorldMapCells[6][40].visitNumber = WorldMapCells[6][41].visitNumber = WorldMapCells[6][42].visitNumber = WorldMapCells[6][43].visitNumber = WorldMapCells[6][44].visitNumber = WorldMapCells[6][45].visitNumber = WorldMapCells[6][46].visitNumber = WorldMapCells[6][47].visitNumber = WorldMapCells[6][48].visitNumber = WorldMapCells[6][49].visitNumber = WorldMapCells[6][50].visitNumber = WorldMapCells[6][51].visitNumber = WorldMapCells[6][52].visitNumber = WorldMapCells[6][53].visitNumber = WorldMapCells[6][54].visitNumber = WorldMapCells[6][55].visitNumber = WorldMapCells[6][56].visitNumber = WorldMapCells[6][57].visitNumber = WorldMapCells[6][58].visitNumber = WorldMapCells[6][59].visitNumber = WorldMapCells[6][60].visitNumber = WorldMapCells[6][61].visitNumber = WorldMapCells[6][62].visitNumber = WorldMapCells[6][63].visitNumber = WorldMapCells[6][64].visitNumber = WorldMapCells[6][65].visitNumber = WorldMapCells[6][66].visitNumber = WorldMapCells[6][67].visitNumber = WorldMapCells[6][68].visitNumber = WorldMapCells[6][69].visitNumber = WorldMapCells[6][70].visitNumber = WorldMapCells[6][71].visitNumber = WorldMapCells[6][72].visitNumber = WorldMapCells[6][73].visitNumber = WorldMapCells[6][74].visitNumber = WorldMapCells[6][75].visitNumber = WorldMapCells[6][76].visitNumber = WorldMapCells[6][77].visitNumber = WorldMapCells[6][78].visitNumber = WorldMapCells[6][79].visitNumber = WorldMapCells[6][80].visitNumber = WorldMapCells[6][81].visitNumber = WorldMapCells[6][82].visitNumber = WorldMapCells[6][83].visitNumber = WorldMapCells[6][84].visitNumber = WorldMapCells[6][85].visitNumber = WorldMapCells[6][86].visitNumber = WorldMapCells[6][87].visitNumber = WorldMapCells[6][88].visitNumber = WorldMapCells[6][89].visitNumber = WorldMapCells[6][90].visitNumber = WorldMapCells[6][91].visitNumber = WorldMapCells[6][92].visitNumber = WorldMapCells[6][93].visitNumber = WorldMapCells[6][94].visitNumber = WorldMapCells[6][95].visitNumber = WorldMapCells[6][96].visitNumber = WorldMapCells[6][97].visitNumber = WorldMapCells[6][98].visitNumber = WorldMapCells[6][99].visitNumber = 5;
        //            WorldMapCells[14][0].visitNumber = WorldMapCells[14][1].visitNumber = WorldMapCells[14][2].visitNumber = WorldMapCells[14][3].visitNumber = WorldMapCells[14][4].visitNumber = WorldMapCells[14][5].visitNumber = WorldMapCells[14][6].visitNumber = WorldMapCells[14][7].visitNumber = WorldMapCells[14][8].visitNumber = WorldMapCells[14][9].visitNumber = WorldMapCells[14][10].visitNumber = WorldMapCells[14][11].visitNumber = WorldMapCells[14][12].visitNumber = WorldMapCells[14][13].visitNumber = WorldMapCells[14][14].visitNumber = WorldMapCells[14][15].visitNumber = WorldMapCells[14][16].visitNumber = WorldMapCells[14][17].visitNumber = WorldMapCells[14][18].visitNumber = WorldMapCells[14][19].visitNumber = WorldMapCells[14][20].visitNumber = WorldMapCells[14][21].visitNumber = WorldMapCells[14][22].visitNumber = WorldMapCells[14][23].visitNumber = WorldMapCells[14][24].visitNumber = WorldMapCells[14][25].visitNumber = WorldMapCells[14][26].visitNumber = WorldMapCells[14][27].visitNumber = WorldMapCells[14][28].visitNumber = WorldMapCells[14][29].visitNumber = WorldMapCells[14][30].visitNumber = WorldMapCells[14][31].visitNumber = WorldMapCells[14][32].visitNumber = WorldMapCells[14][33].visitNumber = WorldMapCells[14][34].visitNumber = WorldMapCells[14][35].visitNumber = WorldMapCells[14][36].visitNumber = WorldMapCells[14][37].visitNumber = WorldMapCells[14][38].visitNumber = WorldMapCells[14][39].visitNumber = WorldMapCells[14][40].visitNumber = WorldMapCells[14][41].visitNumber = WorldMapCells[14][42].visitNumber = WorldMapCells[14][43].visitNumber = WorldMapCells[14][44].visitNumber = WorldMapCells[14][45].visitNumber = WorldMapCells[14][46].visitNumber = WorldMapCells[14][47].visitNumber = WorldMapCells[14][48].visitNumber = WorldMapCells[14][49].visitNumber = WorldMapCells[14][50].visitNumber = WorldMapCells[14][51].visitNumber = WorldMapCells[14][52].visitNumber = WorldMapCells[14][53].visitNumber = WorldMapCells[14][54].visitNumber = WorldMapCells[14][55].visitNumber = WorldMapCells[14][56].visitNumber = WorldMapCells[14][57].visitNumber = WorldMapCells[14][58].visitNumber = WorldMapCells[14][59].visitNumber = WorldMapCells[14][60].visitNumber = WorldMapCells[14][61].visitNumber = WorldMapCells[14][62].visitNumber = WorldMapCells[14][63].visitNumber = WorldMapCells[14][64].visitNumber = WorldMapCells[14][65].visitNumber = WorldMapCells[14][66].visitNumber = WorldMapCells[14][67].visitNumber = WorldMapCells[14][68].visitNumber = WorldMapCells[14][69].visitNumber = WorldMapCells[14][70].visitNumber = WorldMapCells[14][71].visitNumber = WorldMapCells[14][72].visitNumber = WorldMapCells[14][73].visitNumber = WorldMapCells[14][74].visitNumber = WorldMapCells[14][75].visitNumber = WorldMapCells[14][76].visitNumber = WorldMapCells[14][77].visitNumber = WorldMapCells[14][78].visitNumber = WorldMapCells[14][79].visitNumber = WorldMapCells[14][80].visitNumber = WorldMapCells[14][81].visitNumber = WorldMapCells[14][82].visitNumber = WorldMapCells[14][83].visitNumber = WorldMapCells[14][84].visitNumber = WorldMapCells[14][85].visitNumber = WorldMapCells[14][86].visitNumber = WorldMapCells[14][87].visitNumber = WorldMapCells[14][88].visitNumber = WorldMapCells[14][89].visitNumber = WorldMapCells[14][90].visitNumber = WorldMapCells[14][91].visitNumber = WorldMapCells[14][92].visitNumber = WorldMapCells[14][93].visitNumber = WorldMapCells[14][94].visitNumber = WorldMapCells[14][95].visitNumber = WorldMapCells[14][96].visitNumber = WorldMapCells[14][97].visitNumber = WorldMapCells[14][98].visitNumber = WorldMapCells[14][99].visitNumber = 5;
        //            WorldMapCells[15][0].visitNumber = WorldMapCells[15][1].visitNumber = WorldMapCells[15][2].visitNumber = WorldMapCells[15][3].visitNumber = WorldMapCells[15][4].visitNumber = WorldMapCells[15][5].visitNumber = WorldMapCells[15][6].visitNumber = WorldMapCells[15][7].visitNumber = WorldMapCells[15][8].visitNumber = WorldMapCells[15][9].visitNumber = WorldMapCells[15][10].visitNumber = WorldMapCells[15][11].visitNumber = WorldMapCells[15][12].visitNumber = WorldMapCells[15][13].visitNumber = WorldMapCells[15][14].visitNumber = WorldMapCells[15][15].visitNumber = WorldMapCells[15][16].visitNumber = WorldMapCells[15][17].visitNumber = WorldMapCells[15][18].visitNumber = WorldMapCells[15][19].visitNumber = WorldMapCells[15][20].visitNumber = WorldMapCells[15][21].visitNumber = WorldMapCells[15][22].visitNumber = WorldMapCells[15][23].visitNumber = WorldMapCells[15][24].visitNumber = WorldMapCells[15][25].visitNumber = WorldMapCells[15][26].visitNumber = WorldMapCells[15][27].visitNumber = WorldMapCells[15][28].visitNumber = WorldMapCells[15][29].visitNumber = WorldMapCells[15][30].visitNumber = WorldMapCells[15][31].visitNumber = WorldMapCells[15][32].visitNumber = WorldMapCells[15][33].visitNumber = WorldMapCells[15][34].visitNumber = WorldMapCells[15][35].visitNumber = WorldMapCells[15][36].visitNumber = WorldMapCells[15][37].visitNumber = WorldMapCells[15][38].visitNumber = WorldMapCells[15][39].visitNumber = WorldMapCells[15][40].visitNumber = WorldMapCells[15][41].visitNumber = WorldMapCells[15][42].visitNumber = WorldMapCells[15][43].visitNumber = WorldMapCells[15][44].visitNumber = WorldMapCells[15][45].visitNumber = WorldMapCells[15][46].visitNumber = WorldMapCells[15][47].visitNumber = WorldMapCells[15][48].visitNumber = WorldMapCells[15][49].visitNumber = WorldMapCells[15][50].visitNumber = WorldMapCells[15][51].visitNumber = WorldMapCells[15][52].visitNumber = WorldMapCells[15][53].visitNumber = WorldMapCells[15][54].visitNumber = WorldMapCells[15][55].visitNumber = WorldMapCells[15][56].visitNumber = WorldMapCells[15][57].visitNumber = WorldMapCells[15][58].visitNumber = WorldMapCells[15][59].visitNumber = WorldMapCells[15][60].visitNumber = WorldMapCells[15][61].visitNumber = WorldMapCells[15][62].visitNumber = WorldMapCells[15][63].visitNumber = WorldMapCells[15][64].visitNumber = WorldMapCells[15][65].visitNumber = WorldMapCells[15][66].visitNumber = WorldMapCells[15][67].visitNumber = WorldMapCells[15][68].visitNumber = WorldMapCells[15][69].visitNumber = WorldMapCells[15][70].visitNumber = WorldMapCells[15][71].visitNumber = WorldMapCells[15][72].visitNumber = WorldMapCells[15][73].visitNumber = WorldMapCells[15][74].visitNumber = WorldMapCells[15][75].visitNumber = WorldMapCells[15][76].visitNumber = WorldMapCells[15][77].visitNumber = WorldMapCells[15][78].visitNumber = WorldMapCells[15][79].visitNumber = WorldMapCells[15][80].visitNumber = WorldMapCells[15][81].visitNumber = WorldMapCells[15][82].visitNumber = WorldMapCells[15][83].visitNumber = WorldMapCells[15][84].visitNumber = WorldMapCells[15][85].visitNumber = WorldMapCells[15][86].visitNumber = WorldMapCells[15][87].visitNumber = WorldMapCells[15][88].visitNumber = WorldMapCells[15][89].visitNumber = WorldMapCells[15][90].visitNumber = WorldMapCells[15][91].visitNumber = WorldMapCells[15][92].visitNumber = WorldMapCells[15][93].visitNumber = WorldMapCells[15][94].visitNumber = WorldMapCells[15][95].visitNumber = WorldMapCells[15][96].visitNumber = WorldMapCells[15][97].visitNumber = WorldMapCells[15][98].visitNumber = WorldMapCells[15][99].visitNumber = 5;
        //        }
        //    }
        //    if (WorldMapCells[CurrentMap][CurrentLocation].mapName == WorldMapCells[7][41].mapName && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == WorldMapCells[7][41].cellLocation && WorldMapCells[7][41].firstVisit == true) //plant
        //    {
        //        WorldMapCells[7][41].firstVisit = false;
        //        if (WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false)
        //        {
        //            WorldMapCells[7][0].visitNumber = WorldMapCells[7][1].visitNumber = WorldMapCells[7][2].visitNumber = WorldMapCells[7][3].visitNumber = WorldMapCells[7][4].visitNumber = WorldMapCells[7][5].visitNumber = WorldMapCells[7][6].visitNumber = WorldMapCells[7][7].visitNumber = WorldMapCells[7][8].visitNumber = WorldMapCells[7][9].visitNumber = WorldMapCells[7][10].visitNumber = WorldMapCells[7][11].visitNumber = WorldMapCells[7][12].visitNumber = WorldMapCells[7][13].visitNumber = WorldMapCells[7][14].visitNumber = WorldMapCells[7][15].visitNumber = WorldMapCells[7][16].visitNumber = WorldMapCells[7][17].visitNumber = WorldMapCells[7][18].visitNumber = WorldMapCells[7][19].visitNumber = WorldMapCells[7][20].visitNumber = WorldMapCells[7][21].visitNumber = WorldMapCells[7][22].visitNumber = WorldMapCells[7][23].visitNumber = WorldMapCells[7][24].visitNumber = WorldMapCells[7][25].visitNumber = WorldMapCells[7][26].visitNumber = WorldMapCells[7][27].visitNumber = WorldMapCells[7][28].visitNumber = WorldMapCells[7][29].visitNumber = WorldMapCells[7][30].visitNumber = WorldMapCells[7][31].visitNumber = WorldMapCells[7][32].visitNumber = WorldMapCells[7][33].visitNumber = WorldMapCells[7][34].visitNumber = WorldMapCells[7][35].visitNumber = WorldMapCells[7][36].visitNumber = WorldMapCells[7][37].visitNumber = WorldMapCells[7][38].visitNumber = WorldMapCells[7][39].visitNumber = WorldMapCells[7][40].visitNumber = WorldMapCells[7][41].visitNumber = WorldMapCells[7][42].visitNumber = WorldMapCells[7][43].visitNumber = WorldMapCells[7][44].visitNumber = WorldMapCells[7][45].visitNumber = WorldMapCells[7][46].visitNumber = WorldMapCells[7][47].visitNumber = WorldMapCells[7][48].visitNumber = WorldMapCells[7][49].visitNumber = WorldMapCells[7][50].visitNumber = WorldMapCells[7][51].visitNumber = WorldMapCells[7][52].visitNumber = WorldMapCells[7][53].visitNumber = WorldMapCells[7][54].visitNumber = WorldMapCells[7][55].visitNumber = WorldMapCells[7][56].visitNumber = WorldMapCells[7][57].visitNumber = WorldMapCells[7][58].visitNumber = WorldMapCells[7][59].visitNumber = WorldMapCells[7][60].visitNumber = WorldMapCells[7][61].visitNumber = WorldMapCells[7][62].visitNumber = WorldMapCells[7][63].visitNumber = WorldMapCells[7][64].visitNumber = WorldMapCells[7][65].visitNumber = WorldMapCells[7][66].visitNumber = WorldMapCells[7][67].visitNumber = WorldMapCells[7][68].visitNumber = WorldMapCells[7][69].visitNumber = WorldMapCells[7][70].visitNumber = WorldMapCells[7][71].visitNumber = WorldMapCells[7][72].visitNumber = WorldMapCells[7][73].visitNumber = WorldMapCells[7][74].visitNumber = WorldMapCells[7][75].visitNumber = WorldMapCells[7][76].visitNumber = WorldMapCells[7][77].visitNumber = WorldMapCells[7][78].visitNumber = WorldMapCells[7][79].visitNumber = WorldMapCells[7][80].visitNumber = WorldMapCells[7][81].visitNumber = WorldMapCells[7][82].visitNumber = WorldMapCells[7][83].visitNumber = WorldMapCells[7][84].visitNumber = WorldMapCells[7][85].visitNumber = WorldMapCells[7][86].visitNumber = WorldMapCells[7][87].visitNumber = WorldMapCells[7][88].visitNumber = WorldMapCells[7][89].visitNumber = WorldMapCells[7][90].visitNumber = WorldMapCells[7][91].visitNumber = WorldMapCells[7][92].visitNumber = WorldMapCells[7][93].visitNumber = WorldMapCells[7][94].visitNumber = WorldMapCells[7][95].visitNumber = WorldMapCells[7][96].visitNumber = WorldMapCells[7][97].visitNumber = WorldMapCells[7][98].visitNumber = WorldMapCells[7][99].visitNumber = 1;
        //            WorldMapCells[17][0].visitNumber = WorldMapCells[17][1].visitNumber = WorldMapCells[17][2].visitNumber = WorldMapCells[17][3].visitNumber = WorldMapCells[17][4].visitNumber = WorldMapCells[17][5].visitNumber = WorldMapCells[17][6].visitNumber = WorldMapCells[17][7].visitNumber = WorldMapCells[17][8].visitNumber = WorldMapCells[17][9].visitNumber = WorldMapCells[17][10].visitNumber = WorldMapCells[17][11].visitNumber = WorldMapCells[17][12].visitNumber = WorldMapCells[17][13].visitNumber = WorldMapCells[17][14].visitNumber = WorldMapCells[17][15].visitNumber = WorldMapCells[17][16].visitNumber = WorldMapCells[17][17].visitNumber = WorldMapCells[17][18].visitNumber = WorldMapCells[17][19].visitNumber = WorldMapCells[17][20].visitNumber = WorldMapCells[17][21].visitNumber = WorldMapCells[17][22].visitNumber = WorldMapCells[17][23].visitNumber = WorldMapCells[17][24].visitNumber = WorldMapCells[17][25].visitNumber = WorldMapCells[17][26].visitNumber = WorldMapCells[17][27].visitNumber = WorldMapCells[17][28].visitNumber = WorldMapCells[17][29].visitNumber = WorldMapCells[17][30].visitNumber = WorldMapCells[17][31].visitNumber = WorldMapCells[17][32].visitNumber = WorldMapCells[17][33].visitNumber = WorldMapCells[17][34].visitNumber = WorldMapCells[17][35].visitNumber = WorldMapCells[17][36].visitNumber = WorldMapCells[17][37].visitNumber = WorldMapCells[17][38].visitNumber = WorldMapCells[17][39].visitNumber = WorldMapCells[17][40].visitNumber = WorldMapCells[17][41].visitNumber = WorldMapCells[17][42].visitNumber = WorldMapCells[17][43].visitNumber = WorldMapCells[17][44].visitNumber = WorldMapCells[17][45].visitNumber = WorldMapCells[17][46].visitNumber = WorldMapCells[17][47].visitNumber = WorldMapCells[17][48].visitNumber = WorldMapCells[17][49].visitNumber = WorldMapCells[17][50].visitNumber = WorldMapCells[17][51].visitNumber = WorldMapCells[17][52].visitNumber = WorldMapCells[17][53].visitNumber = WorldMapCells[17][54].visitNumber = WorldMapCells[17][55].visitNumber = WorldMapCells[17][56].visitNumber = WorldMapCells[17][57].visitNumber = WorldMapCells[17][58].visitNumber = WorldMapCells[17][59].visitNumber = WorldMapCells[17][60].visitNumber = WorldMapCells[17][61].visitNumber = WorldMapCells[17][62].visitNumber = WorldMapCells[17][63].visitNumber = WorldMapCells[17][64].visitNumber = WorldMapCells[17][65].visitNumber = WorldMapCells[17][66].visitNumber = WorldMapCells[17][67].visitNumber = WorldMapCells[17][68].visitNumber = WorldMapCells[17][69].visitNumber = WorldMapCells[17][70].visitNumber = WorldMapCells[17][71].visitNumber = WorldMapCells[17][72].visitNumber = WorldMapCells[17][73].visitNumber = WorldMapCells[17][74].visitNumber = WorldMapCells[17][75].visitNumber = WorldMapCells[17][76].visitNumber = WorldMapCells[17][77].visitNumber = WorldMapCells[17][78].visitNumber = WorldMapCells[17][79].visitNumber = WorldMapCells[17][80].visitNumber = WorldMapCells[17][81].visitNumber = WorldMapCells[17][82].visitNumber = WorldMapCells[17][83].visitNumber = WorldMapCells[17][84].visitNumber = WorldMapCells[17][85].visitNumber = WorldMapCells[17][86].visitNumber = WorldMapCells[17][87].visitNumber = WorldMapCells[17][88].visitNumber = WorldMapCells[17][89].visitNumber = WorldMapCells[17][90].visitNumber = WorldMapCells[17][91].visitNumber = WorldMapCells[17][92].visitNumber = WorldMapCells[17][93].visitNumber = WorldMapCells[17][94].visitNumber = WorldMapCells[17][95].visitNumber = WorldMapCells[17][96].visitNumber = WorldMapCells[17][97].visitNumber = WorldMapCells[17][98].visitNumber = WorldMapCells[17][99].visitNumber = 1;
        //            WorldMapCells[18][0].visitNumber = WorldMapCells[18][1].visitNumber = WorldMapCells[18][2].visitNumber = WorldMapCells[18][3].visitNumber = WorldMapCells[18][4].visitNumber = WorldMapCells[18][5].visitNumber = WorldMapCells[18][6].visitNumber = WorldMapCells[18][7].visitNumber = WorldMapCells[18][8].visitNumber = WorldMapCells[18][9].visitNumber = WorldMapCells[18][10].visitNumber = WorldMapCells[18][11].visitNumber = WorldMapCells[18][12].visitNumber = WorldMapCells[18][13].visitNumber = WorldMapCells[18][14].visitNumber = WorldMapCells[18][15].visitNumber = WorldMapCells[18][16].visitNumber = WorldMapCells[18][17].visitNumber = WorldMapCells[18][18].visitNumber = WorldMapCells[18][19].visitNumber = WorldMapCells[18][20].visitNumber = WorldMapCells[18][21].visitNumber = WorldMapCells[18][22].visitNumber = WorldMapCells[18][23].visitNumber = WorldMapCells[18][24].visitNumber = WorldMapCells[18][25].visitNumber = WorldMapCells[18][26].visitNumber = WorldMapCells[18][27].visitNumber = WorldMapCells[18][28].visitNumber = WorldMapCells[18][29].visitNumber = WorldMapCells[18][30].visitNumber = WorldMapCells[18][31].visitNumber = WorldMapCells[18][32].visitNumber = WorldMapCells[18][33].visitNumber = WorldMapCells[18][34].visitNumber = WorldMapCells[18][35].visitNumber = WorldMapCells[18][36].visitNumber = WorldMapCells[18][37].visitNumber = WorldMapCells[18][38].visitNumber = WorldMapCells[18][39].visitNumber = WorldMapCells[18][40].visitNumber = WorldMapCells[18][41].visitNumber = WorldMapCells[18][42].visitNumber = WorldMapCells[18][43].visitNumber = WorldMapCells[18][44].visitNumber = WorldMapCells[18][45].visitNumber = WorldMapCells[18][46].visitNumber = WorldMapCells[18][47].visitNumber = WorldMapCells[18][48].visitNumber = WorldMapCells[18][49].visitNumber = WorldMapCells[18][50].visitNumber = WorldMapCells[18][51].visitNumber = WorldMapCells[18][52].visitNumber = WorldMapCells[18][53].visitNumber = WorldMapCells[18][54].visitNumber = WorldMapCells[18][55].visitNumber = WorldMapCells[18][56].visitNumber = WorldMapCells[18][57].visitNumber = WorldMapCells[18][58].visitNumber = WorldMapCells[18][59].visitNumber = WorldMapCells[18][60].visitNumber = WorldMapCells[18][61].visitNumber = WorldMapCells[18][62].visitNumber = WorldMapCells[18][63].visitNumber = WorldMapCells[18][64].visitNumber = WorldMapCells[18][65].visitNumber = WorldMapCells[18][66].visitNumber = WorldMapCells[18][67].visitNumber = WorldMapCells[18][68].visitNumber = WorldMapCells[18][69].visitNumber = WorldMapCells[18][70].visitNumber = WorldMapCells[18][71].visitNumber = WorldMapCells[18][72].visitNumber = WorldMapCells[18][73].visitNumber = WorldMapCells[18][74].visitNumber = WorldMapCells[18][75].visitNumber = WorldMapCells[18][76].visitNumber = WorldMapCells[18][77].visitNumber = WorldMapCells[18][78].visitNumber = WorldMapCells[18][79].visitNumber = WorldMapCells[18][80].visitNumber = WorldMapCells[18][81].visitNumber = WorldMapCells[18][82].visitNumber = WorldMapCells[18][83].visitNumber = WorldMapCells[18][84].visitNumber = WorldMapCells[18][85].visitNumber = WorldMapCells[18][86].visitNumber = WorldMapCells[18][87].visitNumber = WorldMapCells[18][88].visitNumber = WorldMapCells[18][89].visitNumber = WorldMapCells[18][90].visitNumber = WorldMapCells[18][91].visitNumber = WorldMapCells[18][92].visitNumber = WorldMapCells[18][93].visitNumber = WorldMapCells[18][94].visitNumber = WorldMapCells[18][95].visitNumber = WorldMapCells[18][96].visitNumber = WorldMapCells[18][97].visitNumber = WorldMapCells[18][98].visitNumber = WorldMapCells[18][99].visitNumber = 1;
        //        }
        //        else if (WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false)
        //        {
        //            WorldMapCells[7][0].visitNumber = WorldMapCells[7][1].visitNumber = WorldMapCells[7][2].visitNumber = WorldMapCells[7][3].visitNumber = WorldMapCells[7][4].visitNumber = WorldMapCells[7][5].visitNumber = WorldMapCells[7][6].visitNumber = WorldMapCells[7][7].visitNumber = WorldMapCells[7][8].visitNumber = WorldMapCells[7][9].visitNumber = WorldMapCells[7][10].visitNumber = WorldMapCells[7][11].visitNumber = WorldMapCells[7][12].visitNumber = WorldMapCells[7][13].visitNumber = WorldMapCells[7][14].visitNumber = WorldMapCells[7][15].visitNumber = WorldMapCells[7][16].visitNumber = WorldMapCells[7][17].visitNumber = WorldMapCells[7][18].visitNumber = WorldMapCells[7][19].visitNumber = WorldMapCells[7][20].visitNumber = WorldMapCells[7][21].visitNumber = WorldMapCells[7][22].visitNumber = WorldMapCells[7][23].visitNumber = WorldMapCells[7][24].visitNumber = WorldMapCells[7][25].visitNumber = WorldMapCells[7][26].visitNumber = WorldMapCells[7][27].visitNumber = WorldMapCells[7][28].visitNumber = WorldMapCells[7][29].visitNumber = WorldMapCells[7][30].visitNumber = WorldMapCells[7][31].visitNumber = WorldMapCells[7][32].visitNumber = WorldMapCells[7][33].visitNumber = WorldMapCells[7][34].visitNumber = WorldMapCells[7][35].visitNumber = WorldMapCells[7][36].visitNumber = WorldMapCells[7][37].visitNumber = WorldMapCells[7][38].visitNumber = WorldMapCells[7][39].visitNumber = WorldMapCells[7][40].visitNumber = WorldMapCells[7][41].visitNumber = WorldMapCells[7][42].visitNumber = WorldMapCells[7][43].visitNumber = WorldMapCells[7][44].visitNumber = WorldMapCells[7][45].visitNumber = WorldMapCells[7][46].visitNumber = WorldMapCells[7][47].visitNumber = WorldMapCells[7][48].visitNumber = WorldMapCells[7][49].visitNumber = WorldMapCells[7][50].visitNumber = WorldMapCells[7][51].visitNumber = WorldMapCells[7][52].visitNumber = WorldMapCells[7][53].visitNumber = WorldMapCells[7][54].visitNumber = WorldMapCells[7][55].visitNumber = WorldMapCells[7][56].visitNumber = WorldMapCells[7][57].visitNumber = WorldMapCells[7][58].visitNumber = WorldMapCells[7][59].visitNumber = WorldMapCells[7][60].visitNumber = WorldMapCells[7][61].visitNumber = WorldMapCells[7][62].visitNumber = WorldMapCells[7][63].visitNumber = WorldMapCells[7][64].visitNumber = WorldMapCells[7][65].visitNumber = WorldMapCells[7][66].visitNumber = WorldMapCells[7][67].visitNumber = WorldMapCells[7][68].visitNumber = WorldMapCells[7][69].visitNumber = WorldMapCells[7][70].visitNumber = WorldMapCells[7][71].visitNumber = WorldMapCells[7][72].visitNumber = WorldMapCells[7][73].visitNumber = WorldMapCells[7][74].visitNumber = WorldMapCells[7][75].visitNumber = WorldMapCells[7][76].visitNumber = WorldMapCells[7][77].visitNumber = WorldMapCells[7][78].visitNumber = WorldMapCells[7][79].visitNumber = WorldMapCells[7][80].visitNumber = WorldMapCells[7][81].visitNumber = WorldMapCells[7][82].visitNumber = WorldMapCells[7][83].visitNumber = WorldMapCells[7][84].visitNumber = WorldMapCells[7][85].visitNumber = WorldMapCells[7][86].visitNumber = WorldMapCells[7][87].visitNumber = WorldMapCells[7][88].visitNumber = WorldMapCells[7][89].visitNumber = WorldMapCells[7][90].visitNumber = WorldMapCells[7][91].visitNumber = WorldMapCells[7][92].visitNumber = WorldMapCells[7][93].visitNumber = WorldMapCells[7][94].visitNumber = WorldMapCells[7][95].visitNumber = WorldMapCells[7][96].visitNumber = WorldMapCells[7][97].visitNumber = WorldMapCells[7][98].visitNumber = WorldMapCells[7][99].visitNumber = 2;
        //            WorldMapCells[17][0].visitNumber = WorldMapCells[17][1].visitNumber = WorldMapCells[17][2].visitNumber = WorldMapCells[17][3].visitNumber = WorldMapCells[17][4].visitNumber = WorldMapCells[17][5].visitNumber = WorldMapCells[17][6].visitNumber = WorldMapCells[17][7].visitNumber = WorldMapCells[17][8].visitNumber = WorldMapCells[17][9].visitNumber = WorldMapCells[17][10].visitNumber = WorldMapCells[17][11].visitNumber = WorldMapCells[17][12].visitNumber = WorldMapCells[17][13].visitNumber = WorldMapCells[17][14].visitNumber = WorldMapCells[17][15].visitNumber = WorldMapCells[17][16].visitNumber = WorldMapCells[17][17].visitNumber = WorldMapCells[17][18].visitNumber = WorldMapCells[17][19].visitNumber = WorldMapCells[17][20].visitNumber = WorldMapCells[17][21].visitNumber = WorldMapCells[17][22].visitNumber = WorldMapCells[17][23].visitNumber = WorldMapCells[17][24].visitNumber = WorldMapCells[17][25].visitNumber = WorldMapCells[17][26].visitNumber = WorldMapCells[17][27].visitNumber = WorldMapCells[17][28].visitNumber = WorldMapCells[17][29].visitNumber = WorldMapCells[17][30].visitNumber = WorldMapCells[17][31].visitNumber = WorldMapCells[17][32].visitNumber = WorldMapCells[17][33].visitNumber = WorldMapCells[17][34].visitNumber = WorldMapCells[17][35].visitNumber = WorldMapCells[17][36].visitNumber = WorldMapCells[17][37].visitNumber = WorldMapCells[17][38].visitNumber = WorldMapCells[17][39].visitNumber = WorldMapCells[17][40].visitNumber = WorldMapCells[17][41].visitNumber = WorldMapCells[17][42].visitNumber = WorldMapCells[17][43].visitNumber = WorldMapCells[17][44].visitNumber = WorldMapCells[17][45].visitNumber = WorldMapCells[17][46].visitNumber = WorldMapCells[17][47].visitNumber = WorldMapCells[17][48].visitNumber = WorldMapCells[17][49].visitNumber = WorldMapCells[17][50].visitNumber = WorldMapCells[17][51].visitNumber = WorldMapCells[17][52].visitNumber = WorldMapCells[17][53].visitNumber = WorldMapCells[17][54].visitNumber = WorldMapCells[17][55].visitNumber = WorldMapCells[17][56].visitNumber = WorldMapCells[17][57].visitNumber = WorldMapCells[17][58].visitNumber = WorldMapCells[17][59].visitNumber = WorldMapCells[17][60].visitNumber = WorldMapCells[17][61].visitNumber = WorldMapCells[17][62].visitNumber = WorldMapCells[17][63].visitNumber = WorldMapCells[17][64].visitNumber = WorldMapCells[17][65].visitNumber = WorldMapCells[17][66].visitNumber = WorldMapCells[17][67].visitNumber = WorldMapCells[17][68].visitNumber = WorldMapCells[17][69].visitNumber = WorldMapCells[17][70].visitNumber = WorldMapCells[17][71].visitNumber = WorldMapCells[17][72].visitNumber = WorldMapCells[17][73].visitNumber = WorldMapCells[17][74].visitNumber = WorldMapCells[17][75].visitNumber = WorldMapCells[17][76].visitNumber = WorldMapCells[17][77].visitNumber = WorldMapCells[17][78].visitNumber = WorldMapCells[17][79].visitNumber = WorldMapCells[17][80].visitNumber = WorldMapCells[17][81].visitNumber = WorldMapCells[17][82].visitNumber = WorldMapCells[17][83].visitNumber = WorldMapCells[17][84].visitNumber = WorldMapCells[17][85].visitNumber = WorldMapCells[17][86].visitNumber = WorldMapCells[17][87].visitNumber = WorldMapCells[17][88].visitNumber = WorldMapCells[17][89].visitNumber = WorldMapCells[17][90].visitNumber = WorldMapCells[17][91].visitNumber = WorldMapCells[17][92].visitNumber = WorldMapCells[17][93].visitNumber = WorldMapCells[17][94].visitNumber = WorldMapCells[17][95].visitNumber = WorldMapCells[17][96].visitNumber = WorldMapCells[17][97].visitNumber = WorldMapCells[17][98].visitNumber = WorldMapCells[17][99].visitNumber = 2;
        //            WorldMapCells[18][0].visitNumber = WorldMapCells[18][1].visitNumber = WorldMapCells[18][2].visitNumber = WorldMapCells[18][3].visitNumber = WorldMapCells[18][4].visitNumber = WorldMapCells[18][5].visitNumber = WorldMapCells[18][6].visitNumber = WorldMapCells[18][7].visitNumber = WorldMapCells[18][8].visitNumber = WorldMapCells[18][9].visitNumber = WorldMapCells[18][10].visitNumber = WorldMapCells[18][11].visitNumber = WorldMapCells[18][12].visitNumber = WorldMapCells[18][13].visitNumber = WorldMapCells[18][14].visitNumber = WorldMapCells[18][15].visitNumber = WorldMapCells[18][16].visitNumber = WorldMapCells[18][17].visitNumber = WorldMapCells[18][18].visitNumber = WorldMapCells[18][19].visitNumber = WorldMapCells[18][20].visitNumber = WorldMapCells[18][21].visitNumber = WorldMapCells[18][22].visitNumber = WorldMapCells[18][23].visitNumber = WorldMapCells[18][24].visitNumber = WorldMapCells[18][25].visitNumber = WorldMapCells[18][26].visitNumber = WorldMapCells[18][27].visitNumber = WorldMapCells[18][28].visitNumber = WorldMapCells[18][29].visitNumber = WorldMapCells[18][30].visitNumber = WorldMapCells[18][31].visitNumber = WorldMapCells[18][32].visitNumber = WorldMapCells[18][33].visitNumber = WorldMapCells[18][34].visitNumber = WorldMapCells[18][35].visitNumber = WorldMapCells[18][36].visitNumber = WorldMapCells[18][37].visitNumber = WorldMapCells[18][38].visitNumber = WorldMapCells[18][39].visitNumber = WorldMapCells[18][40].visitNumber = WorldMapCells[18][41].visitNumber = WorldMapCells[18][42].visitNumber = WorldMapCells[18][43].visitNumber = WorldMapCells[18][44].visitNumber = WorldMapCells[18][45].visitNumber = WorldMapCells[18][46].visitNumber = WorldMapCells[18][47].visitNumber = WorldMapCells[18][48].visitNumber = WorldMapCells[18][49].visitNumber = WorldMapCells[18][50].visitNumber = WorldMapCells[18][51].visitNumber = WorldMapCells[18][52].visitNumber = WorldMapCells[18][53].visitNumber = WorldMapCells[18][54].visitNumber = WorldMapCells[18][55].visitNumber = WorldMapCells[18][56].visitNumber = WorldMapCells[18][57].visitNumber = WorldMapCells[18][58].visitNumber = WorldMapCells[18][59].visitNumber = WorldMapCells[18][60].visitNumber = WorldMapCells[18][61].visitNumber = WorldMapCells[18][62].visitNumber = WorldMapCells[18][63].visitNumber = WorldMapCells[18][64].visitNumber = WorldMapCells[18][65].visitNumber = WorldMapCells[18][66].visitNumber = WorldMapCells[18][67].visitNumber = WorldMapCells[18][68].visitNumber = WorldMapCells[18][69].visitNumber = WorldMapCells[18][70].visitNumber = WorldMapCells[18][71].visitNumber = WorldMapCells[18][72].visitNumber = WorldMapCells[18][73].visitNumber = WorldMapCells[18][74].visitNumber = WorldMapCells[18][75].visitNumber = WorldMapCells[18][76].visitNumber = WorldMapCells[18][77].visitNumber = WorldMapCells[18][78].visitNumber = WorldMapCells[18][79].visitNumber = WorldMapCells[18][80].visitNumber = WorldMapCells[18][81].visitNumber = WorldMapCells[18][82].visitNumber = WorldMapCells[18][83].visitNumber = WorldMapCells[18][84].visitNumber = WorldMapCells[18][85].visitNumber = WorldMapCells[18][86].visitNumber = WorldMapCells[18][87].visitNumber = WorldMapCells[18][88].visitNumber = WorldMapCells[18][89].visitNumber = WorldMapCells[18][90].visitNumber = WorldMapCells[18][91].visitNumber = WorldMapCells[18][92].visitNumber = WorldMapCells[18][93].visitNumber = WorldMapCells[18][94].visitNumber = WorldMapCells[18][95].visitNumber = WorldMapCells[18][96].visitNumber = WorldMapCells[18][97].visitNumber = WorldMapCells[18][98].visitNumber = WorldMapCells[18][99].visitNumber = 2;
        //        }
        //        else if (WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true)
        //        {
        //            WorldMapCells[7][0].visitNumber = WorldMapCells[7][1].visitNumber = WorldMapCells[7][2].visitNumber = WorldMapCells[7][3].visitNumber = WorldMapCells[7][4].visitNumber = WorldMapCells[7][5].visitNumber = WorldMapCells[7][6].visitNumber = WorldMapCells[7][7].visitNumber = WorldMapCells[7][8].visitNumber = WorldMapCells[7][9].visitNumber = WorldMapCells[7][10].visitNumber = WorldMapCells[7][11].visitNumber = WorldMapCells[7][12].visitNumber = WorldMapCells[7][13].visitNumber = WorldMapCells[7][14].visitNumber = WorldMapCells[7][15].visitNumber = WorldMapCells[7][16].visitNumber = WorldMapCells[7][17].visitNumber = WorldMapCells[7][18].visitNumber = WorldMapCells[7][19].visitNumber = WorldMapCells[7][20].visitNumber = WorldMapCells[7][21].visitNumber = WorldMapCells[7][22].visitNumber = WorldMapCells[7][23].visitNumber = WorldMapCells[7][24].visitNumber = WorldMapCells[7][25].visitNumber = WorldMapCells[7][26].visitNumber = WorldMapCells[7][27].visitNumber = WorldMapCells[7][28].visitNumber = WorldMapCells[7][29].visitNumber = WorldMapCells[7][30].visitNumber = WorldMapCells[7][31].visitNumber = WorldMapCells[7][32].visitNumber = WorldMapCells[7][33].visitNumber = WorldMapCells[7][34].visitNumber = WorldMapCells[7][35].visitNumber = WorldMapCells[7][36].visitNumber = WorldMapCells[7][37].visitNumber = WorldMapCells[7][38].visitNumber = WorldMapCells[7][39].visitNumber = WorldMapCells[7][40].visitNumber = WorldMapCells[7][41].visitNumber = WorldMapCells[7][42].visitNumber = WorldMapCells[7][43].visitNumber = WorldMapCells[7][44].visitNumber = WorldMapCells[7][45].visitNumber = WorldMapCells[7][46].visitNumber = WorldMapCells[7][47].visitNumber = WorldMapCells[7][48].visitNumber = WorldMapCells[7][49].visitNumber = WorldMapCells[7][50].visitNumber = WorldMapCells[7][51].visitNumber = WorldMapCells[7][52].visitNumber = WorldMapCells[7][53].visitNumber = WorldMapCells[7][54].visitNumber = WorldMapCells[7][55].visitNumber = WorldMapCells[7][56].visitNumber = WorldMapCells[7][57].visitNumber = WorldMapCells[7][58].visitNumber = WorldMapCells[7][59].visitNumber = WorldMapCells[7][60].visitNumber = WorldMapCells[7][61].visitNumber = WorldMapCells[7][62].visitNumber = WorldMapCells[7][63].visitNumber = WorldMapCells[7][64].visitNumber = WorldMapCells[7][65].visitNumber = WorldMapCells[7][66].visitNumber = WorldMapCells[7][67].visitNumber = WorldMapCells[7][68].visitNumber = WorldMapCells[7][69].visitNumber = WorldMapCells[7][70].visitNumber = WorldMapCells[7][71].visitNumber = WorldMapCells[7][72].visitNumber = WorldMapCells[7][73].visitNumber = WorldMapCells[7][74].visitNumber = WorldMapCells[7][75].visitNumber = WorldMapCells[7][76].visitNumber = WorldMapCells[7][77].visitNumber = WorldMapCells[7][78].visitNumber = WorldMapCells[7][79].visitNumber = WorldMapCells[7][80].visitNumber = WorldMapCells[7][81].visitNumber = WorldMapCells[7][82].visitNumber = WorldMapCells[7][83].visitNumber = WorldMapCells[7][84].visitNumber = WorldMapCells[7][85].visitNumber = WorldMapCells[7][86].visitNumber = WorldMapCells[7][87].visitNumber = WorldMapCells[7][88].visitNumber = WorldMapCells[7][89].visitNumber = WorldMapCells[7][90].visitNumber = WorldMapCells[7][91].visitNumber = WorldMapCells[7][92].visitNumber = WorldMapCells[7][93].visitNumber = WorldMapCells[7][94].visitNumber = WorldMapCells[7][95].visitNumber = WorldMapCells[7][96].visitNumber = WorldMapCells[7][97].visitNumber = WorldMapCells[7][98].visitNumber = WorldMapCells[7][99].visitNumber = 3;
        //            WorldMapCells[17][0].visitNumber = WorldMapCells[17][1].visitNumber = WorldMapCells[17][2].visitNumber = WorldMapCells[17][3].visitNumber = WorldMapCells[17][4].visitNumber = WorldMapCells[17][5].visitNumber = WorldMapCells[17][6].visitNumber = WorldMapCells[17][7].visitNumber = WorldMapCells[17][8].visitNumber = WorldMapCells[17][9].visitNumber = WorldMapCells[17][10].visitNumber = WorldMapCells[17][11].visitNumber = WorldMapCells[17][12].visitNumber = WorldMapCells[17][13].visitNumber = WorldMapCells[17][14].visitNumber = WorldMapCells[17][15].visitNumber = WorldMapCells[17][16].visitNumber = WorldMapCells[17][17].visitNumber = WorldMapCells[17][18].visitNumber = WorldMapCells[17][19].visitNumber = WorldMapCells[17][20].visitNumber = WorldMapCells[17][21].visitNumber = WorldMapCells[17][22].visitNumber = WorldMapCells[17][23].visitNumber = WorldMapCells[17][24].visitNumber = WorldMapCells[17][25].visitNumber = WorldMapCells[17][26].visitNumber = WorldMapCells[17][27].visitNumber = WorldMapCells[17][28].visitNumber = WorldMapCells[17][29].visitNumber = WorldMapCells[17][30].visitNumber = WorldMapCells[17][31].visitNumber = WorldMapCells[17][32].visitNumber = WorldMapCells[17][33].visitNumber = WorldMapCells[17][34].visitNumber = WorldMapCells[17][35].visitNumber = WorldMapCells[17][36].visitNumber = WorldMapCells[17][37].visitNumber = WorldMapCells[17][38].visitNumber = WorldMapCells[17][39].visitNumber = WorldMapCells[17][40].visitNumber = WorldMapCells[17][41].visitNumber = WorldMapCells[17][42].visitNumber = WorldMapCells[17][43].visitNumber = WorldMapCells[17][44].visitNumber = WorldMapCells[17][45].visitNumber = WorldMapCells[17][46].visitNumber = WorldMapCells[17][47].visitNumber = WorldMapCells[17][48].visitNumber = WorldMapCells[17][49].visitNumber = WorldMapCells[17][50].visitNumber = WorldMapCells[17][51].visitNumber = WorldMapCells[17][52].visitNumber = WorldMapCells[17][53].visitNumber = WorldMapCells[17][54].visitNumber = WorldMapCells[17][55].visitNumber = WorldMapCells[17][56].visitNumber = WorldMapCells[17][57].visitNumber = WorldMapCells[17][58].visitNumber = WorldMapCells[17][59].visitNumber = WorldMapCells[17][60].visitNumber = WorldMapCells[17][61].visitNumber = WorldMapCells[17][62].visitNumber = WorldMapCells[17][63].visitNumber = WorldMapCells[17][64].visitNumber = WorldMapCells[17][65].visitNumber = WorldMapCells[17][66].visitNumber = WorldMapCells[17][67].visitNumber = WorldMapCells[17][68].visitNumber = WorldMapCells[17][69].visitNumber = WorldMapCells[17][70].visitNumber = WorldMapCells[17][71].visitNumber = WorldMapCells[17][72].visitNumber = WorldMapCells[17][73].visitNumber = WorldMapCells[17][74].visitNumber = WorldMapCells[17][75].visitNumber = WorldMapCells[17][76].visitNumber = WorldMapCells[17][77].visitNumber = WorldMapCells[17][78].visitNumber = WorldMapCells[17][79].visitNumber = WorldMapCells[17][80].visitNumber = WorldMapCells[17][81].visitNumber = WorldMapCells[17][82].visitNumber = WorldMapCells[17][83].visitNumber = WorldMapCells[17][84].visitNumber = WorldMapCells[17][85].visitNumber = WorldMapCells[17][86].visitNumber = WorldMapCells[17][87].visitNumber = WorldMapCells[17][88].visitNumber = WorldMapCells[17][89].visitNumber = WorldMapCells[17][90].visitNumber = WorldMapCells[17][91].visitNumber = WorldMapCells[17][92].visitNumber = WorldMapCells[17][93].visitNumber = WorldMapCells[17][94].visitNumber = WorldMapCells[17][95].visitNumber = WorldMapCells[17][96].visitNumber = WorldMapCells[17][97].visitNumber = WorldMapCells[17][98].visitNumber = WorldMapCells[17][99].visitNumber = 3;
        //            WorldMapCells[18][0].visitNumber = WorldMapCells[18][1].visitNumber = WorldMapCells[18][2].visitNumber = WorldMapCells[18][3].visitNumber = WorldMapCells[18][4].visitNumber = WorldMapCells[18][5].visitNumber = WorldMapCells[18][6].visitNumber = WorldMapCells[18][7].visitNumber = WorldMapCells[18][8].visitNumber = WorldMapCells[18][9].visitNumber = WorldMapCells[18][10].visitNumber = WorldMapCells[18][11].visitNumber = WorldMapCells[18][12].visitNumber = WorldMapCells[18][13].visitNumber = WorldMapCells[18][14].visitNumber = WorldMapCells[18][15].visitNumber = WorldMapCells[18][16].visitNumber = WorldMapCells[18][17].visitNumber = WorldMapCells[18][18].visitNumber = WorldMapCells[18][19].visitNumber = WorldMapCells[18][20].visitNumber = WorldMapCells[18][21].visitNumber = WorldMapCells[18][22].visitNumber = WorldMapCells[18][23].visitNumber = WorldMapCells[18][24].visitNumber = WorldMapCells[18][25].visitNumber = WorldMapCells[18][26].visitNumber = WorldMapCells[18][27].visitNumber = WorldMapCells[18][28].visitNumber = WorldMapCells[18][29].visitNumber = WorldMapCells[18][30].visitNumber = WorldMapCells[18][31].visitNumber = WorldMapCells[18][32].visitNumber = WorldMapCells[18][33].visitNumber = WorldMapCells[18][34].visitNumber = WorldMapCells[18][35].visitNumber = WorldMapCells[18][36].visitNumber = WorldMapCells[18][37].visitNumber = WorldMapCells[18][38].visitNumber = WorldMapCells[18][39].visitNumber = WorldMapCells[18][40].visitNumber = WorldMapCells[18][41].visitNumber = WorldMapCells[18][42].visitNumber = WorldMapCells[18][43].visitNumber = WorldMapCells[18][44].visitNumber = WorldMapCells[18][45].visitNumber = WorldMapCells[18][46].visitNumber = WorldMapCells[18][47].visitNumber = WorldMapCells[18][48].visitNumber = WorldMapCells[18][49].visitNumber = WorldMapCells[18][50].visitNumber = WorldMapCells[18][51].visitNumber = WorldMapCells[18][52].visitNumber = WorldMapCells[18][53].visitNumber = WorldMapCells[18][54].visitNumber = WorldMapCells[18][55].visitNumber = WorldMapCells[18][56].visitNumber = WorldMapCells[18][57].visitNumber = WorldMapCells[18][58].visitNumber = WorldMapCells[18][59].visitNumber = WorldMapCells[18][60].visitNumber = WorldMapCells[18][61].visitNumber = WorldMapCells[18][62].visitNumber = WorldMapCells[18][63].visitNumber = WorldMapCells[18][64].visitNumber = WorldMapCells[18][65].visitNumber = WorldMapCells[18][66].visitNumber = WorldMapCells[18][67].visitNumber = WorldMapCells[18][68].visitNumber = WorldMapCells[18][69].visitNumber = WorldMapCells[18][70].visitNumber = WorldMapCells[18][71].visitNumber = WorldMapCells[18][72].visitNumber = WorldMapCells[18][73].visitNumber = WorldMapCells[18][74].visitNumber = WorldMapCells[18][75].visitNumber = WorldMapCells[18][76].visitNumber = WorldMapCells[18][77].visitNumber = WorldMapCells[18][78].visitNumber = WorldMapCells[18][79].visitNumber = WorldMapCells[18][80].visitNumber = WorldMapCells[18][81].visitNumber = WorldMapCells[18][82].visitNumber = WorldMapCells[18][83].visitNumber = WorldMapCells[18][84].visitNumber = WorldMapCells[18][85].visitNumber = WorldMapCells[18][86].visitNumber = WorldMapCells[18][87].visitNumber = WorldMapCells[18][88].visitNumber = WorldMapCells[18][89].visitNumber = WorldMapCells[18][90].visitNumber = WorldMapCells[18][91].visitNumber = WorldMapCells[18][92].visitNumber = WorldMapCells[18][93].visitNumber = WorldMapCells[18][94].visitNumber = WorldMapCells[18][95].visitNumber = WorldMapCells[18][96].visitNumber = WorldMapCells[18][97].visitNumber = WorldMapCells[18][98].visitNumber = WorldMapCells[18][99].visitNumber = 3;
        //        }
        //        else if (WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true)
        //        {
        //            WorldMapCells[7][0].visitNumber = WorldMapCells[7][1].visitNumber = WorldMapCells[7][2].visitNumber = WorldMapCells[7][3].visitNumber = WorldMapCells[7][4].visitNumber = WorldMapCells[7][5].visitNumber = WorldMapCells[7][6].visitNumber = WorldMapCells[7][7].visitNumber = WorldMapCells[7][8].visitNumber = WorldMapCells[7][9].visitNumber = WorldMapCells[7][10].visitNumber = WorldMapCells[7][11].visitNumber = WorldMapCells[7][12].visitNumber = WorldMapCells[7][13].visitNumber = WorldMapCells[7][14].visitNumber = WorldMapCells[7][15].visitNumber = WorldMapCells[7][16].visitNumber = WorldMapCells[7][17].visitNumber = WorldMapCells[7][18].visitNumber = WorldMapCells[7][19].visitNumber = WorldMapCells[7][20].visitNumber = WorldMapCells[7][21].visitNumber = WorldMapCells[7][22].visitNumber = WorldMapCells[7][23].visitNumber = WorldMapCells[7][24].visitNumber = WorldMapCells[7][25].visitNumber = WorldMapCells[7][26].visitNumber = WorldMapCells[7][27].visitNumber = WorldMapCells[7][28].visitNumber = WorldMapCells[7][29].visitNumber = WorldMapCells[7][30].visitNumber = WorldMapCells[7][31].visitNumber = WorldMapCells[7][32].visitNumber = WorldMapCells[7][33].visitNumber = WorldMapCells[7][34].visitNumber = WorldMapCells[7][35].visitNumber = WorldMapCells[7][36].visitNumber = WorldMapCells[7][37].visitNumber = WorldMapCells[7][38].visitNumber = WorldMapCells[7][39].visitNumber = WorldMapCells[7][40].visitNumber = WorldMapCells[7][41].visitNumber = WorldMapCells[7][42].visitNumber = WorldMapCells[7][43].visitNumber = WorldMapCells[7][44].visitNumber = WorldMapCells[7][45].visitNumber = WorldMapCells[7][46].visitNumber = WorldMapCells[7][47].visitNumber = WorldMapCells[7][48].visitNumber = WorldMapCells[7][49].visitNumber = WorldMapCells[7][50].visitNumber = WorldMapCells[7][51].visitNumber = WorldMapCells[7][52].visitNumber = WorldMapCells[7][53].visitNumber = WorldMapCells[7][54].visitNumber = WorldMapCells[7][55].visitNumber = WorldMapCells[7][56].visitNumber = WorldMapCells[7][57].visitNumber = WorldMapCells[7][58].visitNumber = WorldMapCells[7][59].visitNumber = WorldMapCells[7][60].visitNumber = WorldMapCells[7][61].visitNumber = WorldMapCells[7][62].visitNumber = WorldMapCells[7][63].visitNumber = WorldMapCells[7][64].visitNumber = WorldMapCells[7][65].visitNumber = WorldMapCells[7][66].visitNumber = WorldMapCells[7][67].visitNumber = WorldMapCells[7][68].visitNumber = WorldMapCells[7][69].visitNumber = WorldMapCells[7][70].visitNumber = WorldMapCells[7][71].visitNumber = WorldMapCells[7][72].visitNumber = WorldMapCells[7][73].visitNumber = WorldMapCells[7][74].visitNumber = WorldMapCells[7][75].visitNumber = WorldMapCells[7][76].visitNumber = WorldMapCells[7][77].visitNumber = WorldMapCells[7][78].visitNumber = WorldMapCells[7][79].visitNumber = WorldMapCells[7][80].visitNumber = WorldMapCells[7][81].visitNumber = WorldMapCells[7][82].visitNumber = WorldMapCells[7][83].visitNumber = WorldMapCells[7][84].visitNumber = WorldMapCells[7][85].visitNumber = WorldMapCells[7][86].visitNumber = WorldMapCells[7][87].visitNumber = WorldMapCells[7][88].visitNumber = WorldMapCells[7][89].visitNumber = WorldMapCells[7][90].visitNumber = WorldMapCells[7][91].visitNumber = WorldMapCells[7][92].visitNumber = WorldMapCells[7][93].visitNumber = WorldMapCells[7][94].visitNumber = WorldMapCells[7][95].visitNumber = WorldMapCells[7][96].visitNumber = WorldMapCells[7][97].visitNumber = WorldMapCells[7][98].visitNumber = WorldMapCells[7][99].visitNumber = 4;
        //            WorldMapCells[17][0].visitNumber = WorldMapCells[17][1].visitNumber = WorldMapCells[17][2].visitNumber = WorldMapCells[17][3].visitNumber = WorldMapCells[17][4].visitNumber = WorldMapCells[17][5].visitNumber = WorldMapCells[17][6].visitNumber = WorldMapCells[17][7].visitNumber = WorldMapCells[17][8].visitNumber = WorldMapCells[17][9].visitNumber = WorldMapCells[17][10].visitNumber = WorldMapCells[17][11].visitNumber = WorldMapCells[17][12].visitNumber = WorldMapCells[17][13].visitNumber = WorldMapCells[17][14].visitNumber = WorldMapCells[17][15].visitNumber = WorldMapCells[17][16].visitNumber = WorldMapCells[17][17].visitNumber = WorldMapCells[17][18].visitNumber = WorldMapCells[17][19].visitNumber = WorldMapCells[17][20].visitNumber = WorldMapCells[17][21].visitNumber = WorldMapCells[17][22].visitNumber = WorldMapCells[17][23].visitNumber = WorldMapCells[17][24].visitNumber = WorldMapCells[17][25].visitNumber = WorldMapCells[17][26].visitNumber = WorldMapCells[17][27].visitNumber = WorldMapCells[17][28].visitNumber = WorldMapCells[17][29].visitNumber = WorldMapCells[17][30].visitNumber = WorldMapCells[17][31].visitNumber = WorldMapCells[17][32].visitNumber = WorldMapCells[17][33].visitNumber = WorldMapCells[17][34].visitNumber = WorldMapCells[17][35].visitNumber = WorldMapCells[17][36].visitNumber = WorldMapCells[17][37].visitNumber = WorldMapCells[17][38].visitNumber = WorldMapCells[17][39].visitNumber = WorldMapCells[17][40].visitNumber = WorldMapCells[17][41].visitNumber = WorldMapCells[17][42].visitNumber = WorldMapCells[17][43].visitNumber = WorldMapCells[17][44].visitNumber = WorldMapCells[17][45].visitNumber = WorldMapCells[17][46].visitNumber = WorldMapCells[17][47].visitNumber = WorldMapCells[17][48].visitNumber = WorldMapCells[17][49].visitNumber = WorldMapCells[17][50].visitNumber = WorldMapCells[17][51].visitNumber = WorldMapCells[17][52].visitNumber = WorldMapCells[17][53].visitNumber = WorldMapCells[17][54].visitNumber = WorldMapCells[17][55].visitNumber = WorldMapCells[17][56].visitNumber = WorldMapCells[17][57].visitNumber = WorldMapCells[17][58].visitNumber = WorldMapCells[17][59].visitNumber = WorldMapCells[17][60].visitNumber = WorldMapCells[17][61].visitNumber = WorldMapCells[17][62].visitNumber = WorldMapCells[17][63].visitNumber = WorldMapCells[17][64].visitNumber = WorldMapCells[17][65].visitNumber = WorldMapCells[17][66].visitNumber = WorldMapCells[17][67].visitNumber = WorldMapCells[17][68].visitNumber = WorldMapCells[17][69].visitNumber = WorldMapCells[17][70].visitNumber = WorldMapCells[17][71].visitNumber = WorldMapCells[17][72].visitNumber = WorldMapCells[17][73].visitNumber = WorldMapCells[17][74].visitNumber = WorldMapCells[17][75].visitNumber = WorldMapCells[17][76].visitNumber = WorldMapCells[17][77].visitNumber = WorldMapCells[17][78].visitNumber = WorldMapCells[17][79].visitNumber = WorldMapCells[17][80].visitNumber = WorldMapCells[17][81].visitNumber = WorldMapCells[17][82].visitNumber = WorldMapCells[17][83].visitNumber = WorldMapCells[17][84].visitNumber = WorldMapCells[17][85].visitNumber = WorldMapCells[17][86].visitNumber = WorldMapCells[17][87].visitNumber = WorldMapCells[17][88].visitNumber = WorldMapCells[17][89].visitNumber = WorldMapCells[17][90].visitNumber = WorldMapCells[17][91].visitNumber = WorldMapCells[17][92].visitNumber = WorldMapCells[17][93].visitNumber = WorldMapCells[17][94].visitNumber = WorldMapCells[17][95].visitNumber = WorldMapCells[17][96].visitNumber = WorldMapCells[17][97].visitNumber = WorldMapCells[17][98].visitNumber = WorldMapCells[17][99].visitNumber = 4;
        //            WorldMapCells[18][0].visitNumber = WorldMapCells[18][1].visitNumber = WorldMapCells[18][2].visitNumber = WorldMapCells[18][3].visitNumber = WorldMapCells[18][4].visitNumber = WorldMapCells[18][5].visitNumber = WorldMapCells[18][6].visitNumber = WorldMapCells[18][7].visitNumber = WorldMapCells[18][8].visitNumber = WorldMapCells[18][9].visitNumber = WorldMapCells[18][10].visitNumber = WorldMapCells[18][11].visitNumber = WorldMapCells[18][12].visitNumber = WorldMapCells[18][13].visitNumber = WorldMapCells[18][14].visitNumber = WorldMapCells[18][15].visitNumber = WorldMapCells[18][16].visitNumber = WorldMapCells[18][17].visitNumber = WorldMapCells[18][18].visitNumber = WorldMapCells[18][19].visitNumber = WorldMapCells[18][20].visitNumber = WorldMapCells[18][21].visitNumber = WorldMapCells[18][22].visitNumber = WorldMapCells[18][23].visitNumber = WorldMapCells[18][24].visitNumber = WorldMapCells[18][25].visitNumber = WorldMapCells[18][26].visitNumber = WorldMapCells[18][27].visitNumber = WorldMapCells[18][28].visitNumber = WorldMapCells[18][29].visitNumber = WorldMapCells[18][30].visitNumber = WorldMapCells[18][31].visitNumber = WorldMapCells[18][32].visitNumber = WorldMapCells[18][33].visitNumber = WorldMapCells[18][34].visitNumber = WorldMapCells[18][35].visitNumber = WorldMapCells[18][36].visitNumber = WorldMapCells[18][37].visitNumber = WorldMapCells[18][38].visitNumber = WorldMapCells[18][39].visitNumber = WorldMapCells[18][40].visitNumber = WorldMapCells[18][41].visitNumber = WorldMapCells[18][42].visitNumber = WorldMapCells[18][43].visitNumber = WorldMapCells[18][44].visitNumber = WorldMapCells[18][45].visitNumber = WorldMapCells[18][46].visitNumber = WorldMapCells[18][47].visitNumber = WorldMapCells[18][48].visitNumber = WorldMapCells[18][49].visitNumber = WorldMapCells[18][50].visitNumber = WorldMapCells[18][51].visitNumber = WorldMapCells[18][52].visitNumber = WorldMapCells[18][53].visitNumber = WorldMapCells[18][54].visitNumber = WorldMapCells[18][55].visitNumber = WorldMapCells[18][56].visitNumber = WorldMapCells[18][57].visitNumber = WorldMapCells[18][58].visitNumber = WorldMapCells[18][59].visitNumber = WorldMapCells[18][60].visitNumber = WorldMapCells[18][61].visitNumber = WorldMapCells[18][62].visitNumber = WorldMapCells[18][63].visitNumber = WorldMapCells[18][64].visitNumber = WorldMapCells[18][65].visitNumber = WorldMapCells[18][66].visitNumber = WorldMapCells[18][67].visitNumber = WorldMapCells[18][68].visitNumber = WorldMapCells[18][69].visitNumber = WorldMapCells[18][70].visitNumber = WorldMapCells[18][71].visitNumber = WorldMapCells[18][72].visitNumber = WorldMapCells[18][73].visitNumber = WorldMapCells[18][74].visitNumber = WorldMapCells[18][75].visitNumber = WorldMapCells[18][76].visitNumber = WorldMapCells[18][77].visitNumber = WorldMapCells[18][78].visitNumber = WorldMapCells[18][79].visitNumber = WorldMapCells[18][80].visitNumber = WorldMapCells[18][81].visitNumber = WorldMapCells[18][82].visitNumber = WorldMapCells[18][83].visitNumber = WorldMapCells[18][84].visitNumber = WorldMapCells[18][85].visitNumber = WorldMapCells[18][86].visitNumber = WorldMapCells[18][87].visitNumber = WorldMapCells[18][88].visitNumber = WorldMapCells[18][89].visitNumber = WorldMapCells[18][90].visitNumber = WorldMapCells[18][91].visitNumber = WorldMapCells[18][92].visitNumber = WorldMapCells[18][93].visitNumber = WorldMapCells[18][94].visitNumber = WorldMapCells[18][95].visitNumber = WorldMapCells[18][96].visitNumber = WorldMapCells[18][97].visitNumber = WorldMapCells[18][98].visitNumber = WorldMapCells[18][99].visitNumber = 4;
        //        }
        //        else if (WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true)
        //        {
        //            WorldMapCells[7][0].visitNumber = WorldMapCells[7][1].visitNumber = WorldMapCells[7][2].visitNumber = WorldMapCells[7][3].visitNumber = WorldMapCells[7][4].visitNumber = WorldMapCells[7][5].visitNumber = WorldMapCells[7][6].visitNumber = WorldMapCells[7][7].visitNumber = WorldMapCells[7][8].visitNumber = WorldMapCells[7][9].visitNumber = WorldMapCells[7][10].visitNumber = WorldMapCells[7][11].visitNumber = WorldMapCells[7][12].visitNumber = WorldMapCells[7][13].visitNumber = WorldMapCells[7][14].visitNumber = WorldMapCells[7][15].visitNumber = WorldMapCells[7][16].visitNumber = WorldMapCells[7][17].visitNumber = WorldMapCells[7][18].visitNumber = WorldMapCells[7][19].visitNumber = WorldMapCells[7][20].visitNumber = WorldMapCells[7][21].visitNumber = WorldMapCells[7][22].visitNumber = WorldMapCells[7][23].visitNumber = WorldMapCells[7][24].visitNumber = WorldMapCells[7][25].visitNumber = WorldMapCells[7][26].visitNumber = WorldMapCells[7][27].visitNumber = WorldMapCells[7][28].visitNumber = WorldMapCells[7][29].visitNumber = WorldMapCells[7][30].visitNumber = WorldMapCells[7][31].visitNumber = WorldMapCells[7][32].visitNumber = WorldMapCells[7][33].visitNumber = WorldMapCells[7][34].visitNumber = WorldMapCells[7][35].visitNumber = WorldMapCells[7][36].visitNumber = WorldMapCells[7][37].visitNumber = WorldMapCells[7][38].visitNumber = WorldMapCells[7][39].visitNumber = WorldMapCells[7][40].visitNumber = WorldMapCells[7][41].visitNumber = WorldMapCells[7][42].visitNumber = WorldMapCells[7][43].visitNumber = WorldMapCells[7][44].visitNumber = WorldMapCells[7][45].visitNumber = WorldMapCells[7][46].visitNumber = WorldMapCells[7][47].visitNumber = WorldMapCells[7][48].visitNumber = WorldMapCells[7][49].visitNumber = WorldMapCells[7][50].visitNumber = WorldMapCells[7][51].visitNumber = WorldMapCells[7][52].visitNumber = WorldMapCells[7][53].visitNumber = WorldMapCells[7][54].visitNumber = WorldMapCells[7][55].visitNumber = WorldMapCells[7][56].visitNumber = WorldMapCells[7][57].visitNumber = WorldMapCells[7][58].visitNumber = WorldMapCells[7][59].visitNumber = WorldMapCells[7][60].visitNumber = WorldMapCells[7][61].visitNumber = WorldMapCells[7][62].visitNumber = WorldMapCells[7][63].visitNumber = WorldMapCells[7][64].visitNumber = WorldMapCells[7][65].visitNumber = WorldMapCells[7][66].visitNumber = WorldMapCells[7][67].visitNumber = WorldMapCells[7][68].visitNumber = WorldMapCells[7][69].visitNumber = WorldMapCells[7][70].visitNumber = WorldMapCells[7][71].visitNumber = WorldMapCells[7][72].visitNumber = WorldMapCells[7][73].visitNumber = WorldMapCells[7][74].visitNumber = WorldMapCells[7][75].visitNumber = WorldMapCells[7][76].visitNumber = WorldMapCells[7][77].visitNumber = WorldMapCells[7][78].visitNumber = WorldMapCells[7][79].visitNumber = WorldMapCells[7][80].visitNumber = WorldMapCells[7][81].visitNumber = WorldMapCells[7][82].visitNumber = WorldMapCells[7][83].visitNumber = WorldMapCells[7][84].visitNumber = WorldMapCells[7][85].visitNumber = WorldMapCells[7][86].visitNumber = WorldMapCells[7][87].visitNumber = WorldMapCells[7][88].visitNumber = WorldMapCells[7][89].visitNumber = WorldMapCells[7][90].visitNumber = WorldMapCells[7][91].visitNumber = WorldMapCells[7][92].visitNumber = WorldMapCells[7][93].visitNumber = WorldMapCells[7][94].visitNumber = WorldMapCells[7][95].visitNumber = WorldMapCells[7][96].visitNumber = WorldMapCells[7][97].visitNumber = WorldMapCells[7][98].visitNumber = WorldMapCells[7][99].visitNumber = 5;
        //            WorldMapCells[17][0].visitNumber = WorldMapCells[17][1].visitNumber = WorldMapCells[17][2].visitNumber = WorldMapCells[17][3].visitNumber = WorldMapCells[17][4].visitNumber = WorldMapCells[17][5].visitNumber = WorldMapCells[17][6].visitNumber = WorldMapCells[17][7].visitNumber = WorldMapCells[17][8].visitNumber = WorldMapCells[17][9].visitNumber = WorldMapCells[17][10].visitNumber = WorldMapCells[17][11].visitNumber = WorldMapCells[17][12].visitNumber = WorldMapCells[17][13].visitNumber = WorldMapCells[17][14].visitNumber = WorldMapCells[17][15].visitNumber = WorldMapCells[17][16].visitNumber = WorldMapCells[17][17].visitNumber = WorldMapCells[17][18].visitNumber = WorldMapCells[17][19].visitNumber = WorldMapCells[17][20].visitNumber = WorldMapCells[17][21].visitNumber = WorldMapCells[17][22].visitNumber = WorldMapCells[17][23].visitNumber = WorldMapCells[17][24].visitNumber = WorldMapCells[17][25].visitNumber = WorldMapCells[17][26].visitNumber = WorldMapCells[17][27].visitNumber = WorldMapCells[17][28].visitNumber = WorldMapCells[17][29].visitNumber = WorldMapCells[17][30].visitNumber = WorldMapCells[17][31].visitNumber = WorldMapCells[17][32].visitNumber = WorldMapCells[17][33].visitNumber = WorldMapCells[17][34].visitNumber = WorldMapCells[17][35].visitNumber = WorldMapCells[17][36].visitNumber = WorldMapCells[17][37].visitNumber = WorldMapCells[17][38].visitNumber = WorldMapCells[17][39].visitNumber = WorldMapCells[17][40].visitNumber = WorldMapCells[17][41].visitNumber = WorldMapCells[17][42].visitNumber = WorldMapCells[17][43].visitNumber = WorldMapCells[17][44].visitNumber = WorldMapCells[17][45].visitNumber = WorldMapCells[17][46].visitNumber = WorldMapCells[17][47].visitNumber = WorldMapCells[17][48].visitNumber = WorldMapCells[17][49].visitNumber = WorldMapCells[17][50].visitNumber = WorldMapCells[17][51].visitNumber = WorldMapCells[17][52].visitNumber = WorldMapCells[17][53].visitNumber = WorldMapCells[17][54].visitNumber = WorldMapCells[17][55].visitNumber = WorldMapCells[17][56].visitNumber = WorldMapCells[17][57].visitNumber = WorldMapCells[17][58].visitNumber = WorldMapCells[17][59].visitNumber = WorldMapCells[17][60].visitNumber = WorldMapCells[17][61].visitNumber = WorldMapCells[17][62].visitNumber = WorldMapCells[17][63].visitNumber = WorldMapCells[17][64].visitNumber = WorldMapCells[17][65].visitNumber = WorldMapCells[17][66].visitNumber = WorldMapCells[17][67].visitNumber = WorldMapCells[17][68].visitNumber = WorldMapCells[17][69].visitNumber = WorldMapCells[17][70].visitNumber = WorldMapCells[17][71].visitNumber = WorldMapCells[17][72].visitNumber = WorldMapCells[17][73].visitNumber = WorldMapCells[17][74].visitNumber = WorldMapCells[17][75].visitNumber = WorldMapCells[17][76].visitNumber = WorldMapCells[17][77].visitNumber = WorldMapCells[17][78].visitNumber = WorldMapCells[17][79].visitNumber = WorldMapCells[17][80].visitNumber = WorldMapCells[17][81].visitNumber = WorldMapCells[17][82].visitNumber = WorldMapCells[17][83].visitNumber = WorldMapCells[17][84].visitNumber = WorldMapCells[17][85].visitNumber = WorldMapCells[17][86].visitNumber = WorldMapCells[17][87].visitNumber = WorldMapCells[17][88].visitNumber = WorldMapCells[17][89].visitNumber = WorldMapCells[17][90].visitNumber = WorldMapCells[17][91].visitNumber = WorldMapCells[17][92].visitNumber = WorldMapCells[17][93].visitNumber = WorldMapCells[17][94].visitNumber = WorldMapCells[17][95].visitNumber = WorldMapCells[17][96].visitNumber = WorldMapCells[17][97].visitNumber = WorldMapCells[17][98].visitNumber = WorldMapCells[17][99].visitNumber = 5;
        //            WorldMapCells[18][0].visitNumber = WorldMapCells[18][1].visitNumber = WorldMapCells[18][2].visitNumber = WorldMapCells[18][3].visitNumber = WorldMapCells[18][4].visitNumber = WorldMapCells[18][5].visitNumber = WorldMapCells[18][6].visitNumber = WorldMapCells[18][7].visitNumber = WorldMapCells[18][8].visitNumber = WorldMapCells[18][9].visitNumber = WorldMapCells[18][10].visitNumber = WorldMapCells[18][11].visitNumber = WorldMapCells[18][12].visitNumber = WorldMapCells[18][13].visitNumber = WorldMapCells[18][14].visitNumber = WorldMapCells[18][15].visitNumber = WorldMapCells[18][16].visitNumber = WorldMapCells[18][17].visitNumber = WorldMapCells[18][18].visitNumber = WorldMapCells[18][19].visitNumber = WorldMapCells[18][20].visitNumber = WorldMapCells[18][21].visitNumber = WorldMapCells[18][22].visitNumber = WorldMapCells[18][23].visitNumber = WorldMapCells[18][24].visitNumber = WorldMapCells[18][25].visitNumber = WorldMapCells[18][26].visitNumber = WorldMapCells[18][27].visitNumber = WorldMapCells[18][28].visitNumber = WorldMapCells[18][29].visitNumber = WorldMapCells[18][30].visitNumber = WorldMapCells[18][31].visitNumber = WorldMapCells[18][32].visitNumber = WorldMapCells[18][33].visitNumber = WorldMapCells[18][34].visitNumber = WorldMapCells[18][35].visitNumber = WorldMapCells[18][36].visitNumber = WorldMapCells[18][37].visitNumber = WorldMapCells[18][38].visitNumber = WorldMapCells[18][39].visitNumber = WorldMapCells[18][40].visitNumber = WorldMapCells[18][41].visitNumber = WorldMapCells[18][42].visitNumber = WorldMapCells[18][43].visitNumber = WorldMapCells[18][44].visitNumber = WorldMapCells[18][45].visitNumber = WorldMapCells[18][46].visitNumber = WorldMapCells[18][47].visitNumber = WorldMapCells[18][48].visitNumber = WorldMapCells[18][49].visitNumber = WorldMapCells[18][50].visitNumber = WorldMapCells[18][51].visitNumber = WorldMapCells[18][52].visitNumber = WorldMapCells[18][53].visitNumber = WorldMapCells[18][54].visitNumber = WorldMapCells[18][55].visitNumber = WorldMapCells[18][56].visitNumber = WorldMapCells[18][57].visitNumber = WorldMapCells[18][58].visitNumber = WorldMapCells[18][59].visitNumber = WorldMapCells[18][60].visitNumber = WorldMapCells[18][61].visitNumber = WorldMapCells[18][62].visitNumber = WorldMapCells[18][63].visitNumber = WorldMapCells[18][64].visitNumber = WorldMapCells[18][65].visitNumber = WorldMapCells[18][66].visitNumber = WorldMapCells[18][67].visitNumber = WorldMapCells[18][68].visitNumber = WorldMapCells[18][69].visitNumber = WorldMapCells[18][70].visitNumber = WorldMapCells[18][71].visitNumber = WorldMapCells[18][72].visitNumber = WorldMapCells[18][73].visitNumber = WorldMapCells[18][74].visitNumber = WorldMapCells[18][75].visitNumber = WorldMapCells[18][76].visitNumber = WorldMapCells[18][77].visitNumber = WorldMapCells[18][78].visitNumber = WorldMapCells[18][79].visitNumber = WorldMapCells[18][80].visitNumber = WorldMapCells[18][81].visitNumber = WorldMapCells[18][82].visitNumber = WorldMapCells[18][83].visitNumber = WorldMapCells[18][84].visitNumber = WorldMapCells[18][85].visitNumber = WorldMapCells[18][86].visitNumber = WorldMapCells[18][87].visitNumber = WorldMapCells[18][88].visitNumber = WorldMapCells[18][89].visitNumber = WorldMapCells[18][90].visitNumber = WorldMapCells[18][91].visitNumber = WorldMapCells[18][92].visitNumber = WorldMapCells[18][93].visitNumber = WorldMapCells[18][94].visitNumber = WorldMapCells[18][95].visitNumber = WorldMapCells[18][96].visitNumber = WorldMapCells[18][97].visitNumber = WorldMapCells[18][98].visitNumber = WorldMapCells[18][99].visitNumber = 5;
        //        }
        //    }
        //    if (WorldMapCells[CurrentMap][CurrentLocation].mapName == WorldMapCells[8][11].mapName && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == WorldMapCells[8][11].cellLocation && WorldMapCells[8][11].firstVisit == true) //earth
        //    {
        //        WorldMapCells[8][11].firstVisit = false;
        //        if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false)
        //        {
        //            WorldMapCells[8][0].visitNumber = WorldMapCells[8][1].visitNumber = WorldMapCells[8][2].visitNumber = WorldMapCells[8][3].visitNumber = WorldMapCells[8][4].visitNumber = WorldMapCells[8][5].visitNumber = WorldMapCells[8][6].visitNumber = WorldMapCells[8][7].visitNumber = WorldMapCells[8][8].visitNumber = WorldMapCells[8][9].visitNumber = WorldMapCells[8][10].visitNumber = WorldMapCells[8][11].visitNumber = WorldMapCells[8][12].visitNumber = WorldMapCells[8][13].visitNumber = WorldMapCells[8][14].visitNumber = WorldMapCells[8][15].visitNumber = WorldMapCells[8][16].visitNumber = WorldMapCells[8][17].visitNumber = WorldMapCells[8][18].visitNumber = WorldMapCells[8][19].visitNumber = WorldMapCells[8][20].visitNumber = WorldMapCells[8][21].visitNumber = WorldMapCells[8][22].visitNumber = WorldMapCells[8][23].visitNumber = WorldMapCells[8][24].visitNumber = WorldMapCells[8][25].visitNumber = WorldMapCells[8][26].visitNumber = WorldMapCells[8][27].visitNumber = WorldMapCells[8][28].visitNumber = WorldMapCells[8][29].visitNumber = WorldMapCells[8][30].visitNumber = WorldMapCells[8][31].visitNumber = WorldMapCells[8][32].visitNumber = WorldMapCells[8][33].visitNumber = WorldMapCells[8][34].visitNumber = WorldMapCells[8][35].visitNumber = WorldMapCells[8][36].visitNumber = WorldMapCells[8][37].visitNumber = WorldMapCells[8][38].visitNumber = WorldMapCells[8][39].visitNumber = WorldMapCells[8][40].visitNumber = WorldMapCells[8][41].visitNumber = WorldMapCells[8][42].visitNumber = WorldMapCells[8][43].visitNumber = WorldMapCells[8][44].visitNumber = WorldMapCells[8][45].visitNumber = WorldMapCells[8][46].visitNumber = WorldMapCells[8][47].visitNumber = WorldMapCells[8][48].visitNumber = WorldMapCells[8][49].visitNumber = WorldMapCells[8][50].visitNumber = WorldMapCells[8][51].visitNumber = WorldMapCells[8][52].visitNumber = WorldMapCells[8][53].visitNumber = WorldMapCells[8][54].visitNumber = WorldMapCells[8][55].visitNumber = WorldMapCells[8][56].visitNumber = WorldMapCells[8][57].visitNumber = WorldMapCells[8][58].visitNumber = WorldMapCells[8][59].visitNumber = WorldMapCells[8][60].visitNumber = WorldMapCells[8][61].visitNumber = WorldMapCells[8][62].visitNumber = WorldMapCells[8][63].visitNumber = WorldMapCells[8][64].visitNumber = WorldMapCells[8][65].visitNumber = WorldMapCells[8][66].visitNumber = WorldMapCells[8][67].visitNumber = WorldMapCells[8][68].visitNumber = WorldMapCells[8][69].visitNumber = WorldMapCells[8][70].visitNumber = WorldMapCells[8][71].visitNumber = WorldMapCells[8][72].visitNumber = WorldMapCells[8][73].visitNumber = WorldMapCells[8][74].visitNumber = WorldMapCells[8][75].visitNumber = WorldMapCells[8][76].visitNumber = WorldMapCells[8][77].visitNumber = WorldMapCells[8][78].visitNumber = WorldMapCells[8][79].visitNumber = WorldMapCells[8][80].visitNumber = WorldMapCells[8][81].visitNumber = WorldMapCells[8][82].visitNumber = WorldMapCells[8][83].visitNumber = WorldMapCells[8][84].visitNumber = WorldMapCells[8][85].visitNumber = WorldMapCells[8][86].visitNumber = WorldMapCells[8][87].visitNumber = WorldMapCells[8][88].visitNumber = WorldMapCells[8][89].visitNumber = WorldMapCells[8][90].visitNumber = WorldMapCells[8][91].visitNumber = WorldMapCells[8][92].visitNumber = WorldMapCells[8][93].visitNumber = WorldMapCells[8][94].visitNumber = WorldMapCells[8][95].visitNumber = WorldMapCells[8][96].visitNumber = WorldMapCells[8][97].visitNumber = WorldMapCells[8][98].visitNumber = WorldMapCells[8][99].visitNumber = 1;
        //            WorldMapCells[20][0].visitNumber = WorldMapCells[20][1].visitNumber = WorldMapCells[20][2].visitNumber = WorldMapCells[20][3].visitNumber = WorldMapCells[20][4].visitNumber = WorldMapCells[20][5].visitNumber = WorldMapCells[20][6].visitNumber = WorldMapCells[20][7].visitNumber = WorldMapCells[20][8].visitNumber = WorldMapCells[20][9].visitNumber = WorldMapCells[20][10].visitNumber = WorldMapCells[20][11].visitNumber = WorldMapCells[20][12].visitNumber = WorldMapCells[20][13].visitNumber = WorldMapCells[20][14].visitNumber = WorldMapCells[20][15].visitNumber = WorldMapCells[20][16].visitNumber = WorldMapCells[20][17].visitNumber = WorldMapCells[20][18].visitNumber = WorldMapCells[20][19].visitNumber = WorldMapCells[20][20].visitNumber = WorldMapCells[20][21].visitNumber = WorldMapCells[20][22].visitNumber = WorldMapCells[20][23].visitNumber = WorldMapCells[20][24].visitNumber = WorldMapCells[20][25].visitNumber = WorldMapCells[20][26].visitNumber = WorldMapCells[20][27].visitNumber = WorldMapCells[20][28].visitNumber = WorldMapCells[20][29].visitNumber = WorldMapCells[20][30].visitNumber = WorldMapCells[20][31].visitNumber = WorldMapCells[20][32].visitNumber = WorldMapCells[20][33].visitNumber = WorldMapCells[20][34].visitNumber = WorldMapCells[20][35].visitNumber = WorldMapCells[20][36].visitNumber = WorldMapCells[20][37].visitNumber = WorldMapCells[20][38].visitNumber = WorldMapCells[20][39].visitNumber = WorldMapCells[20][40].visitNumber = WorldMapCells[20][41].visitNumber = WorldMapCells[20][42].visitNumber = WorldMapCells[20][43].visitNumber = WorldMapCells[20][44].visitNumber = WorldMapCells[20][45].visitNumber = WorldMapCells[20][46].visitNumber = WorldMapCells[20][47].visitNumber = WorldMapCells[20][48].visitNumber = WorldMapCells[20][49].visitNumber = WorldMapCells[20][50].visitNumber = WorldMapCells[20][51].visitNumber = WorldMapCells[20][52].visitNumber = WorldMapCells[20][53].visitNumber = WorldMapCells[20][54].visitNumber = WorldMapCells[20][55].visitNumber = WorldMapCells[20][56].visitNumber = WorldMapCells[20][57].visitNumber = WorldMapCells[20][58].visitNumber = WorldMapCells[20][59].visitNumber = WorldMapCells[20][60].visitNumber = WorldMapCells[20][61].visitNumber = WorldMapCells[20][62].visitNumber = WorldMapCells[20][63].visitNumber = WorldMapCells[20][64].visitNumber = WorldMapCells[20][65].visitNumber = WorldMapCells[20][66].visitNumber = WorldMapCells[20][67].visitNumber = WorldMapCells[20][68].visitNumber = WorldMapCells[20][69].visitNumber = WorldMapCells[20][70].visitNumber = WorldMapCells[20][71].visitNumber = WorldMapCells[20][72].visitNumber = WorldMapCells[20][73].visitNumber = WorldMapCells[20][74].visitNumber = WorldMapCells[20][75].visitNumber = WorldMapCells[20][76].visitNumber = WorldMapCells[20][77].visitNumber = WorldMapCells[20][78].visitNumber = WorldMapCells[20][79].visitNumber = WorldMapCells[20][80].visitNumber = WorldMapCells[20][81].visitNumber = WorldMapCells[20][82].visitNumber = WorldMapCells[20][83].visitNumber = WorldMapCells[20][84].visitNumber = WorldMapCells[20][85].visitNumber = WorldMapCells[20][86].visitNumber = WorldMapCells[20][87].visitNumber = WorldMapCells[20][88].visitNumber = WorldMapCells[20][89].visitNumber = WorldMapCells[20][90].visitNumber = WorldMapCells[20][91].visitNumber = WorldMapCells[20][92].visitNumber = WorldMapCells[20][93].visitNumber = WorldMapCells[20][94].visitNumber = WorldMapCells[20][95].visitNumber = WorldMapCells[20][96].visitNumber = WorldMapCells[20][97].visitNumber = WorldMapCells[20][98].visitNumber = WorldMapCells[20][99].visitNumber = 1;
        //            WorldMapCells[21][0].visitNumber = WorldMapCells[21][1].visitNumber = WorldMapCells[21][2].visitNumber = WorldMapCells[21][3].visitNumber = WorldMapCells[21][4].visitNumber = WorldMapCells[21][5].visitNumber = WorldMapCells[21][6].visitNumber = WorldMapCells[21][7].visitNumber = WorldMapCells[21][8].visitNumber = WorldMapCells[21][9].visitNumber = WorldMapCells[21][10].visitNumber = WorldMapCells[21][11].visitNumber = WorldMapCells[21][12].visitNumber = WorldMapCells[21][13].visitNumber = WorldMapCells[21][14].visitNumber = WorldMapCells[21][15].visitNumber = WorldMapCells[21][16].visitNumber = WorldMapCells[21][17].visitNumber = WorldMapCells[21][18].visitNumber = WorldMapCells[21][19].visitNumber = WorldMapCells[21][20].visitNumber = WorldMapCells[21][21].visitNumber = WorldMapCells[21][22].visitNumber = WorldMapCells[21][23].visitNumber = WorldMapCells[21][24].visitNumber = WorldMapCells[21][25].visitNumber = WorldMapCells[21][26].visitNumber = WorldMapCells[21][27].visitNumber = WorldMapCells[21][28].visitNumber = WorldMapCells[21][29].visitNumber = WorldMapCells[21][30].visitNumber = WorldMapCells[21][31].visitNumber = WorldMapCells[21][32].visitNumber = WorldMapCells[21][33].visitNumber = WorldMapCells[21][34].visitNumber = WorldMapCells[21][35].visitNumber = WorldMapCells[21][36].visitNumber = WorldMapCells[21][37].visitNumber = WorldMapCells[21][38].visitNumber = WorldMapCells[21][39].visitNumber = WorldMapCells[21][40].visitNumber = WorldMapCells[21][41].visitNumber = WorldMapCells[21][42].visitNumber = WorldMapCells[21][43].visitNumber = WorldMapCells[21][44].visitNumber = WorldMapCells[21][45].visitNumber = WorldMapCells[21][46].visitNumber = WorldMapCells[21][47].visitNumber = WorldMapCells[21][48].visitNumber = WorldMapCells[21][49].visitNumber = WorldMapCells[21][50].visitNumber = WorldMapCells[21][51].visitNumber = WorldMapCells[21][52].visitNumber = WorldMapCells[21][53].visitNumber = WorldMapCells[21][54].visitNumber = WorldMapCells[21][55].visitNumber = WorldMapCells[21][56].visitNumber = WorldMapCells[21][57].visitNumber = WorldMapCells[21][58].visitNumber = WorldMapCells[21][59].visitNumber = WorldMapCells[21][60].visitNumber = WorldMapCells[21][61].visitNumber = WorldMapCells[21][62].visitNumber = WorldMapCells[21][63].visitNumber = WorldMapCells[21][64].visitNumber = WorldMapCells[21][65].visitNumber = WorldMapCells[21][66].visitNumber = WorldMapCells[21][67].visitNumber = WorldMapCells[21][68].visitNumber = WorldMapCells[21][69].visitNumber = WorldMapCells[21][70].visitNumber = WorldMapCells[21][71].visitNumber = WorldMapCells[21][72].visitNumber = WorldMapCells[21][73].visitNumber = WorldMapCells[21][74].visitNumber = WorldMapCells[21][75].visitNumber = WorldMapCells[21][76].visitNumber = WorldMapCells[21][77].visitNumber = WorldMapCells[21][78].visitNumber = WorldMapCells[21][79].visitNumber = WorldMapCells[21][80].visitNumber = WorldMapCells[21][81].visitNumber = WorldMapCells[21][82].visitNumber = WorldMapCells[21][83].visitNumber = WorldMapCells[21][84].visitNumber = WorldMapCells[21][85].visitNumber = WorldMapCells[21][86].visitNumber = WorldMapCells[21][87].visitNumber = WorldMapCells[21][88].visitNumber = WorldMapCells[21][89].visitNumber = WorldMapCells[21][90].visitNumber = WorldMapCells[21][91].visitNumber = WorldMapCells[21][92].visitNumber = WorldMapCells[21][93].visitNumber = WorldMapCells[21][94].visitNumber = WorldMapCells[21][95].visitNumber = WorldMapCells[21][96].visitNumber = WorldMapCells[21][97].visitNumber = WorldMapCells[21][98].visitNumber = WorldMapCells[21][99].visitNumber = 1;
        //        }
        //        else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false)
        //        {
        //            WorldMapCells[8][0].visitNumber = WorldMapCells[8][1].visitNumber = WorldMapCells[8][2].visitNumber = WorldMapCells[8][3].visitNumber = WorldMapCells[8][4].visitNumber = WorldMapCells[8][5].visitNumber = WorldMapCells[8][6].visitNumber = WorldMapCells[8][7].visitNumber = WorldMapCells[8][8].visitNumber = WorldMapCells[8][9].visitNumber = WorldMapCells[8][10].visitNumber = WorldMapCells[8][11].visitNumber = WorldMapCells[8][12].visitNumber = WorldMapCells[8][13].visitNumber = WorldMapCells[8][14].visitNumber = WorldMapCells[8][15].visitNumber = WorldMapCells[8][16].visitNumber = WorldMapCells[8][17].visitNumber = WorldMapCells[8][18].visitNumber = WorldMapCells[8][19].visitNumber = WorldMapCells[8][20].visitNumber = WorldMapCells[8][21].visitNumber = WorldMapCells[8][22].visitNumber = WorldMapCells[8][23].visitNumber = WorldMapCells[8][24].visitNumber = WorldMapCells[8][25].visitNumber = WorldMapCells[8][26].visitNumber = WorldMapCells[8][27].visitNumber = WorldMapCells[8][28].visitNumber = WorldMapCells[8][29].visitNumber = WorldMapCells[8][30].visitNumber = WorldMapCells[8][31].visitNumber = WorldMapCells[8][32].visitNumber = WorldMapCells[8][33].visitNumber = WorldMapCells[8][34].visitNumber = WorldMapCells[8][35].visitNumber = WorldMapCells[8][36].visitNumber = WorldMapCells[8][37].visitNumber = WorldMapCells[8][38].visitNumber = WorldMapCells[8][39].visitNumber = WorldMapCells[8][40].visitNumber = WorldMapCells[8][41].visitNumber = WorldMapCells[8][42].visitNumber = WorldMapCells[8][43].visitNumber = WorldMapCells[8][44].visitNumber = WorldMapCells[8][45].visitNumber = WorldMapCells[8][46].visitNumber = WorldMapCells[8][47].visitNumber = WorldMapCells[8][48].visitNumber = WorldMapCells[8][49].visitNumber = WorldMapCells[8][50].visitNumber = WorldMapCells[8][51].visitNumber = WorldMapCells[8][52].visitNumber = WorldMapCells[8][53].visitNumber = WorldMapCells[8][54].visitNumber = WorldMapCells[8][55].visitNumber = WorldMapCells[8][56].visitNumber = WorldMapCells[8][57].visitNumber = WorldMapCells[8][58].visitNumber = WorldMapCells[8][59].visitNumber = WorldMapCells[8][60].visitNumber = WorldMapCells[8][61].visitNumber = WorldMapCells[8][62].visitNumber = WorldMapCells[8][63].visitNumber = WorldMapCells[8][64].visitNumber = WorldMapCells[8][65].visitNumber = WorldMapCells[8][66].visitNumber = WorldMapCells[8][67].visitNumber = WorldMapCells[8][68].visitNumber = WorldMapCells[8][69].visitNumber = WorldMapCells[8][70].visitNumber = WorldMapCells[8][71].visitNumber = WorldMapCells[8][72].visitNumber = WorldMapCells[8][73].visitNumber = WorldMapCells[8][74].visitNumber = WorldMapCells[8][75].visitNumber = WorldMapCells[8][76].visitNumber = WorldMapCells[8][77].visitNumber = WorldMapCells[8][78].visitNumber = WorldMapCells[8][79].visitNumber = WorldMapCells[8][80].visitNumber = WorldMapCells[8][81].visitNumber = WorldMapCells[8][82].visitNumber = WorldMapCells[8][83].visitNumber = WorldMapCells[8][84].visitNumber = WorldMapCells[8][85].visitNumber = WorldMapCells[8][86].visitNumber = WorldMapCells[8][87].visitNumber = WorldMapCells[8][88].visitNumber = WorldMapCells[8][89].visitNumber = WorldMapCells[8][90].visitNumber = WorldMapCells[8][91].visitNumber = WorldMapCells[8][92].visitNumber = WorldMapCells[8][93].visitNumber = WorldMapCells[8][94].visitNumber = WorldMapCells[8][95].visitNumber = WorldMapCells[8][96].visitNumber = WorldMapCells[8][97].visitNumber = WorldMapCells[8][98].visitNumber = WorldMapCells[8][99].visitNumber = 2;
        //            WorldMapCells[20][0].visitNumber = WorldMapCells[20][1].visitNumber = WorldMapCells[20][2].visitNumber = WorldMapCells[20][3].visitNumber = WorldMapCells[20][4].visitNumber = WorldMapCells[20][5].visitNumber = WorldMapCells[20][6].visitNumber = WorldMapCells[20][7].visitNumber = WorldMapCells[20][8].visitNumber = WorldMapCells[20][9].visitNumber = WorldMapCells[20][10].visitNumber = WorldMapCells[20][11].visitNumber = WorldMapCells[20][12].visitNumber = WorldMapCells[20][13].visitNumber = WorldMapCells[20][14].visitNumber = WorldMapCells[20][15].visitNumber = WorldMapCells[20][16].visitNumber = WorldMapCells[20][17].visitNumber = WorldMapCells[20][18].visitNumber = WorldMapCells[20][19].visitNumber = WorldMapCells[20][20].visitNumber = WorldMapCells[20][21].visitNumber = WorldMapCells[20][22].visitNumber = WorldMapCells[20][23].visitNumber = WorldMapCells[20][24].visitNumber = WorldMapCells[20][25].visitNumber = WorldMapCells[20][26].visitNumber = WorldMapCells[20][27].visitNumber = WorldMapCells[20][28].visitNumber = WorldMapCells[20][29].visitNumber = WorldMapCells[20][30].visitNumber = WorldMapCells[20][31].visitNumber = WorldMapCells[20][32].visitNumber = WorldMapCells[20][33].visitNumber = WorldMapCells[20][34].visitNumber = WorldMapCells[20][35].visitNumber = WorldMapCells[20][36].visitNumber = WorldMapCells[20][37].visitNumber = WorldMapCells[20][38].visitNumber = WorldMapCells[20][39].visitNumber = WorldMapCells[20][40].visitNumber = WorldMapCells[20][41].visitNumber = WorldMapCells[20][42].visitNumber = WorldMapCells[20][43].visitNumber = WorldMapCells[20][44].visitNumber = WorldMapCells[20][45].visitNumber = WorldMapCells[20][46].visitNumber = WorldMapCells[20][47].visitNumber = WorldMapCells[20][48].visitNumber = WorldMapCells[20][49].visitNumber = WorldMapCells[20][50].visitNumber = WorldMapCells[20][51].visitNumber = WorldMapCells[20][52].visitNumber = WorldMapCells[20][53].visitNumber = WorldMapCells[20][54].visitNumber = WorldMapCells[20][55].visitNumber = WorldMapCells[20][56].visitNumber = WorldMapCells[20][57].visitNumber = WorldMapCells[20][58].visitNumber = WorldMapCells[20][59].visitNumber = WorldMapCells[20][60].visitNumber = WorldMapCells[20][61].visitNumber = WorldMapCells[20][62].visitNumber = WorldMapCells[20][63].visitNumber = WorldMapCells[20][64].visitNumber = WorldMapCells[20][65].visitNumber = WorldMapCells[20][66].visitNumber = WorldMapCells[20][67].visitNumber = WorldMapCells[20][68].visitNumber = WorldMapCells[20][69].visitNumber = WorldMapCells[20][70].visitNumber = WorldMapCells[20][71].visitNumber = WorldMapCells[20][72].visitNumber = WorldMapCells[20][73].visitNumber = WorldMapCells[20][74].visitNumber = WorldMapCells[20][75].visitNumber = WorldMapCells[20][76].visitNumber = WorldMapCells[20][77].visitNumber = WorldMapCells[20][78].visitNumber = WorldMapCells[20][79].visitNumber = WorldMapCells[20][80].visitNumber = WorldMapCells[20][81].visitNumber = WorldMapCells[20][82].visitNumber = WorldMapCells[20][83].visitNumber = WorldMapCells[20][84].visitNumber = WorldMapCells[20][85].visitNumber = WorldMapCells[20][86].visitNumber = WorldMapCells[20][87].visitNumber = WorldMapCells[20][88].visitNumber = WorldMapCells[20][89].visitNumber = WorldMapCells[20][90].visitNumber = WorldMapCells[20][91].visitNumber = WorldMapCells[20][92].visitNumber = WorldMapCells[20][93].visitNumber = WorldMapCells[20][94].visitNumber = WorldMapCells[20][95].visitNumber = WorldMapCells[20][96].visitNumber = WorldMapCells[20][97].visitNumber = WorldMapCells[20][98].visitNumber = WorldMapCells[20][99].visitNumber = 2;
        //            WorldMapCells[21][0].visitNumber = WorldMapCells[21][1].visitNumber = WorldMapCells[21][2].visitNumber = WorldMapCells[21][3].visitNumber = WorldMapCells[21][4].visitNumber = WorldMapCells[21][5].visitNumber = WorldMapCells[21][6].visitNumber = WorldMapCells[21][7].visitNumber = WorldMapCells[21][8].visitNumber = WorldMapCells[21][9].visitNumber = WorldMapCells[21][10].visitNumber = WorldMapCells[21][11].visitNumber = WorldMapCells[21][12].visitNumber = WorldMapCells[21][13].visitNumber = WorldMapCells[21][14].visitNumber = WorldMapCells[21][15].visitNumber = WorldMapCells[21][16].visitNumber = WorldMapCells[21][17].visitNumber = WorldMapCells[21][18].visitNumber = WorldMapCells[21][19].visitNumber = WorldMapCells[21][20].visitNumber = WorldMapCells[21][21].visitNumber = WorldMapCells[21][22].visitNumber = WorldMapCells[21][23].visitNumber = WorldMapCells[21][24].visitNumber = WorldMapCells[21][25].visitNumber = WorldMapCells[21][26].visitNumber = WorldMapCells[21][27].visitNumber = WorldMapCells[21][28].visitNumber = WorldMapCells[21][29].visitNumber = WorldMapCells[21][30].visitNumber = WorldMapCells[21][31].visitNumber = WorldMapCells[21][32].visitNumber = WorldMapCells[21][33].visitNumber = WorldMapCells[21][34].visitNumber = WorldMapCells[21][35].visitNumber = WorldMapCells[21][36].visitNumber = WorldMapCells[21][37].visitNumber = WorldMapCells[21][38].visitNumber = WorldMapCells[21][39].visitNumber = WorldMapCells[21][40].visitNumber = WorldMapCells[21][41].visitNumber = WorldMapCells[21][42].visitNumber = WorldMapCells[21][43].visitNumber = WorldMapCells[21][44].visitNumber = WorldMapCells[21][45].visitNumber = WorldMapCells[21][46].visitNumber = WorldMapCells[21][47].visitNumber = WorldMapCells[21][48].visitNumber = WorldMapCells[21][49].visitNumber = WorldMapCells[21][50].visitNumber = WorldMapCells[21][51].visitNumber = WorldMapCells[21][52].visitNumber = WorldMapCells[21][53].visitNumber = WorldMapCells[21][54].visitNumber = WorldMapCells[21][55].visitNumber = WorldMapCells[21][56].visitNumber = WorldMapCells[21][57].visitNumber = WorldMapCells[21][58].visitNumber = WorldMapCells[21][59].visitNumber = WorldMapCells[21][60].visitNumber = WorldMapCells[21][61].visitNumber = WorldMapCells[21][62].visitNumber = WorldMapCells[21][63].visitNumber = WorldMapCells[21][64].visitNumber = WorldMapCells[21][65].visitNumber = WorldMapCells[21][66].visitNumber = WorldMapCells[21][67].visitNumber = WorldMapCells[21][68].visitNumber = WorldMapCells[21][69].visitNumber = WorldMapCells[21][70].visitNumber = WorldMapCells[21][71].visitNumber = WorldMapCells[21][72].visitNumber = WorldMapCells[21][73].visitNumber = WorldMapCells[21][74].visitNumber = WorldMapCells[21][75].visitNumber = WorldMapCells[21][76].visitNumber = WorldMapCells[21][77].visitNumber = WorldMapCells[21][78].visitNumber = WorldMapCells[21][79].visitNumber = WorldMapCells[21][80].visitNumber = WorldMapCells[21][81].visitNumber = WorldMapCells[21][82].visitNumber = WorldMapCells[21][83].visitNumber = WorldMapCells[21][84].visitNumber = WorldMapCells[21][85].visitNumber = WorldMapCells[21][86].visitNumber = WorldMapCells[21][87].visitNumber = WorldMapCells[21][88].visitNumber = WorldMapCells[21][89].visitNumber = WorldMapCells[21][90].visitNumber = WorldMapCells[21][91].visitNumber = WorldMapCells[21][92].visitNumber = WorldMapCells[21][93].visitNumber = WorldMapCells[21][94].visitNumber = WorldMapCells[21][95].visitNumber = WorldMapCells[21][96].visitNumber = WorldMapCells[21][97].visitNumber = WorldMapCells[21][98].visitNumber = WorldMapCells[21][99].visitNumber = 2;
        //        }
        //        else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true)
        //        {
        //            WorldMapCells[8][0].visitNumber = WorldMapCells[8][1].visitNumber = WorldMapCells[8][2].visitNumber = WorldMapCells[8][3].visitNumber = WorldMapCells[8][4].visitNumber = WorldMapCells[8][5].visitNumber = WorldMapCells[8][6].visitNumber = WorldMapCells[8][7].visitNumber = WorldMapCells[8][8].visitNumber = WorldMapCells[8][9].visitNumber = WorldMapCells[8][10].visitNumber = WorldMapCells[8][11].visitNumber = WorldMapCells[8][12].visitNumber = WorldMapCells[8][13].visitNumber = WorldMapCells[8][14].visitNumber = WorldMapCells[8][15].visitNumber = WorldMapCells[8][16].visitNumber = WorldMapCells[8][17].visitNumber = WorldMapCells[8][18].visitNumber = WorldMapCells[8][19].visitNumber = WorldMapCells[8][20].visitNumber = WorldMapCells[8][21].visitNumber = WorldMapCells[8][22].visitNumber = WorldMapCells[8][23].visitNumber = WorldMapCells[8][24].visitNumber = WorldMapCells[8][25].visitNumber = WorldMapCells[8][26].visitNumber = WorldMapCells[8][27].visitNumber = WorldMapCells[8][28].visitNumber = WorldMapCells[8][29].visitNumber = WorldMapCells[8][30].visitNumber = WorldMapCells[8][31].visitNumber = WorldMapCells[8][32].visitNumber = WorldMapCells[8][33].visitNumber = WorldMapCells[8][34].visitNumber = WorldMapCells[8][35].visitNumber = WorldMapCells[8][36].visitNumber = WorldMapCells[8][37].visitNumber = WorldMapCells[8][38].visitNumber = WorldMapCells[8][39].visitNumber = WorldMapCells[8][40].visitNumber = WorldMapCells[8][41].visitNumber = WorldMapCells[8][42].visitNumber = WorldMapCells[8][43].visitNumber = WorldMapCells[8][44].visitNumber = WorldMapCells[8][45].visitNumber = WorldMapCells[8][46].visitNumber = WorldMapCells[8][47].visitNumber = WorldMapCells[8][48].visitNumber = WorldMapCells[8][49].visitNumber = WorldMapCells[8][50].visitNumber = WorldMapCells[8][51].visitNumber = WorldMapCells[8][52].visitNumber = WorldMapCells[8][53].visitNumber = WorldMapCells[8][54].visitNumber = WorldMapCells[8][55].visitNumber = WorldMapCells[8][56].visitNumber = WorldMapCells[8][57].visitNumber = WorldMapCells[8][58].visitNumber = WorldMapCells[8][59].visitNumber = WorldMapCells[8][60].visitNumber = WorldMapCells[8][61].visitNumber = WorldMapCells[8][62].visitNumber = WorldMapCells[8][63].visitNumber = WorldMapCells[8][64].visitNumber = WorldMapCells[8][65].visitNumber = WorldMapCells[8][66].visitNumber = WorldMapCells[8][67].visitNumber = WorldMapCells[8][68].visitNumber = WorldMapCells[8][69].visitNumber = WorldMapCells[8][70].visitNumber = WorldMapCells[8][71].visitNumber = WorldMapCells[8][72].visitNumber = WorldMapCells[8][73].visitNumber = WorldMapCells[8][74].visitNumber = WorldMapCells[8][75].visitNumber = WorldMapCells[8][76].visitNumber = WorldMapCells[8][77].visitNumber = WorldMapCells[8][78].visitNumber = WorldMapCells[8][79].visitNumber = WorldMapCells[8][80].visitNumber = WorldMapCells[8][81].visitNumber = WorldMapCells[8][82].visitNumber = WorldMapCells[8][83].visitNumber = WorldMapCells[8][84].visitNumber = WorldMapCells[8][85].visitNumber = WorldMapCells[8][86].visitNumber = WorldMapCells[8][87].visitNumber = WorldMapCells[8][88].visitNumber = WorldMapCells[8][89].visitNumber = WorldMapCells[8][90].visitNumber = WorldMapCells[8][91].visitNumber = WorldMapCells[8][92].visitNumber = WorldMapCells[8][93].visitNumber = WorldMapCells[8][94].visitNumber = WorldMapCells[8][95].visitNumber = WorldMapCells[8][96].visitNumber = WorldMapCells[8][97].visitNumber = WorldMapCells[8][98].visitNumber = WorldMapCells[8][99].visitNumber = 3;
        //            WorldMapCells[20][0].visitNumber = WorldMapCells[20][1].visitNumber = WorldMapCells[20][2].visitNumber = WorldMapCells[20][3].visitNumber = WorldMapCells[20][4].visitNumber = WorldMapCells[20][5].visitNumber = WorldMapCells[20][6].visitNumber = WorldMapCells[20][7].visitNumber = WorldMapCells[20][8].visitNumber = WorldMapCells[20][9].visitNumber = WorldMapCells[20][10].visitNumber = WorldMapCells[20][11].visitNumber = WorldMapCells[20][12].visitNumber = WorldMapCells[20][13].visitNumber = WorldMapCells[20][14].visitNumber = WorldMapCells[20][15].visitNumber = WorldMapCells[20][16].visitNumber = WorldMapCells[20][17].visitNumber = WorldMapCells[20][18].visitNumber = WorldMapCells[20][19].visitNumber = WorldMapCells[20][20].visitNumber = WorldMapCells[20][21].visitNumber = WorldMapCells[20][22].visitNumber = WorldMapCells[20][23].visitNumber = WorldMapCells[20][24].visitNumber = WorldMapCells[20][25].visitNumber = WorldMapCells[20][26].visitNumber = WorldMapCells[20][27].visitNumber = WorldMapCells[20][28].visitNumber = WorldMapCells[20][29].visitNumber = WorldMapCells[20][30].visitNumber = WorldMapCells[20][31].visitNumber = WorldMapCells[20][32].visitNumber = WorldMapCells[20][33].visitNumber = WorldMapCells[20][34].visitNumber = WorldMapCells[20][35].visitNumber = WorldMapCells[20][36].visitNumber = WorldMapCells[20][37].visitNumber = WorldMapCells[20][38].visitNumber = WorldMapCells[20][39].visitNumber = WorldMapCells[20][40].visitNumber = WorldMapCells[20][41].visitNumber = WorldMapCells[20][42].visitNumber = WorldMapCells[20][43].visitNumber = WorldMapCells[20][44].visitNumber = WorldMapCells[20][45].visitNumber = WorldMapCells[20][46].visitNumber = WorldMapCells[20][47].visitNumber = WorldMapCells[20][48].visitNumber = WorldMapCells[20][49].visitNumber = WorldMapCells[20][50].visitNumber = WorldMapCells[20][51].visitNumber = WorldMapCells[20][52].visitNumber = WorldMapCells[20][53].visitNumber = WorldMapCells[20][54].visitNumber = WorldMapCells[20][55].visitNumber = WorldMapCells[20][56].visitNumber = WorldMapCells[20][57].visitNumber = WorldMapCells[20][58].visitNumber = WorldMapCells[20][59].visitNumber = WorldMapCells[20][60].visitNumber = WorldMapCells[20][61].visitNumber = WorldMapCells[20][62].visitNumber = WorldMapCells[20][63].visitNumber = WorldMapCells[20][64].visitNumber = WorldMapCells[20][65].visitNumber = WorldMapCells[20][66].visitNumber = WorldMapCells[20][67].visitNumber = WorldMapCells[20][68].visitNumber = WorldMapCells[20][69].visitNumber = WorldMapCells[20][70].visitNumber = WorldMapCells[20][71].visitNumber = WorldMapCells[20][72].visitNumber = WorldMapCells[20][73].visitNumber = WorldMapCells[20][74].visitNumber = WorldMapCells[20][75].visitNumber = WorldMapCells[20][76].visitNumber = WorldMapCells[20][77].visitNumber = WorldMapCells[20][78].visitNumber = WorldMapCells[20][79].visitNumber = WorldMapCells[20][80].visitNumber = WorldMapCells[20][81].visitNumber = WorldMapCells[20][82].visitNumber = WorldMapCells[20][83].visitNumber = WorldMapCells[20][84].visitNumber = WorldMapCells[20][85].visitNumber = WorldMapCells[20][86].visitNumber = WorldMapCells[20][87].visitNumber = WorldMapCells[20][88].visitNumber = WorldMapCells[20][89].visitNumber = WorldMapCells[20][90].visitNumber = WorldMapCells[20][91].visitNumber = WorldMapCells[20][92].visitNumber = WorldMapCells[20][93].visitNumber = WorldMapCells[20][94].visitNumber = WorldMapCells[20][95].visitNumber = WorldMapCells[20][96].visitNumber = WorldMapCells[20][97].visitNumber = WorldMapCells[20][98].visitNumber = WorldMapCells[20][99].visitNumber = 3;
        //            WorldMapCells[21][0].visitNumber = WorldMapCells[21][1].visitNumber = WorldMapCells[21][2].visitNumber = WorldMapCells[21][3].visitNumber = WorldMapCells[21][4].visitNumber = WorldMapCells[21][5].visitNumber = WorldMapCells[21][6].visitNumber = WorldMapCells[21][7].visitNumber = WorldMapCells[21][8].visitNumber = WorldMapCells[21][9].visitNumber = WorldMapCells[21][10].visitNumber = WorldMapCells[21][11].visitNumber = WorldMapCells[21][12].visitNumber = WorldMapCells[21][13].visitNumber = WorldMapCells[21][14].visitNumber = WorldMapCells[21][15].visitNumber = WorldMapCells[21][16].visitNumber = WorldMapCells[21][17].visitNumber = WorldMapCells[21][18].visitNumber = WorldMapCells[21][19].visitNumber = WorldMapCells[21][20].visitNumber = WorldMapCells[21][21].visitNumber = WorldMapCells[21][22].visitNumber = WorldMapCells[21][23].visitNumber = WorldMapCells[21][24].visitNumber = WorldMapCells[21][25].visitNumber = WorldMapCells[21][26].visitNumber = WorldMapCells[21][27].visitNumber = WorldMapCells[21][28].visitNumber = WorldMapCells[21][29].visitNumber = WorldMapCells[21][30].visitNumber = WorldMapCells[21][31].visitNumber = WorldMapCells[21][32].visitNumber = WorldMapCells[21][33].visitNumber = WorldMapCells[21][34].visitNumber = WorldMapCells[21][35].visitNumber = WorldMapCells[21][36].visitNumber = WorldMapCells[21][37].visitNumber = WorldMapCells[21][38].visitNumber = WorldMapCells[21][39].visitNumber = WorldMapCells[21][40].visitNumber = WorldMapCells[21][41].visitNumber = WorldMapCells[21][42].visitNumber = WorldMapCells[21][43].visitNumber = WorldMapCells[21][44].visitNumber = WorldMapCells[21][45].visitNumber = WorldMapCells[21][46].visitNumber = WorldMapCells[21][47].visitNumber = WorldMapCells[21][48].visitNumber = WorldMapCells[21][49].visitNumber = WorldMapCells[21][50].visitNumber = WorldMapCells[21][51].visitNumber = WorldMapCells[21][52].visitNumber = WorldMapCells[21][53].visitNumber = WorldMapCells[21][54].visitNumber = WorldMapCells[21][55].visitNumber = WorldMapCells[21][56].visitNumber = WorldMapCells[21][57].visitNumber = WorldMapCells[21][58].visitNumber = WorldMapCells[21][59].visitNumber = WorldMapCells[21][60].visitNumber = WorldMapCells[21][61].visitNumber = WorldMapCells[21][62].visitNumber = WorldMapCells[21][63].visitNumber = WorldMapCells[21][64].visitNumber = WorldMapCells[21][65].visitNumber = WorldMapCells[21][66].visitNumber = WorldMapCells[21][67].visitNumber = WorldMapCells[21][68].visitNumber = WorldMapCells[21][69].visitNumber = WorldMapCells[21][70].visitNumber = WorldMapCells[21][71].visitNumber = WorldMapCells[21][72].visitNumber = WorldMapCells[21][73].visitNumber = WorldMapCells[21][74].visitNumber = WorldMapCells[21][75].visitNumber = WorldMapCells[21][76].visitNumber = WorldMapCells[21][77].visitNumber = WorldMapCells[21][78].visitNumber = WorldMapCells[21][79].visitNumber = WorldMapCells[21][80].visitNumber = WorldMapCells[21][81].visitNumber = WorldMapCells[21][82].visitNumber = WorldMapCells[21][83].visitNumber = WorldMapCells[21][84].visitNumber = WorldMapCells[21][85].visitNumber = WorldMapCells[21][86].visitNumber = WorldMapCells[21][87].visitNumber = WorldMapCells[21][88].visitNumber = WorldMapCells[21][89].visitNumber = WorldMapCells[21][90].visitNumber = WorldMapCells[21][91].visitNumber = WorldMapCells[21][92].visitNumber = WorldMapCells[21][93].visitNumber = WorldMapCells[21][94].visitNumber = WorldMapCells[21][95].visitNumber = WorldMapCells[21][96].visitNumber = WorldMapCells[21][97].visitNumber = WorldMapCells[21][98].visitNumber = WorldMapCells[21][99].visitNumber = 3;
        //        }
        //        else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == false && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true)
        //        {
        //            WorldMapCells[8][0].visitNumber = WorldMapCells[8][1].visitNumber = WorldMapCells[8][2].visitNumber = WorldMapCells[8][3].visitNumber = WorldMapCells[8][4].visitNumber = WorldMapCells[8][5].visitNumber = WorldMapCells[8][6].visitNumber = WorldMapCells[8][7].visitNumber = WorldMapCells[8][8].visitNumber = WorldMapCells[8][9].visitNumber = WorldMapCells[8][10].visitNumber = WorldMapCells[8][11].visitNumber = WorldMapCells[8][12].visitNumber = WorldMapCells[8][13].visitNumber = WorldMapCells[8][14].visitNumber = WorldMapCells[8][15].visitNumber = WorldMapCells[8][16].visitNumber = WorldMapCells[8][17].visitNumber = WorldMapCells[8][18].visitNumber = WorldMapCells[8][19].visitNumber = WorldMapCells[8][20].visitNumber = WorldMapCells[8][21].visitNumber = WorldMapCells[8][22].visitNumber = WorldMapCells[8][23].visitNumber = WorldMapCells[8][24].visitNumber = WorldMapCells[8][25].visitNumber = WorldMapCells[8][26].visitNumber = WorldMapCells[8][27].visitNumber = WorldMapCells[8][28].visitNumber = WorldMapCells[8][29].visitNumber = WorldMapCells[8][30].visitNumber = WorldMapCells[8][31].visitNumber = WorldMapCells[8][32].visitNumber = WorldMapCells[8][33].visitNumber = WorldMapCells[8][34].visitNumber = WorldMapCells[8][35].visitNumber = WorldMapCells[8][36].visitNumber = WorldMapCells[8][37].visitNumber = WorldMapCells[8][38].visitNumber = WorldMapCells[8][39].visitNumber = WorldMapCells[8][40].visitNumber = WorldMapCells[8][41].visitNumber = WorldMapCells[8][42].visitNumber = WorldMapCells[8][43].visitNumber = WorldMapCells[8][44].visitNumber = WorldMapCells[8][45].visitNumber = WorldMapCells[8][46].visitNumber = WorldMapCells[8][47].visitNumber = WorldMapCells[8][48].visitNumber = WorldMapCells[8][49].visitNumber = WorldMapCells[8][50].visitNumber = WorldMapCells[8][51].visitNumber = WorldMapCells[8][52].visitNumber = WorldMapCells[8][53].visitNumber = WorldMapCells[8][54].visitNumber = WorldMapCells[8][55].visitNumber = WorldMapCells[8][56].visitNumber = WorldMapCells[8][57].visitNumber = WorldMapCells[8][58].visitNumber = WorldMapCells[8][59].visitNumber = WorldMapCells[8][60].visitNumber = WorldMapCells[8][61].visitNumber = WorldMapCells[8][62].visitNumber = WorldMapCells[8][63].visitNumber = WorldMapCells[8][64].visitNumber = WorldMapCells[8][65].visitNumber = WorldMapCells[8][66].visitNumber = WorldMapCells[8][67].visitNumber = WorldMapCells[8][68].visitNumber = WorldMapCells[8][69].visitNumber = WorldMapCells[8][70].visitNumber = WorldMapCells[8][71].visitNumber = WorldMapCells[8][72].visitNumber = WorldMapCells[8][73].visitNumber = WorldMapCells[8][74].visitNumber = WorldMapCells[8][75].visitNumber = WorldMapCells[8][76].visitNumber = WorldMapCells[8][77].visitNumber = WorldMapCells[8][78].visitNumber = WorldMapCells[8][79].visitNumber = WorldMapCells[8][80].visitNumber = WorldMapCells[8][81].visitNumber = WorldMapCells[8][82].visitNumber = WorldMapCells[8][83].visitNumber = WorldMapCells[8][84].visitNumber = WorldMapCells[8][85].visitNumber = WorldMapCells[8][86].visitNumber = WorldMapCells[8][87].visitNumber = WorldMapCells[8][88].visitNumber = WorldMapCells[8][89].visitNumber = WorldMapCells[8][90].visitNumber = WorldMapCells[8][91].visitNumber = WorldMapCells[8][92].visitNumber = WorldMapCells[8][93].visitNumber = WorldMapCells[8][94].visitNumber = WorldMapCells[8][95].visitNumber = WorldMapCells[8][96].visitNumber = WorldMapCells[8][97].visitNumber = WorldMapCells[8][98].visitNumber = WorldMapCells[8][99].visitNumber = 4;
        //            WorldMapCells[20][0].visitNumber = WorldMapCells[20][1].visitNumber = WorldMapCells[20][2].visitNumber = WorldMapCells[20][3].visitNumber = WorldMapCells[20][4].visitNumber = WorldMapCells[20][5].visitNumber = WorldMapCells[20][6].visitNumber = WorldMapCells[20][7].visitNumber = WorldMapCells[20][8].visitNumber = WorldMapCells[20][9].visitNumber = WorldMapCells[20][10].visitNumber = WorldMapCells[20][11].visitNumber = WorldMapCells[20][12].visitNumber = WorldMapCells[20][13].visitNumber = WorldMapCells[20][14].visitNumber = WorldMapCells[20][15].visitNumber = WorldMapCells[20][16].visitNumber = WorldMapCells[20][17].visitNumber = WorldMapCells[20][18].visitNumber = WorldMapCells[20][19].visitNumber = WorldMapCells[20][20].visitNumber = WorldMapCells[20][21].visitNumber = WorldMapCells[20][22].visitNumber = WorldMapCells[20][23].visitNumber = WorldMapCells[20][24].visitNumber = WorldMapCells[20][25].visitNumber = WorldMapCells[20][26].visitNumber = WorldMapCells[20][27].visitNumber = WorldMapCells[20][28].visitNumber = WorldMapCells[20][29].visitNumber = WorldMapCells[20][30].visitNumber = WorldMapCells[20][31].visitNumber = WorldMapCells[20][32].visitNumber = WorldMapCells[20][33].visitNumber = WorldMapCells[20][34].visitNumber = WorldMapCells[20][35].visitNumber = WorldMapCells[20][36].visitNumber = WorldMapCells[20][37].visitNumber = WorldMapCells[20][38].visitNumber = WorldMapCells[20][39].visitNumber = WorldMapCells[20][40].visitNumber = WorldMapCells[20][41].visitNumber = WorldMapCells[20][42].visitNumber = WorldMapCells[20][43].visitNumber = WorldMapCells[20][44].visitNumber = WorldMapCells[20][45].visitNumber = WorldMapCells[20][46].visitNumber = WorldMapCells[20][47].visitNumber = WorldMapCells[20][48].visitNumber = WorldMapCells[20][49].visitNumber = WorldMapCells[20][50].visitNumber = WorldMapCells[20][51].visitNumber = WorldMapCells[20][52].visitNumber = WorldMapCells[20][53].visitNumber = WorldMapCells[20][54].visitNumber = WorldMapCells[20][55].visitNumber = WorldMapCells[20][56].visitNumber = WorldMapCells[20][57].visitNumber = WorldMapCells[20][58].visitNumber = WorldMapCells[20][59].visitNumber = WorldMapCells[20][60].visitNumber = WorldMapCells[20][61].visitNumber = WorldMapCells[20][62].visitNumber = WorldMapCells[20][63].visitNumber = WorldMapCells[20][64].visitNumber = WorldMapCells[20][65].visitNumber = WorldMapCells[20][66].visitNumber = WorldMapCells[20][67].visitNumber = WorldMapCells[20][68].visitNumber = WorldMapCells[20][69].visitNumber = WorldMapCells[20][70].visitNumber = WorldMapCells[20][71].visitNumber = WorldMapCells[20][72].visitNumber = WorldMapCells[20][73].visitNumber = WorldMapCells[20][74].visitNumber = WorldMapCells[20][75].visitNumber = WorldMapCells[20][76].visitNumber = WorldMapCells[20][77].visitNumber = WorldMapCells[20][78].visitNumber = WorldMapCells[20][79].visitNumber = WorldMapCells[20][80].visitNumber = WorldMapCells[20][81].visitNumber = WorldMapCells[20][82].visitNumber = WorldMapCells[20][83].visitNumber = WorldMapCells[20][84].visitNumber = WorldMapCells[20][85].visitNumber = WorldMapCells[20][86].visitNumber = WorldMapCells[20][87].visitNumber = WorldMapCells[20][88].visitNumber = WorldMapCells[20][89].visitNumber = WorldMapCells[20][90].visitNumber = WorldMapCells[20][91].visitNumber = WorldMapCells[20][92].visitNumber = WorldMapCells[20][93].visitNumber = WorldMapCells[20][94].visitNumber = WorldMapCells[20][95].visitNumber = WorldMapCells[20][96].visitNumber = WorldMapCells[20][97].visitNumber = WorldMapCells[20][98].visitNumber = WorldMapCells[20][99].visitNumber = 4;
        //            WorldMapCells[21][0].visitNumber = WorldMapCells[21][1].visitNumber = WorldMapCells[21][2].visitNumber = WorldMapCells[21][3].visitNumber = WorldMapCells[21][4].visitNumber = WorldMapCells[21][5].visitNumber = WorldMapCells[21][6].visitNumber = WorldMapCells[21][7].visitNumber = WorldMapCells[21][8].visitNumber = WorldMapCells[21][9].visitNumber = WorldMapCells[21][10].visitNumber = WorldMapCells[21][11].visitNumber = WorldMapCells[21][12].visitNumber = WorldMapCells[21][13].visitNumber = WorldMapCells[21][14].visitNumber = WorldMapCells[21][15].visitNumber = WorldMapCells[21][16].visitNumber = WorldMapCells[21][17].visitNumber = WorldMapCells[21][18].visitNumber = WorldMapCells[21][19].visitNumber = WorldMapCells[21][20].visitNumber = WorldMapCells[21][21].visitNumber = WorldMapCells[21][22].visitNumber = WorldMapCells[21][23].visitNumber = WorldMapCells[21][24].visitNumber = WorldMapCells[21][25].visitNumber = WorldMapCells[21][26].visitNumber = WorldMapCells[21][27].visitNumber = WorldMapCells[21][28].visitNumber = WorldMapCells[21][29].visitNumber = WorldMapCells[21][30].visitNumber = WorldMapCells[21][31].visitNumber = WorldMapCells[21][32].visitNumber = WorldMapCells[21][33].visitNumber = WorldMapCells[21][34].visitNumber = WorldMapCells[21][35].visitNumber = WorldMapCells[21][36].visitNumber = WorldMapCells[21][37].visitNumber = WorldMapCells[21][38].visitNumber = WorldMapCells[21][39].visitNumber = WorldMapCells[21][40].visitNumber = WorldMapCells[21][41].visitNumber = WorldMapCells[21][42].visitNumber = WorldMapCells[21][43].visitNumber = WorldMapCells[21][44].visitNumber = WorldMapCells[21][45].visitNumber = WorldMapCells[21][46].visitNumber = WorldMapCells[21][47].visitNumber = WorldMapCells[21][48].visitNumber = WorldMapCells[21][49].visitNumber = WorldMapCells[21][50].visitNumber = WorldMapCells[21][51].visitNumber = WorldMapCells[21][52].visitNumber = WorldMapCells[21][53].visitNumber = WorldMapCells[21][54].visitNumber = WorldMapCells[21][55].visitNumber = WorldMapCells[21][56].visitNumber = WorldMapCells[21][57].visitNumber = WorldMapCells[21][58].visitNumber = WorldMapCells[21][59].visitNumber = WorldMapCells[21][60].visitNumber = WorldMapCells[21][61].visitNumber = WorldMapCells[21][62].visitNumber = WorldMapCells[21][63].visitNumber = WorldMapCells[21][64].visitNumber = WorldMapCells[21][65].visitNumber = WorldMapCells[21][66].visitNumber = WorldMapCells[21][67].visitNumber = WorldMapCells[21][68].visitNumber = WorldMapCells[21][69].visitNumber = WorldMapCells[21][70].visitNumber = WorldMapCells[21][71].visitNumber = WorldMapCells[21][72].visitNumber = WorldMapCells[21][73].visitNumber = WorldMapCells[21][74].visitNumber = WorldMapCells[21][75].visitNumber = WorldMapCells[21][76].visitNumber = WorldMapCells[21][77].visitNumber = WorldMapCells[21][78].visitNumber = WorldMapCells[21][79].visitNumber = WorldMapCells[21][80].visitNumber = WorldMapCells[21][81].visitNumber = WorldMapCells[21][82].visitNumber = WorldMapCells[21][83].visitNumber = WorldMapCells[21][84].visitNumber = WorldMapCells[21][85].visitNumber = WorldMapCells[21][86].visitNumber = WorldMapCells[21][87].visitNumber = WorldMapCells[21][88].visitNumber = WorldMapCells[21][89].visitNumber = WorldMapCells[21][90].visitNumber = WorldMapCells[21][91].visitNumber = WorldMapCells[21][92].visitNumber = WorldMapCells[21][93].visitNumber = WorldMapCells[21][94].visitNumber = WorldMapCells[21][95].visitNumber = WorldMapCells[21][96].visitNumber = WorldMapCells[21][97].visitNumber = WorldMapCells[21][98].visitNumber = WorldMapCells[21][99].visitNumber = 4;
        //        }
        //        else if (WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[9][10].visited == true && WorldMapCells[10][89].visited == true)
        //        {
        //            WorldMapCells[8][0].visitNumber = WorldMapCells[8][1].visitNumber = WorldMapCells[8][2].visitNumber = WorldMapCells[8][3].visitNumber = WorldMapCells[8][4].visitNumber = WorldMapCells[8][5].visitNumber = WorldMapCells[8][6].visitNumber = WorldMapCells[8][7].visitNumber = WorldMapCells[8][8].visitNumber = WorldMapCells[8][9].visitNumber = WorldMapCells[8][10].visitNumber = WorldMapCells[8][11].visitNumber = WorldMapCells[8][12].visitNumber = WorldMapCells[8][13].visitNumber = WorldMapCells[8][14].visitNumber = WorldMapCells[8][15].visitNumber = WorldMapCells[8][16].visitNumber = WorldMapCells[8][17].visitNumber = WorldMapCells[8][18].visitNumber = WorldMapCells[8][19].visitNumber = WorldMapCells[8][20].visitNumber = WorldMapCells[8][21].visitNumber = WorldMapCells[8][22].visitNumber = WorldMapCells[8][23].visitNumber = WorldMapCells[8][24].visitNumber = WorldMapCells[8][25].visitNumber = WorldMapCells[8][26].visitNumber = WorldMapCells[8][27].visitNumber = WorldMapCells[8][28].visitNumber = WorldMapCells[8][29].visitNumber = WorldMapCells[8][30].visitNumber = WorldMapCells[8][31].visitNumber = WorldMapCells[8][32].visitNumber = WorldMapCells[8][33].visitNumber = WorldMapCells[8][34].visitNumber = WorldMapCells[8][35].visitNumber = WorldMapCells[8][36].visitNumber = WorldMapCells[8][37].visitNumber = WorldMapCells[8][38].visitNumber = WorldMapCells[8][39].visitNumber = WorldMapCells[8][40].visitNumber = WorldMapCells[8][41].visitNumber = WorldMapCells[8][42].visitNumber = WorldMapCells[8][43].visitNumber = WorldMapCells[8][44].visitNumber = WorldMapCells[8][45].visitNumber = WorldMapCells[8][46].visitNumber = WorldMapCells[8][47].visitNumber = WorldMapCells[8][48].visitNumber = WorldMapCells[8][49].visitNumber = WorldMapCells[8][50].visitNumber = WorldMapCells[8][51].visitNumber = WorldMapCells[8][52].visitNumber = WorldMapCells[8][53].visitNumber = WorldMapCells[8][54].visitNumber = WorldMapCells[8][55].visitNumber = WorldMapCells[8][56].visitNumber = WorldMapCells[8][57].visitNumber = WorldMapCells[8][58].visitNumber = WorldMapCells[8][59].visitNumber = WorldMapCells[8][60].visitNumber = WorldMapCells[8][61].visitNumber = WorldMapCells[8][62].visitNumber = WorldMapCells[8][63].visitNumber = WorldMapCells[8][64].visitNumber = WorldMapCells[8][65].visitNumber = WorldMapCells[8][66].visitNumber = WorldMapCells[8][67].visitNumber = WorldMapCells[8][68].visitNumber = WorldMapCells[8][69].visitNumber = WorldMapCells[8][70].visitNumber = WorldMapCells[8][71].visitNumber = WorldMapCells[8][72].visitNumber = WorldMapCells[8][73].visitNumber = WorldMapCells[8][74].visitNumber = WorldMapCells[8][75].visitNumber = WorldMapCells[8][76].visitNumber = WorldMapCells[8][77].visitNumber = WorldMapCells[8][78].visitNumber = WorldMapCells[8][79].visitNumber = WorldMapCells[8][80].visitNumber = WorldMapCells[8][81].visitNumber = WorldMapCells[8][82].visitNumber = WorldMapCells[8][83].visitNumber = WorldMapCells[8][84].visitNumber = WorldMapCells[8][85].visitNumber = WorldMapCells[8][86].visitNumber = WorldMapCells[8][87].visitNumber = WorldMapCells[8][88].visitNumber = WorldMapCells[8][89].visitNumber = WorldMapCells[8][90].visitNumber = WorldMapCells[8][91].visitNumber = WorldMapCells[8][92].visitNumber = WorldMapCells[8][93].visitNumber = WorldMapCells[8][94].visitNumber = WorldMapCells[8][95].visitNumber = WorldMapCells[8][96].visitNumber = WorldMapCells[8][97].visitNumber = WorldMapCells[8][98].visitNumber = WorldMapCells[8][99].visitNumber = 5;
        //            WorldMapCells[20][0].visitNumber = WorldMapCells[20][1].visitNumber = WorldMapCells[20][2].visitNumber = WorldMapCells[20][3].visitNumber = WorldMapCells[20][4].visitNumber = WorldMapCells[20][5].visitNumber = WorldMapCells[20][6].visitNumber = WorldMapCells[20][7].visitNumber = WorldMapCells[20][8].visitNumber = WorldMapCells[20][9].visitNumber = WorldMapCells[20][10].visitNumber = WorldMapCells[20][11].visitNumber = WorldMapCells[20][12].visitNumber = WorldMapCells[20][13].visitNumber = WorldMapCells[20][14].visitNumber = WorldMapCells[20][15].visitNumber = WorldMapCells[20][16].visitNumber = WorldMapCells[20][17].visitNumber = WorldMapCells[20][18].visitNumber = WorldMapCells[20][19].visitNumber = WorldMapCells[20][20].visitNumber = WorldMapCells[20][21].visitNumber = WorldMapCells[20][22].visitNumber = WorldMapCells[20][23].visitNumber = WorldMapCells[20][24].visitNumber = WorldMapCells[20][25].visitNumber = WorldMapCells[20][26].visitNumber = WorldMapCells[20][27].visitNumber = WorldMapCells[20][28].visitNumber = WorldMapCells[20][29].visitNumber = WorldMapCells[20][30].visitNumber = WorldMapCells[20][31].visitNumber = WorldMapCells[20][32].visitNumber = WorldMapCells[20][33].visitNumber = WorldMapCells[20][34].visitNumber = WorldMapCells[20][35].visitNumber = WorldMapCells[20][36].visitNumber = WorldMapCells[20][37].visitNumber = WorldMapCells[20][38].visitNumber = WorldMapCells[20][39].visitNumber = WorldMapCells[20][40].visitNumber = WorldMapCells[20][41].visitNumber = WorldMapCells[20][42].visitNumber = WorldMapCells[20][43].visitNumber = WorldMapCells[20][44].visitNumber = WorldMapCells[20][45].visitNumber = WorldMapCells[20][46].visitNumber = WorldMapCells[20][47].visitNumber = WorldMapCells[20][48].visitNumber = WorldMapCells[20][49].visitNumber = WorldMapCells[20][50].visitNumber = WorldMapCells[20][51].visitNumber = WorldMapCells[20][52].visitNumber = WorldMapCells[20][53].visitNumber = WorldMapCells[20][54].visitNumber = WorldMapCells[20][55].visitNumber = WorldMapCells[20][56].visitNumber = WorldMapCells[20][57].visitNumber = WorldMapCells[20][58].visitNumber = WorldMapCells[20][59].visitNumber = WorldMapCells[20][60].visitNumber = WorldMapCells[20][61].visitNumber = WorldMapCells[20][62].visitNumber = WorldMapCells[20][63].visitNumber = WorldMapCells[20][64].visitNumber = WorldMapCells[20][65].visitNumber = WorldMapCells[20][66].visitNumber = WorldMapCells[20][67].visitNumber = WorldMapCells[20][68].visitNumber = WorldMapCells[20][69].visitNumber = WorldMapCells[20][70].visitNumber = WorldMapCells[20][71].visitNumber = WorldMapCells[20][72].visitNumber = WorldMapCells[20][73].visitNumber = WorldMapCells[20][74].visitNumber = WorldMapCells[20][75].visitNumber = WorldMapCells[20][76].visitNumber = WorldMapCells[20][77].visitNumber = WorldMapCells[20][78].visitNumber = WorldMapCells[20][79].visitNumber = WorldMapCells[20][80].visitNumber = WorldMapCells[20][81].visitNumber = WorldMapCells[20][82].visitNumber = WorldMapCells[20][83].visitNumber = WorldMapCells[20][84].visitNumber = WorldMapCells[20][85].visitNumber = WorldMapCells[20][86].visitNumber = WorldMapCells[20][87].visitNumber = WorldMapCells[20][88].visitNumber = WorldMapCells[20][89].visitNumber = WorldMapCells[20][90].visitNumber = WorldMapCells[20][91].visitNumber = WorldMapCells[20][92].visitNumber = WorldMapCells[20][93].visitNumber = WorldMapCells[20][94].visitNumber = WorldMapCells[20][95].visitNumber = WorldMapCells[20][96].visitNumber = WorldMapCells[20][97].visitNumber = WorldMapCells[20][98].visitNumber = WorldMapCells[20][99].visitNumber = 5;
        //            WorldMapCells[21][0].visitNumber = WorldMapCells[21][1].visitNumber = WorldMapCells[21][2].visitNumber = WorldMapCells[21][3].visitNumber = WorldMapCells[21][4].visitNumber = WorldMapCells[21][5].visitNumber = WorldMapCells[21][6].visitNumber = WorldMapCells[21][7].visitNumber = WorldMapCells[21][8].visitNumber = WorldMapCells[21][9].visitNumber = WorldMapCells[21][10].visitNumber = WorldMapCells[21][11].visitNumber = WorldMapCells[21][12].visitNumber = WorldMapCells[21][13].visitNumber = WorldMapCells[21][14].visitNumber = WorldMapCells[21][15].visitNumber = WorldMapCells[21][16].visitNumber = WorldMapCells[21][17].visitNumber = WorldMapCells[21][18].visitNumber = WorldMapCells[21][19].visitNumber = WorldMapCells[21][20].visitNumber = WorldMapCells[21][21].visitNumber = WorldMapCells[21][22].visitNumber = WorldMapCells[21][23].visitNumber = WorldMapCells[21][24].visitNumber = WorldMapCells[21][25].visitNumber = WorldMapCells[21][26].visitNumber = WorldMapCells[21][27].visitNumber = WorldMapCells[21][28].visitNumber = WorldMapCells[21][29].visitNumber = WorldMapCells[21][30].visitNumber = WorldMapCells[21][31].visitNumber = WorldMapCells[21][32].visitNumber = WorldMapCells[21][33].visitNumber = WorldMapCells[21][34].visitNumber = WorldMapCells[21][35].visitNumber = WorldMapCells[21][36].visitNumber = WorldMapCells[21][37].visitNumber = WorldMapCells[21][38].visitNumber = WorldMapCells[21][39].visitNumber = WorldMapCells[21][40].visitNumber = WorldMapCells[21][41].visitNumber = WorldMapCells[21][42].visitNumber = WorldMapCells[21][43].visitNumber = WorldMapCells[21][44].visitNumber = WorldMapCells[21][45].visitNumber = WorldMapCells[21][46].visitNumber = WorldMapCells[21][47].visitNumber = WorldMapCells[21][48].visitNumber = WorldMapCells[21][49].visitNumber = WorldMapCells[21][50].visitNumber = WorldMapCells[21][51].visitNumber = WorldMapCells[21][52].visitNumber = WorldMapCells[21][53].visitNumber = WorldMapCells[21][54].visitNumber = WorldMapCells[21][55].visitNumber = WorldMapCells[21][56].visitNumber = WorldMapCells[21][57].visitNumber = WorldMapCells[21][58].visitNumber = WorldMapCells[21][59].visitNumber = WorldMapCells[21][60].visitNumber = WorldMapCells[21][61].visitNumber = WorldMapCells[21][62].visitNumber = WorldMapCells[21][63].visitNumber = WorldMapCells[21][64].visitNumber = WorldMapCells[21][65].visitNumber = WorldMapCells[21][66].visitNumber = WorldMapCells[21][67].visitNumber = WorldMapCells[21][68].visitNumber = WorldMapCells[21][69].visitNumber = WorldMapCells[21][70].visitNumber = WorldMapCells[21][71].visitNumber = WorldMapCells[21][72].visitNumber = WorldMapCells[21][73].visitNumber = WorldMapCells[21][74].visitNumber = WorldMapCells[21][75].visitNumber = WorldMapCells[21][76].visitNumber = WorldMapCells[21][77].visitNumber = WorldMapCells[21][78].visitNumber = WorldMapCells[21][79].visitNumber = WorldMapCells[21][80].visitNumber = WorldMapCells[21][81].visitNumber = WorldMapCells[21][82].visitNumber = WorldMapCells[21][83].visitNumber = WorldMapCells[21][84].visitNumber = WorldMapCells[21][85].visitNumber = WorldMapCells[21][86].visitNumber = WorldMapCells[21][87].visitNumber = WorldMapCells[21][88].visitNumber = WorldMapCells[21][89].visitNumber = WorldMapCells[21][90].visitNumber = WorldMapCells[21][91].visitNumber = WorldMapCells[21][92].visitNumber = WorldMapCells[21][93].visitNumber = WorldMapCells[21][94].visitNumber = WorldMapCells[21][95].visitNumber = WorldMapCells[21][96].visitNumber = WorldMapCells[21][97].visitNumber = WorldMapCells[21][98].visitNumber = WorldMapCells[21][99].visitNumber = 5;
        //        }
        //    }
        //    if (WorldMapCells[CurrentMap][CurrentLocation].mapName == WorldMapCells[9][10].mapName && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == WorldMapCells[9][10].cellLocation && WorldMapCells[8][11].firstVisit == true) //air
        //    {
        //        WorldMapCells[9][10].firstVisit = false;
        //        if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == false)
        //        {
        //            WorldMapCells[9][0].visitNumber = WorldMapCells[9][1].visitNumber = WorldMapCells[9][2].visitNumber = WorldMapCells[9][3].visitNumber = WorldMapCells[9][4].visitNumber = WorldMapCells[9][5].visitNumber = WorldMapCells[9][6].visitNumber = WorldMapCells[9][7].visitNumber = WorldMapCells[9][8].visitNumber = WorldMapCells[9][9].visitNumber = WorldMapCells[9][10].visitNumber = WorldMapCells[9][11].visitNumber = WorldMapCells[9][12].visitNumber = WorldMapCells[9][13].visitNumber = WorldMapCells[9][14].visitNumber = WorldMapCells[9][15].visitNumber = WorldMapCells[9][16].visitNumber = WorldMapCells[9][17].visitNumber = WorldMapCells[9][18].visitNumber = WorldMapCells[9][19].visitNumber = WorldMapCells[9][20].visitNumber = WorldMapCells[9][21].visitNumber = WorldMapCells[9][22].visitNumber = WorldMapCells[9][23].visitNumber = WorldMapCells[9][24].visitNumber = WorldMapCells[9][25].visitNumber = WorldMapCells[9][26].visitNumber = WorldMapCells[9][27].visitNumber = WorldMapCells[9][28].visitNumber = WorldMapCells[9][29].visitNumber = WorldMapCells[9][30].visitNumber = WorldMapCells[9][31].visitNumber = WorldMapCells[9][32].visitNumber = WorldMapCells[9][33].visitNumber = WorldMapCells[9][34].visitNumber = WorldMapCells[9][35].visitNumber = WorldMapCells[9][36].visitNumber = WorldMapCells[9][37].visitNumber = WorldMapCells[9][38].visitNumber = WorldMapCells[9][39].visitNumber = WorldMapCells[9][40].visitNumber = WorldMapCells[9][41].visitNumber = WorldMapCells[9][42].visitNumber = WorldMapCells[9][43].visitNumber = WorldMapCells[9][44].visitNumber = WorldMapCells[9][45].visitNumber = WorldMapCells[9][46].visitNumber = WorldMapCells[9][47].visitNumber = WorldMapCells[9][48].visitNumber = WorldMapCells[9][49].visitNumber = WorldMapCells[9][50].visitNumber = WorldMapCells[9][51].visitNumber = WorldMapCells[9][52].visitNumber = WorldMapCells[9][53].visitNumber = WorldMapCells[9][54].visitNumber = WorldMapCells[9][55].visitNumber = WorldMapCells[9][56].visitNumber = WorldMapCells[9][57].visitNumber = WorldMapCells[9][58].visitNumber = WorldMapCells[9][59].visitNumber = WorldMapCells[9][60].visitNumber = WorldMapCells[9][61].visitNumber = WorldMapCells[9][62].visitNumber = WorldMapCells[9][63].visitNumber = WorldMapCells[9][64].visitNumber = WorldMapCells[9][65].visitNumber = WorldMapCells[9][66].visitNumber = WorldMapCells[9][67].visitNumber = WorldMapCells[9][68].visitNumber = WorldMapCells[9][69].visitNumber = WorldMapCells[9][70].visitNumber = WorldMapCells[9][71].visitNumber = WorldMapCells[9][72].visitNumber = WorldMapCells[9][73].visitNumber = WorldMapCells[9][74].visitNumber = WorldMapCells[9][75].visitNumber = WorldMapCells[9][76].visitNumber = WorldMapCells[9][77].visitNumber = WorldMapCells[9][78].visitNumber = WorldMapCells[9][79].visitNumber = WorldMapCells[9][80].visitNumber = WorldMapCells[9][81].visitNumber = WorldMapCells[9][82].visitNumber = WorldMapCells[9][83].visitNumber = WorldMapCells[9][84].visitNumber = WorldMapCells[9][85].visitNumber = WorldMapCells[9][86].visitNumber = WorldMapCells[9][87].visitNumber = WorldMapCells[9][88].visitNumber = WorldMapCells[9][89].visitNumber = WorldMapCells[9][90].visitNumber = WorldMapCells[9][91].visitNumber = WorldMapCells[9][92].visitNumber = WorldMapCells[9][93].visitNumber = WorldMapCells[9][94].visitNumber = WorldMapCells[9][95].visitNumber = WorldMapCells[9][96].visitNumber = WorldMapCells[9][97].visitNumber = WorldMapCells[9][98].visitNumber = WorldMapCells[9][99].visitNumber = 1;
        //            WorldMapCells[23][0].visitNumber = WorldMapCells[23][1].visitNumber = WorldMapCells[23][2].visitNumber = WorldMapCells[23][3].visitNumber = WorldMapCells[23][4].visitNumber = WorldMapCells[23][5].visitNumber = WorldMapCells[23][6].visitNumber = WorldMapCells[23][7].visitNumber = WorldMapCells[23][8].visitNumber = WorldMapCells[23][9].visitNumber = WorldMapCells[23][10].visitNumber = WorldMapCells[23][11].visitNumber = WorldMapCells[23][12].visitNumber = WorldMapCells[23][13].visitNumber = WorldMapCells[23][14].visitNumber = WorldMapCells[23][15].visitNumber = WorldMapCells[23][16].visitNumber = WorldMapCells[23][17].visitNumber = WorldMapCells[23][18].visitNumber = WorldMapCells[23][19].visitNumber = WorldMapCells[23][20].visitNumber = WorldMapCells[23][21].visitNumber = WorldMapCells[23][22].visitNumber = WorldMapCells[23][23].visitNumber = WorldMapCells[23][24].visitNumber = WorldMapCells[23][25].visitNumber = WorldMapCells[23][26].visitNumber = WorldMapCells[23][27].visitNumber = WorldMapCells[23][28].visitNumber = WorldMapCells[23][29].visitNumber = WorldMapCells[23][30].visitNumber = WorldMapCells[23][31].visitNumber = WorldMapCells[23][32].visitNumber = WorldMapCells[23][33].visitNumber = WorldMapCells[23][34].visitNumber = WorldMapCells[23][35].visitNumber = WorldMapCells[23][36].visitNumber = WorldMapCells[23][37].visitNumber = WorldMapCells[23][38].visitNumber = WorldMapCells[23][39].visitNumber = WorldMapCells[23][40].visitNumber = WorldMapCells[23][41].visitNumber = WorldMapCells[23][42].visitNumber = WorldMapCells[23][43].visitNumber = WorldMapCells[23][44].visitNumber = WorldMapCells[23][45].visitNumber = WorldMapCells[23][46].visitNumber = WorldMapCells[23][47].visitNumber = WorldMapCells[23][48].visitNumber = WorldMapCells[23][49].visitNumber = WorldMapCells[23][50].visitNumber = WorldMapCells[23][51].visitNumber = WorldMapCells[23][52].visitNumber = WorldMapCells[23][53].visitNumber = WorldMapCells[23][54].visitNumber = WorldMapCells[23][55].visitNumber = WorldMapCells[23][56].visitNumber = WorldMapCells[23][57].visitNumber = WorldMapCells[23][58].visitNumber = WorldMapCells[23][59].visitNumber = WorldMapCells[23][60].visitNumber = WorldMapCells[23][61].visitNumber = WorldMapCells[23][62].visitNumber = WorldMapCells[23][63].visitNumber = WorldMapCells[23][64].visitNumber = WorldMapCells[23][65].visitNumber = WorldMapCells[23][66].visitNumber = WorldMapCells[23][67].visitNumber = WorldMapCells[23][68].visitNumber = WorldMapCells[23][69].visitNumber = WorldMapCells[23][70].visitNumber = WorldMapCells[23][71].visitNumber = WorldMapCells[23][72].visitNumber = WorldMapCells[23][73].visitNumber = WorldMapCells[23][74].visitNumber = WorldMapCells[23][75].visitNumber = WorldMapCells[23][76].visitNumber = WorldMapCells[23][77].visitNumber = WorldMapCells[23][78].visitNumber = WorldMapCells[23][79].visitNumber = WorldMapCells[23][80].visitNumber = WorldMapCells[23][81].visitNumber = WorldMapCells[23][82].visitNumber = WorldMapCells[23][83].visitNumber = WorldMapCells[23][84].visitNumber = WorldMapCells[23][85].visitNumber = WorldMapCells[23][86].visitNumber = WorldMapCells[23][87].visitNumber = WorldMapCells[23][88].visitNumber = WorldMapCells[23][89].visitNumber = WorldMapCells[23][90].visitNumber = WorldMapCells[23][91].visitNumber = WorldMapCells[23][92].visitNumber = WorldMapCells[23][93].visitNumber = WorldMapCells[23][94].visitNumber = WorldMapCells[23][95].visitNumber = WorldMapCells[23][96].visitNumber = WorldMapCells[23][97].visitNumber = WorldMapCells[23][98].visitNumber = WorldMapCells[23][99].visitNumber = 1;
        //            WorldMapCells[24][0].visitNumber = WorldMapCells[24][1].visitNumber = WorldMapCells[24][2].visitNumber = WorldMapCells[24][3].visitNumber = WorldMapCells[24][4].visitNumber = WorldMapCells[24][5].visitNumber = WorldMapCells[24][6].visitNumber = WorldMapCells[24][7].visitNumber = WorldMapCells[24][8].visitNumber = WorldMapCells[24][9].visitNumber = WorldMapCells[24][10].visitNumber = WorldMapCells[24][11].visitNumber = WorldMapCells[24][12].visitNumber = WorldMapCells[24][13].visitNumber = WorldMapCells[24][14].visitNumber = WorldMapCells[24][15].visitNumber = WorldMapCells[24][16].visitNumber = WorldMapCells[24][17].visitNumber = WorldMapCells[24][18].visitNumber = WorldMapCells[24][19].visitNumber = WorldMapCells[24][20].visitNumber = WorldMapCells[24][21].visitNumber = WorldMapCells[24][22].visitNumber = WorldMapCells[24][23].visitNumber = WorldMapCells[24][24].visitNumber = WorldMapCells[24][25].visitNumber = WorldMapCells[24][26].visitNumber = WorldMapCells[24][27].visitNumber = WorldMapCells[24][28].visitNumber = WorldMapCells[24][29].visitNumber = WorldMapCells[24][30].visitNumber = WorldMapCells[24][31].visitNumber = WorldMapCells[24][32].visitNumber = WorldMapCells[24][33].visitNumber = WorldMapCells[24][34].visitNumber = WorldMapCells[24][35].visitNumber = WorldMapCells[24][36].visitNumber = WorldMapCells[24][37].visitNumber = WorldMapCells[24][38].visitNumber = WorldMapCells[24][39].visitNumber = WorldMapCells[24][40].visitNumber = WorldMapCells[24][41].visitNumber = WorldMapCells[24][42].visitNumber = WorldMapCells[24][43].visitNumber = WorldMapCells[24][44].visitNumber = WorldMapCells[24][45].visitNumber = WorldMapCells[24][46].visitNumber = WorldMapCells[24][47].visitNumber = WorldMapCells[24][48].visitNumber = WorldMapCells[24][49].visitNumber = WorldMapCells[24][50].visitNumber = WorldMapCells[24][51].visitNumber = WorldMapCells[24][52].visitNumber = WorldMapCells[24][53].visitNumber = WorldMapCells[24][54].visitNumber = WorldMapCells[24][55].visitNumber = WorldMapCells[24][56].visitNumber = WorldMapCells[24][57].visitNumber = WorldMapCells[24][58].visitNumber = WorldMapCells[24][59].visitNumber = WorldMapCells[24][60].visitNumber = WorldMapCells[24][61].visitNumber = WorldMapCells[24][62].visitNumber = WorldMapCells[24][63].visitNumber = WorldMapCells[24][64].visitNumber = WorldMapCells[24][65].visitNumber = WorldMapCells[24][66].visitNumber = WorldMapCells[24][67].visitNumber = WorldMapCells[24][68].visitNumber = WorldMapCells[24][69].visitNumber = WorldMapCells[24][70].visitNumber = WorldMapCells[24][71].visitNumber = WorldMapCells[24][72].visitNumber = WorldMapCells[24][73].visitNumber = WorldMapCells[24][74].visitNumber = WorldMapCells[24][75].visitNumber = WorldMapCells[24][76].visitNumber = WorldMapCells[24][77].visitNumber = WorldMapCells[24][78].visitNumber = WorldMapCells[24][79].visitNumber = WorldMapCells[24][80].visitNumber = WorldMapCells[24][81].visitNumber = WorldMapCells[24][82].visitNumber = WorldMapCells[24][83].visitNumber = WorldMapCells[24][84].visitNumber = WorldMapCells[24][85].visitNumber = WorldMapCells[24][86].visitNumber = WorldMapCells[24][87].visitNumber = WorldMapCells[24][88].visitNumber = WorldMapCells[24][89].visitNumber = WorldMapCells[24][90].visitNumber = WorldMapCells[24][91].visitNumber = WorldMapCells[24][92].visitNumber = WorldMapCells[24][93].visitNumber = WorldMapCells[24][94].visitNumber = WorldMapCells[24][95].visitNumber = WorldMapCells[24][96].visitNumber = WorldMapCells[24][97].visitNumber = WorldMapCells[24][98].visitNumber = WorldMapCells[24][99].visitNumber = 1;
        //        }
        //        else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == false)
        //        {
        //            WorldMapCells[9][0].visitNumber = WorldMapCells[9][1].visitNumber = WorldMapCells[9][2].visitNumber = WorldMapCells[9][3].visitNumber = WorldMapCells[9][4].visitNumber = WorldMapCells[9][5].visitNumber = WorldMapCells[9][6].visitNumber = WorldMapCells[9][7].visitNumber = WorldMapCells[9][8].visitNumber = WorldMapCells[9][9].visitNumber = WorldMapCells[9][10].visitNumber = WorldMapCells[9][11].visitNumber = WorldMapCells[9][12].visitNumber = WorldMapCells[9][13].visitNumber = WorldMapCells[9][14].visitNumber = WorldMapCells[9][15].visitNumber = WorldMapCells[9][16].visitNumber = WorldMapCells[9][17].visitNumber = WorldMapCells[9][18].visitNumber = WorldMapCells[9][19].visitNumber = WorldMapCells[9][20].visitNumber = WorldMapCells[9][21].visitNumber = WorldMapCells[9][22].visitNumber = WorldMapCells[9][23].visitNumber = WorldMapCells[9][24].visitNumber = WorldMapCells[9][25].visitNumber = WorldMapCells[9][26].visitNumber = WorldMapCells[9][27].visitNumber = WorldMapCells[9][28].visitNumber = WorldMapCells[9][29].visitNumber = WorldMapCells[9][30].visitNumber = WorldMapCells[9][31].visitNumber = WorldMapCells[9][32].visitNumber = WorldMapCells[9][33].visitNumber = WorldMapCells[9][34].visitNumber = WorldMapCells[9][35].visitNumber = WorldMapCells[9][36].visitNumber = WorldMapCells[9][37].visitNumber = WorldMapCells[9][38].visitNumber = WorldMapCells[9][39].visitNumber = WorldMapCells[9][40].visitNumber = WorldMapCells[9][41].visitNumber = WorldMapCells[9][42].visitNumber = WorldMapCells[9][43].visitNumber = WorldMapCells[9][44].visitNumber = WorldMapCells[9][45].visitNumber = WorldMapCells[9][46].visitNumber = WorldMapCells[9][47].visitNumber = WorldMapCells[9][48].visitNumber = WorldMapCells[9][49].visitNumber = WorldMapCells[9][50].visitNumber = WorldMapCells[9][51].visitNumber = WorldMapCells[9][52].visitNumber = WorldMapCells[9][53].visitNumber = WorldMapCells[9][54].visitNumber = WorldMapCells[9][55].visitNumber = WorldMapCells[9][56].visitNumber = WorldMapCells[9][57].visitNumber = WorldMapCells[9][58].visitNumber = WorldMapCells[9][59].visitNumber = WorldMapCells[9][60].visitNumber = WorldMapCells[9][61].visitNumber = WorldMapCells[9][62].visitNumber = WorldMapCells[9][63].visitNumber = WorldMapCells[9][64].visitNumber = WorldMapCells[9][65].visitNumber = WorldMapCells[9][66].visitNumber = WorldMapCells[9][67].visitNumber = WorldMapCells[9][68].visitNumber = WorldMapCells[9][69].visitNumber = WorldMapCells[9][70].visitNumber = WorldMapCells[9][71].visitNumber = WorldMapCells[9][72].visitNumber = WorldMapCells[9][73].visitNumber = WorldMapCells[9][74].visitNumber = WorldMapCells[9][75].visitNumber = WorldMapCells[9][76].visitNumber = WorldMapCells[9][77].visitNumber = WorldMapCells[9][78].visitNumber = WorldMapCells[9][79].visitNumber = WorldMapCells[9][80].visitNumber = WorldMapCells[9][81].visitNumber = WorldMapCells[9][82].visitNumber = WorldMapCells[9][83].visitNumber = WorldMapCells[9][84].visitNumber = WorldMapCells[9][85].visitNumber = WorldMapCells[9][86].visitNumber = WorldMapCells[9][87].visitNumber = WorldMapCells[9][88].visitNumber = WorldMapCells[9][89].visitNumber = WorldMapCells[9][90].visitNumber = WorldMapCells[9][91].visitNumber = WorldMapCells[9][92].visitNumber = WorldMapCells[9][93].visitNumber = WorldMapCells[9][94].visitNumber = WorldMapCells[9][95].visitNumber = WorldMapCells[9][96].visitNumber = WorldMapCells[9][97].visitNumber = WorldMapCells[9][98].visitNumber = WorldMapCells[9][99].visitNumber = 2;
        //            WorldMapCells[23][0].visitNumber = WorldMapCells[23][1].visitNumber = WorldMapCells[23][2].visitNumber = WorldMapCells[23][3].visitNumber = WorldMapCells[23][4].visitNumber = WorldMapCells[23][5].visitNumber = WorldMapCells[23][6].visitNumber = WorldMapCells[23][7].visitNumber = WorldMapCells[23][8].visitNumber = WorldMapCells[23][9].visitNumber = WorldMapCells[23][10].visitNumber = WorldMapCells[23][11].visitNumber = WorldMapCells[23][12].visitNumber = WorldMapCells[23][13].visitNumber = WorldMapCells[23][14].visitNumber = WorldMapCells[23][15].visitNumber = WorldMapCells[23][16].visitNumber = WorldMapCells[23][17].visitNumber = WorldMapCells[23][18].visitNumber = WorldMapCells[23][19].visitNumber = WorldMapCells[23][20].visitNumber = WorldMapCells[23][21].visitNumber = WorldMapCells[23][22].visitNumber = WorldMapCells[23][23].visitNumber = WorldMapCells[23][24].visitNumber = WorldMapCells[23][25].visitNumber = WorldMapCells[23][26].visitNumber = WorldMapCells[23][27].visitNumber = WorldMapCells[23][28].visitNumber = WorldMapCells[23][29].visitNumber = WorldMapCells[23][30].visitNumber = WorldMapCells[23][31].visitNumber = WorldMapCells[23][32].visitNumber = WorldMapCells[23][33].visitNumber = WorldMapCells[23][34].visitNumber = WorldMapCells[23][35].visitNumber = WorldMapCells[23][36].visitNumber = WorldMapCells[23][37].visitNumber = WorldMapCells[23][38].visitNumber = WorldMapCells[23][39].visitNumber = WorldMapCells[23][40].visitNumber = WorldMapCells[23][41].visitNumber = WorldMapCells[23][42].visitNumber = WorldMapCells[23][43].visitNumber = WorldMapCells[23][44].visitNumber = WorldMapCells[23][45].visitNumber = WorldMapCells[23][46].visitNumber = WorldMapCells[23][47].visitNumber = WorldMapCells[23][48].visitNumber = WorldMapCells[23][49].visitNumber = WorldMapCells[23][50].visitNumber = WorldMapCells[23][51].visitNumber = WorldMapCells[23][52].visitNumber = WorldMapCells[23][53].visitNumber = WorldMapCells[23][54].visitNumber = WorldMapCells[23][55].visitNumber = WorldMapCells[23][56].visitNumber = WorldMapCells[23][57].visitNumber = WorldMapCells[23][58].visitNumber = WorldMapCells[23][59].visitNumber = WorldMapCells[23][60].visitNumber = WorldMapCells[23][61].visitNumber = WorldMapCells[23][62].visitNumber = WorldMapCells[23][63].visitNumber = WorldMapCells[23][64].visitNumber = WorldMapCells[23][65].visitNumber = WorldMapCells[23][66].visitNumber = WorldMapCells[23][67].visitNumber = WorldMapCells[23][68].visitNumber = WorldMapCells[23][69].visitNumber = WorldMapCells[23][70].visitNumber = WorldMapCells[23][71].visitNumber = WorldMapCells[23][72].visitNumber = WorldMapCells[23][73].visitNumber = WorldMapCells[23][74].visitNumber = WorldMapCells[23][75].visitNumber = WorldMapCells[23][76].visitNumber = WorldMapCells[23][77].visitNumber = WorldMapCells[23][78].visitNumber = WorldMapCells[23][79].visitNumber = WorldMapCells[23][80].visitNumber = WorldMapCells[23][81].visitNumber = WorldMapCells[23][82].visitNumber = WorldMapCells[23][83].visitNumber = WorldMapCells[23][84].visitNumber = WorldMapCells[23][85].visitNumber = WorldMapCells[23][86].visitNumber = WorldMapCells[23][87].visitNumber = WorldMapCells[23][88].visitNumber = WorldMapCells[23][89].visitNumber = WorldMapCells[23][90].visitNumber = WorldMapCells[23][91].visitNumber = WorldMapCells[23][92].visitNumber = WorldMapCells[23][93].visitNumber = WorldMapCells[23][94].visitNumber = WorldMapCells[23][95].visitNumber = WorldMapCells[23][96].visitNumber = WorldMapCells[23][97].visitNumber = WorldMapCells[23][98].visitNumber = WorldMapCells[23][99].visitNumber = 2;
        //            WorldMapCells[24][0].visitNumber = WorldMapCells[24][1].visitNumber = WorldMapCells[24][2].visitNumber = WorldMapCells[24][3].visitNumber = WorldMapCells[24][4].visitNumber = WorldMapCells[24][5].visitNumber = WorldMapCells[24][6].visitNumber = WorldMapCells[24][7].visitNumber = WorldMapCells[24][8].visitNumber = WorldMapCells[24][9].visitNumber = WorldMapCells[24][10].visitNumber = WorldMapCells[24][11].visitNumber = WorldMapCells[24][12].visitNumber = WorldMapCells[24][13].visitNumber = WorldMapCells[24][14].visitNumber = WorldMapCells[24][15].visitNumber = WorldMapCells[24][16].visitNumber = WorldMapCells[24][17].visitNumber = WorldMapCells[24][18].visitNumber = WorldMapCells[24][19].visitNumber = WorldMapCells[24][20].visitNumber = WorldMapCells[24][21].visitNumber = WorldMapCells[24][22].visitNumber = WorldMapCells[24][23].visitNumber = WorldMapCells[24][24].visitNumber = WorldMapCells[24][25].visitNumber = WorldMapCells[24][26].visitNumber = WorldMapCells[24][27].visitNumber = WorldMapCells[24][28].visitNumber = WorldMapCells[24][29].visitNumber = WorldMapCells[24][30].visitNumber = WorldMapCells[24][31].visitNumber = WorldMapCells[24][32].visitNumber = WorldMapCells[24][33].visitNumber = WorldMapCells[24][34].visitNumber = WorldMapCells[24][35].visitNumber = WorldMapCells[24][36].visitNumber = WorldMapCells[24][37].visitNumber = WorldMapCells[24][38].visitNumber = WorldMapCells[24][39].visitNumber = WorldMapCells[24][40].visitNumber = WorldMapCells[24][41].visitNumber = WorldMapCells[24][42].visitNumber = WorldMapCells[24][43].visitNumber = WorldMapCells[24][44].visitNumber = WorldMapCells[24][45].visitNumber = WorldMapCells[24][46].visitNumber = WorldMapCells[24][47].visitNumber = WorldMapCells[24][48].visitNumber = WorldMapCells[24][49].visitNumber = WorldMapCells[24][50].visitNumber = WorldMapCells[24][51].visitNumber = WorldMapCells[24][52].visitNumber = WorldMapCells[24][53].visitNumber = WorldMapCells[24][54].visitNumber = WorldMapCells[24][55].visitNumber = WorldMapCells[24][56].visitNumber = WorldMapCells[24][57].visitNumber = WorldMapCells[24][58].visitNumber = WorldMapCells[24][59].visitNumber = WorldMapCells[24][60].visitNumber = WorldMapCells[24][61].visitNumber = WorldMapCells[24][62].visitNumber = WorldMapCells[24][63].visitNumber = WorldMapCells[24][64].visitNumber = WorldMapCells[24][65].visitNumber = WorldMapCells[24][66].visitNumber = WorldMapCells[24][67].visitNumber = WorldMapCells[24][68].visitNumber = WorldMapCells[24][69].visitNumber = WorldMapCells[24][70].visitNumber = WorldMapCells[24][71].visitNumber = WorldMapCells[24][72].visitNumber = WorldMapCells[24][73].visitNumber = WorldMapCells[24][74].visitNumber = WorldMapCells[24][75].visitNumber = WorldMapCells[24][76].visitNumber = WorldMapCells[24][77].visitNumber = WorldMapCells[24][78].visitNumber = WorldMapCells[24][79].visitNumber = WorldMapCells[24][80].visitNumber = WorldMapCells[24][81].visitNumber = WorldMapCells[24][82].visitNumber = WorldMapCells[24][83].visitNumber = WorldMapCells[24][84].visitNumber = WorldMapCells[24][85].visitNumber = WorldMapCells[24][86].visitNumber = WorldMapCells[24][87].visitNumber = WorldMapCells[24][88].visitNumber = WorldMapCells[24][89].visitNumber = WorldMapCells[24][90].visitNumber = WorldMapCells[24][91].visitNumber = WorldMapCells[24][92].visitNumber = WorldMapCells[24][93].visitNumber = WorldMapCells[24][94].visitNumber = WorldMapCells[24][95].visitNumber = WorldMapCells[24][96].visitNumber = WorldMapCells[24][97].visitNumber = WorldMapCells[24][98].visitNumber = WorldMapCells[24][99].visitNumber = 2;
        //        }
        //        else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == true)
        //        {
        //            WorldMapCells[9][0].visitNumber = WorldMapCells[9][1].visitNumber = WorldMapCells[9][2].visitNumber = WorldMapCells[9][3].visitNumber = WorldMapCells[9][4].visitNumber = WorldMapCells[9][5].visitNumber = WorldMapCells[9][6].visitNumber = WorldMapCells[9][7].visitNumber = WorldMapCells[9][8].visitNumber = WorldMapCells[9][9].visitNumber = WorldMapCells[9][10].visitNumber = WorldMapCells[9][11].visitNumber = WorldMapCells[9][12].visitNumber = WorldMapCells[9][13].visitNumber = WorldMapCells[9][14].visitNumber = WorldMapCells[9][15].visitNumber = WorldMapCells[9][16].visitNumber = WorldMapCells[9][17].visitNumber = WorldMapCells[9][18].visitNumber = WorldMapCells[9][19].visitNumber = WorldMapCells[9][20].visitNumber = WorldMapCells[9][21].visitNumber = WorldMapCells[9][22].visitNumber = WorldMapCells[9][23].visitNumber = WorldMapCells[9][24].visitNumber = WorldMapCells[9][25].visitNumber = WorldMapCells[9][26].visitNumber = WorldMapCells[9][27].visitNumber = WorldMapCells[9][28].visitNumber = WorldMapCells[9][29].visitNumber = WorldMapCells[9][30].visitNumber = WorldMapCells[9][31].visitNumber = WorldMapCells[9][32].visitNumber = WorldMapCells[9][33].visitNumber = WorldMapCells[9][34].visitNumber = WorldMapCells[9][35].visitNumber = WorldMapCells[9][36].visitNumber = WorldMapCells[9][37].visitNumber = WorldMapCells[9][38].visitNumber = WorldMapCells[9][39].visitNumber = WorldMapCells[9][40].visitNumber = WorldMapCells[9][41].visitNumber = WorldMapCells[9][42].visitNumber = WorldMapCells[9][43].visitNumber = WorldMapCells[9][44].visitNumber = WorldMapCells[9][45].visitNumber = WorldMapCells[9][46].visitNumber = WorldMapCells[9][47].visitNumber = WorldMapCells[9][48].visitNumber = WorldMapCells[9][49].visitNumber = WorldMapCells[9][50].visitNumber = WorldMapCells[9][51].visitNumber = WorldMapCells[9][52].visitNumber = WorldMapCells[9][53].visitNumber = WorldMapCells[9][54].visitNumber = WorldMapCells[9][55].visitNumber = WorldMapCells[9][56].visitNumber = WorldMapCells[9][57].visitNumber = WorldMapCells[9][58].visitNumber = WorldMapCells[9][59].visitNumber = WorldMapCells[9][60].visitNumber = WorldMapCells[9][61].visitNumber = WorldMapCells[9][62].visitNumber = WorldMapCells[9][63].visitNumber = WorldMapCells[9][64].visitNumber = WorldMapCells[9][65].visitNumber = WorldMapCells[9][66].visitNumber = WorldMapCells[9][67].visitNumber = WorldMapCells[9][68].visitNumber = WorldMapCells[9][69].visitNumber = WorldMapCells[9][70].visitNumber = WorldMapCells[9][71].visitNumber = WorldMapCells[9][72].visitNumber = WorldMapCells[9][73].visitNumber = WorldMapCells[9][74].visitNumber = WorldMapCells[9][75].visitNumber = WorldMapCells[9][76].visitNumber = WorldMapCells[9][77].visitNumber = WorldMapCells[9][78].visitNumber = WorldMapCells[9][79].visitNumber = WorldMapCells[9][80].visitNumber = WorldMapCells[9][81].visitNumber = WorldMapCells[9][82].visitNumber = WorldMapCells[9][83].visitNumber = WorldMapCells[9][84].visitNumber = WorldMapCells[9][85].visitNumber = WorldMapCells[9][86].visitNumber = WorldMapCells[9][87].visitNumber = WorldMapCells[9][88].visitNumber = WorldMapCells[9][89].visitNumber = WorldMapCells[9][90].visitNumber = WorldMapCells[9][91].visitNumber = WorldMapCells[9][92].visitNumber = WorldMapCells[9][93].visitNumber = WorldMapCells[9][94].visitNumber = WorldMapCells[9][95].visitNumber = WorldMapCells[9][96].visitNumber = WorldMapCells[9][97].visitNumber = WorldMapCells[9][98].visitNumber = WorldMapCells[9][99].visitNumber = 3;
        //            WorldMapCells[23][0].visitNumber = WorldMapCells[23][1].visitNumber = WorldMapCells[23][2].visitNumber = WorldMapCells[23][3].visitNumber = WorldMapCells[23][4].visitNumber = WorldMapCells[23][5].visitNumber = WorldMapCells[23][6].visitNumber = WorldMapCells[23][7].visitNumber = WorldMapCells[23][8].visitNumber = WorldMapCells[23][9].visitNumber = WorldMapCells[23][10].visitNumber = WorldMapCells[23][11].visitNumber = WorldMapCells[23][12].visitNumber = WorldMapCells[23][13].visitNumber = WorldMapCells[23][14].visitNumber = WorldMapCells[23][15].visitNumber = WorldMapCells[23][16].visitNumber = WorldMapCells[23][17].visitNumber = WorldMapCells[23][18].visitNumber = WorldMapCells[23][19].visitNumber = WorldMapCells[23][20].visitNumber = WorldMapCells[23][21].visitNumber = WorldMapCells[23][22].visitNumber = WorldMapCells[23][23].visitNumber = WorldMapCells[23][24].visitNumber = WorldMapCells[23][25].visitNumber = WorldMapCells[23][26].visitNumber = WorldMapCells[23][27].visitNumber = WorldMapCells[23][28].visitNumber = WorldMapCells[23][29].visitNumber = WorldMapCells[23][30].visitNumber = WorldMapCells[23][31].visitNumber = WorldMapCells[23][32].visitNumber = WorldMapCells[23][33].visitNumber = WorldMapCells[23][34].visitNumber = WorldMapCells[23][35].visitNumber = WorldMapCells[23][36].visitNumber = WorldMapCells[23][37].visitNumber = WorldMapCells[23][38].visitNumber = WorldMapCells[23][39].visitNumber = WorldMapCells[23][40].visitNumber = WorldMapCells[23][41].visitNumber = WorldMapCells[23][42].visitNumber = WorldMapCells[23][43].visitNumber = WorldMapCells[23][44].visitNumber = WorldMapCells[23][45].visitNumber = WorldMapCells[23][46].visitNumber = WorldMapCells[23][47].visitNumber = WorldMapCells[23][48].visitNumber = WorldMapCells[23][49].visitNumber = WorldMapCells[23][50].visitNumber = WorldMapCells[23][51].visitNumber = WorldMapCells[23][52].visitNumber = WorldMapCells[23][53].visitNumber = WorldMapCells[23][54].visitNumber = WorldMapCells[23][55].visitNumber = WorldMapCells[23][56].visitNumber = WorldMapCells[23][57].visitNumber = WorldMapCells[23][58].visitNumber = WorldMapCells[23][59].visitNumber = WorldMapCells[23][60].visitNumber = WorldMapCells[23][61].visitNumber = WorldMapCells[23][62].visitNumber = WorldMapCells[23][63].visitNumber = WorldMapCells[23][64].visitNumber = WorldMapCells[23][65].visitNumber = WorldMapCells[23][66].visitNumber = WorldMapCells[23][67].visitNumber = WorldMapCells[23][68].visitNumber = WorldMapCells[23][69].visitNumber = WorldMapCells[23][70].visitNumber = WorldMapCells[23][71].visitNumber = WorldMapCells[23][72].visitNumber = WorldMapCells[23][73].visitNumber = WorldMapCells[23][74].visitNumber = WorldMapCells[23][75].visitNumber = WorldMapCells[23][76].visitNumber = WorldMapCells[23][77].visitNumber = WorldMapCells[23][78].visitNumber = WorldMapCells[23][79].visitNumber = WorldMapCells[23][80].visitNumber = WorldMapCells[23][81].visitNumber = WorldMapCells[23][82].visitNumber = WorldMapCells[23][83].visitNumber = WorldMapCells[23][84].visitNumber = WorldMapCells[23][85].visitNumber = WorldMapCells[23][86].visitNumber = WorldMapCells[23][87].visitNumber = WorldMapCells[23][88].visitNumber = WorldMapCells[23][89].visitNumber = WorldMapCells[23][90].visitNumber = WorldMapCells[23][91].visitNumber = WorldMapCells[23][92].visitNumber = WorldMapCells[23][93].visitNumber = WorldMapCells[23][94].visitNumber = WorldMapCells[23][95].visitNumber = WorldMapCells[23][96].visitNumber = WorldMapCells[23][97].visitNumber = WorldMapCells[23][98].visitNumber = WorldMapCells[23][99].visitNumber = 3;
        //            WorldMapCells[24][0].visitNumber = WorldMapCells[24][1].visitNumber = WorldMapCells[24][2].visitNumber = WorldMapCells[24][3].visitNumber = WorldMapCells[24][4].visitNumber = WorldMapCells[24][5].visitNumber = WorldMapCells[24][6].visitNumber = WorldMapCells[24][7].visitNumber = WorldMapCells[24][8].visitNumber = WorldMapCells[24][9].visitNumber = WorldMapCells[24][10].visitNumber = WorldMapCells[24][11].visitNumber = WorldMapCells[24][12].visitNumber = WorldMapCells[24][13].visitNumber = WorldMapCells[24][14].visitNumber = WorldMapCells[24][15].visitNumber = WorldMapCells[24][16].visitNumber = WorldMapCells[24][17].visitNumber = WorldMapCells[24][18].visitNumber = WorldMapCells[24][19].visitNumber = WorldMapCells[24][20].visitNumber = WorldMapCells[24][21].visitNumber = WorldMapCells[24][22].visitNumber = WorldMapCells[24][23].visitNumber = WorldMapCells[24][24].visitNumber = WorldMapCells[24][25].visitNumber = WorldMapCells[24][26].visitNumber = WorldMapCells[24][27].visitNumber = WorldMapCells[24][28].visitNumber = WorldMapCells[24][29].visitNumber = WorldMapCells[24][30].visitNumber = WorldMapCells[24][31].visitNumber = WorldMapCells[24][32].visitNumber = WorldMapCells[24][33].visitNumber = WorldMapCells[24][34].visitNumber = WorldMapCells[24][35].visitNumber = WorldMapCells[24][36].visitNumber = WorldMapCells[24][37].visitNumber = WorldMapCells[24][38].visitNumber = WorldMapCells[24][39].visitNumber = WorldMapCells[24][40].visitNumber = WorldMapCells[24][41].visitNumber = WorldMapCells[24][42].visitNumber = WorldMapCells[24][43].visitNumber = WorldMapCells[24][44].visitNumber = WorldMapCells[24][45].visitNumber = WorldMapCells[24][46].visitNumber = WorldMapCells[24][47].visitNumber = WorldMapCells[24][48].visitNumber = WorldMapCells[24][49].visitNumber = WorldMapCells[24][50].visitNumber = WorldMapCells[24][51].visitNumber = WorldMapCells[24][52].visitNumber = WorldMapCells[24][53].visitNumber = WorldMapCells[24][54].visitNumber = WorldMapCells[24][55].visitNumber = WorldMapCells[24][56].visitNumber = WorldMapCells[24][57].visitNumber = WorldMapCells[24][58].visitNumber = WorldMapCells[24][59].visitNumber = WorldMapCells[24][60].visitNumber = WorldMapCells[24][61].visitNumber = WorldMapCells[24][62].visitNumber = WorldMapCells[24][63].visitNumber = WorldMapCells[24][64].visitNumber = WorldMapCells[24][65].visitNumber = WorldMapCells[24][66].visitNumber = WorldMapCells[24][67].visitNumber = WorldMapCells[24][68].visitNumber = WorldMapCells[24][69].visitNumber = WorldMapCells[24][70].visitNumber = WorldMapCells[24][71].visitNumber = WorldMapCells[24][72].visitNumber = WorldMapCells[24][73].visitNumber = WorldMapCells[24][74].visitNumber = WorldMapCells[24][75].visitNumber = WorldMapCells[24][76].visitNumber = WorldMapCells[24][77].visitNumber = WorldMapCells[24][78].visitNumber = WorldMapCells[24][79].visitNumber = WorldMapCells[24][80].visitNumber = WorldMapCells[24][81].visitNumber = WorldMapCells[24][82].visitNumber = WorldMapCells[24][83].visitNumber = WorldMapCells[24][84].visitNumber = WorldMapCells[24][85].visitNumber = WorldMapCells[24][86].visitNumber = WorldMapCells[24][87].visitNumber = WorldMapCells[24][88].visitNumber = WorldMapCells[24][89].visitNumber = WorldMapCells[24][90].visitNumber = WorldMapCells[24][91].visitNumber = WorldMapCells[24][92].visitNumber = WorldMapCells[24][93].visitNumber = WorldMapCells[24][94].visitNumber = WorldMapCells[24][95].visitNumber = WorldMapCells[24][96].visitNumber = WorldMapCells[24][97].visitNumber = WorldMapCells[24][98].visitNumber = WorldMapCells[24][99].visitNumber = 3;
        //        }
        //        else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[10][89].visited == true
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == true)
        //        {
        //            WorldMapCells[9][0].visitNumber = WorldMapCells[9][1].visitNumber = WorldMapCells[9][2].visitNumber = WorldMapCells[9][3].visitNumber = WorldMapCells[9][4].visitNumber = WorldMapCells[9][5].visitNumber = WorldMapCells[9][6].visitNumber = WorldMapCells[9][7].visitNumber = WorldMapCells[9][8].visitNumber = WorldMapCells[9][9].visitNumber = WorldMapCells[9][10].visitNumber = WorldMapCells[9][11].visitNumber = WorldMapCells[9][12].visitNumber = WorldMapCells[9][13].visitNumber = WorldMapCells[9][14].visitNumber = WorldMapCells[9][15].visitNumber = WorldMapCells[9][16].visitNumber = WorldMapCells[9][17].visitNumber = WorldMapCells[9][18].visitNumber = WorldMapCells[9][19].visitNumber = WorldMapCells[9][20].visitNumber = WorldMapCells[9][21].visitNumber = WorldMapCells[9][22].visitNumber = WorldMapCells[9][23].visitNumber = WorldMapCells[9][24].visitNumber = WorldMapCells[9][25].visitNumber = WorldMapCells[9][26].visitNumber = WorldMapCells[9][27].visitNumber = WorldMapCells[9][28].visitNumber = WorldMapCells[9][29].visitNumber = WorldMapCells[9][30].visitNumber = WorldMapCells[9][31].visitNumber = WorldMapCells[9][32].visitNumber = WorldMapCells[9][33].visitNumber = WorldMapCells[9][34].visitNumber = WorldMapCells[9][35].visitNumber = WorldMapCells[9][36].visitNumber = WorldMapCells[9][37].visitNumber = WorldMapCells[9][38].visitNumber = WorldMapCells[9][39].visitNumber = WorldMapCells[9][40].visitNumber = WorldMapCells[9][41].visitNumber = WorldMapCells[9][42].visitNumber = WorldMapCells[9][43].visitNumber = WorldMapCells[9][44].visitNumber = WorldMapCells[9][45].visitNumber = WorldMapCells[9][46].visitNumber = WorldMapCells[9][47].visitNumber = WorldMapCells[9][48].visitNumber = WorldMapCells[9][49].visitNumber = WorldMapCells[9][50].visitNumber = WorldMapCells[9][51].visitNumber = WorldMapCells[9][52].visitNumber = WorldMapCells[9][53].visitNumber = WorldMapCells[9][54].visitNumber = WorldMapCells[9][55].visitNumber = WorldMapCells[9][56].visitNumber = WorldMapCells[9][57].visitNumber = WorldMapCells[9][58].visitNumber = WorldMapCells[9][59].visitNumber = WorldMapCells[9][60].visitNumber = WorldMapCells[9][61].visitNumber = WorldMapCells[9][62].visitNumber = WorldMapCells[9][63].visitNumber = WorldMapCells[9][64].visitNumber = WorldMapCells[9][65].visitNumber = WorldMapCells[9][66].visitNumber = WorldMapCells[9][67].visitNumber = WorldMapCells[9][68].visitNumber = WorldMapCells[9][69].visitNumber = WorldMapCells[9][70].visitNumber = WorldMapCells[9][71].visitNumber = WorldMapCells[9][72].visitNumber = WorldMapCells[9][73].visitNumber = WorldMapCells[9][74].visitNumber = WorldMapCells[9][75].visitNumber = WorldMapCells[9][76].visitNumber = WorldMapCells[9][77].visitNumber = WorldMapCells[9][78].visitNumber = WorldMapCells[9][79].visitNumber = WorldMapCells[9][80].visitNumber = WorldMapCells[9][81].visitNumber = WorldMapCells[9][82].visitNumber = WorldMapCells[9][83].visitNumber = WorldMapCells[9][84].visitNumber = WorldMapCells[9][85].visitNumber = WorldMapCells[9][86].visitNumber = WorldMapCells[9][87].visitNumber = WorldMapCells[9][88].visitNumber = WorldMapCells[9][89].visitNumber = WorldMapCells[9][90].visitNumber = WorldMapCells[9][91].visitNumber = WorldMapCells[9][92].visitNumber = WorldMapCells[9][93].visitNumber = WorldMapCells[9][94].visitNumber = WorldMapCells[9][95].visitNumber = WorldMapCells[9][96].visitNumber = WorldMapCells[9][97].visitNumber = WorldMapCells[9][98].visitNumber = WorldMapCells[9][99].visitNumber = 4;
        //            WorldMapCells[23][0].visitNumber = WorldMapCells[23][1].visitNumber = WorldMapCells[23][2].visitNumber = WorldMapCells[23][3].visitNumber = WorldMapCells[23][4].visitNumber = WorldMapCells[23][5].visitNumber = WorldMapCells[23][6].visitNumber = WorldMapCells[23][7].visitNumber = WorldMapCells[23][8].visitNumber = WorldMapCells[23][9].visitNumber = WorldMapCells[23][10].visitNumber = WorldMapCells[23][11].visitNumber = WorldMapCells[23][12].visitNumber = WorldMapCells[23][13].visitNumber = WorldMapCells[23][14].visitNumber = WorldMapCells[23][15].visitNumber = WorldMapCells[23][16].visitNumber = WorldMapCells[23][17].visitNumber = WorldMapCells[23][18].visitNumber = WorldMapCells[23][19].visitNumber = WorldMapCells[23][20].visitNumber = WorldMapCells[23][21].visitNumber = WorldMapCells[23][22].visitNumber = WorldMapCells[23][23].visitNumber = WorldMapCells[23][24].visitNumber = WorldMapCells[23][25].visitNumber = WorldMapCells[23][26].visitNumber = WorldMapCells[23][27].visitNumber = WorldMapCells[23][28].visitNumber = WorldMapCells[23][29].visitNumber = WorldMapCells[23][30].visitNumber = WorldMapCells[23][31].visitNumber = WorldMapCells[23][32].visitNumber = WorldMapCells[23][33].visitNumber = WorldMapCells[23][34].visitNumber = WorldMapCells[23][35].visitNumber = WorldMapCells[23][36].visitNumber = WorldMapCells[23][37].visitNumber = WorldMapCells[23][38].visitNumber = WorldMapCells[23][39].visitNumber = WorldMapCells[23][40].visitNumber = WorldMapCells[23][41].visitNumber = WorldMapCells[23][42].visitNumber = WorldMapCells[23][43].visitNumber = WorldMapCells[23][44].visitNumber = WorldMapCells[23][45].visitNumber = WorldMapCells[23][46].visitNumber = WorldMapCells[23][47].visitNumber = WorldMapCells[23][48].visitNumber = WorldMapCells[23][49].visitNumber = WorldMapCells[23][50].visitNumber = WorldMapCells[23][51].visitNumber = WorldMapCells[23][52].visitNumber = WorldMapCells[23][53].visitNumber = WorldMapCells[23][54].visitNumber = WorldMapCells[23][55].visitNumber = WorldMapCells[23][56].visitNumber = WorldMapCells[23][57].visitNumber = WorldMapCells[23][58].visitNumber = WorldMapCells[23][59].visitNumber = WorldMapCells[23][60].visitNumber = WorldMapCells[23][61].visitNumber = WorldMapCells[23][62].visitNumber = WorldMapCells[23][63].visitNumber = WorldMapCells[23][64].visitNumber = WorldMapCells[23][65].visitNumber = WorldMapCells[23][66].visitNumber = WorldMapCells[23][67].visitNumber = WorldMapCells[23][68].visitNumber = WorldMapCells[23][69].visitNumber = WorldMapCells[23][70].visitNumber = WorldMapCells[23][71].visitNumber = WorldMapCells[23][72].visitNumber = WorldMapCells[23][73].visitNumber = WorldMapCells[23][74].visitNumber = WorldMapCells[23][75].visitNumber = WorldMapCells[23][76].visitNumber = WorldMapCells[23][77].visitNumber = WorldMapCells[23][78].visitNumber = WorldMapCells[23][79].visitNumber = WorldMapCells[23][80].visitNumber = WorldMapCells[23][81].visitNumber = WorldMapCells[23][82].visitNumber = WorldMapCells[23][83].visitNumber = WorldMapCells[23][84].visitNumber = WorldMapCells[23][85].visitNumber = WorldMapCells[23][86].visitNumber = WorldMapCells[23][87].visitNumber = WorldMapCells[23][88].visitNumber = WorldMapCells[23][89].visitNumber = WorldMapCells[23][90].visitNumber = WorldMapCells[23][91].visitNumber = WorldMapCells[23][92].visitNumber = WorldMapCells[23][93].visitNumber = WorldMapCells[23][94].visitNumber = WorldMapCells[23][95].visitNumber = WorldMapCells[23][96].visitNumber = WorldMapCells[23][97].visitNumber = WorldMapCells[23][98].visitNumber = WorldMapCells[23][99].visitNumber = 4;
        //            WorldMapCells[24][0].visitNumber = WorldMapCells[24][1].visitNumber = WorldMapCells[24][2].visitNumber = WorldMapCells[24][3].visitNumber = WorldMapCells[24][4].visitNumber = WorldMapCells[24][5].visitNumber = WorldMapCells[24][6].visitNumber = WorldMapCells[24][7].visitNumber = WorldMapCells[24][8].visitNumber = WorldMapCells[24][9].visitNumber = WorldMapCells[24][10].visitNumber = WorldMapCells[24][11].visitNumber = WorldMapCells[24][12].visitNumber = WorldMapCells[24][13].visitNumber = WorldMapCells[24][14].visitNumber = WorldMapCells[24][15].visitNumber = WorldMapCells[24][16].visitNumber = WorldMapCells[24][17].visitNumber = WorldMapCells[24][18].visitNumber = WorldMapCells[24][19].visitNumber = WorldMapCells[24][20].visitNumber = WorldMapCells[24][21].visitNumber = WorldMapCells[24][22].visitNumber = WorldMapCells[24][23].visitNumber = WorldMapCells[24][24].visitNumber = WorldMapCells[24][25].visitNumber = WorldMapCells[24][26].visitNumber = WorldMapCells[24][27].visitNumber = WorldMapCells[24][28].visitNumber = WorldMapCells[24][29].visitNumber = WorldMapCells[24][30].visitNumber = WorldMapCells[24][31].visitNumber = WorldMapCells[24][32].visitNumber = WorldMapCells[24][33].visitNumber = WorldMapCells[24][34].visitNumber = WorldMapCells[24][35].visitNumber = WorldMapCells[24][36].visitNumber = WorldMapCells[24][37].visitNumber = WorldMapCells[24][38].visitNumber = WorldMapCells[24][39].visitNumber = WorldMapCells[24][40].visitNumber = WorldMapCells[24][41].visitNumber = WorldMapCells[24][42].visitNumber = WorldMapCells[24][43].visitNumber = WorldMapCells[24][44].visitNumber = WorldMapCells[24][45].visitNumber = WorldMapCells[24][46].visitNumber = WorldMapCells[24][47].visitNumber = WorldMapCells[24][48].visitNumber = WorldMapCells[24][49].visitNumber = WorldMapCells[24][50].visitNumber = WorldMapCells[24][51].visitNumber = WorldMapCells[24][52].visitNumber = WorldMapCells[24][53].visitNumber = WorldMapCells[24][54].visitNumber = WorldMapCells[24][55].visitNumber = WorldMapCells[24][56].visitNumber = WorldMapCells[24][57].visitNumber = WorldMapCells[24][58].visitNumber = WorldMapCells[24][59].visitNumber = WorldMapCells[24][60].visitNumber = WorldMapCells[24][61].visitNumber = WorldMapCells[24][62].visitNumber = WorldMapCells[24][63].visitNumber = WorldMapCells[24][64].visitNumber = WorldMapCells[24][65].visitNumber = WorldMapCells[24][66].visitNumber = WorldMapCells[24][67].visitNumber = WorldMapCells[24][68].visitNumber = WorldMapCells[24][69].visitNumber = WorldMapCells[24][70].visitNumber = WorldMapCells[24][71].visitNumber = WorldMapCells[24][72].visitNumber = WorldMapCells[24][73].visitNumber = WorldMapCells[24][74].visitNumber = WorldMapCells[24][75].visitNumber = WorldMapCells[24][76].visitNumber = WorldMapCells[24][77].visitNumber = WorldMapCells[24][78].visitNumber = WorldMapCells[24][79].visitNumber = WorldMapCells[24][80].visitNumber = WorldMapCells[24][81].visitNumber = WorldMapCells[24][82].visitNumber = WorldMapCells[24][83].visitNumber = WorldMapCells[24][84].visitNumber = WorldMapCells[24][85].visitNumber = WorldMapCells[24][86].visitNumber = WorldMapCells[24][87].visitNumber = WorldMapCells[24][88].visitNumber = WorldMapCells[24][89].visitNumber = WorldMapCells[24][90].visitNumber = WorldMapCells[24][91].visitNumber = WorldMapCells[24][92].visitNumber = WorldMapCells[24][93].visitNumber = WorldMapCells[24][94].visitNumber = WorldMapCells[24][95].visitNumber = WorldMapCells[24][96].visitNumber = WorldMapCells[24][97].visitNumber = WorldMapCells[24][98].visitNumber = WorldMapCells[24][99].visitNumber = 4;
        //        }
        //        else if (WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[10][89].visited == true)
        //        {
        //            WorldMapCells[9][0].visitNumber = WorldMapCells[9][1].visitNumber = WorldMapCells[9][2].visitNumber = WorldMapCells[9][3].visitNumber = WorldMapCells[9][4].visitNumber = WorldMapCells[9][5].visitNumber = WorldMapCells[9][6].visitNumber = WorldMapCells[9][7].visitNumber = WorldMapCells[9][8].visitNumber = WorldMapCells[9][9].visitNumber = WorldMapCells[9][10].visitNumber = WorldMapCells[9][11].visitNumber = WorldMapCells[9][12].visitNumber = WorldMapCells[9][13].visitNumber = WorldMapCells[9][14].visitNumber = WorldMapCells[9][15].visitNumber = WorldMapCells[9][16].visitNumber = WorldMapCells[9][17].visitNumber = WorldMapCells[9][18].visitNumber = WorldMapCells[9][19].visitNumber = WorldMapCells[9][20].visitNumber = WorldMapCells[9][21].visitNumber = WorldMapCells[9][22].visitNumber = WorldMapCells[9][23].visitNumber = WorldMapCells[9][24].visitNumber = WorldMapCells[9][25].visitNumber = WorldMapCells[9][26].visitNumber = WorldMapCells[9][27].visitNumber = WorldMapCells[9][28].visitNumber = WorldMapCells[9][29].visitNumber = WorldMapCells[9][30].visitNumber = WorldMapCells[9][31].visitNumber = WorldMapCells[9][32].visitNumber = WorldMapCells[9][33].visitNumber = WorldMapCells[9][34].visitNumber = WorldMapCells[9][35].visitNumber = WorldMapCells[9][36].visitNumber = WorldMapCells[9][37].visitNumber = WorldMapCells[9][38].visitNumber = WorldMapCells[9][39].visitNumber = WorldMapCells[9][40].visitNumber = WorldMapCells[9][41].visitNumber = WorldMapCells[9][42].visitNumber = WorldMapCells[9][43].visitNumber = WorldMapCells[9][44].visitNumber = WorldMapCells[9][45].visitNumber = WorldMapCells[9][46].visitNumber = WorldMapCells[9][47].visitNumber = WorldMapCells[9][48].visitNumber = WorldMapCells[9][49].visitNumber = WorldMapCells[9][50].visitNumber = WorldMapCells[9][51].visitNumber = WorldMapCells[9][52].visitNumber = WorldMapCells[9][53].visitNumber = WorldMapCells[9][54].visitNumber = WorldMapCells[9][55].visitNumber = WorldMapCells[9][56].visitNumber = WorldMapCells[9][57].visitNumber = WorldMapCells[9][58].visitNumber = WorldMapCells[9][59].visitNumber = WorldMapCells[9][60].visitNumber = WorldMapCells[9][61].visitNumber = WorldMapCells[9][62].visitNumber = WorldMapCells[9][63].visitNumber = WorldMapCells[9][64].visitNumber = WorldMapCells[9][65].visitNumber = WorldMapCells[9][66].visitNumber = WorldMapCells[9][67].visitNumber = WorldMapCells[9][68].visitNumber = WorldMapCells[9][69].visitNumber = WorldMapCells[9][70].visitNumber = WorldMapCells[9][71].visitNumber = WorldMapCells[9][72].visitNumber = WorldMapCells[9][73].visitNumber = WorldMapCells[9][74].visitNumber = WorldMapCells[9][75].visitNumber = WorldMapCells[9][76].visitNumber = WorldMapCells[9][77].visitNumber = WorldMapCells[9][78].visitNumber = WorldMapCells[9][79].visitNumber = WorldMapCells[9][80].visitNumber = WorldMapCells[9][81].visitNumber = WorldMapCells[9][82].visitNumber = WorldMapCells[9][83].visitNumber = WorldMapCells[9][84].visitNumber = WorldMapCells[9][85].visitNumber = WorldMapCells[9][86].visitNumber = WorldMapCells[9][87].visitNumber = WorldMapCells[9][88].visitNumber = WorldMapCells[9][89].visitNumber = WorldMapCells[9][90].visitNumber = WorldMapCells[9][91].visitNumber = WorldMapCells[9][92].visitNumber = WorldMapCells[9][93].visitNumber = WorldMapCells[9][94].visitNumber = WorldMapCells[9][95].visitNumber = WorldMapCells[9][96].visitNumber = WorldMapCells[9][97].visitNumber = WorldMapCells[9][98].visitNumber = WorldMapCells[9][99].visitNumber = 5;
        //            WorldMapCells[23][0].visitNumber = WorldMapCells[23][1].visitNumber = WorldMapCells[23][2].visitNumber = WorldMapCells[23][3].visitNumber = WorldMapCells[23][4].visitNumber = WorldMapCells[23][5].visitNumber = WorldMapCells[23][6].visitNumber = WorldMapCells[23][7].visitNumber = WorldMapCells[23][8].visitNumber = WorldMapCells[23][9].visitNumber = WorldMapCells[23][10].visitNumber = WorldMapCells[23][11].visitNumber = WorldMapCells[23][12].visitNumber = WorldMapCells[23][13].visitNumber = WorldMapCells[23][14].visitNumber = WorldMapCells[23][15].visitNumber = WorldMapCells[23][16].visitNumber = WorldMapCells[23][17].visitNumber = WorldMapCells[23][18].visitNumber = WorldMapCells[23][19].visitNumber = WorldMapCells[23][20].visitNumber = WorldMapCells[23][21].visitNumber = WorldMapCells[23][22].visitNumber = WorldMapCells[23][23].visitNumber = WorldMapCells[23][24].visitNumber = WorldMapCells[23][25].visitNumber = WorldMapCells[23][26].visitNumber = WorldMapCells[23][27].visitNumber = WorldMapCells[23][28].visitNumber = WorldMapCells[23][29].visitNumber = WorldMapCells[23][30].visitNumber = WorldMapCells[23][31].visitNumber = WorldMapCells[23][32].visitNumber = WorldMapCells[23][33].visitNumber = WorldMapCells[23][34].visitNumber = WorldMapCells[23][35].visitNumber = WorldMapCells[23][36].visitNumber = WorldMapCells[23][37].visitNumber = WorldMapCells[23][38].visitNumber = WorldMapCells[23][39].visitNumber = WorldMapCells[23][40].visitNumber = WorldMapCells[23][41].visitNumber = WorldMapCells[23][42].visitNumber = WorldMapCells[23][43].visitNumber = WorldMapCells[23][44].visitNumber = WorldMapCells[23][45].visitNumber = WorldMapCells[23][46].visitNumber = WorldMapCells[23][47].visitNumber = WorldMapCells[23][48].visitNumber = WorldMapCells[23][49].visitNumber = WorldMapCells[23][50].visitNumber = WorldMapCells[23][51].visitNumber = WorldMapCells[23][52].visitNumber = WorldMapCells[23][53].visitNumber = WorldMapCells[23][54].visitNumber = WorldMapCells[23][55].visitNumber = WorldMapCells[23][56].visitNumber = WorldMapCells[23][57].visitNumber = WorldMapCells[23][58].visitNumber = WorldMapCells[23][59].visitNumber = WorldMapCells[23][60].visitNumber = WorldMapCells[23][61].visitNumber = WorldMapCells[23][62].visitNumber = WorldMapCells[23][63].visitNumber = WorldMapCells[23][64].visitNumber = WorldMapCells[23][65].visitNumber = WorldMapCells[23][66].visitNumber = WorldMapCells[23][67].visitNumber = WorldMapCells[23][68].visitNumber = WorldMapCells[23][69].visitNumber = WorldMapCells[23][70].visitNumber = WorldMapCells[23][71].visitNumber = WorldMapCells[23][72].visitNumber = WorldMapCells[23][73].visitNumber = WorldMapCells[23][74].visitNumber = WorldMapCells[23][75].visitNumber = WorldMapCells[23][76].visitNumber = WorldMapCells[23][77].visitNumber = WorldMapCells[23][78].visitNumber = WorldMapCells[23][79].visitNumber = WorldMapCells[23][80].visitNumber = WorldMapCells[23][81].visitNumber = WorldMapCells[23][82].visitNumber = WorldMapCells[23][83].visitNumber = WorldMapCells[23][84].visitNumber = WorldMapCells[23][85].visitNumber = WorldMapCells[23][86].visitNumber = WorldMapCells[23][87].visitNumber = WorldMapCells[23][88].visitNumber = WorldMapCells[23][89].visitNumber = WorldMapCells[23][90].visitNumber = WorldMapCells[23][91].visitNumber = WorldMapCells[23][92].visitNumber = WorldMapCells[23][93].visitNumber = WorldMapCells[23][94].visitNumber = WorldMapCells[23][95].visitNumber = WorldMapCells[23][96].visitNumber = WorldMapCells[23][97].visitNumber = WorldMapCells[23][98].visitNumber = WorldMapCells[23][99].visitNumber = 5;
        //            WorldMapCells[24][0].visitNumber = WorldMapCells[24][1].visitNumber = WorldMapCells[24][2].visitNumber = WorldMapCells[24][3].visitNumber = WorldMapCells[24][4].visitNumber = WorldMapCells[24][5].visitNumber = WorldMapCells[24][6].visitNumber = WorldMapCells[24][7].visitNumber = WorldMapCells[24][8].visitNumber = WorldMapCells[24][9].visitNumber = WorldMapCells[24][10].visitNumber = WorldMapCells[24][11].visitNumber = WorldMapCells[24][12].visitNumber = WorldMapCells[24][13].visitNumber = WorldMapCells[24][14].visitNumber = WorldMapCells[24][15].visitNumber = WorldMapCells[24][16].visitNumber = WorldMapCells[24][17].visitNumber = WorldMapCells[24][18].visitNumber = WorldMapCells[24][19].visitNumber = WorldMapCells[24][20].visitNumber = WorldMapCells[24][21].visitNumber = WorldMapCells[24][22].visitNumber = WorldMapCells[24][23].visitNumber = WorldMapCells[24][24].visitNumber = WorldMapCells[24][25].visitNumber = WorldMapCells[24][26].visitNumber = WorldMapCells[24][27].visitNumber = WorldMapCells[24][28].visitNumber = WorldMapCells[24][29].visitNumber = WorldMapCells[24][30].visitNumber = WorldMapCells[24][31].visitNumber = WorldMapCells[24][32].visitNumber = WorldMapCells[24][33].visitNumber = WorldMapCells[24][34].visitNumber = WorldMapCells[24][35].visitNumber = WorldMapCells[24][36].visitNumber = WorldMapCells[24][37].visitNumber = WorldMapCells[24][38].visitNumber = WorldMapCells[24][39].visitNumber = WorldMapCells[24][40].visitNumber = WorldMapCells[24][41].visitNumber = WorldMapCells[24][42].visitNumber = WorldMapCells[24][43].visitNumber = WorldMapCells[24][44].visitNumber = WorldMapCells[24][45].visitNumber = WorldMapCells[24][46].visitNumber = WorldMapCells[24][47].visitNumber = WorldMapCells[24][48].visitNumber = WorldMapCells[24][49].visitNumber = WorldMapCells[24][50].visitNumber = WorldMapCells[24][51].visitNumber = WorldMapCells[24][52].visitNumber = WorldMapCells[24][53].visitNumber = WorldMapCells[24][54].visitNumber = WorldMapCells[24][55].visitNumber = WorldMapCells[24][56].visitNumber = WorldMapCells[24][57].visitNumber = WorldMapCells[24][58].visitNumber = WorldMapCells[24][59].visitNumber = WorldMapCells[24][60].visitNumber = WorldMapCells[24][61].visitNumber = WorldMapCells[24][62].visitNumber = WorldMapCells[24][63].visitNumber = WorldMapCells[24][64].visitNumber = WorldMapCells[24][65].visitNumber = WorldMapCells[24][66].visitNumber = WorldMapCells[24][67].visitNumber = WorldMapCells[24][68].visitNumber = WorldMapCells[24][69].visitNumber = WorldMapCells[24][70].visitNumber = WorldMapCells[24][71].visitNumber = WorldMapCells[24][72].visitNumber = WorldMapCells[24][73].visitNumber = WorldMapCells[24][74].visitNumber = WorldMapCells[24][75].visitNumber = WorldMapCells[24][76].visitNumber = WorldMapCells[24][77].visitNumber = WorldMapCells[24][78].visitNumber = WorldMapCells[24][79].visitNumber = WorldMapCells[24][80].visitNumber = WorldMapCells[24][81].visitNumber = WorldMapCells[24][82].visitNumber = WorldMapCells[24][83].visitNumber = WorldMapCells[24][84].visitNumber = WorldMapCells[24][85].visitNumber = WorldMapCells[24][86].visitNumber = WorldMapCells[24][87].visitNumber = WorldMapCells[24][88].visitNumber = WorldMapCells[24][89].visitNumber = WorldMapCells[24][90].visitNumber = WorldMapCells[24][91].visitNumber = WorldMapCells[24][92].visitNumber = WorldMapCells[24][93].visitNumber = WorldMapCells[24][94].visitNumber = WorldMapCells[24][95].visitNumber = WorldMapCells[24][96].visitNumber = WorldMapCells[24][97].visitNumber = WorldMapCells[24][98].visitNumber = WorldMapCells[24][99].visitNumber = 5;
        //        }
        //    }
        //    if (WorldMapCells[CurrentMap][CurrentLocation].mapName == WorldMapCells[10][89].mapName && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == WorldMapCells[10][89].cellLocation && WorldMapCells[8][11].firstVisit == true) //water
        //    {
        //        WorldMapCells[10][89].firstVisit = false;
        //        if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false)
        //        {
        //            WorldMapCells[10][0].visitNumber = WorldMapCells[10][1].visitNumber = WorldMapCells[10][2].visitNumber = WorldMapCells[10][3].visitNumber = WorldMapCells[10][4].visitNumber = WorldMapCells[10][5].visitNumber = WorldMapCells[10][6].visitNumber = WorldMapCells[10][7].visitNumber = WorldMapCells[10][8].visitNumber = WorldMapCells[10][9].visitNumber = WorldMapCells[10][10].visitNumber = WorldMapCells[10][11].visitNumber = WorldMapCells[10][12].visitNumber = WorldMapCells[10][13].visitNumber = WorldMapCells[10][14].visitNumber = WorldMapCells[10][15].visitNumber = WorldMapCells[10][16].visitNumber = WorldMapCells[10][17].visitNumber = WorldMapCells[10][18].visitNumber = WorldMapCells[10][19].visitNumber = WorldMapCells[10][20].visitNumber = WorldMapCells[10][21].visitNumber = WorldMapCells[10][22].visitNumber = WorldMapCells[10][23].visitNumber = WorldMapCells[10][24].visitNumber = WorldMapCells[10][25].visitNumber = WorldMapCells[10][26].visitNumber = WorldMapCells[10][27].visitNumber = WorldMapCells[10][28].visitNumber = WorldMapCells[10][29].visitNumber = WorldMapCells[10][30].visitNumber = WorldMapCells[10][31].visitNumber = WorldMapCells[10][32].visitNumber = WorldMapCells[10][33].visitNumber = WorldMapCells[10][34].visitNumber = WorldMapCells[10][35].visitNumber = WorldMapCells[10][36].visitNumber = WorldMapCells[10][37].visitNumber = WorldMapCells[10][38].visitNumber = WorldMapCells[10][39].visitNumber = WorldMapCells[10][40].visitNumber = WorldMapCells[10][41].visitNumber = WorldMapCells[10][42].visitNumber = WorldMapCells[10][43].visitNumber = WorldMapCells[10][44].visitNumber = WorldMapCells[10][45].visitNumber = WorldMapCells[10][46].visitNumber = WorldMapCells[10][47].visitNumber = WorldMapCells[10][48].visitNumber = WorldMapCells[10][49].visitNumber = WorldMapCells[10][50].visitNumber = WorldMapCells[10][51].visitNumber = WorldMapCells[10][52].visitNumber = WorldMapCells[10][53].visitNumber = WorldMapCells[10][54].visitNumber = WorldMapCells[10][55].visitNumber = WorldMapCells[10][56].visitNumber = WorldMapCells[10][57].visitNumber = WorldMapCells[10][58].visitNumber = WorldMapCells[10][59].visitNumber = WorldMapCells[10][60].visitNumber = WorldMapCells[10][61].visitNumber = WorldMapCells[10][62].visitNumber = WorldMapCells[10][63].visitNumber = WorldMapCells[10][64].visitNumber = WorldMapCells[10][65].visitNumber = WorldMapCells[10][66].visitNumber = WorldMapCells[10][67].visitNumber = WorldMapCells[10][68].visitNumber = WorldMapCells[10][69].visitNumber = WorldMapCells[10][70].visitNumber = WorldMapCells[10][71].visitNumber = WorldMapCells[10][72].visitNumber = WorldMapCells[10][73].visitNumber = WorldMapCells[10][74].visitNumber = WorldMapCells[10][75].visitNumber = WorldMapCells[10][76].visitNumber = WorldMapCells[10][77].visitNumber = WorldMapCells[10][78].visitNumber = WorldMapCells[10][79].visitNumber = WorldMapCells[10][80].visitNumber = WorldMapCells[10][81].visitNumber = WorldMapCells[10][82].visitNumber = WorldMapCells[10][83].visitNumber = WorldMapCells[10][84].visitNumber = WorldMapCells[10][85].visitNumber = WorldMapCells[10][86].visitNumber = WorldMapCells[10][87].visitNumber = WorldMapCells[10][88].visitNumber = WorldMapCells[10][89].visitNumber = WorldMapCells[10][90].visitNumber = WorldMapCells[10][91].visitNumber = WorldMapCells[10][92].visitNumber = WorldMapCells[10][93].visitNumber = WorldMapCells[10][94].visitNumber = WorldMapCells[10][95].visitNumber = WorldMapCells[10][96].visitNumber = WorldMapCells[10][97].visitNumber = WorldMapCells[10][98].visitNumber = WorldMapCells[10][99].visitNumber = 1;
        //            WorldMapCells[26][0].visitNumber = WorldMapCells[26][1].visitNumber = WorldMapCells[26][2].visitNumber = WorldMapCells[26][3].visitNumber = WorldMapCells[26][4].visitNumber = WorldMapCells[26][5].visitNumber = WorldMapCells[26][6].visitNumber = WorldMapCells[26][7].visitNumber = WorldMapCells[26][8].visitNumber = WorldMapCells[26][9].visitNumber = WorldMapCells[26][10].visitNumber = WorldMapCells[26][11].visitNumber = WorldMapCells[26][12].visitNumber = WorldMapCells[26][13].visitNumber = WorldMapCells[26][14].visitNumber = WorldMapCells[26][15].visitNumber = WorldMapCells[26][16].visitNumber = WorldMapCells[26][17].visitNumber = WorldMapCells[26][18].visitNumber = WorldMapCells[26][19].visitNumber = WorldMapCells[26][20].visitNumber = WorldMapCells[26][21].visitNumber = WorldMapCells[26][22].visitNumber = WorldMapCells[26][23].visitNumber = WorldMapCells[26][24].visitNumber = WorldMapCells[26][25].visitNumber = WorldMapCells[26][26].visitNumber = WorldMapCells[26][27].visitNumber = WorldMapCells[26][28].visitNumber = WorldMapCells[26][29].visitNumber = WorldMapCells[26][30].visitNumber = WorldMapCells[26][31].visitNumber = WorldMapCells[26][32].visitNumber = WorldMapCells[26][33].visitNumber = WorldMapCells[26][34].visitNumber = WorldMapCells[26][35].visitNumber = WorldMapCells[26][36].visitNumber = WorldMapCells[26][37].visitNumber = WorldMapCells[26][38].visitNumber = WorldMapCells[26][39].visitNumber = WorldMapCells[26][40].visitNumber = WorldMapCells[26][41].visitNumber = WorldMapCells[26][42].visitNumber = WorldMapCells[26][43].visitNumber = WorldMapCells[26][44].visitNumber = WorldMapCells[26][45].visitNumber = WorldMapCells[26][46].visitNumber = WorldMapCells[26][47].visitNumber = WorldMapCells[26][48].visitNumber = WorldMapCells[26][49].visitNumber = WorldMapCells[26][50].visitNumber = WorldMapCells[26][51].visitNumber = WorldMapCells[26][52].visitNumber = WorldMapCells[26][53].visitNumber = WorldMapCells[26][54].visitNumber = WorldMapCells[26][55].visitNumber = WorldMapCells[26][56].visitNumber = WorldMapCells[26][57].visitNumber = WorldMapCells[26][58].visitNumber = WorldMapCells[26][59].visitNumber = WorldMapCells[26][60].visitNumber = WorldMapCells[26][61].visitNumber = WorldMapCells[26][62].visitNumber = WorldMapCells[26][63].visitNumber = WorldMapCells[26][64].visitNumber = WorldMapCells[26][65].visitNumber = WorldMapCells[26][66].visitNumber = WorldMapCells[26][67].visitNumber = WorldMapCells[26][68].visitNumber = WorldMapCells[26][69].visitNumber = WorldMapCells[26][70].visitNumber = WorldMapCells[26][71].visitNumber = WorldMapCells[26][72].visitNumber = WorldMapCells[26][73].visitNumber = WorldMapCells[26][74].visitNumber = WorldMapCells[26][75].visitNumber = WorldMapCells[26][76].visitNumber = WorldMapCells[26][77].visitNumber = WorldMapCells[26][78].visitNumber = WorldMapCells[26][79].visitNumber = WorldMapCells[26][80].visitNumber = WorldMapCells[26][81].visitNumber = WorldMapCells[26][82].visitNumber = WorldMapCells[26][83].visitNumber = WorldMapCells[26][84].visitNumber = WorldMapCells[26][85].visitNumber = WorldMapCells[26][86].visitNumber = WorldMapCells[26][87].visitNumber = WorldMapCells[26][88].visitNumber = WorldMapCells[26][89].visitNumber = WorldMapCells[26][90].visitNumber = WorldMapCells[26][91].visitNumber = WorldMapCells[26][92].visitNumber = WorldMapCells[26][93].visitNumber = WorldMapCells[26][94].visitNumber = WorldMapCells[26][95].visitNumber = WorldMapCells[26][96].visitNumber = WorldMapCells[26][97].visitNumber = WorldMapCells[26][98].visitNumber = WorldMapCells[26][99].visitNumber = 1;
        //            WorldMapCells[27][0].visitNumber = WorldMapCells[27][1].visitNumber = WorldMapCells[27][2].visitNumber = WorldMapCells[27][3].visitNumber = WorldMapCells[27][4].visitNumber = WorldMapCells[27][5].visitNumber = WorldMapCells[27][6].visitNumber = WorldMapCells[27][7].visitNumber = WorldMapCells[27][8].visitNumber = WorldMapCells[27][9].visitNumber = WorldMapCells[27][10].visitNumber = WorldMapCells[27][11].visitNumber = WorldMapCells[27][12].visitNumber = WorldMapCells[27][13].visitNumber = WorldMapCells[27][14].visitNumber = WorldMapCells[27][15].visitNumber = WorldMapCells[27][16].visitNumber = WorldMapCells[27][17].visitNumber = WorldMapCells[27][18].visitNumber = WorldMapCells[27][19].visitNumber = WorldMapCells[27][20].visitNumber = WorldMapCells[27][21].visitNumber = WorldMapCells[27][22].visitNumber = WorldMapCells[27][23].visitNumber = WorldMapCells[27][24].visitNumber = WorldMapCells[27][25].visitNumber = WorldMapCells[27][26].visitNumber = WorldMapCells[27][27].visitNumber = WorldMapCells[27][28].visitNumber = WorldMapCells[27][29].visitNumber = WorldMapCells[27][30].visitNumber = WorldMapCells[27][31].visitNumber = WorldMapCells[27][32].visitNumber = WorldMapCells[27][33].visitNumber = WorldMapCells[27][34].visitNumber = WorldMapCells[27][35].visitNumber = WorldMapCells[27][36].visitNumber = WorldMapCells[27][37].visitNumber = WorldMapCells[27][38].visitNumber = WorldMapCells[27][39].visitNumber = WorldMapCells[27][40].visitNumber = WorldMapCells[27][41].visitNumber = WorldMapCells[27][42].visitNumber = WorldMapCells[27][43].visitNumber = WorldMapCells[27][44].visitNumber = WorldMapCells[27][45].visitNumber = WorldMapCells[27][46].visitNumber = WorldMapCells[27][47].visitNumber = WorldMapCells[27][48].visitNumber = WorldMapCells[27][49].visitNumber = WorldMapCells[27][50].visitNumber = WorldMapCells[27][51].visitNumber = WorldMapCells[27][52].visitNumber = WorldMapCells[27][53].visitNumber = WorldMapCells[27][54].visitNumber = WorldMapCells[27][55].visitNumber = WorldMapCells[27][56].visitNumber = WorldMapCells[27][57].visitNumber = WorldMapCells[27][58].visitNumber = WorldMapCells[27][59].visitNumber = WorldMapCells[27][60].visitNumber = WorldMapCells[27][61].visitNumber = WorldMapCells[27][62].visitNumber = WorldMapCells[27][63].visitNumber = WorldMapCells[27][64].visitNumber = WorldMapCells[27][65].visitNumber = WorldMapCells[27][66].visitNumber = WorldMapCells[27][67].visitNumber = WorldMapCells[27][68].visitNumber = WorldMapCells[27][69].visitNumber = WorldMapCells[27][70].visitNumber = WorldMapCells[27][71].visitNumber = WorldMapCells[27][72].visitNumber = WorldMapCells[27][73].visitNumber = WorldMapCells[27][74].visitNumber = WorldMapCells[27][75].visitNumber = WorldMapCells[27][76].visitNumber = WorldMapCells[27][77].visitNumber = WorldMapCells[27][78].visitNumber = WorldMapCells[27][79].visitNumber = WorldMapCells[27][80].visitNumber = WorldMapCells[27][81].visitNumber = WorldMapCells[27][82].visitNumber = WorldMapCells[27][83].visitNumber = WorldMapCells[27][84].visitNumber = WorldMapCells[27][85].visitNumber = WorldMapCells[27][86].visitNumber = WorldMapCells[27][87].visitNumber = WorldMapCells[27][88].visitNumber = WorldMapCells[27][89].visitNumber = WorldMapCells[27][90].visitNumber = WorldMapCells[27][91].visitNumber = WorldMapCells[27][92].visitNumber = WorldMapCells[27][93].visitNumber = WorldMapCells[27][94].visitNumber = WorldMapCells[27][95].visitNumber = WorldMapCells[27][96].visitNumber = WorldMapCells[27][97].visitNumber = WorldMapCells[27][98].visitNumber = WorldMapCells[27][99].visitNumber = 1;
        //        }
        //        else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false)
        //        {
        //            WorldMapCells[10][0].visitNumber = WorldMapCells[10][1].visitNumber = WorldMapCells[10][2].visitNumber = WorldMapCells[10][3].visitNumber = WorldMapCells[10][4].visitNumber = WorldMapCells[10][5].visitNumber = WorldMapCells[10][6].visitNumber = WorldMapCells[10][7].visitNumber = WorldMapCells[10][8].visitNumber = WorldMapCells[10][9].visitNumber = WorldMapCells[10][10].visitNumber = WorldMapCells[10][11].visitNumber = WorldMapCells[10][12].visitNumber = WorldMapCells[10][13].visitNumber = WorldMapCells[10][14].visitNumber = WorldMapCells[10][15].visitNumber = WorldMapCells[10][16].visitNumber = WorldMapCells[10][17].visitNumber = WorldMapCells[10][18].visitNumber = WorldMapCells[10][19].visitNumber = WorldMapCells[10][20].visitNumber = WorldMapCells[10][21].visitNumber = WorldMapCells[10][22].visitNumber = WorldMapCells[10][23].visitNumber = WorldMapCells[10][24].visitNumber = WorldMapCells[10][25].visitNumber = WorldMapCells[10][26].visitNumber = WorldMapCells[10][27].visitNumber = WorldMapCells[10][28].visitNumber = WorldMapCells[10][29].visitNumber = WorldMapCells[10][30].visitNumber = WorldMapCells[10][31].visitNumber = WorldMapCells[10][32].visitNumber = WorldMapCells[10][33].visitNumber = WorldMapCells[10][34].visitNumber = WorldMapCells[10][35].visitNumber = WorldMapCells[10][36].visitNumber = WorldMapCells[10][37].visitNumber = WorldMapCells[10][38].visitNumber = WorldMapCells[10][39].visitNumber = WorldMapCells[10][40].visitNumber = WorldMapCells[10][41].visitNumber = WorldMapCells[10][42].visitNumber = WorldMapCells[10][43].visitNumber = WorldMapCells[10][44].visitNumber = WorldMapCells[10][45].visitNumber = WorldMapCells[10][46].visitNumber = WorldMapCells[10][47].visitNumber = WorldMapCells[10][48].visitNumber = WorldMapCells[10][49].visitNumber = WorldMapCells[10][50].visitNumber = WorldMapCells[10][51].visitNumber = WorldMapCells[10][52].visitNumber = WorldMapCells[10][53].visitNumber = WorldMapCells[10][54].visitNumber = WorldMapCells[10][55].visitNumber = WorldMapCells[10][56].visitNumber = WorldMapCells[10][57].visitNumber = WorldMapCells[10][58].visitNumber = WorldMapCells[10][59].visitNumber = WorldMapCells[10][60].visitNumber = WorldMapCells[10][61].visitNumber = WorldMapCells[10][62].visitNumber = WorldMapCells[10][63].visitNumber = WorldMapCells[10][64].visitNumber = WorldMapCells[10][65].visitNumber = WorldMapCells[10][66].visitNumber = WorldMapCells[10][67].visitNumber = WorldMapCells[10][68].visitNumber = WorldMapCells[10][69].visitNumber = WorldMapCells[10][70].visitNumber = WorldMapCells[10][71].visitNumber = WorldMapCells[10][72].visitNumber = WorldMapCells[10][73].visitNumber = WorldMapCells[10][74].visitNumber = WorldMapCells[10][75].visitNumber = WorldMapCells[10][76].visitNumber = WorldMapCells[10][77].visitNumber = WorldMapCells[10][78].visitNumber = WorldMapCells[10][79].visitNumber = WorldMapCells[10][80].visitNumber = WorldMapCells[10][81].visitNumber = WorldMapCells[10][82].visitNumber = WorldMapCells[10][83].visitNumber = WorldMapCells[10][84].visitNumber = WorldMapCells[10][85].visitNumber = WorldMapCells[10][86].visitNumber = WorldMapCells[10][87].visitNumber = WorldMapCells[10][88].visitNumber = WorldMapCells[10][89].visitNumber = WorldMapCells[10][90].visitNumber = WorldMapCells[10][91].visitNumber = WorldMapCells[10][92].visitNumber = WorldMapCells[10][93].visitNumber = WorldMapCells[10][94].visitNumber = WorldMapCells[10][95].visitNumber = WorldMapCells[10][96].visitNumber = WorldMapCells[10][97].visitNumber = WorldMapCells[10][98].visitNumber = WorldMapCells[10][99].visitNumber = 2;
        //            WorldMapCells[26][0].visitNumber = WorldMapCells[26][1].visitNumber = WorldMapCells[26][2].visitNumber = WorldMapCells[26][3].visitNumber = WorldMapCells[26][4].visitNumber = WorldMapCells[26][5].visitNumber = WorldMapCells[26][6].visitNumber = WorldMapCells[26][7].visitNumber = WorldMapCells[26][8].visitNumber = WorldMapCells[26][9].visitNumber = WorldMapCells[26][10].visitNumber = WorldMapCells[26][11].visitNumber = WorldMapCells[26][12].visitNumber = WorldMapCells[26][13].visitNumber = WorldMapCells[26][14].visitNumber = WorldMapCells[26][15].visitNumber = WorldMapCells[26][16].visitNumber = WorldMapCells[26][17].visitNumber = WorldMapCells[26][18].visitNumber = WorldMapCells[26][19].visitNumber = WorldMapCells[26][20].visitNumber = WorldMapCells[26][21].visitNumber = WorldMapCells[26][22].visitNumber = WorldMapCells[26][23].visitNumber = WorldMapCells[26][24].visitNumber = WorldMapCells[26][25].visitNumber = WorldMapCells[26][26].visitNumber = WorldMapCells[26][27].visitNumber = WorldMapCells[26][28].visitNumber = WorldMapCells[26][29].visitNumber = WorldMapCells[26][30].visitNumber = WorldMapCells[26][31].visitNumber = WorldMapCells[26][32].visitNumber = WorldMapCells[26][33].visitNumber = WorldMapCells[26][34].visitNumber = WorldMapCells[26][35].visitNumber = WorldMapCells[26][36].visitNumber = WorldMapCells[26][37].visitNumber = WorldMapCells[26][38].visitNumber = WorldMapCells[26][39].visitNumber = WorldMapCells[26][40].visitNumber = WorldMapCells[26][41].visitNumber = WorldMapCells[26][42].visitNumber = WorldMapCells[26][43].visitNumber = WorldMapCells[26][44].visitNumber = WorldMapCells[26][45].visitNumber = WorldMapCells[26][46].visitNumber = WorldMapCells[26][47].visitNumber = WorldMapCells[26][48].visitNumber = WorldMapCells[26][49].visitNumber = WorldMapCells[26][50].visitNumber = WorldMapCells[26][51].visitNumber = WorldMapCells[26][52].visitNumber = WorldMapCells[26][53].visitNumber = WorldMapCells[26][54].visitNumber = WorldMapCells[26][55].visitNumber = WorldMapCells[26][56].visitNumber = WorldMapCells[26][57].visitNumber = WorldMapCells[26][58].visitNumber = WorldMapCells[26][59].visitNumber = WorldMapCells[26][60].visitNumber = WorldMapCells[26][61].visitNumber = WorldMapCells[26][62].visitNumber = WorldMapCells[26][63].visitNumber = WorldMapCells[26][64].visitNumber = WorldMapCells[26][65].visitNumber = WorldMapCells[26][66].visitNumber = WorldMapCells[26][67].visitNumber = WorldMapCells[26][68].visitNumber = WorldMapCells[26][69].visitNumber = WorldMapCells[26][70].visitNumber = WorldMapCells[26][71].visitNumber = WorldMapCells[26][72].visitNumber = WorldMapCells[26][73].visitNumber = WorldMapCells[26][74].visitNumber = WorldMapCells[26][75].visitNumber = WorldMapCells[26][76].visitNumber = WorldMapCells[26][77].visitNumber = WorldMapCells[26][78].visitNumber = WorldMapCells[26][79].visitNumber = WorldMapCells[26][80].visitNumber = WorldMapCells[26][81].visitNumber = WorldMapCells[26][82].visitNumber = WorldMapCells[26][83].visitNumber = WorldMapCells[26][84].visitNumber = WorldMapCells[26][85].visitNumber = WorldMapCells[26][86].visitNumber = WorldMapCells[26][87].visitNumber = WorldMapCells[26][88].visitNumber = WorldMapCells[26][89].visitNumber = WorldMapCells[26][90].visitNumber = WorldMapCells[26][91].visitNumber = WorldMapCells[26][92].visitNumber = WorldMapCells[26][93].visitNumber = WorldMapCells[26][94].visitNumber = WorldMapCells[26][95].visitNumber = WorldMapCells[26][96].visitNumber = WorldMapCells[26][97].visitNumber = WorldMapCells[26][98].visitNumber = WorldMapCells[26][99].visitNumber = 2;
        //            WorldMapCells[27][0].visitNumber = WorldMapCells[27][1].visitNumber = WorldMapCells[27][2].visitNumber = WorldMapCells[27][3].visitNumber = WorldMapCells[27][4].visitNumber = WorldMapCells[27][5].visitNumber = WorldMapCells[27][6].visitNumber = WorldMapCells[27][7].visitNumber = WorldMapCells[27][8].visitNumber = WorldMapCells[27][9].visitNumber = WorldMapCells[27][10].visitNumber = WorldMapCells[27][11].visitNumber = WorldMapCells[27][12].visitNumber = WorldMapCells[27][13].visitNumber = WorldMapCells[27][14].visitNumber = WorldMapCells[27][15].visitNumber = WorldMapCells[27][16].visitNumber = WorldMapCells[27][17].visitNumber = WorldMapCells[27][18].visitNumber = WorldMapCells[27][19].visitNumber = WorldMapCells[27][20].visitNumber = WorldMapCells[27][21].visitNumber = WorldMapCells[27][22].visitNumber = WorldMapCells[27][23].visitNumber = WorldMapCells[27][24].visitNumber = WorldMapCells[27][25].visitNumber = WorldMapCells[27][26].visitNumber = WorldMapCells[27][27].visitNumber = WorldMapCells[27][28].visitNumber = WorldMapCells[27][29].visitNumber = WorldMapCells[27][30].visitNumber = WorldMapCells[27][31].visitNumber = WorldMapCells[27][32].visitNumber = WorldMapCells[27][33].visitNumber = WorldMapCells[27][34].visitNumber = WorldMapCells[27][35].visitNumber = WorldMapCells[27][36].visitNumber = WorldMapCells[27][37].visitNumber = WorldMapCells[27][38].visitNumber = WorldMapCells[27][39].visitNumber = WorldMapCells[27][40].visitNumber = WorldMapCells[27][41].visitNumber = WorldMapCells[27][42].visitNumber = WorldMapCells[27][43].visitNumber = WorldMapCells[27][44].visitNumber = WorldMapCells[27][45].visitNumber = WorldMapCells[27][46].visitNumber = WorldMapCells[27][47].visitNumber = WorldMapCells[27][48].visitNumber = WorldMapCells[27][49].visitNumber = WorldMapCells[27][50].visitNumber = WorldMapCells[27][51].visitNumber = WorldMapCells[27][52].visitNumber = WorldMapCells[27][53].visitNumber = WorldMapCells[27][54].visitNumber = WorldMapCells[27][55].visitNumber = WorldMapCells[27][56].visitNumber = WorldMapCells[27][57].visitNumber = WorldMapCells[27][58].visitNumber = WorldMapCells[27][59].visitNumber = WorldMapCells[27][60].visitNumber = WorldMapCells[27][61].visitNumber = WorldMapCells[27][62].visitNumber = WorldMapCells[27][63].visitNumber = WorldMapCells[27][64].visitNumber = WorldMapCells[27][65].visitNumber = WorldMapCells[27][66].visitNumber = WorldMapCells[27][67].visitNumber = WorldMapCells[27][68].visitNumber = WorldMapCells[27][69].visitNumber = WorldMapCells[27][70].visitNumber = WorldMapCells[27][71].visitNumber = WorldMapCells[27][72].visitNumber = WorldMapCells[27][73].visitNumber = WorldMapCells[27][74].visitNumber = WorldMapCells[27][75].visitNumber = WorldMapCells[27][76].visitNumber = WorldMapCells[27][77].visitNumber = WorldMapCells[27][78].visitNumber = WorldMapCells[27][79].visitNumber = WorldMapCells[27][80].visitNumber = WorldMapCells[27][81].visitNumber = WorldMapCells[27][82].visitNumber = WorldMapCells[27][83].visitNumber = WorldMapCells[27][84].visitNumber = WorldMapCells[27][85].visitNumber = WorldMapCells[27][86].visitNumber = WorldMapCells[27][87].visitNumber = WorldMapCells[27][88].visitNumber = WorldMapCells[27][89].visitNumber = WorldMapCells[27][90].visitNumber = WorldMapCells[27][91].visitNumber = WorldMapCells[27][92].visitNumber = WorldMapCells[27][93].visitNumber = WorldMapCells[27][94].visitNumber = WorldMapCells[27][95].visitNumber = WorldMapCells[27][96].visitNumber = WorldMapCells[27][97].visitNumber = WorldMapCells[27][98].visitNumber = WorldMapCells[27][99].visitNumber = 2;
        //        }
        //        else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true
        //            || WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true)
        //        {
        //            WorldMapCells[10][0].visitNumber = WorldMapCells[10][1].visitNumber = WorldMapCells[10][2].visitNumber = WorldMapCells[10][3].visitNumber = WorldMapCells[10][4].visitNumber = WorldMapCells[10][5].visitNumber = WorldMapCells[10][6].visitNumber = WorldMapCells[10][7].visitNumber = WorldMapCells[10][8].visitNumber = WorldMapCells[10][9].visitNumber = WorldMapCells[10][10].visitNumber = WorldMapCells[10][11].visitNumber = WorldMapCells[10][12].visitNumber = WorldMapCells[10][13].visitNumber = WorldMapCells[10][14].visitNumber = WorldMapCells[10][15].visitNumber = WorldMapCells[10][16].visitNumber = WorldMapCells[10][17].visitNumber = WorldMapCells[10][18].visitNumber = WorldMapCells[10][19].visitNumber = WorldMapCells[10][20].visitNumber = WorldMapCells[10][21].visitNumber = WorldMapCells[10][22].visitNumber = WorldMapCells[10][23].visitNumber = WorldMapCells[10][24].visitNumber = WorldMapCells[10][25].visitNumber = WorldMapCells[10][26].visitNumber = WorldMapCells[10][27].visitNumber = WorldMapCells[10][28].visitNumber = WorldMapCells[10][29].visitNumber = WorldMapCells[10][30].visitNumber = WorldMapCells[10][31].visitNumber = WorldMapCells[10][32].visitNumber = WorldMapCells[10][33].visitNumber = WorldMapCells[10][34].visitNumber = WorldMapCells[10][35].visitNumber = WorldMapCells[10][36].visitNumber = WorldMapCells[10][37].visitNumber = WorldMapCells[10][38].visitNumber = WorldMapCells[10][39].visitNumber = WorldMapCells[10][40].visitNumber = WorldMapCells[10][41].visitNumber = WorldMapCells[10][42].visitNumber = WorldMapCells[10][43].visitNumber = WorldMapCells[10][44].visitNumber = WorldMapCells[10][45].visitNumber = WorldMapCells[10][46].visitNumber = WorldMapCells[10][47].visitNumber = WorldMapCells[10][48].visitNumber = WorldMapCells[10][49].visitNumber = WorldMapCells[10][50].visitNumber = WorldMapCells[10][51].visitNumber = WorldMapCells[10][52].visitNumber = WorldMapCells[10][53].visitNumber = WorldMapCells[10][54].visitNumber = WorldMapCells[10][55].visitNumber = WorldMapCells[10][56].visitNumber = WorldMapCells[10][57].visitNumber = WorldMapCells[10][58].visitNumber = WorldMapCells[10][59].visitNumber = WorldMapCells[10][60].visitNumber = WorldMapCells[10][61].visitNumber = WorldMapCells[10][62].visitNumber = WorldMapCells[10][63].visitNumber = WorldMapCells[10][64].visitNumber = WorldMapCells[10][65].visitNumber = WorldMapCells[10][66].visitNumber = WorldMapCells[10][67].visitNumber = WorldMapCells[10][68].visitNumber = WorldMapCells[10][69].visitNumber = WorldMapCells[10][70].visitNumber = WorldMapCells[10][71].visitNumber = WorldMapCells[10][72].visitNumber = WorldMapCells[10][73].visitNumber = WorldMapCells[10][74].visitNumber = WorldMapCells[10][75].visitNumber = WorldMapCells[10][76].visitNumber = WorldMapCells[10][77].visitNumber = WorldMapCells[10][78].visitNumber = WorldMapCells[10][79].visitNumber = WorldMapCells[10][80].visitNumber = WorldMapCells[10][81].visitNumber = WorldMapCells[10][82].visitNumber = WorldMapCells[10][83].visitNumber = WorldMapCells[10][84].visitNumber = WorldMapCells[10][85].visitNumber = WorldMapCells[10][86].visitNumber = WorldMapCells[10][87].visitNumber = WorldMapCells[10][88].visitNumber = WorldMapCells[10][89].visitNumber = WorldMapCells[10][90].visitNumber = WorldMapCells[10][91].visitNumber = WorldMapCells[10][92].visitNumber = WorldMapCells[10][93].visitNumber = WorldMapCells[10][94].visitNumber = WorldMapCells[10][95].visitNumber = WorldMapCells[10][96].visitNumber = WorldMapCells[10][97].visitNumber = WorldMapCells[10][98].visitNumber = WorldMapCells[10][99].visitNumber = 3;
        //            WorldMapCells[26][0].visitNumber = WorldMapCells[26][1].visitNumber = WorldMapCells[26][2].visitNumber = WorldMapCells[26][3].visitNumber = WorldMapCells[26][4].visitNumber = WorldMapCells[26][5].visitNumber = WorldMapCells[26][6].visitNumber = WorldMapCells[26][7].visitNumber = WorldMapCells[26][8].visitNumber = WorldMapCells[26][9].visitNumber = WorldMapCells[26][10].visitNumber = WorldMapCells[26][11].visitNumber = WorldMapCells[26][12].visitNumber = WorldMapCells[26][13].visitNumber = WorldMapCells[26][14].visitNumber = WorldMapCells[26][15].visitNumber = WorldMapCells[26][16].visitNumber = WorldMapCells[26][17].visitNumber = WorldMapCells[26][18].visitNumber = WorldMapCells[26][19].visitNumber = WorldMapCells[26][20].visitNumber = WorldMapCells[26][21].visitNumber = WorldMapCells[26][22].visitNumber = WorldMapCells[26][23].visitNumber = WorldMapCells[26][24].visitNumber = WorldMapCells[26][25].visitNumber = WorldMapCells[26][26].visitNumber = WorldMapCells[26][27].visitNumber = WorldMapCells[26][28].visitNumber = WorldMapCells[26][29].visitNumber = WorldMapCells[26][30].visitNumber = WorldMapCells[26][31].visitNumber = WorldMapCells[26][32].visitNumber = WorldMapCells[26][33].visitNumber = WorldMapCells[26][34].visitNumber = WorldMapCells[26][35].visitNumber = WorldMapCells[26][36].visitNumber = WorldMapCells[26][37].visitNumber = WorldMapCells[26][38].visitNumber = WorldMapCells[26][39].visitNumber = WorldMapCells[26][40].visitNumber = WorldMapCells[26][41].visitNumber = WorldMapCells[26][42].visitNumber = WorldMapCells[26][43].visitNumber = WorldMapCells[26][44].visitNumber = WorldMapCells[26][45].visitNumber = WorldMapCells[26][46].visitNumber = WorldMapCells[26][47].visitNumber = WorldMapCells[26][48].visitNumber = WorldMapCells[26][49].visitNumber = WorldMapCells[26][50].visitNumber = WorldMapCells[26][51].visitNumber = WorldMapCells[26][52].visitNumber = WorldMapCells[26][53].visitNumber = WorldMapCells[26][54].visitNumber = WorldMapCells[26][55].visitNumber = WorldMapCells[26][56].visitNumber = WorldMapCells[26][57].visitNumber = WorldMapCells[26][58].visitNumber = WorldMapCells[26][59].visitNumber = WorldMapCells[26][60].visitNumber = WorldMapCells[26][61].visitNumber = WorldMapCells[26][62].visitNumber = WorldMapCells[26][63].visitNumber = WorldMapCells[26][64].visitNumber = WorldMapCells[26][65].visitNumber = WorldMapCells[26][66].visitNumber = WorldMapCells[26][67].visitNumber = WorldMapCells[26][68].visitNumber = WorldMapCells[26][69].visitNumber = WorldMapCells[26][70].visitNumber = WorldMapCells[26][71].visitNumber = WorldMapCells[26][72].visitNumber = WorldMapCells[26][73].visitNumber = WorldMapCells[26][74].visitNumber = WorldMapCells[26][75].visitNumber = WorldMapCells[26][76].visitNumber = WorldMapCells[26][77].visitNumber = WorldMapCells[26][78].visitNumber = WorldMapCells[26][79].visitNumber = WorldMapCells[26][80].visitNumber = WorldMapCells[26][81].visitNumber = WorldMapCells[26][82].visitNumber = WorldMapCells[26][83].visitNumber = WorldMapCells[26][84].visitNumber = WorldMapCells[26][85].visitNumber = WorldMapCells[26][86].visitNumber = WorldMapCells[26][87].visitNumber = WorldMapCells[26][88].visitNumber = WorldMapCells[26][89].visitNumber = WorldMapCells[26][90].visitNumber = WorldMapCells[26][91].visitNumber = WorldMapCells[26][92].visitNumber = WorldMapCells[26][93].visitNumber = WorldMapCells[26][94].visitNumber = WorldMapCells[26][95].visitNumber = WorldMapCells[26][96].visitNumber = WorldMapCells[26][97].visitNumber = WorldMapCells[26][98].visitNumber = WorldMapCells[26][99].visitNumber = 3;
        //            WorldMapCells[27][0].visitNumber = WorldMapCells[27][1].visitNumber = WorldMapCells[27][2].visitNumber = WorldMapCells[27][3].visitNumber = WorldMapCells[27][4].visitNumber = WorldMapCells[27][5].visitNumber = WorldMapCells[27][6].visitNumber = WorldMapCells[27][7].visitNumber = WorldMapCells[27][8].visitNumber = WorldMapCells[27][9].visitNumber = WorldMapCells[27][10].visitNumber = WorldMapCells[27][11].visitNumber = WorldMapCells[27][12].visitNumber = WorldMapCells[27][13].visitNumber = WorldMapCells[27][14].visitNumber = WorldMapCells[27][15].visitNumber = WorldMapCells[27][16].visitNumber = WorldMapCells[27][17].visitNumber = WorldMapCells[27][18].visitNumber = WorldMapCells[27][19].visitNumber = WorldMapCells[27][20].visitNumber = WorldMapCells[27][21].visitNumber = WorldMapCells[27][22].visitNumber = WorldMapCells[27][23].visitNumber = WorldMapCells[27][24].visitNumber = WorldMapCells[27][25].visitNumber = WorldMapCells[27][26].visitNumber = WorldMapCells[27][27].visitNumber = WorldMapCells[27][28].visitNumber = WorldMapCells[27][29].visitNumber = WorldMapCells[27][30].visitNumber = WorldMapCells[27][31].visitNumber = WorldMapCells[27][32].visitNumber = WorldMapCells[27][33].visitNumber = WorldMapCells[27][34].visitNumber = WorldMapCells[27][35].visitNumber = WorldMapCells[27][36].visitNumber = WorldMapCells[27][37].visitNumber = WorldMapCells[27][38].visitNumber = WorldMapCells[27][39].visitNumber = WorldMapCells[27][40].visitNumber = WorldMapCells[27][41].visitNumber = WorldMapCells[27][42].visitNumber = WorldMapCells[27][43].visitNumber = WorldMapCells[27][44].visitNumber = WorldMapCells[27][45].visitNumber = WorldMapCells[27][46].visitNumber = WorldMapCells[27][47].visitNumber = WorldMapCells[27][48].visitNumber = WorldMapCells[27][49].visitNumber = WorldMapCells[27][50].visitNumber = WorldMapCells[27][51].visitNumber = WorldMapCells[27][52].visitNumber = WorldMapCells[27][53].visitNumber = WorldMapCells[27][54].visitNumber = WorldMapCells[27][55].visitNumber = WorldMapCells[27][56].visitNumber = WorldMapCells[27][57].visitNumber = WorldMapCells[27][58].visitNumber = WorldMapCells[27][59].visitNumber = WorldMapCells[27][60].visitNumber = WorldMapCells[27][61].visitNumber = WorldMapCells[27][62].visitNumber = WorldMapCells[27][63].visitNumber = WorldMapCells[27][64].visitNumber = WorldMapCells[27][65].visitNumber = WorldMapCells[27][66].visitNumber = WorldMapCells[27][67].visitNumber = WorldMapCells[27][68].visitNumber = WorldMapCells[27][69].visitNumber = WorldMapCells[27][70].visitNumber = WorldMapCells[27][71].visitNumber = WorldMapCells[27][72].visitNumber = WorldMapCells[27][73].visitNumber = WorldMapCells[27][74].visitNumber = WorldMapCells[27][75].visitNumber = WorldMapCells[27][76].visitNumber = WorldMapCells[27][77].visitNumber = WorldMapCells[27][78].visitNumber = WorldMapCells[27][79].visitNumber = WorldMapCells[27][80].visitNumber = WorldMapCells[27][81].visitNumber = WorldMapCells[27][82].visitNumber = WorldMapCells[27][83].visitNumber = WorldMapCells[27][84].visitNumber = WorldMapCells[27][85].visitNumber = WorldMapCells[27][86].visitNumber = WorldMapCells[27][87].visitNumber = WorldMapCells[27][88].visitNumber = WorldMapCells[27][89].visitNumber = WorldMapCells[27][90].visitNumber = WorldMapCells[27][91].visitNumber = WorldMapCells[27][92].visitNumber = WorldMapCells[27][93].visitNumber = WorldMapCells[27][94].visitNumber = WorldMapCells[27][95].visitNumber = WorldMapCells[27][96].visitNumber = WorldMapCells[27][97].visitNumber = WorldMapCells[27][98].visitNumber = WorldMapCells[27][99].visitNumber = 3;
        //        }
        //        else if (WorldMapCells[7][41].visited == false && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == false && WorldMapCells[9][10].visited == true
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == false
        //            || WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == false && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true)
        //        {
        //            WorldMapCells[10][0].visitNumber = WorldMapCells[10][1].visitNumber = WorldMapCells[10][2].visitNumber = WorldMapCells[10][3].visitNumber = WorldMapCells[10][4].visitNumber = WorldMapCells[10][5].visitNumber = WorldMapCells[10][6].visitNumber = WorldMapCells[10][7].visitNumber = WorldMapCells[10][8].visitNumber = WorldMapCells[10][9].visitNumber = WorldMapCells[10][10].visitNumber = WorldMapCells[10][11].visitNumber = WorldMapCells[10][12].visitNumber = WorldMapCells[10][13].visitNumber = WorldMapCells[10][14].visitNumber = WorldMapCells[10][15].visitNumber = WorldMapCells[10][16].visitNumber = WorldMapCells[10][17].visitNumber = WorldMapCells[10][18].visitNumber = WorldMapCells[10][19].visitNumber = WorldMapCells[10][20].visitNumber = WorldMapCells[10][21].visitNumber = WorldMapCells[10][22].visitNumber = WorldMapCells[10][23].visitNumber = WorldMapCells[10][24].visitNumber = WorldMapCells[10][25].visitNumber = WorldMapCells[10][26].visitNumber = WorldMapCells[10][27].visitNumber = WorldMapCells[10][28].visitNumber = WorldMapCells[10][29].visitNumber = WorldMapCells[10][30].visitNumber = WorldMapCells[10][31].visitNumber = WorldMapCells[10][32].visitNumber = WorldMapCells[10][33].visitNumber = WorldMapCells[10][34].visitNumber = WorldMapCells[10][35].visitNumber = WorldMapCells[10][36].visitNumber = WorldMapCells[10][37].visitNumber = WorldMapCells[10][38].visitNumber = WorldMapCells[10][39].visitNumber = WorldMapCells[10][40].visitNumber = WorldMapCells[10][41].visitNumber = WorldMapCells[10][42].visitNumber = WorldMapCells[10][43].visitNumber = WorldMapCells[10][44].visitNumber = WorldMapCells[10][45].visitNumber = WorldMapCells[10][46].visitNumber = WorldMapCells[10][47].visitNumber = WorldMapCells[10][48].visitNumber = WorldMapCells[10][49].visitNumber = WorldMapCells[10][50].visitNumber = WorldMapCells[10][51].visitNumber = WorldMapCells[10][52].visitNumber = WorldMapCells[10][53].visitNumber = WorldMapCells[10][54].visitNumber = WorldMapCells[10][55].visitNumber = WorldMapCells[10][56].visitNumber = WorldMapCells[10][57].visitNumber = WorldMapCells[10][58].visitNumber = WorldMapCells[10][59].visitNumber = WorldMapCells[10][60].visitNumber = WorldMapCells[10][61].visitNumber = WorldMapCells[10][62].visitNumber = WorldMapCells[10][63].visitNumber = WorldMapCells[10][64].visitNumber = WorldMapCells[10][65].visitNumber = WorldMapCells[10][66].visitNumber = WorldMapCells[10][67].visitNumber = WorldMapCells[10][68].visitNumber = WorldMapCells[10][69].visitNumber = WorldMapCells[10][70].visitNumber = WorldMapCells[10][71].visitNumber = WorldMapCells[10][72].visitNumber = WorldMapCells[10][73].visitNumber = WorldMapCells[10][74].visitNumber = WorldMapCells[10][75].visitNumber = WorldMapCells[10][76].visitNumber = WorldMapCells[10][77].visitNumber = WorldMapCells[10][78].visitNumber = WorldMapCells[10][79].visitNumber = WorldMapCells[10][80].visitNumber = WorldMapCells[10][81].visitNumber = WorldMapCells[10][82].visitNumber = WorldMapCells[10][83].visitNumber = WorldMapCells[10][84].visitNumber = WorldMapCells[10][85].visitNumber = WorldMapCells[10][86].visitNumber = WorldMapCells[10][87].visitNumber = WorldMapCells[10][88].visitNumber = WorldMapCells[10][89].visitNumber = WorldMapCells[10][90].visitNumber = WorldMapCells[10][91].visitNumber = WorldMapCells[10][92].visitNumber = WorldMapCells[10][93].visitNumber = WorldMapCells[10][94].visitNumber = WorldMapCells[10][95].visitNumber = WorldMapCells[10][96].visitNumber = WorldMapCells[10][97].visitNumber = WorldMapCells[10][98].visitNumber = WorldMapCells[10][99].visitNumber = 4;
        //            WorldMapCells[26][0].visitNumber = WorldMapCells[26][1].visitNumber = WorldMapCells[26][2].visitNumber = WorldMapCells[26][3].visitNumber = WorldMapCells[26][4].visitNumber = WorldMapCells[26][5].visitNumber = WorldMapCells[26][6].visitNumber = WorldMapCells[26][7].visitNumber = WorldMapCells[26][8].visitNumber = WorldMapCells[26][9].visitNumber = WorldMapCells[26][10].visitNumber = WorldMapCells[26][11].visitNumber = WorldMapCells[26][12].visitNumber = WorldMapCells[26][13].visitNumber = WorldMapCells[26][14].visitNumber = WorldMapCells[26][15].visitNumber = WorldMapCells[26][16].visitNumber = WorldMapCells[26][17].visitNumber = WorldMapCells[26][18].visitNumber = WorldMapCells[26][19].visitNumber = WorldMapCells[26][20].visitNumber = WorldMapCells[26][21].visitNumber = WorldMapCells[26][22].visitNumber = WorldMapCells[26][23].visitNumber = WorldMapCells[26][24].visitNumber = WorldMapCells[26][25].visitNumber = WorldMapCells[26][26].visitNumber = WorldMapCells[26][27].visitNumber = WorldMapCells[26][28].visitNumber = WorldMapCells[26][29].visitNumber = WorldMapCells[26][30].visitNumber = WorldMapCells[26][31].visitNumber = WorldMapCells[26][32].visitNumber = WorldMapCells[26][33].visitNumber = WorldMapCells[26][34].visitNumber = WorldMapCells[26][35].visitNumber = WorldMapCells[26][36].visitNumber = WorldMapCells[26][37].visitNumber = WorldMapCells[26][38].visitNumber = WorldMapCells[26][39].visitNumber = WorldMapCells[26][40].visitNumber = WorldMapCells[26][41].visitNumber = WorldMapCells[26][42].visitNumber = WorldMapCells[26][43].visitNumber = WorldMapCells[26][44].visitNumber = WorldMapCells[26][45].visitNumber = WorldMapCells[26][46].visitNumber = WorldMapCells[26][47].visitNumber = WorldMapCells[26][48].visitNumber = WorldMapCells[26][49].visitNumber = WorldMapCells[26][50].visitNumber = WorldMapCells[26][51].visitNumber = WorldMapCells[26][52].visitNumber = WorldMapCells[26][53].visitNumber = WorldMapCells[26][54].visitNumber = WorldMapCells[26][55].visitNumber = WorldMapCells[26][56].visitNumber = WorldMapCells[26][57].visitNumber = WorldMapCells[26][58].visitNumber = WorldMapCells[26][59].visitNumber = WorldMapCells[26][60].visitNumber = WorldMapCells[26][61].visitNumber = WorldMapCells[26][62].visitNumber = WorldMapCells[26][63].visitNumber = WorldMapCells[26][64].visitNumber = WorldMapCells[26][65].visitNumber = WorldMapCells[26][66].visitNumber = WorldMapCells[26][67].visitNumber = WorldMapCells[26][68].visitNumber = WorldMapCells[26][69].visitNumber = WorldMapCells[26][70].visitNumber = WorldMapCells[26][71].visitNumber = WorldMapCells[26][72].visitNumber = WorldMapCells[26][73].visitNumber = WorldMapCells[26][74].visitNumber = WorldMapCells[26][75].visitNumber = WorldMapCells[26][76].visitNumber = WorldMapCells[26][77].visitNumber = WorldMapCells[26][78].visitNumber = WorldMapCells[26][79].visitNumber = WorldMapCells[26][80].visitNumber = WorldMapCells[26][81].visitNumber = WorldMapCells[26][82].visitNumber = WorldMapCells[26][83].visitNumber = WorldMapCells[26][84].visitNumber = WorldMapCells[26][85].visitNumber = WorldMapCells[26][86].visitNumber = WorldMapCells[26][87].visitNumber = WorldMapCells[26][88].visitNumber = WorldMapCells[26][89].visitNumber = WorldMapCells[26][90].visitNumber = WorldMapCells[26][91].visitNumber = WorldMapCells[26][92].visitNumber = WorldMapCells[26][93].visitNumber = WorldMapCells[26][94].visitNumber = WorldMapCells[26][95].visitNumber = WorldMapCells[26][96].visitNumber = WorldMapCells[26][97].visitNumber = WorldMapCells[26][98].visitNumber = WorldMapCells[26][99].visitNumber = 4;
        //            WorldMapCells[27][0].visitNumber = WorldMapCells[27][1].visitNumber = WorldMapCells[27][2].visitNumber = WorldMapCells[27][3].visitNumber = WorldMapCells[27][4].visitNumber = WorldMapCells[27][5].visitNumber = WorldMapCells[27][6].visitNumber = WorldMapCells[27][7].visitNumber = WorldMapCells[27][8].visitNumber = WorldMapCells[27][9].visitNumber = WorldMapCells[27][10].visitNumber = WorldMapCells[27][11].visitNumber = WorldMapCells[27][12].visitNumber = WorldMapCells[27][13].visitNumber = WorldMapCells[27][14].visitNumber = WorldMapCells[27][15].visitNumber = WorldMapCells[27][16].visitNumber = WorldMapCells[27][17].visitNumber = WorldMapCells[27][18].visitNumber = WorldMapCells[27][19].visitNumber = WorldMapCells[27][20].visitNumber = WorldMapCells[27][21].visitNumber = WorldMapCells[27][22].visitNumber = WorldMapCells[27][23].visitNumber = WorldMapCells[27][24].visitNumber = WorldMapCells[27][25].visitNumber = WorldMapCells[27][26].visitNumber = WorldMapCells[27][27].visitNumber = WorldMapCells[27][28].visitNumber = WorldMapCells[27][29].visitNumber = WorldMapCells[27][30].visitNumber = WorldMapCells[27][31].visitNumber = WorldMapCells[27][32].visitNumber = WorldMapCells[27][33].visitNumber = WorldMapCells[27][34].visitNumber = WorldMapCells[27][35].visitNumber = WorldMapCells[27][36].visitNumber = WorldMapCells[27][37].visitNumber = WorldMapCells[27][38].visitNumber = WorldMapCells[27][39].visitNumber = WorldMapCells[27][40].visitNumber = WorldMapCells[27][41].visitNumber = WorldMapCells[27][42].visitNumber = WorldMapCells[27][43].visitNumber = WorldMapCells[27][44].visitNumber = WorldMapCells[27][45].visitNumber = WorldMapCells[27][46].visitNumber = WorldMapCells[27][47].visitNumber = WorldMapCells[27][48].visitNumber = WorldMapCells[27][49].visitNumber = WorldMapCells[27][50].visitNumber = WorldMapCells[27][51].visitNumber = WorldMapCells[27][52].visitNumber = WorldMapCells[27][53].visitNumber = WorldMapCells[27][54].visitNumber = WorldMapCells[27][55].visitNumber = WorldMapCells[27][56].visitNumber = WorldMapCells[27][57].visitNumber = WorldMapCells[27][58].visitNumber = WorldMapCells[27][59].visitNumber = WorldMapCells[27][60].visitNumber = WorldMapCells[27][61].visitNumber = WorldMapCells[27][62].visitNumber = WorldMapCells[27][63].visitNumber = WorldMapCells[27][64].visitNumber = WorldMapCells[27][65].visitNumber = WorldMapCells[27][66].visitNumber = WorldMapCells[27][67].visitNumber = WorldMapCells[27][68].visitNumber = WorldMapCells[27][69].visitNumber = WorldMapCells[27][70].visitNumber = WorldMapCells[27][71].visitNumber = WorldMapCells[27][72].visitNumber = WorldMapCells[27][73].visitNumber = WorldMapCells[27][74].visitNumber = WorldMapCells[27][75].visitNumber = WorldMapCells[27][76].visitNumber = WorldMapCells[27][77].visitNumber = WorldMapCells[27][78].visitNumber = WorldMapCells[27][79].visitNumber = WorldMapCells[27][80].visitNumber = WorldMapCells[27][81].visitNumber = WorldMapCells[27][82].visitNumber = WorldMapCells[27][83].visitNumber = WorldMapCells[27][84].visitNumber = WorldMapCells[27][85].visitNumber = WorldMapCells[27][86].visitNumber = WorldMapCells[27][87].visitNumber = WorldMapCells[27][88].visitNumber = WorldMapCells[27][89].visitNumber = WorldMapCells[27][90].visitNumber = WorldMapCells[27][91].visitNumber = WorldMapCells[27][92].visitNumber = WorldMapCells[27][93].visitNumber = WorldMapCells[27][94].visitNumber = WorldMapCells[27][95].visitNumber = WorldMapCells[27][96].visitNumber = WorldMapCells[27][97].visitNumber = WorldMapCells[27][98].visitNumber = WorldMapCells[27][99].visitNumber = 4;
        //        }
        //        else if (WorldMapCells[7][41].visited == true && WorldMapCells[6][85].visited == true && WorldMapCells[8][11].visited == true && WorldMapCells[9][10].visited == true)
        //        {
        //            WorldMapCells[10][0].visitNumber = WorldMapCells[10][1].visitNumber = WorldMapCells[10][2].visitNumber = WorldMapCells[10][3].visitNumber = WorldMapCells[10][4].visitNumber = WorldMapCells[10][5].visitNumber = WorldMapCells[10][6].visitNumber = WorldMapCells[10][7].visitNumber = WorldMapCells[10][8].visitNumber = WorldMapCells[10][9].visitNumber = WorldMapCells[10][10].visitNumber = WorldMapCells[10][11].visitNumber = WorldMapCells[10][12].visitNumber = WorldMapCells[10][13].visitNumber = WorldMapCells[10][14].visitNumber = WorldMapCells[10][15].visitNumber = WorldMapCells[10][16].visitNumber = WorldMapCells[10][17].visitNumber = WorldMapCells[10][18].visitNumber = WorldMapCells[10][19].visitNumber = WorldMapCells[10][20].visitNumber = WorldMapCells[10][21].visitNumber = WorldMapCells[10][22].visitNumber = WorldMapCells[10][23].visitNumber = WorldMapCells[10][24].visitNumber = WorldMapCells[10][25].visitNumber = WorldMapCells[10][26].visitNumber = WorldMapCells[10][27].visitNumber = WorldMapCells[10][28].visitNumber = WorldMapCells[10][29].visitNumber = WorldMapCells[10][30].visitNumber = WorldMapCells[10][31].visitNumber = WorldMapCells[10][32].visitNumber = WorldMapCells[10][33].visitNumber = WorldMapCells[10][34].visitNumber = WorldMapCells[10][35].visitNumber = WorldMapCells[10][36].visitNumber = WorldMapCells[10][37].visitNumber = WorldMapCells[10][38].visitNumber = WorldMapCells[10][39].visitNumber = WorldMapCells[10][40].visitNumber = WorldMapCells[10][41].visitNumber = WorldMapCells[10][42].visitNumber = WorldMapCells[10][43].visitNumber = WorldMapCells[10][44].visitNumber = WorldMapCells[10][45].visitNumber = WorldMapCells[10][46].visitNumber = WorldMapCells[10][47].visitNumber = WorldMapCells[10][48].visitNumber = WorldMapCells[10][49].visitNumber = WorldMapCells[10][50].visitNumber = WorldMapCells[10][51].visitNumber = WorldMapCells[10][52].visitNumber = WorldMapCells[10][53].visitNumber = WorldMapCells[10][54].visitNumber = WorldMapCells[10][55].visitNumber = WorldMapCells[10][56].visitNumber = WorldMapCells[10][57].visitNumber = WorldMapCells[10][58].visitNumber = WorldMapCells[10][59].visitNumber = WorldMapCells[10][60].visitNumber = WorldMapCells[10][61].visitNumber = WorldMapCells[10][62].visitNumber = WorldMapCells[10][63].visitNumber = WorldMapCells[10][64].visitNumber = WorldMapCells[10][65].visitNumber = WorldMapCells[10][66].visitNumber = WorldMapCells[10][67].visitNumber = WorldMapCells[10][68].visitNumber = WorldMapCells[10][69].visitNumber = WorldMapCells[10][70].visitNumber = WorldMapCells[10][71].visitNumber = WorldMapCells[10][72].visitNumber = WorldMapCells[10][73].visitNumber = WorldMapCells[10][74].visitNumber = WorldMapCells[10][75].visitNumber = WorldMapCells[10][76].visitNumber = WorldMapCells[10][77].visitNumber = WorldMapCells[10][78].visitNumber = WorldMapCells[10][79].visitNumber = WorldMapCells[10][80].visitNumber = WorldMapCells[10][81].visitNumber = WorldMapCells[10][82].visitNumber = WorldMapCells[10][83].visitNumber = WorldMapCells[10][84].visitNumber = WorldMapCells[10][85].visitNumber = WorldMapCells[10][86].visitNumber = WorldMapCells[10][87].visitNumber = WorldMapCells[10][88].visitNumber = WorldMapCells[10][89].visitNumber = WorldMapCells[10][90].visitNumber = WorldMapCells[10][91].visitNumber = WorldMapCells[10][92].visitNumber = WorldMapCells[10][93].visitNumber = WorldMapCells[10][94].visitNumber = WorldMapCells[10][95].visitNumber = WorldMapCells[10][96].visitNumber = WorldMapCells[10][97].visitNumber = WorldMapCells[10][98].visitNumber = WorldMapCells[10][99].visitNumber = 5;
        //            WorldMapCells[26][0].visitNumber = WorldMapCells[26][1].visitNumber = WorldMapCells[26][2].visitNumber = WorldMapCells[26][3].visitNumber = WorldMapCells[26][4].visitNumber = WorldMapCells[26][5].visitNumber = WorldMapCells[26][6].visitNumber = WorldMapCells[26][7].visitNumber = WorldMapCells[26][8].visitNumber = WorldMapCells[26][9].visitNumber = WorldMapCells[26][10].visitNumber = WorldMapCells[26][11].visitNumber = WorldMapCells[26][12].visitNumber = WorldMapCells[26][13].visitNumber = WorldMapCells[26][14].visitNumber = WorldMapCells[26][15].visitNumber = WorldMapCells[26][16].visitNumber = WorldMapCells[26][17].visitNumber = WorldMapCells[26][18].visitNumber = WorldMapCells[26][19].visitNumber = WorldMapCells[26][20].visitNumber = WorldMapCells[26][21].visitNumber = WorldMapCells[26][22].visitNumber = WorldMapCells[26][23].visitNumber = WorldMapCells[26][24].visitNumber = WorldMapCells[26][25].visitNumber = WorldMapCells[26][26].visitNumber = WorldMapCells[26][27].visitNumber = WorldMapCells[26][28].visitNumber = WorldMapCells[26][29].visitNumber = WorldMapCells[26][30].visitNumber = WorldMapCells[26][31].visitNumber = WorldMapCells[26][32].visitNumber = WorldMapCells[26][33].visitNumber = WorldMapCells[26][34].visitNumber = WorldMapCells[26][35].visitNumber = WorldMapCells[26][36].visitNumber = WorldMapCells[26][37].visitNumber = WorldMapCells[26][38].visitNumber = WorldMapCells[26][39].visitNumber = WorldMapCells[26][40].visitNumber = WorldMapCells[26][41].visitNumber = WorldMapCells[26][42].visitNumber = WorldMapCells[26][43].visitNumber = WorldMapCells[26][44].visitNumber = WorldMapCells[26][45].visitNumber = WorldMapCells[26][46].visitNumber = WorldMapCells[26][47].visitNumber = WorldMapCells[26][48].visitNumber = WorldMapCells[26][49].visitNumber = WorldMapCells[26][50].visitNumber = WorldMapCells[26][51].visitNumber = WorldMapCells[26][52].visitNumber = WorldMapCells[26][53].visitNumber = WorldMapCells[26][54].visitNumber = WorldMapCells[26][55].visitNumber = WorldMapCells[26][56].visitNumber = WorldMapCells[26][57].visitNumber = WorldMapCells[26][58].visitNumber = WorldMapCells[26][59].visitNumber = WorldMapCells[26][60].visitNumber = WorldMapCells[26][61].visitNumber = WorldMapCells[26][62].visitNumber = WorldMapCells[26][63].visitNumber = WorldMapCells[26][64].visitNumber = WorldMapCells[26][65].visitNumber = WorldMapCells[26][66].visitNumber = WorldMapCells[26][67].visitNumber = WorldMapCells[26][68].visitNumber = WorldMapCells[26][69].visitNumber = WorldMapCells[26][70].visitNumber = WorldMapCells[26][71].visitNumber = WorldMapCells[26][72].visitNumber = WorldMapCells[26][73].visitNumber = WorldMapCells[26][74].visitNumber = WorldMapCells[26][75].visitNumber = WorldMapCells[26][76].visitNumber = WorldMapCells[26][77].visitNumber = WorldMapCells[26][78].visitNumber = WorldMapCells[26][79].visitNumber = WorldMapCells[26][80].visitNumber = WorldMapCells[26][81].visitNumber = WorldMapCells[26][82].visitNumber = WorldMapCells[26][83].visitNumber = WorldMapCells[26][84].visitNumber = WorldMapCells[26][85].visitNumber = WorldMapCells[26][86].visitNumber = WorldMapCells[26][87].visitNumber = WorldMapCells[26][88].visitNumber = WorldMapCells[26][89].visitNumber = WorldMapCells[26][90].visitNumber = WorldMapCells[26][91].visitNumber = WorldMapCells[26][92].visitNumber = WorldMapCells[26][93].visitNumber = WorldMapCells[26][94].visitNumber = WorldMapCells[26][95].visitNumber = WorldMapCells[26][96].visitNumber = WorldMapCells[26][97].visitNumber = WorldMapCells[26][98].visitNumber = WorldMapCells[26][99].visitNumber = 5;
        //            WorldMapCells[27][0].visitNumber = WorldMapCells[27][1].visitNumber = WorldMapCells[27][2].visitNumber = WorldMapCells[27][3].visitNumber = WorldMapCells[27][4].visitNumber = WorldMapCells[27][5].visitNumber = WorldMapCells[27][6].visitNumber = WorldMapCells[27][7].visitNumber = WorldMapCells[27][8].visitNumber = WorldMapCells[27][9].visitNumber = WorldMapCells[27][10].visitNumber = WorldMapCells[27][11].visitNumber = WorldMapCells[27][12].visitNumber = WorldMapCells[27][13].visitNumber = WorldMapCells[27][14].visitNumber = WorldMapCells[27][15].visitNumber = WorldMapCells[27][16].visitNumber = WorldMapCells[27][17].visitNumber = WorldMapCells[27][18].visitNumber = WorldMapCells[27][19].visitNumber = WorldMapCells[27][20].visitNumber = WorldMapCells[27][21].visitNumber = WorldMapCells[27][22].visitNumber = WorldMapCells[27][23].visitNumber = WorldMapCells[27][24].visitNumber = WorldMapCells[27][25].visitNumber = WorldMapCells[27][26].visitNumber = WorldMapCells[27][27].visitNumber = WorldMapCells[27][28].visitNumber = WorldMapCells[27][29].visitNumber = WorldMapCells[27][30].visitNumber = WorldMapCells[27][31].visitNumber = WorldMapCells[27][32].visitNumber = WorldMapCells[27][33].visitNumber = WorldMapCells[27][34].visitNumber = WorldMapCells[27][35].visitNumber = WorldMapCells[27][36].visitNumber = WorldMapCells[27][37].visitNumber = WorldMapCells[27][38].visitNumber = WorldMapCells[27][39].visitNumber = WorldMapCells[27][40].visitNumber = WorldMapCells[27][41].visitNumber = WorldMapCells[27][42].visitNumber = WorldMapCells[27][43].visitNumber = WorldMapCells[27][44].visitNumber = WorldMapCells[27][45].visitNumber = WorldMapCells[27][46].visitNumber = WorldMapCells[27][47].visitNumber = WorldMapCells[27][48].visitNumber = WorldMapCells[27][49].visitNumber = WorldMapCells[27][50].visitNumber = WorldMapCells[27][51].visitNumber = WorldMapCells[27][52].visitNumber = WorldMapCells[27][53].visitNumber = WorldMapCells[27][54].visitNumber = WorldMapCells[27][55].visitNumber = WorldMapCells[27][56].visitNumber = WorldMapCells[27][57].visitNumber = WorldMapCells[27][58].visitNumber = WorldMapCells[27][59].visitNumber = WorldMapCells[27][60].visitNumber = WorldMapCells[27][61].visitNumber = WorldMapCells[27][62].visitNumber = WorldMapCells[27][63].visitNumber = WorldMapCells[27][64].visitNumber = WorldMapCells[27][65].visitNumber = WorldMapCells[27][66].visitNumber = WorldMapCells[27][67].visitNumber = WorldMapCells[27][68].visitNumber = WorldMapCells[27][69].visitNumber = WorldMapCells[27][70].visitNumber = WorldMapCells[27][71].visitNumber = WorldMapCells[27][72].visitNumber = WorldMapCells[27][73].visitNumber = WorldMapCells[27][74].visitNumber = WorldMapCells[27][75].visitNumber = WorldMapCells[27][76].visitNumber = WorldMapCells[27][77].visitNumber = WorldMapCells[27][78].visitNumber = WorldMapCells[27][79].visitNumber = WorldMapCells[27][80].visitNumber = WorldMapCells[27][81].visitNumber = WorldMapCells[27][82].visitNumber = WorldMapCells[27][83].visitNumber = WorldMapCells[27][84].visitNumber = WorldMapCells[27][85].visitNumber = WorldMapCells[27][86].visitNumber = WorldMapCells[27][87].visitNumber = WorldMapCells[27][88].visitNumber = WorldMapCells[27][89].visitNumber = WorldMapCells[27][90].visitNumber = WorldMapCells[27][91].visitNumber = WorldMapCells[27][92].visitNumber = WorldMapCells[27][93].visitNumber = WorldMapCells[27][94].visitNumber = WorldMapCells[27][95].visitNumber = WorldMapCells[27][96].visitNumber = WorldMapCells[27][97].visitNumber = WorldMapCells[27][98].visitNumber = WorldMapCells[27][99].visitNumber = 5;
        //        }
        //    }
        }

        public void LookAround()
        {
            int tempTextSpeed = textSpeed;
            textSpeed = 0;
            Console.ForegroundColor = foregroundColour;
            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName);
            WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].gridDescription);
            if (WorldMapCells[CurrentMap][CurrentLocation].lookArrayNumber == 0 && WorldMapCells[CurrentMap][CurrentLocation].look.Length > 0)
                WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].look[0]);
            else if (WorldMapCells[CurrentMap][CurrentLocation].lookArrayNumber == 1 && WorldMapCells[CurrentMap][CurrentLocation].look.Length > 1)
                WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].look[1]);
            else if (WorldMapCells[CurrentMap][CurrentLocation].lookArrayNumber == 2 && WorldMapCells[CurrentMap][CurrentLocation].look.Length > 2)
                WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].look[2]);
            else if (WorldMapCells[CurrentMap][CurrentLocation].lookArrayNumber == 3 && WorldMapCells[CurrentMap][CurrentLocation].look.Length > 3)
                WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].look[3]);
            else if (WorldMapCells[CurrentMap][CurrentLocation].lookArrayNumber == 4 && WorldMapCells[CurrentMap][CurrentLocation].look.Length > 4)
                WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].look[4]);
            else if (WorldMapCells[CurrentMap][CurrentLocation].lookArrayNumber == 5 && WorldMapCells[CurrentMap][CurrentLocation].look.Length > 5)
                WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].look[5]);
            else
                WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].look[0]);
            for (int i = 0; i < 100; i++)
            {
                if (WorldMapCells[CurrentMap][i].cellLocation == CurrentLocation && !WorldMapCells[CurrentMap][CurrentLocation].gridItems.All(e => e == ""))
                {
                    foreach (var item in WorldMapCells[CurrentMap][i].gridItems)
                    {
                        if (item != "")
                        {
                            if (item[0].Equals('*'))
                                WriteLineText("There are " + item.TrimStart('*') + " here");
                            else if (item[0].Equals('a') || item[0].Equals('e') || item[0].Equals('i') || item[0].Equals('o') || item[0].Equals('u'))
                                WriteLineText("There is an " + item + " here");
                            else
                                WriteLineText("There is a " + item + " here");
                        }
                    }
                }
            }
            textSpeed = tempTextSpeed;
        }

        public void LookSecondLevel()
        {
            int tempTextSpeed = textSpeed;
            textSpeed = 0;
            Console.ForegroundColor = foregroundColour;
            WriteLineText(WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookDescription);
            Thread.Sleep(800);
            WorldMapCells[CurrentMap][CurrentLocation].secondLook = true;
            for (int i = 0; i < 100; i++)
            {
                if (WorldMapCells[CurrentMap][i].cellLocation == CurrentLocation && !WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems.All(e => e == ""))
                {
                    foreach (var item in WorldMapCells[CurrentMap][i].secondLevelLookGridItems)
                    {
                        if (item != "")
                        {
                            if (WorldMapCells[CurrentMap][i].mapName == "rifton" && WorldMapCells[CurrentMap][i].cellLocation == 13)
                                WriteLineText("There is a copy of " + UppercaseFirst(item) + " here");
                            else
                            {
                                if (item[0].Equals('*'))
                                    WriteLineText("There are " + item.TrimStart('*') + " here");
                                else if (item[0].Equals('a') || item[0].Equals('e') || item[0].Equals('i') || item[0].Equals('o') || item[0].Equals('u'))
                                    WriteLineText("There is an " + item + " here");
                                else
                                    WriteLineText("There is a " + item + " here");
                            }
                        }
                    }
                }
            }
            textSpeed = tempTextSpeed;
        }

        public void TakeAll()
        {
            Console.ForegroundColor = foregroundColour;
            for (int i = 0; i < WorldMapCells[CurrentMap][CurrentLocation].gridItems.Count; i++)
            {
                if (WorldMapCells[CurrentMap][CurrentLocation].gridItems[i] != "")
                {
                    inventory.dictionary.TryGetValue(WorldMapCells[CurrentMap][CurrentLocation].gridItems[i].TrimStart('*'), out currentCount);
                    inventory.dictionary[WorldMapCells[CurrentMap][CurrentLocation].gridItems[i].TrimStart('*')] = currentCount + 1;
                    WriteLineText("You took the " + WorldMapCells[CurrentMap][CurrentLocation].gridItems[i].TrimStart('*'));
                }
            }
            WorldMapCells[CurrentMap][CurrentLocation].gridItems.Clear();

            if (WorldMapCells[CurrentMap][CurrentLocation].secondLook == true)
            {
                for (int i = 0; i < WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems.Count; i++)
                {
                    if (WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems[i] != "")
                    {
                        if (WorldMapCells[CurrentMap][CurrentLocation].shop == true)
                        {
                            WriteLineText("You can't take everything in the shop!");
                            Thread.Sleep(800);
                            break;
                        }
                        else
                        {
                            inventory.dictionary.TryGetValue(WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems[i].TrimStart('*'), out currentCount);
                            inventory.dictionary[WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems[i].TrimStart('*')] = currentCount + 1;
                            WriteLineText("You took the " + WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems[i].TrimStart('*'));
                        }
                    }
                }
                if (WorldMapCells[CurrentMap][CurrentLocation].shop != true)
                    WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems.Clear();
            }
        }

        public void TakeIndividual()
        {
            Console.ForegroundColor = foregroundColour;
            if (userValue == "take book")
            {
                userValueItem = examItem.itemName;
            }
            for (int i = 0; i < WorldMapCells[CurrentMap][CurrentLocation].gridItems.Count; i++)
            {
                if (Regex.IsMatch(userValueItem, WorldMapCells[CurrentMap][CurrentLocation].gridItems[i].TrimStart('*'), RegexOptions.IgnoreCase)
                     && WorldMapCells[CurrentMap][CurrentLocation].gridItems[i] != "")
                {
                    inventory.dictionary.TryGetValue(WorldMapCells[CurrentMap][CurrentLocation].gridItems[i].TrimStart('*'), out currentCount);
                    inventory.dictionary[WorldMapCells[CurrentMap][CurrentLocation].gridItems[i].TrimStart('*')] = currentCount + 1;
                    WriteLineText("You took the " + WorldMapCells[CurrentMap][CurrentLocation].gridItems[i].TrimStart('*'));

                    var results = from result in WorldMapCells[CurrentMap][CurrentLocation].gridItems
                                  where Regex.Match(userValueItem, result.TrimStart('*'), RegexOptions.Singleline | RegexOptions.IgnoreCase).Success
                                  select result.TrimStart('*');

                    foreach (var result in results)
                    {
                        WorldMapCells[CurrentMap][CurrentLocation].gridItems.Remove(result.TrimStart('*'));
                        WorldMapCells[CurrentMap][CurrentLocation].gridItems.Remove(result.Insert(0, "*"));
                        break;
                    }

                    break;
                }
            }

            if (WorldMapCells[CurrentMap][CurrentLocation].secondLook == true)
            {
                for (int i = 0; i < WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems.Count; i++)
                {
                    if (Regex.IsMatch(userValueItem, WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems[i].TrimStart('*'), RegexOptions.IgnoreCase))
                    {
                        if (WorldMapCells[CurrentMap][CurrentLocation].shop == true)
                        {
                            var results = from result in WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems
                                          where Regex.Match(userValueItem, result, RegexOptions.Singleline | RegexOptions.IgnoreCase).Success
                                          select result;
                            foreach (var result in results)
                            {
                                itemChoice = result;
                            }
                            referenceCurrentItem();
                            if (torchOn == false)
                                Console.ForegroundColor = ConsoleColor.DarkCyan;
                            else if (torchOn == true)
                                Console.ForegroundColor = ConsoleColor.DarkBlue;
                            WriteLineText("That will cost " + examItem.itemBuyValue + " Ayu. Would you still like to buy it?");
                            Thread.Sleep(1000);
                            Console.ForegroundColor = foregroundColour;
                            bool done = false;
                            do
                            {
                                Console.Write("> ");
                                string choice = Console.ReadLine().ToLower().Trim();
                                if (choice.Length > 80) //makes input max of 80 chars
                                {
                                    double textlength = choice.Length;
                                    for (int j = 80; j <= textlength; j += 80)
                                    {
                                        MainMenu.DecrementCursorTop(1);
                                        Console.Write(new string(' ', Console.WindowWidth));
                                        MainMenu.DecrementCursorTop(1);
                                    }
                                    choice = choice.Remove(80);
                                }
                                if (Regex.IsMatch(choice, affirmativePhrases, RegexOptions.IgnoreCase))
                                {
                                    if (playerStats.playerMoney >= examItem.itemBuyValue)
                                    {
                                        if (torchOn == false)
                                            Console.ForegroundColor = ConsoleColor.DarkCyan;
                                        else if (torchOn == true)
                                            Console.ForegroundColor = ConsoleColor.DarkBlue;
                                        WriteLineText("OK! Here you go. Thanks and see you again soon!");
                                        Thread.Sleep(1000);
                                        playerStats.playerMoney -= examItem.itemBuyValue;
                                        inventory.dictionary.TryGetValue(examItem.itemName, out currentCount);
                                        inventory.dictionary[examItem.itemName] = currentCount + 1;
                                        Console.ForegroundColor = foregroundColour;
                                        WriteLineText("You bought the " + examItem.itemName);
                                        Thread.Sleep(800);

                                        if (examItem.equippable == true)
                                        {
                                            WriteLineText("Would you like to equip this now?");
                                            bool done2 = false;
                                            do
                                            {
                                                Console.Write("> ");
                                                string equipChoice = Console.ReadLine().ToLower().Trim();
                                                if (equipChoice.Length > 80) //makes input max of 80 chars
                                                {
                                                    double textlength = equipChoice.Length;
                                                    for (int j = 80; j <= textlength; j += 80)
                                                    {
                                                        MainMenu.DecrementCursorTop(1);
                                                        Console.Write(new string(' ', Console.WindowWidth));
                                                        MainMenu.DecrementCursorTop(1);
                                                    }
                                                    equipChoice = equipChoice.Remove(80);
                                                }
                                                if (equipChoice == "no" || equipChoice == "n")
                                                {
                                                    done2 = true;
                                                    WriteLineText("It was added to your inventory");
                                                }
                                                else if (equipChoice == "yes" || equipChoice == "y")
                                                {
                                                    done2 = true;
                                                    EquipItems();
                                                }
                                                else
                                                {
                                                    MainMenu.DecrementCursorTop(1);
                                                    Console.Write(new string(' ', Console.WindowWidth));
                                                    MainMenu.DecrementCursorTop(1);
                                                }
                                            } while (done2 == false);
                                            done = true;
                                            if (examItem.itemType == "weapon" || examItem.itemType == "shield")
                                            {
                                                var results2 = from result in WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems
                                                               where Regex.Match(userValueItem, result, RegexOptions.Singleline | RegexOptions.IgnoreCase).Success
                                                               select result;
                                                foreach (var result in results2)
                                                {
                                                    WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems.Remove(result);
                                                    break;
                                                }
                                            }
                                        }
                                        else
                                        {
                                            WriteLineText("It was added to your inventory");
                                            done = true;
                                        }
                                    }
                                    else
                                    {
                                        if (torchOn == false)
                                            Console.ForegroundColor = ConsoleColor.DarkCyan;
                                        else if (torchOn == true)
                                            Console.ForegroundColor = ConsoleColor.DarkBlue;
                                        WriteLineText("It looks like you can't afford that right now...");
                                        Thread.Sleep(1000);
                                        done = true;
                                    }
                                }
                                else if (Regex.IsMatch(choice, negativePhrases, RegexOptions.IgnoreCase))
                                {
                                    if (torchOn == false)
                                        Console.ForegroundColor = ConsoleColor.DarkCyan;
                                    else if (torchOn == true)
                                        Console.ForegroundColor = ConsoleColor.DarkBlue;
                                    WriteLineText("OK, come back another time though.");
                                    Thread.Sleep(1000);
                                    done = true;
                                }
                                else
                                {
                                    if (torchOn == false)
                                        Console.ForegroundColor = ConsoleColor.DarkCyan;
                                    else if (torchOn == true)
                                        Console.ForegroundColor = ConsoleColor.DarkBlue;
                                    WriteLineText("Excuse me?");
                                    Thread.Sleep(1000);
                                }
                            } while (done == false);
                            break;
                        }
                        else
                        {
                            inventory.dictionary.TryGetValue(WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems[i].TrimStart('*'), out currentCount);
                            inventory.dictionary[WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems[i].TrimStart('*')] = currentCount + 1;
                            WriteLineText("You took the " + WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems[i].TrimStart('*'));
                            var results = from result in WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems
                                          where Regex.Match(userValueItem, result.TrimStart('*'), RegexOptions.Singleline | RegexOptions.IgnoreCase).Success
                                          select result.TrimStart('*');
                            foreach (var result in results)
                            {
                                WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems.Remove(result.TrimStart('*'));
                                WorldMapCells[CurrentMap][CurrentLocation].secondLevelLookGridItems.Remove(result.Insert(0, "*"));
                                break;
                            }
                            break;
                        }
                    }
                }
            }

        }

        public void DropIndividual() //if key item, can't drop it, but can deposit it in lab
        {
            Console.ForegroundColor = foregroundColour;
            var results = from result in inventory.dictionary
                          where Regex.Match(userValueItem, result.Key, RegexOptions.Singleline | RegexOptions.IgnoreCase).Success
                          select result;
            foreach (var result in results)
            {
                itemChoice = result.Key;
            }
            referenceCurrentItem();
            if (examItem.keyItem != true)
            {
                inventory.dictionary.TryGetValue(examItem.itemName, out currentCount);
                inventory.dictionary[examItem.itemName] = currentCount - 1;
                WriteLineText("You dropped the " + UppercaseFirst(examItem.itemName));
                if (WorldMapCells[CurrentMap][CurrentLocation].gridItems.Contains(""))
                    WorldMapCells[CurrentMap][CurrentLocation].gridItems.Remove("");
                WorldMapCells[CurrentMap][CurrentLocation].gridItems.Add(examItem.itemName);
                inventory.dictionary.TryGetValue(examItem.itemName, out currentCount); //removes any 0 value items
                if (currentCount == 0)
                    inventory.dictionary.Remove(examItem.itemName);
            }
            else if (examItem.keyItem == true)
                WriteLineText("You don't really want to get rid of such a useful item, do you?");
        }

        public void Examine()
        {
            Console.ForegroundColor = foregroundColour;
            {
                referenceCurrentItem();
                WriteLineText(UppercaseFirst(examItem.itemName) + ": \n" + examItem.itemDescription);
                if (examItem.equippable == true)
                    WriteLineText("This is an equippable item for your " + examItem.itemBodyLocation);
                if (examItem.itemStrengthBonus != 0)
                    WriteLineText("It provides " + examItem.itemStrengthBonus + " Strength");
                if (examItem.itemDefenseBonus != 0)
                    WriteLineText("It provides " + examItem.itemDefenseBonus + " Defense");
                if (examItem.itemHPGain != 0)
                    WriteLineText("It restores " + examItem.itemHPGain + " Health");
            }
        }

        public void AccessInventory()
        {
            Console.ForegroundColor = foregroundColour;
            getInvDictionary1();
            foreach (KeyValuePair<string, int> item in inventory.dictionary)
            {
                itemChoice = item.Key;
                referenceCurrentItem();
                if (item.Value != 0)
                    if (examItem.itemType == "weapon" || examItem.itemType == "shield")
                        Console.WriteLine("{0}", UppercaseFirst(examItem.itemName));
                    else
                        Console.WriteLine("{0}: {1}", UppercaseFirst(item.Key), item.Value);
            }
            if (inventory.dictionary.Count == 0)
                WriteLineText("You have no items!");
        }

        public void AccessInventoryComputer()
        {
            foreach (KeyValuePair<string, int> item in inventory.dictionary)
            {
                if (item.Value != 0)
                    Console.WriteLine("{0}: {1}", item.Key.ToUpper(), item.Value);
            }
            if (inventory.dictionary.Count == 0)
                WriteLineText("YOU HAVE NO ITEMS TO DEPOSIT.");
        }

        public void AccessComputerStorage()
        {
            foreach (KeyValuePair<string, int> item in ComputerStorage)
            {
                if (item.Value != 0)
                    Console.WriteLine("{0}: {1}", item.Key.ToUpper(), item.Value);
            }
            if (ComputerStorage.Count == 0)
                WriteLineText("THERE ARE NO ITEMS STORED HERE.");
        }

        public void AccessComputerDNAItemStorage()
        {
            foreach (KeyValuePair<string, int> item in ComputerDNAItemStorage)
            {
                if (item.Value != 0)
                    Console.WriteLine("{0}: {1}", item.Key.ToUpper(), item.Value);
            }
            if (ComputerDNAItemStorage.Count == 0)
                WriteLineText("THERE ARE NO ITEMS STORED HERE.");
        }

        public void AccessStats()
        {
            Console.ForegroundColor = foregroundColour;
            Console.WriteLine("Your current HP is {0}" + @"/" + "{1} \nYour current Strength is {2} \nYour current Defense is {3} \nYour current Speed is {4} \nYour current Hit% is {5} \nYour current Charisma is {6} \nYour current Level is {7} \nYour current Exp is {8}\nYou have {9} Ayu", playerStats.playerCurrentHP, playerStats.playerMaxHP, playerStats.playerMaxStrength, playerStats.playerMaxDefense, playerStats.playerMaxSpeed, playerStats.playerMaxHit, playerStats.playerMaxCharisma, playerStats.playerLevel, playerStats.playerCurrentExp, playerStats.playerMoney);
        }

        public void AccessEquipment()
        {
            Console.ForegroundColor = foregroundColour;
            string weaponName = UppercaseFirst(playerStats.weapon);
            string shieldName = UppercaseFirst(playerStats.shield);
            Console.WriteLine("Armour: {0} \nWeapon: {1} \nShield: {2}",
                            UppercaseFirst(playerStats.armour), UppercaseFirst(weaponName), UppercaseFirst(shieldName));
        }

        public void AccessMonsters()
        {
            Console.ForegroundColor = foregroundColour;
            if (storyCounter >= 2)
            {
                Console.WriteLine("Name:    {0}\nAttack:  {1}\nDefense: {2}\nSpeed:   {3}\nSpecial Abilities:", meeba.name, meeba.attack, meeba.defense, meeba.speed);
                for (int i = 0; i < meeba.Moves.Count; i++)
                {
                    Console.WriteLine("         " + meeba.Moves[i]);
                }
                Console.WriteLine("\nName:    {0}\nAttack:  {1}\nDefense: {2}\nSpeed:   {3}\nSpecial Abilities:", meeba2.name, meeba2.attack, meeba2.defense, meeba2.speed);
                for (int i = 0; i < meeba2.Moves.Count; i++)
                {
                    Console.WriteLine("         " + meeba2.Moves[i]);
                }
            }
        }

        public void AccessHelp()
        {
            int tempTextSpeed = textSpeed;
            textSpeed = 0;
            Console.ForegroundColor = foregroundColour;
            WriteLineText("GUIDE TO INTERACTING WITH THE WORLD AND ITS INHABITANTS");
            WriteLineText("_______________________________________________________\n");
            WriteLineText("COMMAND EXAMPLES: \nMovement: \n'go north'  OR 'north' OR 'n'\n'go south' OR 'south' OR 's'\n'go east' OR 'east' OR 'e'\n'go west' OR 'west' OR 'w'\n\nNavigation: \n'map'\n");
            WriteLineText("Interaction: \n'look'\n'examine' OR 'exam' OR 'x'\n'take [item]'\n'take all'\n'drop [item]'\n'talk to [name]'\n");
            WriteLineText("Menu: \n'menu'\n'inventory'/'inv'\n'stats'\n'equipment'\n'help'\n\nItem use: \n'Use [item]'\n'Read [item]'\n'Eat [item]'\n'Drink [item]'\n'[Verb] [item]'");
            WriteLineText("\nGUIDE TO NAVIGATING THE WORLD OF TERETHIA");
            WriteLineText("_________________________________________");
            Map();
            WriteLineText("Map: \n| | You have not been here \n|x| You have been here \n|o| You are currently here \nAccess to new maps is shown in white");
            string[] Hints = new string[]
            {
                "There's so much exploring to do just in this village alone, I should go to the lab first though.",
                "I need to find more information on the protomeebium, maybe the library will provide me with some answers.",
                "Incredible! We were able to create the Meeba from the sample I found.",
                "The miners in the excavation shack ought to know the whereabouts of more Ellondite.",
                "Dr. Digby has asked me to head to Karstbay to visit his collegue, there's a boat leaving soon from Rifton Beach that I should be able to catch.",
                "I should head to Karstbay Caves to find more ellondite."
            }; 

            WriteLineText("\nHints:");
            for (int i = 0; i < Hints.Length; i++)
            {
                if (i == storyCounter)
                {
                    WriteLineText(Hints[i]);
                }
            }
            textSpeed = tempTextSpeed;
        }

        public void AccessTextSpeed()
        {
            Console.ForegroundColor = foregroundColour;
            Console.WriteLine("Please choose the text speed you would like:\n1: Snail\n2: Leisurely\n3: Average\n4: Brisk\n5: Light-speed");
            bool validChoice = false;
            do
            {
                Console.Write("> ");
                string choice = Console.ReadLine().ToLower().Trim();
                if (choice != "1" && choice != "2" && choice != "3" && choice != "4" && choice != "5" && choice != "exit" && choice != "back")
                {
                    Console.ForegroundColor = foregroundColour;
                    Console.WriteLine("Please choose a valid option");
                    Thread.Sleep(1000);
                    MainMenu.DecrementCursorTop(2);
                    Console.Write(new string(' ', Console.WindowWidth));
                    MainMenu.DecrementCursorTop(2);
                    Console.Write(new string(' ', Console.WindowWidth));
                    MainMenu.DecrementCursorTop(1);
                }
                else if (choice == "back" || choice == "exit")
                {
                    validChoice = true;
                    break;
                }
                else if (choice == "1")
                {
                    textSpeed = 80;
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("Text speed set to Snail.");
                    Thread.Sleep(1000);
                    validChoice = true;
                    break;
                }
                else if (choice == "2")
                {
                    textSpeed = 60;
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("Text speed set to Leisurely.");
                    Thread.Sleep(1000);
                    validChoice = true;
                    break;
                }
                else if (choice == "3")
                {
                    textSpeed = 40;
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("Text speed set to Average.");
                    Thread.Sleep(1000);
                    validChoice = true;
                    break;
                }
                else if (choice == "4")
                {
                    textSpeed = 20;
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("Text speed set to Brisk.");
                    Thread.Sleep(1000);
                    validChoice = true;
                    break;
                }
                else if (choice == "5")
                {
                    textSpeed = 0;
                    Console.ForegroundColor = foregroundColour;
                    WriteLineText("Text speed set to Light-speed.");
                    Thread.Sleep(1000);
                    validChoice = true;
                    break;
                }
            } while (validChoice == false);
        }

        public void AccessQuestLog()
        {
            int tempTextSpeed = textSpeed;
            textSpeed = 0;
            Console.ForegroundColor = foregroundColour;
            if (questLog.Count > 0)
            {
                foreach (var item in questLog)
                {
                    if (item.Contains('*'))
                    {
                        Console.ForegroundColor = ConsoleColor.DarkGray;
                        WriteLineText(item.TrimStart('*'));
                        Console.ForegroundColor = foregroundColour;
                    }
                    else
                    {
                        Console.ForegroundColor = ConsoleColor.Yellow;
                        WriteLineText(item);
                        Console.ForegroundColor = foregroundColour;
                    }
                }
            }
            else
                WriteLineText("You do not have any current quests.");
            textSpeed = tempTextSpeed;
        }

        public void unknownInput()
        {
            Console.ForegroundColor = foregroundColour;
            if (!userValue.Contains("1") && !userValue.Contains("2") && !userValue.Contains("3") && !userValue.Contains("4") && !userValue.Contains("5") && !userValue.Contains("7") && !userValue.Contains("8") && !userValue.Contains("9") && !userValue.Contains("0"))
            {
                string[] unknownResponses = new string[] { "You can't do that!", "I don't understand", "Try something else", "You want to do WHAT?!", "Excuse me?", "I beg your pardon?" };
                var randomMember = random.Next(unknownResponses.Length);
                WriteLineText(unknownResponses[randomMember]);
            }
            else
            {
                MainMenu.DecrementCursorTop(1);
                Console.Write(new string(' ', Console.WindowWidth));
                MainMenu.DecrementCursorTop(1);
            }
        }

        public void fullHeal()
        {
            Console.Beep(600, 100);
            Console.Beep(400, 100);
            Console.Beep(800, 100);
            Thread.Sleep(800);
            playerStats.playerCurrentHP = playerStats.playerMaxHP;
            meeba.currentHp = meeba.hp;
            meeba2.currentHp = meeba2.hp;
            meeba.currentMP = meeba.MP;
            meeba2.currentMP = meeba2.MP;
            resetStats();
            playerStats.isAsleep = false;
            playerStats.isPoisoned = false;
            playerStats.isPoisonedTwo = false;
            playerStats.isStunned = false;
            meeba.isAsleep = false;
            meeba.isPoisoned = false;
            meeba.isPoisonedTwo = false;
            meeba.isStunned = false;
            meeba2.isAsleep = false;
            meeba2.isPoisoned = false;
            meeba2.isPoisonedTwo = false;
            meeba2.isStunned = false;
        }

        public void NPCTALK()
        { //C:\Users\Claire\Documents\Game Development\Visual Studio 2013\Projects\GridAdventure1\GridAdventure1\bin\Debug
            try
            {
                using (StreamReader sr = new StreamReader(Environment.CurrentDirectory + "\\NPCTEXT.txt"))
                {
                    string line;
                    while ((line = sr.ReadLine()) != "ENDFILE")
                    {
                        if ((line) == NPCIdentifier)
                        {
                            while ((line = sr.ReadLine()) != ENDNPCIdentifier)
                            {
                                if (line == Convert.ToString(NPCConvStage))
                                {
                                    while ((line = sr.ReadLine()) != "END")
                                    {
                                        bool indent = true;
                                        if (torchOn == false)
                                            Console.ForegroundColor = ConsoleColor.DarkCyan;
                                        else if (torchOn == true)
                                            Console.ForegroundColor = ConsoleColor.DarkBlue;

                                        if (line.Contains("*NPCNAME*"))
                                        {
                                            line = line.Replace("*NPCNAME*", UppercaseFirst(NPCName));
                                            indent = false;
                                        }

                                        if (line.Contains("*NAME*"))
                                            line = line.Replace("*NAME*", UppercaseFirst(playerStats.name));

                                        if (line.Contains("*FAVDRINK*"))
                                            line = line.Replace("*FAVDRINK*", UppercaseFirst(playerStats.favdrink));

                                        if (line.Contains("*YELLOW*"))
                                        {
                                            bool gray = false;
                                            if (line.Contains("*GREY*"))
                                            {
                                                line = line.Replace("*GREY*", "");
                                                if (torchOn == false)
                                                    Console.ForegroundColor = ConsoleColor.Gray;
                                                else
                                                    Console.ForegroundColor = ConsoleColor.Black;
                                                gray = true;
                                            }
                                            else
                                            {
                                                if (torchOn == false)
                                                    Console.ForegroundColor = ConsoleColor.DarkCyan;
                                                else if (torchOn == true)
                                                    Console.ForegroundColor = ConsoleColor.DarkBlue;
                                            }

                                            int startIndex = line.IndexOf("*YELLOW*") + 8;
                                            int endIndex = line.IndexOf("*/YELLOW*");
                                            string subPreYellow = line.Substring(0, startIndex - 8).TrimEnd(' ');
                                            string subYellow = line.Substring(startIndex, endIndex - startIndex);
                                            string subPostYellow = line.Substring(endIndex + 9).TrimStart(' ');
                                            string[] subPreYellowWords = subPreYellow.Split(' ');
                                            string[] subYellowWords = subYellow.Split(' ');
                                            string[] subPostYellowWords = subPostYellow.Split(' ');

                                            string currentLine = "";
                                            if (indent == true)
                                            {
                                                Console.Write(new string(' ', NPCName.Length + 2));
                                                currentLine = (new string(' ', NPCName.Length + 2));
                                            }

                                            foreach (var word in subPreYellowWords)
                                            {
                                                if (gray == true && torchOn == false)
                                                    Console.ForegroundColor = ConsoleColor.Gray;
                                                else if (gray == true && torchOn == true)
                                                    Console.ForegroundColor = ConsoleColor.Black;
                                                else
                                                {
                                                    if (torchOn == false)
                                                        Console.ForegroundColor = ConsoleColor.DarkCyan;
                                                    else if (torchOn == true)
                                                        Console.ForegroundColor = ConsoleColor.DarkBlue;
                                                }
                                                //for each word in the message, if it makes the message so far less than the window width..   
                                                if (currentLine.Length + word.Length + 1 < Console.WindowWidth)
                                                {
                                                    currentLine += word + " ";
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                }
                                                else //if the word makes the line go over the window width, print what we have so far
                                                {
                                                    Console.Write("\n");
                                                    Console.Write(new string(' ', NPCName.Length + 2));

                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                    currentLine = (new string(' ', NPCName.Length + 2)) + word + " ";
                                                }
                                            }
                                            foreach (var word in subYellowWords)
                                            {
                                                if (torchOn == false)
                                                    Console.ForegroundColor = ConsoleColor.Yellow;
                                                else
                                                    Console.ForegroundColor = ConsoleColor.Black;
                                                //for each word in the message, if it makes the message so far less than the window width..   
                                                if (currentLine.Length + word.Length + 1 < Console.WindowWidth)
                                                {
                                                    currentLine += word + " ";
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                }
                                                else //if the word makes the line go over the window width, print what we have so far
                                                {
                                                    Console.Write("\n");
                                                    Console.Write(new string(' ', NPCName.Length + 2));
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                    currentLine = (new string(' ', NPCName.Length + 2)) + word + " ";
                                                }
                                            }
                                            foreach (var word in subPostYellowWords)
                                            {
                                                if (gray == true && torchOn == false)
                                                    Console.ForegroundColor = ConsoleColor.Gray;
                                                else if (gray == true && torchOn == true)
                                                    Console.ForegroundColor = ConsoleColor.Black;
                                                else
                                                {
                                                    if (torchOn == false)
                                                        Console.ForegroundColor = ConsoleColor.DarkCyan;
                                                    else if (torchOn == true)
                                                        Console.ForegroundColor = ConsoleColor.DarkBlue;
                                                }
                                                //for each word in the message, if it makes the message so far less than the window width..   
                                                if (currentLine.Length + word.Length + 1 < Console.WindowWidth)
                                                {
                                                    currentLine += word + " ";
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                }
                                                else //if the word makes the line go over the window width, print what we have so far
                                                {
                                                    Console.Write("\n");
                                                    Console.Write(new string(' ', NPCName.Length + 2));
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                    currentLine = (new string(' ', NPCName.Length + 2)) + word + " ";
                                                }
                                            }
                                            Console.Write(Environment.NewLine);
                                            Thread.Sleep(500);
                                        }
                                        else if (line.Contains("*GREY*"))
                                        {
                                            string output = line.Replace("*GREY*", "");
                                            if (torchOn == false)
                                                Console.ForegroundColor = ConsoleColor.Gray;
                                            else
                                                Console.ForegroundColor = ConsoleColor.Black;
                                            WriteLineText(output);
                                            Thread.Sleep(1500);
                                        }
                                        else
                                        {
                                            if (torchOn == false)
                                                Console.ForegroundColor = ConsoleColor.DarkCyan;
                                            else if (torchOn == true)
                                                Console.ForegroundColor = ConsoleColor.DarkBlue;

                                            string[] subWords = line.Split(' ');
                                            string currentLine = "";
                                            if (indent == true)
                                            {
                                                Console.Write(new string(' ', NPCName.Length + 2));
                                                currentLine = (new string(' ', NPCName.Length + 2));
                                            }
                                            foreach (var word in subWords)
                                            {
                                                //for each word in the message, if it makes the message so far less than the window width..   
                                                if (currentLine.Length + word.Length + 1 < Console.WindowWidth)
                                                {
                                                    currentLine += word + " ";
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                }
                                                else //if the word makes the line go over the window width, print what we have so far
                                                {
                                                    Console.Write("\n");
                                                    Console.Write(new string(' ', NPCName.Length + 2));
                                                    for (int i = 0; i < word.Length; i++)
                                                    {
                                                        Console.Write(word[i]);
                                                        Thread.Sleep(textSpeed);
                                                    }
                                                    Console.Write(" ");
                                                    Thread.Sleep(textSpeed);
                                                    currentLine = (new string(' ', NPCName.Length + 2)) + word + " ";
                                                }
                                            }
                                            Console.Write("\n");
                                            
                                            Thread.Sleep(1500);
                                            if (torchOn == false)
                                                Console.ForegroundColor = ConsoleColor.Gray;
                                            else
                                                Console.ForegroundColor = ConsoleColor.Black;
                                        }
                                        if (torchOn == false)
                                            Console.ForegroundColor = ConsoleColor.Gray;
                                        else
                                            Console.ForegroundColor = ConsoleColor.Black;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception)
            {
                WriteLineText("They don't want to talk right now.");
            }
        }

        public void useTorch()
        {
            Console.BackgroundColor = ConsoleColor.Yellow;
            backgroundColour = ConsoleColor.Yellow;
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Black;
            foregroundColour = ConsoleColor.Black;
            torchOn = true;
            WorldMapCells[1][31].accessible = true; //Hidden locations
            WorldMapCells[1][32].accessible = true;
        }

        public void useUVTorch()
        {
            Console.BackgroundColor = ConsoleColor.DarkMagenta;
            backgroundColour = ConsoleColor.DarkMagenta;
            Console.Clear();
            Console.ForegroundColor = ConsoleColor.Magenta;
            foregroundColour = ConsoleColor.Magenta;
            torchOn = true;
            WorldMapCells[1][31].accessible = true; //Hidden locations
            WorldMapCells[1][32].accessible = true;
        }

        public void useDetector()
        {
            double tempEllonditeLoc = 100;
            double tempCurrentLoc = 100;
            for (int i = 0; i < 100; i++)
            {
                if (WorldMapCells[CurrentMap][i].ellondite == true)
                    tempEllonditeLoc = i;
            }
            if (tempEllonditeLoc != 100)
            {
                double tempCurrentLocRow = 0;
                double tempCurrentLocColumn = 0;
                double tempEllonditeLocRow = 0;
                double tempEllonditeLocColumn = 0;
                tempCurrentLoc = WorldMapCells[CurrentMap][CurrentLocation].cellLocation;

                if (tempCurrentLoc > 9)
                {
                    tempCurrentLocRow = Math.Floor(tempCurrentLoc / 10); //e.g. 31 becomes 3, 57 becomes 5
                }//gets first part of number (row)
                if (tempEllonditeLoc > 9)
                {
                    tempEllonditeLocRow = Math.Floor(tempEllonditeLoc / 10); //e.g. 31 becomes 3, 57 becomes 5
                }

                if (tempCurrentLoc > 9) //gets column number
                {
                    while (tempCurrentLoc > 9) //reduces by 10 until less than 10
                    {
                        tempCurrentLoc -= 10;
                    }
                }
                tempCurrentLocColumn = tempCurrentLoc;

                if (tempEllonditeLoc > 9)
                {
                    while (tempEllonditeLoc > 9)
                    {
                        tempEllonditeLoc -= 10;
                    }
                }
                tempEllonditeLocColumn = tempEllonditeLoc;

                //absolute value of distance between two points
                double radiation = Math.Abs((tempEllonditeLocColumn + tempEllonditeLocRow) - (tempCurrentLocColumn + tempCurrentLocRow));
                double radiationRandomised = random.NextDouble();
                double finalRadiation = (19 - radiation + radiationRandomised) * 5;
                string finalRadString = finalRadiation.ToString().Remove(6);
                Console.ForegroundColor = ConsoleColor.DarkGreen;
                message = "RADIATION DETECTOR: DETECTING...\n";
                for (int i = 0; i < message.Length; i++)
                {
                    Console.Write(message[i]);
                    Thread.Sleep(25);
                }
                Thread.Sleep(800);
                message = "RADIATION LEVEL: ";
                for (int i = 0; i < message.Length; i++)
                {
                    Console.Write(message[i]);
                    Thread.Sleep(25);
                }
                Thread.Sleep(800);
                Console.Write(finalRadString);
                Thread.Sleep(800);
                Console.Write("\n");
                Console.ForegroundColor = foregroundColour;
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.DarkGreen;
                message = "RADIATION DETECTOR: DETECTING...\n";
                for (int i = 0; i < message.Length; i++)
                {
                    Console.Write(message[i]);
                    Thread.Sleep(25);
                }
                Thread.Sleep(800);
                message = "NO DETECTABLE RADIATION FOUND\n";
                for (int i = 0; i < message.Length; i++)
                {
                    Console.Write(message[i]);
                    Thread.Sleep(25);
                }
                Thread.Sleep(800);
            }
        }

        public void TurnOffTorch()
        {
            backgroundColour = ConsoleColor.Black;
            foregroundColour = ConsoleColor.Gray;
            Console.BackgroundColor = backgroundColour;
            Console.ForegroundColor = foregroundColour;
            Console.Clear();
            torchOn = false;
            WorldMapCells[1][31].accessible = false; //Hidden locations
            WorldMapCells[1][32].accessible = false;
        }

        public void Map()
        {
            GridMap = new string[100];
            for (int i = 0; i < 100; i++)
            {
                WorldMapCells[CurrentMap][i].draw = false;

                if (WorldMapCells[CurrentMap][i] == WorldMapCells[CurrentMap][CurrentLocation])
                {
                    GridMap[CurrentLocation] = "|o|";
                    WorldMapCells[CurrentMap][i].draw = true;
                }

                //torchvisible
                else if (WorldMapCells[CurrentMap][i].accessible == false || WorldMapCells[CurrentMap][i].torchVisible == true)
                {
                    GridMap[i] = "   ";
                    WorldMapCells[CurrentMap][i].draw = true;
                    if (WorldMapCells[CurrentMap][i].torchVisible == true && torchOn == true && WorldMapCells[CurrentMap][i].visited == false)
                    {
                        GridMap[i] = "| |";
                        WorldMapCells[CurrentMap][i].draw = true;
                    }
                    else if (WorldMapCells[CurrentMap][i].torchVisible == true && torchOn == true && WorldMapCells[CurrentMap][i].visited == true)
                    {
                        WorldMapCells[CurrentMap][i].draw = true;
                        GridMap[i] = "|x|";
                    }

                }

                else if (WorldMapCells[CurrentMap][i].accessible == true && WorldMapCells[CurrentMap][i].visited == false)
                {
                    GridMap[i] = "| |";
                    WorldMapCells[CurrentMap][i].draw = true;
                }

                else if (WorldMapCells[CurrentMap][i].visited == true && WorldMapCells[CurrentMap][i] != WorldMapCells[CurrentMap][CurrentLocation])
                {
                    GridMap[i] = "|x|";
                    WorldMapCells[CurrentMap][i].draw = true;
                }

                //cave
                if (WorldMapCells[CurrentMap][i].cave == true && torchOn == true)
                {
                    //east border except corners
                    if (easternBorder.Contains(WorldMapCells[CurrentMap][CurrentLocation].cellLocation) && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 9 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 99)
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 11].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 10].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 9].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 10].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    //west border except corners
                    if (westernBorder.Contains(WorldMapCells[CurrentMap][CurrentLocation].cellLocation) && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 0 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 90)
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 10].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 9].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 10].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 11].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    //north border except corners
                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation < 10 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 0 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 9)
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 9].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 10].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 11].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    //south border except corners
                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation > 89 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 90 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation != 99)
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 11].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 10].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 9].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 0) //NW corner
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][1].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][10].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][11].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 9) //NE corner
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][8].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][18].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][19].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 90) //SW corner
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][80].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][81].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][91].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    if (WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 99) //SE corner
                        if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][88].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][89].cellLocation
                        && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][98].cellLocation)
                        {
                            GridMap[i] = "   ";
                            WorldMapCells[CurrentMap][i].draw = false;
                        }

                    if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation //central
                         && WorldMapCells[CurrentMap][CurrentLocation].cellLocation < 90 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation > 9 && !easternBorder.Contains(WorldMapCells[CurrentMap][CurrentLocation].cellLocation) && !westernBorder.Contains(WorldMapCells[CurrentMap][CurrentLocation].cellLocation)
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 11].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 10].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 9].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation - 1].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 1].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 9].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 10].cellLocation
                       && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation + 11].cellLocation)
                    {
                        GridMap[i] = "   ";
                        WorldMapCells[CurrentMap][i].draw = false;
                    }

                    if (WorldMapCells[CurrentMap][i].visited == true && WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation)
                    {
                        GridMap[i] = "|x|";
                        WorldMapCells[CurrentMap][i].draw = true;
                    }
                }
                else if (WorldMapCells[CurrentMap][i].cave == true && torchOn == false)
                {
                    if (WorldMapCells[CurrentMap][i].cellLocation != WorldMapCells[CurrentMap][CurrentLocation].cellLocation)
                    {
                        GridMap[i] = "   ";
                        WorldMapCells[CurrentMap][i].draw = false;
                    }
                }
            }
            //actually write map
            Console.ForegroundColor = foregroundColour;
            Console.WriteLine("\nYour current location is " + UppercaseFirst(WorldMapCells[CurrentMap][CurrentLocation].mapName) + ", " + WorldMapCells[CurrentMap][CurrentLocation].cellName);
            Console.WriteLine("\n  N");
            Console.WriteLine("W   E");
            Console.WriteLine("  S\n");
            for (int j = 0; j < 100; j += 10) //Draws map - j is the row (increments of 10 as 10 cells per row)
            {
                if (WorldMapCells[CurrentMap][j].accessible == true || WorldMapCells[CurrentMap][j + 1].accessible == true || WorldMapCells[CurrentMap][j + 2].accessible == true || WorldMapCells[CurrentMap][j + 3].accessible == true || WorldMapCells[CurrentMap][j + 4].accessible == true || WorldMapCells[CurrentMap][j + 5].accessible == true || WorldMapCells[CurrentMap][j + 6].accessible == true || WorldMapCells[CurrentMap][j + 7].accessible == true || WorldMapCells[CurrentMap][j + 8].accessible == true || WorldMapCells[CurrentMap][j + 9].accessible == true || WorldMapCells[CurrentMap][j].Gateway == true || WorldMapCells[CurrentMap][j + 1].Gateway == true || WorldMapCells[CurrentMap][j + 2].Gateway == true || WorldMapCells[CurrentMap][j + 3].Gateway == true || WorldMapCells[CurrentMap][j + 4].Gateway == true || WorldMapCells[CurrentMap][j + 5].Gateway == true || WorldMapCells[CurrentMap][j + 6].Gateway == true || WorldMapCells[CurrentMap][j + 7].Gateway == true || WorldMapCells[CurrentMap][j + 8].Gateway == true || WorldMapCells[CurrentMap][j + 9].Gateway == true)
                { //Only draws a row if there is something accessible on it
                    for (int i = j; i < (j + 10); i++) //i is the cell (1-10 per row)
                    {
                        if (WorldMapCells[CurrentMap][i].Gateway == true && WorldMapCells[CurrentMap][i].cave == true && WorldMapCells[CurrentMap][i].draw != false)
                        {
                            if (torchOn == false)
                            {
                                Console.BackgroundColor = ConsoleColor.White;
                            }
                            else if (torchOn == true)
                            {
                                Console.BackgroundColor = ConsoleColor.DarkMagenta;
                            }
                            Console.ForegroundColor = ConsoleColor.Black;
                            Console.Write(GridMap[i]);
                            Console.ResetColor();
                        }
                        else if (WorldMapCells[CurrentMap][i].Gateway == true && WorldMapCells[CurrentMap][i].cave != true)
                        {
                            if (torchOn == false)
                            {
                                Console.BackgroundColor = ConsoleColor.White;
                            }
                            else if (torchOn == true)
                            {
                                Console.BackgroundColor = ConsoleColor.DarkMagenta;
                            }
                            Console.ForegroundColor = ConsoleColor.Black;
                            Console.Write(GridMap[i]);
                            Console.ResetColor();
                        }
                        else if (GridMap[i] == "   ")
                        {
                            Console.BackgroundColor = backgroundColour;
                            Console.Write(GridMap[i]);
                            Console.ResetColor();
                        }
                        else if (GridMap[i] == "| |" || GridMap[i] == "|x|" || GridMap[i] == "|o|")
                        {
                            Console.BackgroundColor = ConsoleColor.DarkGray;
                            Console.ForegroundColor = ConsoleColor.Black;
                            Console.Write(GridMap[i]);
                            Console.ResetColor();
                        }
                    }
                }
                if (WorldMapCells[CurrentMap][j].accessible == true || WorldMapCells[CurrentMap][j].Gateway == true || WorldMapCells[CurrentMap][j + 1].accessible == true || WorldMapCells[CurrentMap][j + 1].Gateway == true || WorldMapCells[CurrentMap][j + 2].accessible == true || WorldMapCells[CurrentMap][j + 2].Gateway == true || WorldMapCells[CurrentMap][j + 3].accessible == true || WorldMapCells[CurrentMap][j + 3].Gateway == true || WorldMapCells[CurrentMap][j + 4].accessible == true || WorldMapCells[CurrentMap][j + 4].Gateway == true || WorldMapCells[CurrentMap][j + 5].accessible == true || WorldMapCells[CurrentMap][j + 5].Gateway == true || WorldMapCells[CurrentMap][j + 6].accessible == true || WorldMapCells[CurrentMap][j + 6].Gateway == true || WorldMapCells[CurrentMap][j + 7].accessible == true || WorldMapCells[CurrentMap][j + 7].Gateway == true || WorldMapCells[CurrentMap][j + 8].accessible == true || WorldMapCells[CurrentMap][j + 8].Gateway == true || WorldMapCells[CurrentMap][j + 9].accessible == true || WorldMapCells[CurrentMap][j + 9].Gateway == true)
                {
                    Console.ForegroundColor = foregroundColour;
                    Console.BackgroundColor = backgroundColour;
                    Console.Write(Environment.NewLine); //Only starts a new line if there was map drawn on it
                }
            }
        }

        public void referenceCurrentItem()
        {
            if (itemChoice.ToLower() == FavDrink.itemName.ToLower())
            {
                itemChoice = "favdrink";
            }
            switch (itemChoice) //Add all items
            {
                case "stick":
                    examItem = Stick;
                    break;
                case "sword":
                    examItem = Sword;
                    break;
                case "mega sword":
                    examItem = MegaSword;
                    break;
                case "axe":
                    examItem = Axe;
                    break;
                case "mace":
                    examItem = Mace;
                    break;
                case "spear":
                    examItem = Spear;
                    break;
                case "bow":
                    examItem = Bow;
                    break;
                case "shield":
                    examItem = Shield;
                    break;
                case "lacquered shield":
                    examItem = LacqueredShield;
                    break;
                case "cotton vest":
                    examItem = new CottonVest();
                    break;
                case "bag of oats":
                    examItem = new BagOfOats();
                    break;
                case "dried fish":
                    examItem = new DriedFish();
                    break;
                case "knitted vest":
                    examItem = new KnittedVest();
                    break;
                case "chainmail":
                    examItem = new Chainmail();
                    break;
                case "apple":
                    examItem = new Apple();
                    break;
                case "tiny parsnip":
                    examItem = new TinyParsnip();
                    break;
                case "carrot":
                    examItem = new Carrot();
                    break;
                case "onion":
                    examItem = new Onion();
                    break;
                case "beans":
                    examItem = new Beans();
                    break;
                case "potato":
                    examItem = new Potato();
                    break;
                case "sandwich":
                    examItem = new Sandwich();
                    break;
                case "burger":
                    examItem = new Burger();
                    break;
                case "fishcake":
                    examItem = new Fishcake();
                    break;
                case "wild berries":
                    examItem = new WildBerries();
                    break;
                case "red pipon shake":
                    examItem = new RedPiponShake();
                    break;
                case "blue pipon shake":
                    examItem = new BluePiponShake();
                    break;
                case "green pipon shake":
                    examItem = new GreenPiponShake();
                    break;
                case "pink pipon shake":
                    examItem = new PinkPiponShake();
                    break;
                case "mushrooms":
                    examItem = new Mushrooms();
                    break;
                case "history of rifton village":
                    examItem = new HistoryRiftonVillageBook();
                    break;
                case "the polluted lands":
                    examItem = new PollutedLandsBook();
                    break;
                case "soil quality and gardening":
                    examItem = new GardeningBeginnersBook();
                    break;
                case "favdrink":
                    examItem = FavDrink;
                    break;
                case "flashlight":
                    examItem = new Flashlight();
                    break;
                case "key":
                    examItem = new Key();
                    break;
                case "letter":
                    examItem = new Letter();
                    break;
                case "large branch":
                    examItem = new LargeBranch();
                    break;
                case "detector":
                    examItem = new Detector();
                    break;
                case "pickaxe":
                    examItem = new Pickaxe();
                    break;
                case "ellondite":
                    examItem = new Ellondite();
                    break;
                case "rock":
                    examItem = new Rock();
                    break;
                case "bat dropping":
                    examItem = new BatDropping();
                    break;
                case "protomeebium":
                    examItem = new Protomeebium();
                    break;
                case "protomeebium book":
                    examItem = new ProtomeebiumBook();
                    break;
                case "Rapid evolutionary radiations throughout history":
                    examItem = new RapidRadiationsHistoryBook();
                    break;
                case "fire egg":
                    examItem = new FireEgg();
                    break;
                case "flame gloop":
                    examItem = new FlameGloop();
                    break;
                case "coal armour":
                    examItem = new CoalArmour();
                    break;
                case "flint":
                    examItem = new Flint();
                    break;
                case "fire fang":
                    examItem = new FireFang();
                    break;
                case "burning tail":
                    examItem = new BurningTail();
                    break;
                case "infernal scale":
                    examItem = new InfernalScale();
                    break;
                case "lava rock":
                    examItem = new LavaRock();
                    break;
                case "seed":
                    examItem = new Seed();
                    break;
                case "spore":
                    examItem = new Spore();
                    break;
                case "grass scale":
                    examItem = new GrassScale();
                    break;
                case "pollen fang":
                    examItem = new PollenFang();
                    break;
                case "thorn":
                    examItem = new Thorn();
                    break;
                case "vine berry":
                    examItem = new VineBerry();
                    break;
                case "rotting branch":
                    examItem = new RottingBranch();
                    break;
                case "golden leaf":
                    examItem = new GoldenLeaf();
                    break;
                case "mud ball":
                    examItem = new MudBall();
                    break;
                case "granule":
                    examItem = new Granule();
                    break;
                case "earthy claw":
                    examItem = new EarthyClaw();
                    break;
                case "muddy fur":
                    examItem = new MuddyFur();
                    break;
                case "old bone":
                    examItem = new OldBone();
                    break;
                case "fossil":
                    examItem = new Fossil();
                    break;
                case "gritty paw":
                    examItem = new GrittyPaw();
                    break;
                case "rock slab":
                    examItem = new RockSlab();
                    break;
                case "chitin wing":
                    examItem = new ChitinWing();
                    break;
                case "antenna":
                    examItem = new Antenna();
                    break;
                case "light wing":
                    examItem = new LightWing();
                    break;
                case "hooked claw":
                    examItem = new HookedClaw();
                    break;
                case "feather":
                    examItem = new Feather();
                    break;
                case "sharp beak":
                    examItem = new SharpBeak();
                    break;
                case "ventifact scale":
                    examItem = new VentifactScale();
                    break;
                case "hollow fang":
                    examItem = new HollowFang();
                    break;
                case "spicule":
                    examItem = new Spicule();
                    break;
                case "sea gloop":
                    examItem = new SeaGloop();
                    break;
                case "ocean scale":
                    examItem = new OceanScale();
                    break;
                case "fin":
                    examItem = new Fin();
                    break;
                case "tentacle":
                    examItem = new Tentacle();
                    break;
                case "biolume":
                    examItem = new Biolume();
                    break;
                case "deep-sea blubber":
                    examItem = new DeepSeaBlubber();
                    break;
                case "ocean fin":
                    examItem = new OceanFin();
                    break;
                case "tinder root":
                    examItem = new TinderRoot();
                    break;
                case "smoke root":
                    examItem = new SmokeRoot();
                    break;
                case "flame root":
                    examItem = new FlameRoot();
                    break;
                case "inferno root":
                    examItem = new InfernoRoot();
                    break;
                case "sprout root":
                    examItem = new SproutRoot();
                    break;
                case "grass root":
                    examItem = new GrassRoot();
                    break;
                case "vine root":
                    examItem = new VineRoot();
                    break;
                case "forest root":
                    examItem = new ForestRoot();
                    break;
                case "soil root":
                    examItem = new SoilRoot();
                    break;
                case "boulder root":
                    examItem = new BoulderRoot();
                    break;
                case "terra root":
                    examItem = new TerraRoot();
                    break;
                case "mount root":
                    examItem = new MountRoot();
                    break;
                case "breeze root":
                    examItem = new BreezeRoot();
                    break;
                case "wind root":
                    examItem = new WindRoot();
                    break;
                case "sky root":
                    examItem = new SkyRoot();
                    break;
                case "atmos root":
                    examItem = new AtmosRoot();
                    break;
                case "drop root":
                    examItem = new DropRoot();
                    break;
                case "pond root":
                    examItem = new PondRoot();
                    break;
                case "lake root":
                    examItem = new LakeRoot();
                    break;
                case "ocean root":
                    examItem = new OceanRoot();
                    break;
                case "cinder root":
                    examItem = new CinderRoot();
                    break;
                case "ember root":
                    examItem = new EmberRoot();
                    break;
                case "charred root":
                    examItem = new CharredRoot();
                    break;
                case "ash root":
                    examItem = new AshRoot();
                    break;
                case "algae root":
                    examItem = new AlgaeRoot();
                    break;
                case "lichen root":
                    examItem = new LichenRoot();
                    break;
                case "bog root":
                    examItem = new BogRoot();
                    break;
                case "swamp root":
                    examItem = new SwampRoot();
                    break;
                case "sand root":
                    examItem = new SandRoot();
                    break;
                case "loess root":
                    examItem = new LoessRoot();
                    break;
                case "dune root":
                    examItem = new DuneRoot();
                    break;
                case "desert root":
                    examItem = new DesertRoot();
                    break;
                case "cloud root":
                    examItem = new CloudRoot();
                    break;
                case "hail root":
                    examItem = new HailRoot();
                    break;
                case "thunder root":
                    examItem = new ThunderRoot();
                    break;
                case "lightning root":
                    examItem = new LightningRoot();
                    break;
                case "evapo root":
                    examItem = new EvapoRoot();
                    break;
                case "vapour root":
                    examItem = new VapourRoot();
                    break;
                case "vent root":
                    examItem = new VentRoot();
                    break;
                case "geyser root":
                    examItem = new GeyserRoot();
                    break;
            }
        }
        //Item Types: weapon, armour, healthgain, dropItem, evolveItem, statusChange, key, torch, map, inBattle, book,
        public void EquipItems()
        {
            Console.ForegroundColor = foregroundColour;
            // itemChoice = userValueItem;
            referenceCurrentItem();

            if (examItem.equippable == true)
            {
                if (inventory.dictionary.ContainsKey(userValueItem))
                {
                    inventory.dictionary[examItem.itemName] -= 1;
                    inventory.dictionary.TryGetValue(examItem.itemName, out currentCount); //removes any 0 value items
                    if (currentCount == 0)
                        inventory.dictionary.Remove(examItem.itemName);
                    WriteLineText("You equipped the " + UppercaseFirst(examItem.itemName)); //chestarmour phrases etc., + dictionarys
                    Thread.Sleep(1000);
                    if (examItem.itemBodyLocation == "armour")
                    {
                        if (playerStats.armour.ToLower() != "nothing".ToLower())
                        {
                            if (inventory.dictionary.ContainsKey(playerStats.armour.ToLower()))
                                inventory.dictionary[playerStats.armour.ToLower()] += 1;
                            else
                                inventory.dictionary.Add(playerStats.armour.ToLower(), 1);
                        }
                        playerStats.armour = UppercaseFirst(userValueItem);
                        playerStats.playerArmourDef = examItem.itemDefenseBonus;
                        playerStats.playerArmourSpeed = examItem.itemSpeedBonus;
                    }
                    else if (examItem.itemBodyLocation == "weapon")
                    {
                        if (playerStats.weapon.ToLower() != "fists".ToLower())
                        {
                            if (inventory.dictionary.ContainsKey(playerStats.weapon.ToLower()))
                                inventory.dictionary[playerStats.weapon.ToLower()] += 1;
                            else
                                inventory.dictionary.Add(playerStats.weapon.ToLower(), 1);
                        }
                        if (examItem.itemName == "stick")
                            playerStats.sprite = Stick.sprite;
                        else if (examItem.itemName == "sword")
                            playerStats.sprite = Sword.sprite;
                        else if (examItem.itemName == "spear")
                            playerStats.sprite = Spear.sprite;
                        else if (examItem.itemName == "axe")
                            playerStats.sprite = Axe.sprite;
                        else if (examItem.itemName == "mace")
                            playerStats.sprite = Mace.sprite;
                        else if (examItem.itemName == "bow")
                            playerStats.sprite = Bow.sprite;
                        else if (examItem.itemName == "mega sword")
                            playerStats.sprite = MegaSword.sprite;
                        playerStats.weapon = examItem.itemName;
                        playerStats.weaponElement = examItem.weaponelementName;
                        playerStats.weaponStatName = examItem.weaponstatName;
                        playerStats.playerWeaponStrength = examItem.itemStrengthBonus;
                        playerStats.playerWeaponSpeed = examItem.itemSpeedBonus;
                        playerStats.playerWeaponHit = examItem.itemHitGain;
                        playerStats.playerWeaponHP = examItem.itemHPGain;
                        playerStats.playerWeaponCharisma = examItem.itemCharismaBonus;
                    }
                    else if (examItem.itemBodyLocation == "shield")
                    {
                        if (playerStats.shield.ToLower() != "fists".ToLower())
                        {
                            if (inventory.dictionary.ContainsKey(playerStats.shield.ToLower()))
                                inventory.dictionary[playerStats.shield.ToLower()] += 1;
                            else
                                inventory.dictionary.Add(playerStats.shield.ToLower(), 1);
                        }
                        if (playerStats.weapon == "fists")
                            playerStats.sprite = Shield.sprite;
                        playerStats.shield = examItem.itemName;
                        playerStats.armourElement = examItem.weaponelementName;
                        playerStats.armourStatName = examItem.weaponstatName;
                        playerStats.playerShieldDefense = examItem.itemDefenseBonus;
                        playerStats.playerShieldSpeed = examItem.itemSpeedBonus;
                        playerStats.playerShieldHP = examItem.itemHPGain;
                        playerStats.playerShieldHit = examItem.itemHitGain;
                        playerStats.playerShieldCharisma = examItem.itemCharismaBonus;
                    }
                }
                else
                {
                    WriteLineText("You do not have one of those");
                    Thread.Sleep(800);
                }
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].gridItems.Contains(examItem.itemName) && !inventory.dictionary.ContainsKey(userValueItem))
                WriteLineText("Take the item first!");
        }

        public void UnequipItems()
        {
            Console.ForegroundColor = foregroundColour;
            referenceCurrentItem();

            if (examItem.equippable == true)
            {
                if (playerStats.weapon.ToLower() == examItem.itemName.ToLower())
                {
                    if (inventory.dictionary.Keys.Count < 20)
                    {
                        if (inventory.dictionary.ContainsKey(examItem.itemName))
                            inventory.dictionary[examItem.itemName] += 1;
                        else
                            inventory.dictionary.Add(examItem.itemName, 1);
                        WriteLineText("You un-equipped the " + UppercaseFirst(examItem.itemName)); //chestarmour phrases etc., + dictionarys
                        Thread.Sleep(1000);
                        playerStats.weapon = "fists";
                        playerStats.weaponElement = "neutral";
                        playerStats.weaponStatName = "beginnings";
                        playerStats.playerWeaponStrength -= examItem.itemStrengthBonus;
                        playerStats.playerWeaponSpeed -= examItem.itemSpeedBonus;
                        playerStats.playerWeaponCharisma -= examItem.itemCharismaBonus;
                        playerStats.playerWeaponHit -= examItem.itemHitGain;
                        playerStats.playerWeaponHP -= examItem.itemHitGain;
                    }
                    else
                    {
                        WriteLineText("You do not have enough space in your inventory");
                    }
                }
                else if (playerStats.shield.ToLower() == examItem.itemName.ToLower())
                {
                    if (inventory.dictionary.Keys.Count < 20)
                    {
                        if (inventory.dictionary.ContainsKey(examItem.itemName))
                            inventory.dictionary[examItem.itemName] += 1;
                        else
                            inventory.dictionary.Add(examItem.itemName, 1);
                        WriteLineText("You un-equipped the " + UppercaseFirst(examItem.itemName)); //chestarmour phrases etc., + dictionarys
                        playerStats.shield = "fists";
                        playerStats.weaponElement = "neutral";
                        playerStats.weaponStatName = "beginnings";
                        playerStats.playerShieldDefense -= examItem.itemDefenseBonus;
                        playerStats.playerShieldSpeed -= examItem.itemSpeedBonus;
                        playerStats.playerShieldCharisma -= examItem.itemCharismaBonus;
                        playerStats.playerShieldHit -= examItem.itemHitGain;
                        playerStats.playerShieldHP -= examItem.itemHitGain;
                    }
                    else
                    {
                        WriteLineText("You do not have enough space in your inventory");
                    }
                }
                else if (playerStats.armour.ToLower() == examItem.itemName.ToLower())
                {
                    if (inventory.dictionary.Keys.Count < 20)
                    {
                        if (inventory.dictionary.ContainsKey(examItem.itemName))
                            inventory.dictionary[examItem.itemName] += 1;
                        else
                            inventory.dictionary.Add(examItem.itemName, 1);
                        WriteLineText("You un-equipped the " + UppercaseFirst(examItem.itemName)); //chestarmour phrases etc., + dictionarys
                        playerStats.armour = "nothing";
                        playerStats.armourElement = "neutral";
                        playerStats.armourStatName = "beginnings";
                        playerStats.playerArmourDef -= examItem.itemDefenseBonus;
                        playerStats.playerArmourSpeed -= examItem.itemSpeedBonus;
                    }
                    else
                    {
                        WriteLineText("You do not have enough space in your inventory");
                    }
                }
            }
        }

        public void UseItem()
        {
            Console.ForegroundColor = foregroundColour;
            //keys
            if (examItem.itemType == "key")
            {
                if (WorldMapCells[CurrentMap][CurrentLocation].mapLocation == 1 && WorldMapCells[CurrentMap][CurrentLocation].cellLocation == 33 && WorldMapCells[1][32].accessible == false)
                {
                    if (inventory.dictionary.ContainsKey("key"))
                    {
                        WriteLineText("You try the key you got from the treehouse in the lock. It sticks at first, but eventually creaks and turns. You see a path extending to the West.");
                        inventory.dictionary.Remove("key");
                        WorldMapCells[1][32].accessible = true;
                        WorldMapCells[1][31].accessible = true;
                    }
                    else
                    {
                        WriteLineText("You can't get past the locked door.");
                    }
                }
                //do stuff
            }
            else if (examItem.itemType == "healthgain" || examItem.itemType == "mpgain" || examItem.itemType == "antidote" || examItem.itemType == "awakening")
            {
                WriteLineText("For consumable items, please use the correct command ('eat', 'drink', etc.)");
                Thread.Sleep(800);
            }
            else if (examItem.itemType == "drug")
            {
                WriteLineText("You start feeling a little funny...");
                Thread.Sleep(1000);
                WriteLineText("...");
                Thread.Sleep(1000);
                DiscoRoom();
            }
            else
            {
                WriteLineText("You can't use that right now.");
                Thread.Sleep(800);
            }
            //others
            //if (examItem.itemType == ...
        }

        public void EatDrinkSomething()
        {
            Console.ForegroundColor = foregroundColour;
            if (inventory.dictionary.ContainsKey(userValueItem))
            {
                itemChoice = userValueItem;
                referenceCurrentItem();
                if (examItem.itemType == "healthgain")
                {
                    if (storyCounter >= 2)
                    {
                        WriteLineText("Who will you use the " + examItem.itemName + " on?");
                        Thread.Sleep(800);
                        WriteLineText("1: " + playerStats.name + "\n2: " + meeba.name + "\n3: " + meeba2.name);
                        Thread.Sleep(800);
                        bool validChoice = false;
                        do
                        {
                            Console.Write("> ");
                            string input = Console.ReadLine().ToLower().Trim();
                            if (input.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = input.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    MainMenu.DecrementCursorTop(1);
                                }
                                input = input.Remove(80);
                            }
                            if (string.IsNullOrEmpty(input) || input != "1" && input != "2" && input != "3")
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            else if (input == "back" || input == "exit")
                            {
                                validChoice = true;
                                break;
                            }
                            else
                            {
                                string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                                var randomMember = random.Next(foodReactions.Length);

                                int inputInt = Convert.ToInt16(input);
                                if (inputInt == 1)
                                {
                                    WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.itemHPGain > 0) //if provides health gain
                                    {
                                        if (playerStats.playerCurrentHP == playerStats.playerMaxHP) //if already at max health
                                        {
                                            WriteLineText("You are already at maximum health");
                                            Thread.Sleep(1000);
                                        }
                                        else if (playerStats.playerCurrentHP < playerStats.playerMaxHP) //if not at max health
                                        {
                                            double healthGainCalc = playerStats.playerMaxHP - playerStats.playerCurrentHP; //hp deficit
                                            WriteLineText("You restored " + (healthGainCalc < examItem.itemHPGain ? healthGainCalc : examItem.itemHPGain) + " HP");
                                            Thread.Sleep(1000);
                                            playerStats.playerCurrentHP += examItem.itemHPGain;
                                            if (playerStats.playerCurrentHP > playerStats.playerMaxHP)
                                                playerStats.playerCurrentHP = playerStats.playerMaxHP;
                                            WriteLineText("You have " + playerStats.playerCurrentHP + " HP");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                                else if (inputInt == 2)
                                {
                                    WriteLineText(UppercaseFirst(meeba.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.itemHPGain > 0)
                                    {
                                        if (meeba.currentHp == meeba.hp)
                                        {
                                            WriteLineText(UppercaseFirst(meeba.name) + " is already at maximum health");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meeba.currentHp < meeba.hp)
                                        {
                                            double healthGainCalc = meeba.hp - meeba.currentHp; //hp deficit
                                            WriteLineText(UppercaseFirst(meeba.name) + " restored " + (healthGainCalc < examItem.itemHPGain ? healthGainCalc : examItem.itemHPGain) + " HP");
                                            Thread.Sleep(1000);
                                            meeba.currentHp += examItem.itemHPGain;
                                            if (meeba.currentHp > meeba.hp)
                                                meeba.currentHp = meeba.hp;
                                            WriteLineText(UppercaseFirst(meeba.name) + " has " + meeba.currentHp + " HP");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                                else if (inputInt == 3)
                                {
                                    WriteLineText(UppercaseFirst(meeba2.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.itemHPGain > 0)
                                    {
                                        if (meeba.currentHp == meeba.hp)
                                        {
                                            WriteLineText(UppercaseFirst(meeba2.name) + " is already at maximum health");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meeba.currentHp < meeba.hp)
                                        {
                                            double healthGainCalc = meeba.hp - meeba.currentHp; //hp deficit
                                            WriteLineText(UppercaseFirst(meeba2.name) + " restored " + (healthGainCalc < examItem.itemHPGain ? healthGainCalc : examItem.itemHPGain) + " HP");
                                            Thread.Sleep(1000);
                                            meeba2.currentHp += examItem.itemHPGain;
                                            if (meeba2.currentHp > meeba.hp)
                                                meeba2.currentHp = meeba.hp;
                                            WriteLineText(UppercaseFirst(meeba2.name) + " has " + meeba2.currentHp + " HP");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                            }
                        } while (validChoice == false);
                    }
                    else
                    {
                        string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                        var randomMember = random.Next(foodReactions.Length);
                        WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                        if (examItem.itemHPGain > 0)
                        {
                            if (playerStats.playerCurrentHP == playerStats.playerMaxHP)
                            {
                                WriteLineText("You are already at maximum health");
                                Thread.Sleep(1000);
                            }
                            else if (playerStats.playerCurrentHP < playerStats.playerMaxHP)
                            {
                                double healthGainCalc = playerStats.playerMaxHP - playerStats.playerCurrentHP; //hp deficit
                                WriteLineText("You restored " + (healthGainCalc < examItem.itemHPGain ? healthGainCalc : examItem.itemHPGain) + " HP");
                                Thread.Sleep(1000);
                                playerStats.playerCurrentHP += examItem.itemHPGain;
                                if (playerStats.playerCurrentHP > playerStats.playerMaxHP)
                                    playerStats.playerCurrentHP = playerStats.playerMaxHP;
                                WriteLineText("You have " + playerStats.playerCurrentHP + " HP");
                                Thread.Sleep(1000);
                            }
                            inventory.dictionary[examItem.itemName] -= 1;
                            if (inventory.dictionary[examItem.itemName] == 0)
                                inventory.dictionary.Remove(examItem.itemName);
                        }
                    }
                }
                else if (examItem.itemType == "mpgain")
                {
                    WriteLineText("Who will you use the " + examItem.itemName + " on?");
                    Thread.Sleep(800);
                    WriteLineText("1: " + meeba.name + "\n2: " + meeba2.name);
                    Thread.Sleep(800);
                    bool validChoice = false;
                    do
                    {
                        Console.Write("> ");
                        string input = Console.ReadLine().ToLower().Trim();
                        if (input.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = input.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            input = input.Remove(80);
                        }
                        if (string.IsNullOrEmpty(input) || input != "1" && input != "2")
                        {
                            MainMenu.DecrementCursorTop(1);
                            Console.Write(new string(' ', Console.WindowWidth));
                            MainMenu.DecrementCursorTop(1);
                        }
                        else if (input == "back" || input == "exit")
                        {
                            validChoice = true;
                            break;
                        }
                        else
                        {
                            string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                            var randomMember = random.Next(foodReactions.Length);

                            int inputInt = Convert.ToInt16(input);
                            if (inputInt == 1)
                            {
                                WriteLineText(UppercaseFirst(meeba.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                validChoice = true;
                                if (examItem.itemMPGain > 0)
                                {
                                    if (meeba.currentMP == meeba.MP)
                                    {
                                        WriteLineText(UppercaseFirst(meeba.name) + " already has maximum MP");
                                        Thread.Sleep(1000);
                                    }
                                    else if (meeba.currentHp < meeba.hp)
                                    {
                                        double mpGainCalc = meeba.MP - meeba.currentMP; //hp deficit
                                        WriteLineText(UppercaseFirst(meeba.name) + " restored " + (mpGainCalc < examItem.itemMPGain ? mpGainCalc : examItem.itemMPGain) + " MP");
                                        Thread.Sleep(1000);
                                        meeba.currentMP += examItem.itemMPGain;
                                        if (meeba.currentMP > meeba.MP)
                                            meeba.currentMP = meeba.MP;
                                        WriteLineText(UppercaseFirst(meeba.name) + " has " + meeba.currentMP + " MP");
                                        Thread.Sleep(1000);
                                    }
                                    inventory.dictionary[examItem.itemName] -= 1;
                                    if (inventory.dictionary[examItem.itemName] == 0)
                                        inventory.dictionary.Remove(examItem.itemName);
                                }
                            }
                            else if (inputInt == 2)
                            {
                                WriteLineText(UppercaseFirst(meeba2.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                validChoice = true;
                                if (examItem.itemMPGain > 0)
                                {
                                    if (meeba.currentMP == meeba.MP)
                                    {
                                        WriteLineText(UppercaseFirst(meeba2.name) + " already has maximum MP!");
                                        Thread.Sleep(1000);
                                    }
                                    else if (meeba.currentMP < meeba.MP)
                                    {
                                        double mpGainCalc = meeba.MP - meeba.currentMP; //hp deficit
                                        WriteLineText(UppercaseFirst(meeba2.name) + " restored " + (mpGainCalc < examItem.itemMPGain ? mpGainCalc : examItem.itemMPGain) + " MP");
                                        Thread.Sleep(1000);
                                        meeba2.currentMP += examItem.itemMPGain;
                                        if (meeba2.currentMP > meeba.MP)
                                            meeba2.currentMP = meeba.MP;
                                        WriteLineText(UppercaseFirst(meeba2.name) + " has " + meeba2.currentMP + " MP");
                                        Thread.Sleep(1000);
                                    }
                                    inventory.dictionary[examItem.itemName] -= 1;
                                    if (inventory.dictionary[examItem.itemName] == 0)
                                        inventory.dictionary.Remove(examItem.itemName);
                                }
                            }
                        }
                    } while (validChoice == false);
                }
                else if (examItem.itemType == "antidote")
                {
                    if (storyCounter >= 2)
                    {
                        WriteLineText("Who will you use the " + examItem.itemName + " on?");
                        Thread.Sleep(800);
                        WriteLineText("1: " + playerStats.name + "\n2: " + meeba.name + "\n3: " + meeba2.name);
                        Thread.Sleep(800);
                        bool validChoice = false;
                        do
                        {
                            Console.Write("> ");
                            string input = Console.ReadLine().ToLower().Trim();
                            if (input.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = input.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    MainMenu.DecrementCursorTop(1);
                                }
                                input = input.Remove(80);
                            }
                            if (string.IsNullOrEmpty(input) || input != "1" && input != "2" && input != "3")
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            else if (input == "back" || input == "exit")
                            {
                                validChoice = true;
                                break;
                            }
                            else
                            {
                                string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                                var randomMember = random.Next(foodReactions.Length);

                                int inputInt = Convert.ToInt16(input);
                                if (inputInt == 1)
                                {
                                    WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.antidote == true) //if antidote
                                    {
                                        if (playerStats.isPoisoned == false && playerStats.isPoisonedTwo == false) //if not poisoned
                                        {
                                            WriteLineText("You do not need an antidote.");
                                            Thread.Sleep(1000);
                                        }
                                        else if (playerStats.isPoisoned == true || playerStats.isPoisonedTwo == true) //if posioned
                                        {
                                            playerStats.isPoisoned = false;
                                            playerStats.isPoisonedTwo = false;
                                            WriteLineText("You recovered from the poison.");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                                else if (inputInt == 2)
                                {
                                    WriteLineText(UppercaseFirst(meeba.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.antidote == true) //if antidote
                                    {
                                        if (meeba.isPoisoned == false && meeba.isPoisonedTwo == false) //if not poisoned
                                        {
                                            WriteLineText(UppercaseFirst(meeba.name) + " does not need an antidote.");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meeba.isPoisoned == true || meeba.isPoisonedTwo == true) //if posioned
                                        {
                                            meeba.isPoisoned = false;
                                            meeba.isPoisonedTwo = false;
                                            WriteLineText(UppercaseFirst(meeba.name) + " recovered from the poison.");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                                else if (inputInt == 3)
                                {
                                    WriteLineText(UppercaseFirst(meeba2.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.antidote == true) //if antidote
                                    {
                                        if (meeba2.isPoisoned == false && meeba2.isPoisonedTwo == false) //if not poisoned
                                        {
                                            WriteLineText(UppercaseFirst(meeba2.name) + " does not need an antidote.");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meeba2.isPoisoned == true || meeba2.isPoisonedTwo == true) //if posioned
                                        {
                                            meeba2.isPoisoned = false;
                                            meeba2.isPoisonedTwo = false;
                                            WriteLineText(UppercaseFirst(meeba2.name) + " recovered from the poison.");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                            }
                        } while (validChoice == false);
                    }
                    else
                    {
                        string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                        var randomMember = random.Next(foodReactions.Length);
                        WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                        if (examItem.antidote == true)
                        {
                            WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                            if (examItem.antidote == true) //if antidote
                            {
                                if (playerStats.isPoisoned == false && playerStats.isPoisonedTwo == false) //if not poisoned
                                {
                                    WriteLineText("You do not need an antidote.");
                                    Thread.Sleep(1000);
                                }
                                else if (playerStats.isPoisoned == true || playerStats.isPoisonedTwo == true) //if posioned
                                {
                                    playerStats.isPoisoned = false;
                                    playerStats.isPoisonedTwo = false;
                                    WriteLineText("You recovered from the poison.");
                                    Thread.Sleep(1000);
                                }
                                inventory.dictionary[examItem.itemName] -= 1;
                                if (inventory.dictionary[examItem.itemName] == 0)
                                    inventory.dictionary.Remove(examItem.itemName);
                            }
                        }
                    }
                }
                else if (examItem.itemType == "awakening")
                {
                    if (storyCounter >= 2)
                    {
                        WriteLineText("Who will you use the " + examItem.itemName + " on?");
                        Thread.Sleep(800);
                        WriteLineText("1: " + playerStats.name + "\n2: " + meeba.name + "\n3: " + meeba2.name);
                        Thread.Sleep(800);
                        bool validChoice = false;
                        do
                        {
                            Console.Write("> ");
                            string input = Console.ReadLine().ToLower().Trim();
                            if (input.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = input.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    MainMenu.DecrementCursorTop(1);
                                }
                                input = input.Remove(80);
                            }
                            if (string.IsNullOrEmpty(input) || input != "1" && input != "2" && input != "3")
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            else if (input == "back" || input == "exit")
                            {
                                validChoice = true;
                                break;
                            }
                            else
                            {
                                string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                                var randomMember = random.Next(foodReactions.Length);

                                int inputInt = Convert.ToInt16(input);
                                if (inputInt == 1)
                                {
                                    WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.awaken == true) //if awakening
                                    {
                                        if (playerStats.isAsleep == false) //if not asleep
                                        {
                                            WriteLineText("You do not need to be woken.");
                                            Thread.Sleep(1000);
                                        }
                                        else if (playerStats.isAsleep == true) //if posioned
                                        {
                                            playerStats.isAsleep = false;
                                            WriteLineText("You woke up.");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                                else if (inputInt == 2)
                                {
                                    WriteLineText(UppercaseFirst(meeba.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.awaken == true) //if awakening
                                    {
                                        if (meeba.isAsleep == false) //if not asleep
                                        {
                                            WriteLineText(UppercaseFirst(meeba.name) + " does not need to be woken.");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meeba.isAsleep == true) //if posioned
                                        {
                                            meeba.isAsleep = false;
                                            WriteLineText(UppercaseFirst(meeba.name) + " woke up.");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                                else if (inputInt == 3)
                                {
                                    WriteLineText(UppercaseFirst(meeba2.name) + " " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                                    validChoice = true;
                                    if (examItem.awaken == true) //if antidote
                                    {
                                        if (meeba2.isAsleep == false) //if not poisoned
                                        {
                                            WriteLineText(UppercaseFirst(meeba2.name) + " does not need to be woken.");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meeba2.isAsleep == true) //if posioned
                                        {
                                            meeba2.isAsleep = false;
                                            WriteLineText(UppercaseFirst(meeba2.name) + " woke up.");
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                    }
                                }
                            }
                        } while (validChoice == false);
                    }
                    else
                    {
                        string[] foodReactions = new string[] { "tasty", "delicious", "disgusting", "spicy", "pungent", "foetid", "not tasty", "yummy", "divine", "OK", "mathematical", "tasteful", "really tasy", "like straw", "manky", "well sick", "righteous", "rad", "bodacious", "palatable", "bland", "distasteful", "offensive", "tasteless", "enjoyable", "gratifying", "well-seasoned", "mouthwatering", "horrific", "nasty", "outrageous", "vile", "foul", "gross", "nauseating", "revolting", "icky", "rank", "poor", "mega", "stringy", "tough", "rough", "electrical", "disdainful", "stimulating", "less than tasty", "acrid", "moderate", "passable", "sufficient", "adequate", "energising", "brutal", "incredible", "yummy", "quality", "toothsome", "good to eat", "better than you thought", "truly truly truly outrageous", "fearsome" };
                        var randomMember = random.Next(foodReactions.Length);
                        WriteLineText("You " + examItem.edibleVerb + " the " + UppercaseFirst(userValueItem) + ", it's " + foodReactions[randomMember] + "!");
                        if (examItem.awaken == true) //if awakening
                        {
                            if (playerStats.isAsleep == false) //if not asleep
                            {
                                WriteLineText("You do not need to be woken.");
                                Thread.Sleep(1000);
                            }
                            else if (playerStats.isAsleep == true) //if posioned
                            {
                                playerStats.isAsleep = false;
                                WriteLineText("You woke up.");
                                Thread.Sleep(1000);
                            }
                            inventory.dictionary[examItem.itemName] -= 1;
                            if (inventory.dictionary[examItem.itemName] == 0)
                                inventory.dictionary.Remove(examItem.itemName);
                        }
                    }
                }
                else if (examItem.itemType == "drug")
                {
                    WriteLineText("You start feeling a little funny...");
                    Thread.Sleep(1000);
                    WriteLineText("...");
                    Thread.Sleep(1000);
                    DiscoRoom();
                }
                else
                    WriteLineText("You can't eat that!");
            }
            else
                WriteLineText("You do not own that");
            //other than healthgain - stat gain, invisibilty? etc. add all these here - CHANGE
        }

        public void InGameMenu()
        {
            Console.ForegroundColor = foregroundColour;
            string otherOptions = @"\beat\b|\buse\b|\bdrink\b|\btake\b|\blook\b";
            string equip = @"\bequip\b";
            string unequip = @"\bunequip\b|\bun-equip\b";
            do
            {
                string menuInput;
                switch (currentMainMenuState)
                {
                    case MainMenuState.MainMenu:
                        Console.Clear();
                        bool storycounterover2 = false;
                        if (storyCounter >= 2)
                            storycounterover2 = true;
                        Console.WriteLine("Menu: \nInventory \nStats \nEquipment" + ((storycounterover2 == true) ? "\nMeeba\n" : " \n") + "Quest Log\nSettings \nHelp \nSave \nExit Menu");
                        Console.Write("> ");
                        menuInput = Console.ReadLine().ToLower().Trim();
                        if (menuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = menuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            menuInput = menuInput.Remove(80);
                        }
                        if (string.IsNullOrEmpty(menuInput))
                            MainMenu.DecrementCursorTop(1);
                        else if (InvPhrases.Contains(menuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (menuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (menuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (menuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (menuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (menuInput == "quest".ToLower() || menuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (menuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (menuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (menuInput == "exit".ToLower() || menuInput == "exit menu".ToLower())
                        {
                            Console.Clear();
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else if (Regex.IsMatch(menuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = menuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(menuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = menuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(menuInput, otherOptions, RegexOptions.IgnoreCase))
                        {
                            WriteLineText("Please exit the menu first");
                            Thread.Sleep(1000);
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else
                        {
                            WriteLineText("That is not an option");
                            Console.Write("> ");
                            Console.ReadLine();
                        }
                        break;

                    case MainMenuState.Inventory:
                        Console.WriteLine("");
                        AccessInventory();
                        Console.Write("> ");
                        string invMenuInput = Console.ReadLine().ToLower().Trim();
                        if (invMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = invMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            invMenuInput = invMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(invMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (invMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (invMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (invMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (invMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (invMenuInput == "quest".ToLower() || invMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (invMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (invMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(invMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = invMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(invMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = invMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (invMenuInput == "exit".ToLower() || invMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.Stats:
                        Console.WriteLine("");
                        AccessStats();
                        Console.Write("> ");
                        string statsMenuInput = Console.ReadLine().ToLower().Trim();
                        if (statsMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = statsMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            statsMenuInput = statsMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(statsMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (statsMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (statsMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (statsMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (statsMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (statsMenuInput == "quest".ToLower() || statsMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (statsMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (statsMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(statsMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = statsMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(statsMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = statsMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (statsMenuInput == "exit".ToLower() || statsMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.Equipment:
                        Console.WriteLine("");
                        AccessEquipment();
                        Console.Write("> ");
                        string equipMenuInput = Console.ReadLine().ToLower().Trim();
                        if (equipMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = equipMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            equipMenuInput = equipMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(equipMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (equipMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (equipMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (equipMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (equipMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (equipMenuInput == "quest".ToLower() || equipMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (equipMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (equipMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(equipMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = equipMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(equipMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = equipMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (equipMenuInput == "exit".ToLower() || equipMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.Monsters:
                        Console.WriteLine("");
                        AccessMonsters();
                        Console.Write("> ");
                        string monsterMenuInput = Console.ReadLine().ToLower().Trim();
                        if (monsterMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = monsterMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            monsterMenuInput = monsterMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(monsterMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (monsterMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (monsterMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (monsterMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (monsterMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (monsterMenuInput == "quest".ToLower() || monsterMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (monsterMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (monsterMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(monsterMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = monsterMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(monsterMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = monsterMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (monsterMenuInput == "exit".ToLower() || monsterMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.Settings:
                        Console.WriteLine("");
                        AccessTextSpeed();
                        Console.Write("> ");
                        string settingsMenuInput = Console.ReadLine().ToLower().Trim();
                        if (settingsMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = settingsMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            settingsMenuInput = settingsMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(settingsMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (settingsMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (settingsMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (settingsMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (settingsMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (settingsMenuInput == "quest".ToLower() || settingsMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (settingsMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (settingsMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(settingsMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = settingsMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(settingsMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = settingsMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (settingsMenuInput == "exit".ToLower() || settingsMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.QuestLog:
                        Console.WriteLine("");
                        AccessQuestLog();
                        Console.Write("> ");
                        string questMenuInput = Console.ReadLine().ToLower().Trim();
                        if (questMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = questMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            questMenuInput = questMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(questMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (questMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (questMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (questMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (questMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (questMenuInput == "quest".ToLower() || questMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (questMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (questMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(questMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = questMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(questMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = questMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (questMenuInput == "exit".ToLower() || questMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.Help:
                        Console.WriteLine("");
                        AccessHelp();
                        Console.Write("> ");
                        string helpMenuInput = Console.ReadLine().ToLower().Trim();
                        if (helpMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = helpMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            helpMenuInput = helpMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(helpMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (helpMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (helpMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (helpMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (helpMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (helpMenuInput == "quest".ToLower() || helpMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (helpMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (helpMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(helpMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = helpMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(helpMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = helpMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (helpMenuInput == "exit".ToLower() || helpMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.Save:
                        Console.WriteLine("");
                        MainMenu.Save();
                        Console.Write("> ");
                        string saveMenuInput = Console.ReadLine().ToLower().Trim();
                        if (saveMenuInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = saveMenuInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            saveMenuInput = saveMenuInput.Remove(80);
                        }
                        if (InvPhrases.Contains(saveMenuInput))
                            currentMainMenuState = MainMenuState.Inventory;
                        else if (saveMenuInput == "Stats".ToLower())
                            currentMainMenuState = MainMenuState.Stats;
                        else if (saveMenuInput == "equipment".ToLower())
                            currentMainMenuState = MainMenuState.Equipment;
                        else if (saveMenuInput == "meeba".ToLower())
                            currentMainMenuState = MainMenuState.Monsters;
                        else if (saveMenuInput == "settings".ToLower())
                            currentMainMenuState = MainMenuState.Settings;
                        else if (saveMenuInput == "quest".ToLower() || saveMenuInput == "quest log".ToLower())
                            currentMainMenuState = MainMenuState.QuestLog;
                        else if (saveMenuInput == "help".ToLower())
                            currentMainMenuState = MainMenuState.Help;
                        else if (saveMenuInput == "save".ToLower())
                            currentMainMenuState = MainMenuState.Save;
                        else if (Regex.IsMatch(saveMenuInput, equip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = saveMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            EquipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (Regex.IsMatch(saveMenuInput, unequip, RegexOptions.IgnoreCase))
                        {
                            userValueItem = saveMenuInput;
                            char[] space = new char[1] { ' ' };
                            string[] verbItemWholeString = userValueItem.Split(space, 2); //Splits whole string into 2, before and after first space
                            string Verb = verbItemWholeString[0].Trim(); //Takes the first half, so usually the verb, e.g. 'take'
                            if (verbItemWholeString.Length > 1)
                                userValueItem = verbItemWholeString[1].Trim();
                            itemChoice = userValueItem;
                            UnequipItems();
                            currentMainMenuState = MainMenuState.MainMenu;
                            break;
                        }
                        else if (saveMenuInput == "exit".ToLower() || saveMenuInput == "exit menu".ToLower())
                        {
                            WriteLineText("\nYou are " + WorldMapCells[CurrentMap][CurrentLocation].cellName + ", what would you like to do?");
                            currentMainMenuState = MainMenuState.ExitMenu;
                        }
                        else
                            currentMainMenuState = MainMenuState.MainMenu;
                        break;

                    case MainMenuState.ExitMenu:
                        break;
                }
            } while (currentMainMenuState != MainMenuState.ExitMenu);
        }

        public void MeebaEvolution()
        {
            ThisBattleMeebas.Clear();
            ThisBattleMeebas.Add(meeba);
            ThisBattleMeebas.Add(meeba2);
            foreach (var item in ThisBattleMeebas)
            {

                if (item.name == meeba.name && currentDNAMeeba.name == meeba.name || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name)
                {
                    if (item.elementType == "Neutral") //can go to F1, P1, E1, A1, W1
                    {
                        if (examItem.itemName == "tinder root" && item.reachedFireTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT1.name;
                            item.elementType = FT1.elementType;
                            item.levelTier = FT1.levelTier;
                            item.attack += FT1.attackBonus;
                            item.defense += FT1.defenseBonus;
                            item.speed += FT1.speedBonus;
                            item.hp += FT1.hpBonus;
                            item.MP = FT1.MP;
                            item.hitRange = FT1.hitRange;
                            item.Moves.Add(FT1.newMove);
                            item.sprite = FT1.sprite;
                        }
                        else if (examItem.itemName == "sprout root" && item.reachedPlantTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT1.name;
                            item.elementType = PT1.elementType;
                            item.levelTier = PT1.levelTier;
                            item.attack += PT1.attackBonus;
                            item.defense += PT1.defenseBonus;
                            item.speed += PT1.speedBonus;
                            item.hp += PT1.hpBonus;
                            item.MP = PT1.MP;
                            item.hitRange = PT1.hitRange;
                            item.Moves.Add(PT1.newMove);
                            item.sprite = PT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = PT1.lifeLeechChance;
                            item.lifeLeechHeal = PT1.lifeLeechHeal;
                        }
                        else if (examItem.itemName == "soil root" && item.reachedEarthTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET1.name;
                            item.elementType = ET1.elementType;
                            item.levelTier = ET1.levelTier;
                            item.attack += ET1.attackBonus;
                            item.defense += ET1.defenseBonus;
                            item.speed += ET1.speedBonus;
                            item.hp += ET1.hpBonus;
                            item.MP = ET1.MP;
                            item.hitRange = ET1.hitRange;
                            item.Moves.Add(ET1.newMove);
                            item.sprite = ET1.sprite;
                        }
                        else if (examItem.itemName == "breeze root" && item.reachedAirTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT1.name;
                            item.elementType = AT1.elementType;
                            item.levelTier = AT1.levelTier;
                            item.attack += AT1.attackBonus;
                            item.defense += AT1.defenseBonus;
                            item.speed += AT1.speedBonus;
                            item.hp += AT1.hpBonus;
                            item.MP = AT1.MP;
                            item.hitRange = AT1.hitRange;
                            item.Moves.Add(AT1.newMove);
                            item.sprite = AT1.sprite;
                        }
                        else if (examItem.itemName == "drop root" && item.reachedWaterTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT1.name;
                            item.elementType = WT1.elementType;
                            item.levelTier = WT1.levelTier;
                            item.attack += WT1.attackBonus;
                            item.defense += WT1.defenseBonus;
                            item.speed += WT1.speedBonus;
                            item.hp += WT1.hpBonus;
                            item.MP = WT1.MP;
                            item.hitRange = WT1.hitRange;
                            item.Moves.Add(WT1.newMove);
                            item.sprite = WT1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "fire" && item.levelTier == 1) //can go to F2, C1, H1
                    {
                        if (examItem.itemName == "smoke root" && item.reachedFireTier2 == false)
                        {
                            item.name = FT2.name;
                            item.elementType = FT2.elementType;
                            item.levelTier = FT2.levelTier;
                            item.attack += FT2.attackBonus;
                            item.defense += FT2.defenseBonus;
                            item.speed += FT2.speedBonus;
                            item.hp += FT2.hpBonus;
                            item.MP = FT2.MP;
                            item.hitRange = FT2.hitRange;
                            item.Moves.Add(FT2.newMove);
                            item.sprite = FT2.sprite;
                        }
                        else if (examItem.itemName == "cinder root" && item.reachedCharcoalTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT1.name;
                            item.elementType = CT1.elementType;
                            item.levelTier = CT1.levelTier;
                            item.attack += CT1.attackBonus;
                            item.defense += CT1.defenseBonus;
                            item.speed += CT1.speedBonus;
                            item.hp += CT1.hpBonus;
                            item.MP = CT1.MP;
                            item.hitRange = CT1.hitRange;
                            item.Moves.Add(CT1.newMove);
                            item.sprite = CT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = CT1.lifeLeechChance;
                            item.lifeLeechHeal = CT1.lifeLeechHeal;
                        }
                        else if (examItem.itemName == "evapo root" && item.reachedHydrothermTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT1.name;
                            item.elementType = HT1.elementType;
                            item.levelTier = HT1.levelTier;
                            item.attack += HT1.attackBonus;
                            item.defense += HT1.defenseBonus;
                            item.speed += HT1.speedBonus;
                            item.hp += HT1.hpBonus;
                            item.MP = HT1.MP;
                            item.hitRange = HT1.hitRange;
                            item.Moves.Add(HT1.newMove);
                            item.sprite = HT1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "plant" && item.levelTier == 1) //can go to P2, C1, M1
                    {
                        if (examItem.itemName == "grass root" && item.reachedPlantTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT2.name;
                            item.elementType = PT2.elementType;
                            item.levelTier = PT2.levelTier;
                            item.attack += PT2.attackBonus;
                            item.defense += PT2.defenseBonus;
                            item.speed += PT2.speedBonus;
                            item.hp += PT2.hpBonus;
                            item.MP = PT2.MP;
                            item.hitRange = PT2.hitRange;
                            item.Moves.Add(PT2.newMove);
                            item.sprite = PT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = PT2.poisonChance;
                        }
                        else if (examItem.itemName == "cinder root" && item.reachedCharcoalTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT1.name;
                            item.elementType = CT1.elementType;
                            item.levelTier = CT1.levelTier;
                            item.attack += CT1.attackBonus;
                            item.defense += CT1.defenseBonus;
                            item.speed += CT1.speedBonus;
                            item.hp += CT1.hpBonus;
                            item.MP = CT1.MP;
                            item.hitRange = CT1.hitRange;
                            item.Moves.Add(CT1.newMove);
                            item.sprite = CT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = CT1.lifeLeechChance;
                            item.lifeLeechHeal = CT1.lifeLeechHeal;
                        }
                        else if (examItem.itemName == "algae root" && item.reachedMossTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT1.name;
                            item.elementType = MT1.elementType;
                            item.levelTier = MT1.levelTier;
                            item.attack += MT1.attackBonus;
                            item.defense += MT1.defenseBonus;
                            item.speed += MT1.speedBonus;
                            item.hp += MT1.hpBonus;
                            item.MP = MT1.MP;
                            item.hitRange = MT1.hitRange;
                            item.Moves.Add(MT1.newMove);
                            item.sprite = MT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = MT1.lifeLeechChance;
                            item.lifeLeechHeal = MT1.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "earth" && item.levelTier == 1) //can go to E2, M1, D1
                    {
                        if (examItem.itemName == "boulder root" && item.reachedEarthTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET2.name;
                            item.elementType = ET2.elementType;
                            item.levelTier = ET2.levelTier;
                            item.attack += ET2.attackBonus;
                            item.defense += ET2.defenseBonus;
                            item.speed += ET2.speedBonus;
                            item.hp += ET2.hpBonus;
                            item.MP = ET2.MP;
                            item.hitRange = ET2.hitRange;
                            item.Moves.Add(ET2.newMove);
                            item.sprite = ET2.sprite;
                        }
                        else if (examItem.itemName == "sand root" && item.reachedDustTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT1.name;
                            item.elementType = DT1.elementType;
                            item.levelTier = DT1.levelTier;
                            item.attack += DT1.attackBonus;
                            item.defense += DT1.defenseBonus;
                            item.speed += DT1.speedBonus;
                            item.hp += DT1.hpBonus;
                            item.MP = DT1.MP;
                            item.hitRange = DT1.hitRange;
                            item.Moves.Add(DT1.newMove);
                            item.sprite = DT1.sprite;
                        }
                        else if (examItem.itemName == "algae root" && item.reachedMossTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT1.name;
                            item.elementType = MT1.elementType;
                            item.levelTier = MT1.levelTier;
                            item.attack += MT1.attackBonus;
                            item.defense += MT1.defenseBonus;
                            item.speed += MT1.speedBonus;
                            item.hp += MT1.hpBonus;
                            item.MP = MT1.MP;
                            item.hitRange = MT1.hitRange;
                            item.Moves.Add(MT1.newMove);
                            item.sprite = MT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = MT1.lifeLeechChance;
                            item.lifeLeechHeal = MT1.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "air" && item.levelTier == 1) //can go to A2, D1, S1
                    {
                        if (examItem.itemName == "wind root" && item.reachedAirTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT2.name;
                            item.elementType = AT2.elementType;
                            item.levelTier = AT2.levelTier;
                            item.attack += AT2.attackBonus;
                            item.defense += AT2.defenseBonus;
                            item.speed += AT2.speedBonus;
                            item.hp += AT2.hpBonus;
                            item.MP = AT2.MP;
                            item.hitRange = AT2.hitRange;
                            item.Moves.Add(AT2.newMove);
                            item.sprite = AT2.sprite;
                        }
                        else if (examItem.itemName == "sand root" && item.reachedDustTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT1.name;
                            item.elementType = DT1.elementType;
                            item.levelTier = DT1.levelTier;
                            item.attack += DT1.attackBonus;
                            item.defense += DT1.defenseBonus;
                            item.speed += DT1.speedBonus;
                            item.hp += DT1.hpBonus;
                            item.MP = DT1.MP;
                            item.hitRange = DT1.hitRange;
                            item.Moves.Add(DT1.newMove);
                            item.sprite = DT1.sprite;
                        }
                        else if (examItem.itemName == "cloud root" && item.reachedStormTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST1.name;
                            item.elementType = ST1.elementType;
                            item.levelTier = ST1.levelTier;
                            item.attack += ST1.attackBonus;
                            item.defense += ST1.defenseBonus;
                            item.speed += ST1.speedBonus;
                            item.hp += ST1.hpBonus;
                            item.MP = ST1.MP;
                            item.hitRange = ST1.hitRange;
                            item.Moves.Add(ST1.newMove);
                            item.sprite = ST1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "water" && item.levelTier == 1) //can go to W2, S1, H1
                    {
                        if (examItem.itemName == "pond root" && item.reachedWaterTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT2.name;
                            item.elementType = WT2.elementType;
                            item.levelTier = WT2.levelTier;
                            item.attack += WT2.attackBonus;
                            item.defense += WT2.defenseBonus;
                            item.speed += WT2.speedBonus;
                            item.hp += WT2.hpBonus;
                            item.MP = WT2.MP;
                            item.hitRange = WT2.hitRange;
                            item.Moves.Add(WT2.newMove);
                            item.sprite = WT2.sprite;
                        }
                        else if (examItem.itemName == "evapo root" && item.reachedHydrothermTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT1.name;
                            item.elementType = HT1.elementType;
                            item.levelTier = HT1.levelTier;
                            item.attack += HT1.attackBonus;
                            item.defense += HT1.defenseBonus;
                            item.speed += HT1.speedBonus;
                            item.hp += HT1.hpBonus;
                            item.MP = HT1.MP;
                            item.hitRange = HT1.hitRange;
                            item.Moves.Add(HT1.newMove);
                            item.sprite = HT1.sprite;
                        }
                        else if (examItem.itemName == "cloud root" && item.reachedStormTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST1.name;
                            item.elementType = ST1.elementType;
                            item.levelTier = ST1.levelTier;
                            item.attack += ST1.attackBonus;
                            item.defense += ST1.defenseBonus;
                            item.speed += ST1.speedBonus;
                            item.hp += ST1.hpBonus;
                            item.MP = ST1.MP;
                            item.hitRange = ST1.hitRange;
                            item.Moves.Add(ST1.newMove);
                            item.sprite = ST1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "charcoal" && item.levelTier == 1) //can go to F1, P1
                    {
                        if (examItem.itemName == "tinder root" && item.reachedFireTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT1.name;
                            item.elementType = FT1.elementType;
                            item.levelTier = FT1.levelTier;
                            item.attack += FT1.attackBonus;
                            item.defense += FT1.defenseBonus;
                            item.speed += FT1.speedBonus;
                            item.hp += FT1.hpBonus;
                            item.MP = FT1.MP;
                            item.hitRange = FT1.hitRange;
                            item.Moves.Add(FT1.newMove);
                            item.sprite = FT1.sprite;
                        }
                        else if (examItem.itemName == "sprout root" && item.reachedPlantTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT1.name;
                            item.elementType = PT1.elementType;
                            item.levelTier = PT1.levelTier;
                            item.attack += PT1.attackBonus;
                            item.defense += PT1.defenseBonus;
                            item.speed += PT1.speedBonus;
                            item.hp += PT1.hpBonus;
                            item.MP = PT1.MP;
                            item.hitRange = PT1.hitRange;
                            item.Moves.Add(PT1.newMove);
                            item.sprite = PT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = PT1.lifeLeechChance;
                            item.lifeLeechHeal = PT1.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "moss" && item.levelTier == 1) //can go to P1, E1
                    {
                        if (examItem.itemName == "soil root" && item.reachedEarthTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET1.name;
                            item.elementType = ET1.elementType;
                            item.levelTier = ET1.levelTier;
                            item.attack += ET1.attackBonus;
                            item.defense += ET1.defenseBonus;
                            item.speed += ET1.speedBonus;
                            item.hp += ET1.hpBonus;
                            item.MP = ET1.MP;
                            item.hitRange = ET1.hitRange;
                            item.Moves.Add(ET1.newMove);
                            item.sprite = ET1.sprite;
                        }
                        else if (examItem.itemName == "sprout root" && item.reachedPlantTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT1.name;
                            item.elementType = PT1.elementType;
                            item.levelTier = PT1.levelTier;
                            item.attack += PT1.attackBonus;
                            item.defense += PT1.defenseBonus;
                            item.speed += PT1.speedBonus;
                            item.hp += PT1.hpBonus;
                            item.MP = PT1.MP;
                            item.hitRange = PT1.hitRange;
                            item.Moves.Add(PT1.newMove);
                            item.sprite = PT1.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = PT1.lifeLeechChance;
                            item.lifeLeechHeal = PT1.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "dust" && item.levelTier == 1) //can go to A1, E1
                    {
                        if (examItem.itemName == "soil root" && item.reachedEarthTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET1.name;
                            item.elementType = ET1.elementType;
                            item.levelTier = ET1.levelTier;
                            item.attack += ET1.attackBonus;
                            item.defense += ET1.defenseBonus;
                            item.speed += ET1.speedBonus;
                            item.hp += ET1.hpBonus;
                            item.MP = ET1.MP;
                            item.hitRange = ET1.hitRange;
                            item.Moves.Add(ET1.newMove);
                            item.sprite = ET1.sprite;
                        }
                        else if (examItem.itemName == "breeze root" && item.reachedAirTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT1.name;
                            item.elementType = AT1.elementType;
                            item.levelTier = AT1.levelTier;
                            item.attack += AT1.attackBonus;
                            item.defense += AT1.defenseBonus;
                            item.speed += AT1.speedBonus;
                            item.hp += AT1.hpBonus;
                            item.MP = AT1.MP;
                            item.hitRange = AT1.hitRange;
                            item.Moves.Add(AT1.newMove);
                            item.sprite = AT1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "storm" && item.levelTier == 1) //can go to A1, W1
                    {
                        if (examItem.itemName == "drop root" && item.reachedWaterTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT1.name;
                            item.elementType = WT1.elementType;
                            item.levelTier = WT1.levelTier;
                            item.attack += WT1.attackBonus;
                            item.defense += WT1.defenseBonus;
                            item.speed += WT1.speedBonus;
                            item.hp += WT1.hpBonus;
                            item.MP = WT1.MP;
                            item.hitRange = WT1.hitRange;
                            item.Moves.Add(WT1.newMove);
                            item.sprite = WT1.sprite;
                        }
                        else if (examItem.itemName == "breeze root" && item.reachedAirTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT1.name;
                            item.elementType = AT1.elementType;
                            item.levelTier = AT1.levelTier;
                            item.attack += AT1.attackBonus;
                            item.defense += AT1.defenseBonus;
                            item.speed += AT1.speedBonus;
                            item.hp += AT1.hpBonus;
                            item.MP = AT1.MP;
                            item.hitRange = AT1.hitRange;
                            item.Moves.Add(AT1.newMove);
                            item.sprite = AT1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "hydrotherm" && item.levelTier == 1) //can go to F1, W1
                    {
                        if (examItem.itemName == "drop root" && item.reachedWaterTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT1.name;
                            item.elementType = WT1.elementType;
                            item.levelTier = WT1.levelTier;
                            item.attack += WT1.attackBonus;
                            item.defense += WT1.defenseBonus;
                            item.speed += WT1.speedBonus;
                            item.hp += WT1.hpBonus;
                            item.MP = WT1.MP;
                            item.hitRange = WT1.hitRange;
                            item.Moves.Add(WT1.newMove);
                            item.sprite = WT1.sprite;
                        }
                        else if (examItem.itemName == "tinder root" && item.reachedFireTier1 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT1.name;
                            item.elementType = FT1.elementType;
                            item.levelTier = FT1.levelTier;
                            item.attack += FT1.attackBonus;
                            item.defense += FT1.defenseBonus;
                            item.speed += FT1.speedBonus;
                            item.hp += FT1.hpBonus;
                            item.MP = FT1.MP;
                            item.hitRange = FT1.hitRange;
                            item.Moves.Add(FT1.newMove);
                            item.sprite = FT1.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "fire" && item.levelTier == 2) //can go to F3, C2, H2
                    {
                        if (examItem.itemName == "flame root" && item.reachedFireTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT3.name;
                            item.elementType = FT3.elementType;
                            item.levelTier = FT3.levelTier;
                            item.attack += FT3.attackBonus;
                            item.defense += FT3.defenseBonus;
                            item.speed += FT3.speedBonus;
                            item.hp += FT3.hpBonus;
                            item.MP = FT3.MP;
                            item.hitRange = FT3.hitRange;
                            item.Moves.Add(FT3.newMove);
                            item.sprite = FT3.sprite;
                        }
                        else if (examItem.itemName == "ember root" && item.reachedCharcoalTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT2.name;
                            item.elementType = CT2.elementType;
                            item.levelTier = CT2.levelTier;
                            item.attack += CT2.attackBonus;
                            item.defense += CT2.defenseBonus;
                            item.speed += CT2.speedBonus;
                            item.hp += CT2.hpBonus;
                            item.MP = CT2.MP;
                            item.hitRange = CT2.hitRange;
                            item.Moves.Add(CT2.newMove);
                            item.sprite = CT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = CT2.poisonChance;
                        }
                        else if (examItem.itemName == "vapour root" && item.reachedHydrothermTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT2.name;
                            item.elementType = HT2.elementType;
                            item.levelTier = HT2.levelTier;
                            item.attack += HT2.attackBonus;
                            item.defense += HT2.defenseBonus;
                            item.speed += HT2.speedBonus;
                            item.hp += HT2.hpBonus;
                            item.MP = HT2.MP;
                            item.hitRange = HT2.hitRange;
                            item.Moves.Add(HT2.newMove);
                            item.sprite = HT2.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "plant" && item.levelTier == 2) //can go to P3, C2, M2
                    {
                        if (examItem.itemName == "vine root" && item.reachedPlantTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT3.name;
                            item.elementType = PT3.elementType;
                            item.levelTier = PT3.levelTier;
                            item.attack += PT3.attackBonus;
                            item.defense += PT3.defenseBonus;
                            item.speed += PT3.speedBonus;
                            item.hp += PT3.hpBonus;
                            item.MP = PT3.MP;
                            item.hitRange = PT3.hitRange;
                            item.Moves.Add(PT3.newMove);
                            item.sprite = PT3.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = PT3.lifeLeechChance;
                            item.lifeLeechHeal = PT3.lifeLeechHeal;
                        }
                        else if (examItem.itemName == "ember root" && item.reachedCharcoalTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT2.name;
                            item.elementType = CT2.elementType;
                            item.levelTier = CT2.levelTier;
                            item.attack += CT2.attackBonus;
                            item.defense += CT2.defenseBonus;
                            item.speed += CT2.speedBonus;
                            item.hp += CT2.hpBonus;
                            item.MP = CT2.MP;
                            item.hitRange = CT2.hitRange;
                            item.Moves.Add(CT2.newMove);
                            item.sprite = CT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = CT2.poisonChance;
                        }
                        else if (examItem.itemName == "lichen root" && item.reachedMossTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT2.name;
                            item.elementType = MT2.elementType;
                            item.levelTier = MT2.levelTier;
                            item.attack += MT2.attackBonus;
                            item.defense += MT2.defenseBonus;
                            item.speed += MT2.speedBonus;
                            item.hp += MT2.hpBonus;
                            item.MP = MT2.MP;
                            item.hitRange = MT2.hitRange;
                            item.Moves.Add(MT2.newMove);
                            item.sprite = MT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = MT2.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "earth" && item.levelTier == 2) //can go to E3, M2, D2
                    {
                        if (examItem.itemName == "terra root" && item.reachedEarthTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET3.name;
                            item.elementType = ET3.elementType;
                            item.levelTier = ET3.levelTier;
                            item.attack += ET3.attackBonus;
                            item.defense += ET3.defenseBonus;
                            item.speed += ET3.speedBonus;
                            item.hp += ET3.hpBonus;
                            item.MP = ET3.MP;
                            item.hitRange = ET3.hitRange;
                            item.Moves.Add(ET3.newMove);
                            item.sprite = ET3.sprite;
                        }
                        else if (examItem.itemName == "loess root" && item.reachedDustTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT2.name;
                            item.elementType = DT2.elementType;
                            item.levelTier = DT2.levelTier;
                            item.attack += DT2.attackBonus;
                            item.defense += DT2.defenseBonus;
                            item.speed += DT2.speedBonus;
                            item.hp += DT2.hpBonus;
                            item.MP = DT2.MP;
                            item.hitRange = DT2.hitRange;
                            item.Moves.Add(DT2.newMove);
                            item.sprite = DT2.sprite;
                        }
                        else if (examItem.itemName == "lichen root" && item.reachedMossTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT2.name;
                            item.elementType = MT2.elementType;
                            item.levelTier = MT2.levelTier;
                            item.attack += MT2.attackBonus;
                            item.defense += MT2.defenseBonus;
                            item.speed += MT2.speedBonus;
                            item.hp += MT2.hpBonus;
                            item.MP = MT2.MP;
                            item.hitRange = MT2.hitRange;
                            item.Moves.Add(MT2.newMove);
                            item.sprite = MT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = MT2.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "air" && item.levelTier == 2) //can go to A3, D2, S2
                    {
                        if (examItem.itemName == "sky root" && item.reachedAirTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT3.name;
                            item.elementType = AT3.elementType;
                            item.levelTier = AT3.levelTier;
                            item.attack += AT3.attackBonus;
                            item.defense += AT3.defenseBonus;
                            item.speed += AT3.speedBonus;
                            item.hp += AT3.hpBonus;
                            item.MP = AT3.MP;
                            item.hitRange = AT3.hitRange;
                            item.Moves.Add(AT3.newMove);
                            item.sprite = AT3.sprite;
                        }
                        else if (examItem.itemName == "loess root" && item.reachedDustTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT2.name;
                            item.elementType = DT2.elementType;
                            item.levelTier = DT2.levelTier;
                            item.attack += DT2.attackBonus;
                            item.defense += DT2.defenseBonus;
                            item.speed += DT2.speedBonus;
                            item.hp += DT2.hpBonus;
                            item.MP = DT2.MP;
                            item.hitRange = DT2.hitRange;
                            item.Moves.Add(DT2.newMove);
                            item.sprite = DT2.sprite;
                        }
                        else if (examItem.itemName == "hail root" && item.reachedStormTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST2.name;
                            item.elementType = ST2.elementType;
                            item.levelTier = ST2.levelTier;
                            item.attack += ST2.attackBonus;
                            item.defense += ST2.defenseBonus;
                            item.speed += ST2.speedBonus;
                            item.hp += ST2.hpBonus;
                            item.MP = ST2.MP;
                            item.hitRange = ST2.hitRange;
                            item.Moves.Add(ST2.newMove);
                            item.sprite = ST2.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "water" && item.levelTier == 2) //can go to W3, S2, H2
                    {
                        if (examItem.itemName == "lake root" && item.reachedWaterTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT3.name;
                            item.elementType = WT3.elementType;
                            item.levelTier = WT3.levelTier;
                            item.attack += WT3.attackBonus;
                            item.defense += WT3.defenseBonus;
                            item.speed += WT3.speedBonus;
                            item.hp += WT3.hpBonus;
                            item.MP = WT3.MP;
                            item.hitRange = WT3.hitRange;
                            item.Moves.Add(WT3.newMove);
                            item.sprite = WT3.sprite;
                        }
                        else if (examItem.itemName == "vapour root" && item.reachedHydrothermTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT2.name;
                            item.elementType = HT2.elementType;
                            item.levelTier = HT2.levelTier;
                            item.attack += HT2.attackBonus;
                            item.defense += HT2.defenseBonus;
                            item.speed += HT2.speedBonus;
                            item.hp += HT2.hpBonus;
                            item.MP = HT2.MP;
                            item.hitRange = HT2.hitRange;
                            item.Moves.Add(HT2.newMove);
                            item.sprite = HT2.sprite;
                        }
                        else if (examItem.itemName == "hail root" && item.reachedStormTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST2.name;
                            item.elementType = ST2.elementType;
                            item.levelTier = ST2.levelTier;
                            item.attack += ST2.attackBonus;
                            item.defense += ST2.defenseBonus;
                            item.speed += ST2.speedBonus;
                            item.hp += ST2.hpBonus;
                            item.MP = ST2.MP;
                            item.hitRange = ST2.hitRange;
                            item.Moves.Add(ST2.newMove);
                            item.sprite = ST2.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "charcoal" && item.levelTier == 2) //can go to F2, P2
                    {
                        if (examItem.itemName == "smoke root" && item.reachedFireTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT2.name;
                            item.elementType = FT2.elementType;
                            item.levelTier = FT2.levelTier;
                            item.attack += FT2.attackBonus;
                            item.defense += FT2.defenseBonus;
                            item.speed += FT2.speedBonus;
                            item.hp += FT2.hpBonus;
                            item.MP = FT2.MP;
                            item.hitRange = FT2.hitRange;
                            item.Moves.Add(FT2.newMove);
                            item.sprite = FT2.sprite;
                        }
                        else if (examItem.itemName == "grass root" && item.reachedPlantTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT2.name;
                            item.elementType = PT2.elementType;
                            item.levelTier = PT2.levelTier;
                            item.attack += PT2.attackBonus;
                            item.defense += PT2.defenseBonus;
                            item.speed += PT2.speedBonus;
                            item.hp += PT2.hpBonus;
                            item.MP = PT2.MP;
                            item.hitRange = PT2.hitRange;
                            item.Moves.Add(PT2.newMove);
                            item.sprite = PT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = PT2.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "moss" && item.levelTier == 2) //can go to P2, E2
                    {
                        if (examItem.itemName == "boulder root" && item.reachedEarthTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET2.name;
                            item.elementType = ET2.elementType;
                            item.levelTier = ET2.levelTier;
                            item.attack += ET2.attackBonus;
                            item.defense += ET2.defenseBonus;
                            item.speed += ET2.speedBonus;
                            item.hp += ET2.hpBonus;
                            item.MP = ET2.MP;
                            item.hitRange = ET2.hitRange;
                            item.Moves.Add(ET2.newMove);
                            item.sprite = ET2.sprite;
                        }
                        else if (examItem.itemName == "grass root" && item.reachedPlantTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT2.name;
                            item.elementType = PT2.elementType;
                            item.levelTier = PT2.levelTier;
                            item.attack += PT2.attackBonus;
                            item.defense += PT2.defenseBonus;
                            item.speed += PT2.speedBonus;
                            item.hp += PT2.hpBonus;
                            item.MP = PT2.MP;
                            item.hitRange = PT2.hitRange;
                            item.Moves.Add(PT2.newMove);
                            item.sprite = PT2.sprite;
                            item.poisonOne = true;
                            item.poisonChance = PT2.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "dust" && item.levelTier == 2) //can go to A2, E2
                    {
                        if (examItem.itemName == "boulder root" && item.reachedEarthTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET2.name;
                            item.elementType = ET2.elementType;
                            item.levelTier = ET2.levelTier;
                            item.attack += ET2.attackBonus;
                            item.defense += ET2.defenseBonus;
                            item.speed += ET2.speedBonus;
                            item.hp += ET2.hpBonus;
                            item.MP = ET2.MP;
                            item.hitRange = ET2.hitRange;
                            item.Moves.Add(ET2.newMove);
                            item.sprite = ET2.sprite;
                        }
                        else if (examItem.itemName == "wind root" && item.reachedAirTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT2.name;
                            item.elementType = AT2.elementType;
                            item.levelTier = AT2.levelTier;
                            item.attack += AT2.attackBonus;
                            item.defense += AT2.defenseBonus;
                            item.speed += AT2.speedBonus;
                            item.hp += AT2.hpBonus;
                            item.MP = AT2.MP;
                            item.hitRange = AT2.hitRange;
                            item.Moves.Add(AT2.newMove);
                            item.sprite = AT2.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "storm" && item.levelTier == 2) //can go to A2, W2
                    {
                        if (examItem.itemName == "pond root" && item.reachedWaterTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT2.name;
                            item.elementType = WT2.elementType;
                            item.levelTier = WT2.levelTier;
                            item.attack += WT2.attackBonus;
                            item.defense += WT2.defenseBonus;
                            item.speed += WT2.speedBonus;
                            item.hp += WT2.hpBonus;
                            item.MP = WT2.MP;
                            item.hitRange = WT2.hitRange;
                            item.Moves.Add(WT2.newMove);
                            item.sprite = WT2.sprite;
                        }
                        else if (examItem.itemName == "wind root" && item.reachedAirTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT2.name;
                            item.elementType = AT2.elementType;
                            item.levelTier = AT2.levelTier;
                            item.attack += AT2.attackBonus;
                            item.defense += AT2.defenseBonus;
                            item.speed += AT2.speedBonus;
                            item.hp += AT2.hpBonus;
                            item.MP = AT2.MP;
                            item.hitRange = AT2.hitRange;
                            item.Moves.Add(AT2.newMove);
                            item.sprite = AT2.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "hydrotherm" && item.levelTier == 2) //can go to F2, W2
                    {
                        if (examItem.itemName == "pond root" && item.reachedWaterTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT2.name;
                            item.elementType = WT2.elementType;
                            item.levelTier = WT2.levelTier;
                            item.attack += WT2.attackBonus;
                            item.defense += WT2.defenseBonus;
                            item.speed += WT2.speedBonus;
                            item.hp += WT2.hpBonus;
                            item.MP = WT2.MP;
                            item.hitRange = WT2.hitRange;
                            item.Moves.Add(WT2.newMove);
                            item.sprite = WT2.sprite;
                        }
                        else if (examItem.itemName == "smoke root" && item.reachedFireTier2 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT2.name;
                            item.elementType = FT2.elementType;
                            item.levelTier = FT2.levelTier;
                            item.attack += FT2.attackBonus;
                            item.defense += FT2.defenseBonus;
                            item.speed += FT2.speedBonus;
                            item.hp += FT2.hpBonus;
                            item.MP = FT2.MP;
                            item.hitRange = FT2.hitRange;
                            item.Moves.Add(FT2.newMove);
                            item.sprite = FT2.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "fire" && item.levelTier == 3) //can go to F4, C3, H3
                    {
                        if (examItem.itemName == "inferno root" && item.reachedFireTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT4.name;
                            item.elementType = FT4.elementType;
                            item.levelTier = FT4.levelTier;
                            item.attack += FT4.attackBonus;
                            item.defense += FT4.defenseBonus;
                            item.speed += FT4.speedBonus;
                            item.hp += FT4.hpBonus;
                            item.MP = FT4.MP;
                            item.hitRange = FT4.hitRange;
                            item.Moves.Add(FT4.newMove);
                            item.sprite = FT4.sprite;
                        }
                        else if (examItem.itemName == "charred root" && item.reachedCharcoalTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT3.name;
                            item.elementType = CT3.elementType;
                            item.levelTier = CT3.levelTier;
                            item.attack += CT3.attackBonus;
                            item.defense += CT3.defenseBonus;
                            item.speed += CT3.speedBonus;
                            item.hp += CT3.hpBonus;
                            item.MP = CT3.MP;
                            item.hitRange = CT3.hitRange;
                            item.Moves.Add(CT3.newMove);
                            item.sprite = CT3.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = CT3.lifeLeechChance;
                            item.lifeLeechHeal = CT3.lifeLeechHeal;
                        }
                        else if (examItem.itemName == "vent root" && item.reachedHydrothermTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT3.name;
                            item.elementType = HT3.elementType;
                            item.levelTier = HT3.levelTier;
                            item.attack += HT3.attackBonus;
                            item.defense += HT3.defenseBonus;
                            item.speed += HT3.speedBonus;
                            item.hp += HT3.hpBonus;
                            item.MP = HT3.MP;
                            item.hitRange = HT3.hitRange;
                            item.Moves.Add(HT3.newMove);
                            item.sprite = HT3.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "plant" && item.levelTier == 3) //can go to P4, C3, M3
                    {
                        if (examItem.itemName == "forest root" && item.reachedPlantTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT4.name;
                            item.elementType = PT4.elementType;
                            item.levelTier = PT4.levelTier;
                            item.attack += PT4.attackBonus;
                            item.defense += PT4.defenseBonus;
                            item.speed += PT4.speedBonus;
                            item.hp += PT4.hpBonus;
                            item.MP = PT4.MP;
                            item.hitRange = PT4.hitRange;
                            item.Moves.Add(PT4.newMove);
                            item.sprite = PT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = PT4.poisonChance;
                        }
                        else if (examItem.itemName == "charred root" && item.reachedCharcoalTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT3.name;
                            item.elementType = CT3.elementType;
                            item.levelTier = CT3.levelTier;
                            item.attack += CT3.attackBonus;
                            item.defense += CT3.defenseBonus;
                            item.speed += CT3.speedBonus;
                            item.hp += CT3.hpBonus;
                            item.MP = CT3.MP;
                            item.hitRange = CT3.hitRange;
                            item.Moves.Add(CT3.newMove);
                            item.sprite = CT3.sprite;
                        }
                        else if (examItem.itemName == "bog root" && item.reachedMossTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT3.name;
                            item.elementType = MT3.elementType;
                            item.levelTier = MT3.levelTier;
                            item.attack += MT3.attackBonus;
                            item.defense += MT3.defenseBonus;
                            item.speed += MT3.speedBonus;
                            item.hp += MT3.hpBonus;
                            item.MP = MT3.MP;
                            item.hitRange = MT3.hitRange;
                            item.Moves.Add(MT3.newMove);
                            item.sprite = MT3.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = MT3.lifeLeechChance;
                            item.lifeLeechHeal = MT3.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "earth" && item.levelTier == 3) //can go to E4, M3, D3
                    {
                        if (examItem.itemName == "mount root" && item.reachedEarthTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET4.name;
                            item.elementType = ET4.elementType;
                            item.levelTier = ET4.levelTier;
                            item.attack += ET4.attackBonus;
                            item.defense += ET4.defenseBonus;
                            item.speed += ET4.speedBonus;
                            item.hp += ET4.hpBonus;
                            item.MP = ET4.MP;
                            item.hitRange = ET4.hitRange;
                            item.Moves.Add(ET4.newMove);
                            item.sprite = ET4.sprite;
                        }
                        else if (examItem.itemName == "dune root" && item.reachedDustTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT3.name;
                            item.elementType = DT3.elementType;
                            item.levelTier = DT3.levelTier;
                            item.attack += DT3.attackBonus;
                            item.defense += DT3.defenseBonus;
                            item.speed += DT3.speedBonus;
                            item.hp += DT3.hpBonus;
                            item.MP = DT3.MP;
                            item.hitRange = DT3.hitRange;
                            item.Moves.Add(DT3.newMove);
                            item.sprite = DT3.sprite;
                        }
                        else if (examItem.itemName == "bog root" && item.reachedMossTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT3.name;
                            item.elementType = MT3.elementType;
                            item.levelTier = MT3.levelTier;
                            item.attack += MT3.attackBonus;
                            item.defense += MT3.defenseBonus;
                            item.speed += MT3.speedBonus;
                            item.hp += MT3.hpBonus;
                            item.MP = MT3.MP;
                            item.hitRange = MT3.hitRange;
                            item.Moves.Add(MT3.newMove);
                            item.sprite = MT3.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = MT3.lifeLeechChance;
                            item.lifeLeechHeal = MT3.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "air" && item.levelTier == 3) //can go to A4, D3, S3
                    {
                        if (examItem.itemName == "atmos root" && item.reachedAirTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT4.name;
                            item.elementType = AT4.elementType;
                            item.levelTier = AT4.levelTier;
                            item.attack += AT4.attackBonus;
                            item.defense += AT4.defenseBonus;
                            item.speed += AT4.speedBonus;
                            item.hp += AT4.hpBonus;
                            item.MP = AT4.MP;
                            item.hitRange = AT4.hitRange;
                            item.Moves.Add(AT4.newMove);
                            item.sprite = AT4.sprite;
                        }
                        else if (examItem.itemName == "dune root" && item.reachedDustTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT3.name;
                            item.elementType = DT3.elementType;
                            item.levelTier = DT3.levelTier;
                            item.attack += DT3.attackBonus;
                            item.defense += DT3.defenseBonus;
                            item.speed += DT3.speedBonus;
                            item.hp += DT3.hpBonus;
                            item.MP = DT3.MP;
                            item.hitRange = DT3.hitRange;
                            item.Moves.Add(DT3.newMove);
                            item.sprite = DT3.sprite;
                        }
                        else if (examItem.itemName == "thunder root" && item.reachedStormTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST3.name;
                            item.elementType = ST3.elementType;
                            item.levelTier = ST3.levelTier;
                            item.attack += ST3.attackBonus;
                            item.defense += ST3.defenseBonus;
                            item.speed += ST3.speedBonus;
                            item.hp += ST3.hpBonus;
                            item.MP = ST3.MP;
                            item.hitRange = ST3.hitRange;
                            item.Moves.Add(ST3.newMove);
                            item.sprite = ST3.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "water" && item.levelTier == 3) //can go to W4, S3, H3
                    {
                        if (examItem.itemName == "ocean root" && item.reachedWaterTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT4.name;
                            item.elementType = WT4.elementType;
                            item.levelTier = WT4.levelTier;
                            item.attack += WT4.attackBonus;
                            item.defense += WT4.defenseBonus;
                            item.speed += WT4.speedBonus;
                            item.hp += WT4.hpBonus;
                            item.MP = WT4.MP;
                            item.hitRange = WT4.hitRange;
                            item.Moves.Add(WT4.newMove);
                            item.sprite = WT4.sprite;
                        }
                        else if (examItem.itemName == "vent root" && item.reachedHydrothermTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT3.name;
                            item.elementType = HT3.elementType;
                            item.levelTier = HT3.levelTier;
                            item.attack += HT3.attackBonus;
                            item.defense += HT3.defenseBonus;
                            item.speed += HT3.speedBonus;
                            item.hp += HT3.hpBonus;
                            item.MP = HT3.MP;
                            item.hitRange = HT3.hitRange;
                            item.Moves.Add(HT3.newMove);
                            item.sprite = HT3.sprite;
                        }
                        else if (examItem.itemName == "thunder root" && item.reachedStormTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST3.name;
                            item.elementType = ST3.elementType;
                            item.levelTier = ST3.levelTier;
                            item.attack += ST3.attackBonus;
                            item.defense += ST3.defenseBonus;
                            item.speed += ST3.speedBonus;
                            item.hp += ST3.hpBonus;
                            item.MP = ST3.MP;
                            item.hitRange = ST3.hitRange;
                            item.Moves.Add(ST3.newMove);
                            item.sprite = ST3.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "charcoal" && item.levelTier == 3) //can go to F3, P3
                    {
                        if (examItem.itemName == "flame root" && item.reachedFireTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT3.name;
                            item.elementType = FT3.elementType;
                            item.levelTier = FT3.levelTier;
                            item.attack += FT3.attackBonus;
                            item.defense += FT3.defenseBonus;
                            item.speed += FT3.speedBonus;
                            item.hp += FT3.hpBonus;
                            item.MP = FT3.MP;
                            item.hitRange = FT3.hitRange;
                            item.Moves.Add(FT3.newMove);
                            item.sprite = FT3.sprite;
                        }
                        else if (examItem.itemName == "vine root" && item.reachedPlantTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT3.name;
                            item.elementType = PT3.elementType;
                            item.levelTier = PT3.levelTier;
                            item.attack += PT3.attackBonus;
                            item.defense += PT3.defenseBonus;
                            item.speed += PT3.speedBonus;
                            item.hp += PT3.hpBonus;
                            item.MP = PT3.MP;
                            item.hitRange = PT3.hitRange;
                            item.Moves.Add(PT3.newMove);
                            item.sprite = PT3.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = PT3.lifeLeechChance;
                            item.lifeLeechHeal = PT3.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "moss" && item.levelTier == 3) //can go to P3, E3
                    {
                        if (examItem.itemName == "terra root" && item.reachedEarthTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET3.name;
                            item.elementType = ET3.elementType;
                            item.levelTier = ET3.levelTier;
                            item.attack += ET3.attackBonus;
                            item.defense += ET3.defenseBonus;
                            item.speed += ET3.speedBonus;
                            item.hp += ET3.hpBonus;
                            item.MP = ET3.MP;
                            item.hitRange = ET3.hitRange;
                            item.Moves.Add(ET3.newMove);
                            item.sprite = ET3.sprite;
                        }
                        else if (examItem.itemName == "vine root" && item.reachedPlantTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT3.name;
                            item.elementType = PT3.elementType;
                            item.levelTier = PT3.levelTier;
                            item.attack += PT3.attackBonus;
                            item.defense += PT3.defenseBonus;
                            item.speed += PT3.speedBonus;
                            item.hp += PT3.hpBonus;
                            item.MP = PT3.MP;
                            item.hitRange = PT3.hitRange;
                            item.Moves.Add(PT3.newMove);
                            item.sprite = PT3.sprite;
                            item.lifeLeech = true;
                            item.lifeLeechChance = PT3.lifeLeechChance;
                            item.lifeLeechHeal = PT3.lifeLeechHeal;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "dust" && item.levelTier == 3) //can go to A3, E3
                    {
                        if (examItem.itemName == "terra root" && item.reachedEarthTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET3.name;
                            item.elementType = ET3.elementType;
                            item.levelTier = ET3.levelTier;
                            item.attack += ET3.attackBonus;
                            item.defense += ET3.defenseBonus;
                            item.speed += ET3.speedBonus;
                            item.hp += ET3.hpBonus;
                            item.MP = ET3.MP;
                            item.hitRange = ET3.hitRange;
                            item.Moves.Add(ET3.newMove);
                            item.sprite = ET3.sprite;
                        }
                        else if (examItem.itemName == "sky root" && item.reachedAirTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT3.name;
                            item.elementType = AT3.elementType;
                            item.levelTier = AT3.levelTier;
                            item.attack += AT3.attackBonus;
                            item.defense += AT3.defenseBonus;
                            item.speed += AT3.speedBonus;
                            item.hp += AT3.hpBonus;
                            item.MP = AT3.MP;
                            item.hitRange = AT3.hitRange;
                            item.Moves.Add(AT3.newMove);
                            item.sprite = AT3.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "storm" && item.levelTier == 3) //can go to A3, W3
                    {
                        if (examItem.itemName == "lake root" && item.reachedWaterTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT3.name;
                            item.elementType = WT3.elementType;
                            item.levelTier = WT3.levelTier;
                            item.attack += WT3.attackBonus;
                            item.defense += WT3.defenseBonus;
                            item.speed += WT3.speedBonus;
                            item.hp += WT3.hpBonus;
                            item.MP = WT3.MP;
                            item.hitRange = WT3.hitRange;
                            item.Moves.Add(WT3.newMove);
                            item.sprite = WT3.sprite;
                        }
                        else if (examItem.itemName == "sky root" && item.reachedAirTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT3.name;
                            item.elementType = AT3.elementType;
                            item.levelTier = AT3.levelTier;
                            item.attack += AT3.attackBonus;
                            item.defense += AT3.defenseBonus;
                            item.speed += AT3.speedBonus;
                            item.hp += AT3.hpBonus;
                            item.MP = AT3.MP;
                            item.hitRange = AT3.hitRange;
                            item.Moves.Add(AT3.newMove);
                            item.sprite = AT3.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "hydrotherm" && item.levelTier == 3) //can go to F3, W3
                    {
                        if (examItem.itemName == "lake root" && item.reachedWaterTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT3.name;
                            item.elementType = WT3.elementType;
                            item.levelTier = WT3.levelTier;
                            item.attack += WT3.attackBonus;
                            item.defense += WT3.defenseBonus;
                            item.speed += WT3.speedBonus;
                            item.hp += WT3.hpBonus;
                            item.MP = WT3.MP;
                            item.hitRange = WT3.hitRange;
                            item.Moves.Add(WT3.newMove);
                            item.sprite = WT3.sprite;
                        }
                        else if (examItem.itemName == "flame root" && item.reachedFireTier3 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT3.name;
                            item.elementType = FT3.elementType;
                            item.levelTier = FT3.levelTier;
                            item.attack += FT3.attackBonus;
                            item.defense += FT3.defenseBonus;
                            item.speed += FT3.speedBonus;
                            item.hp += FT3.hpBonus;
                            item.MP = FT3.MP;
                            item.hitRange = FT3.hitRange;
                            item.Moves.Add(FT3.newMove);
                            item.sprite = FT3.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "fire" && item.levelTier == 4) //can go to C4, H4
                    {
                        if (examItem.itemName == "ash root" && item.reachedCharcoalTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT4.name;
                            item.elementType = CT4.elementType;
                            item.levelTier = CT4.levelTier;
                            item.attack += CT4.attackBonus;
                            item.defense += CT4.defenseBonus;
                            item.speed += CT4.speedBonus;
                            item.hp += CT4.hpBonus;
                            item.MP = CT4.MP;
                            item.hitRange = CT4.hitRange;
                            item.Moves.Add(CT4.newMove);
                            item.sprite = CT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = CT4.poisonChance;
                        }
                        else if (examItem.itemName == "geyser root" && item.reachedHydrothermTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT4.name;
                            item.elementType = HT4.elementType;
                            item.levelTier = HT4.levelTier;
                            item.attack += HT4.attackBonus;
                            item.defense += HT4.defenseBonus;
                            item.speed += HT4.speedBonus;
                            item.hp += HT4.hpBonus;
                            item.MP = HT4.MP;
                            item.hitRange = HT4.hitRange;
                            item.Moves.Add(HT4.newMove);
                            item.sprite = HT4.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "plant" && item.levelTier == 4) //can go to C4, M4
                    {
                        if (examItem.itemName == "ash root" && item.reachedCharcoalTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = CT4.name;
                            item.elementType = CT4.elementType;
                            item.levelTier = CT4.levelTier;
                            item.attack += CT4.attackBonus;
                            item.defense += CT4.defenseBonus;
                            item.speed += CT4.speedBonus;
                            item.hp += CT4.hpBonus;
                            item.MP = CT4.MP;
                            item.hitRange = CT4.hitRange;
                            item.Moves.Add(CT4.newMove);
                            item.sprite = CT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = CT4.poisonChance;
                        }
                        else if (examItem.itemName == "swamp root" && item.reachedMossTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT4.name;
                            item.elementType = MT4.elementType;
                            item.levelTier = MT4.levelTier;
                            item.attack += MT4.attackBonus;
                            item.defense += MT4.defenseBonus;
                            item.speed += MT4.speedBonus;
                            item.hp += MT4.hpBonus;
                            item.MP = MT4.MP;
                            item.hitRange = MT4.hitRange;
                            item.Moves.Add(MT4.newMove);
                            item.sprite = MT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = MT4.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "earth" && item.levelTier == 4) //can go to M4, D4
                    {
                        if (examItem.itemName == "desert root" && item.reachedDustTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT4.name;
                            item.elementType = DT4.elementType;
                            item.levelTier = DT4.levelTier;
                            item.attack += DT4.attackBonus;
                            item.defense += DT4.defenseBonus;
                            item.speed += DT4.speedBonus;
                            item.hp += DT4.hpBonus;
                            item.MP = DT4.MP;
                            item.hitRange = DT4.hitRange;
                            item.Moves.Add(DT4.newMove);
                            item.sprite = DT4.sprite;
                        }
                        else if (examItem.itemName == "swamp root" && item.reachedMossTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = MT4.name;
                            item.elementType = MT4.elementType;
                            item.levelTier = MT4.levelTier;
                            item.attack += MT4.attackBonus;
                            item.defense += MT4.defenseBonus;
                            item.speed += MT4.speedBonus;
                            item.hp += MT4.hpBonus;
                            item.MP = MT4.MP;
                            item.hitRange = MT4.hitRange;
                            item.Moves.Add(MT4.newMove);
                            item.sprite = MT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = MT4.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "air" && item.levelTier == 4) //can go to D4, S4
                    {
                        if (examItem.itemName == "desert root" && item.reachedDustTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = DT4.name;
                            item.elementType = DT4.elementType;
                            item.levelTier = DT4.levelTier;
                            item.attack += DT4.attackBonus;
                            item.defense += DT4.defenseBonus;
                            item.speed += DT4.speedBonus;
                            item.hp += DT4.hpBonus;
                            item.MP = DT4.MP;
                            item.hitRange = DT4.hitRange;
                            item.Moves.Add(DT4.newMove);
                            item.sprite = DT4.sprite;
                        }
                        else if (examItem.itemName == "lightning root" && item.reachedStormTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST4.name;
                            item.elementType = ST4.elementType;
                            item.levelTier = ST4.levelTier;
                            item.attack += ST4.attackBonus;
                            item.defense += ST4.defenseBonus;
                            item.speed += ST4.speedBonus;
                            item.hp += ST4.hpBonus;
                            item.MP = ST4.MP;
                            item.hitRange = ST4.hitRange;
                            item.Moves.Add(ST4.newMove);
                            item.sprite = ST4.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "water" && item.levelTier == 4) //can go to S4, H4
                    {
                        if (examItem.itemName == "geyser root" && item.reachedHydrothermTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = HT4.name;
                            item.elementType = HT4.elementType;
                            item.levelTier = HT4.levelTier;
                            item.attack += HT4.attackBonus;
                            item.defense += HT4.defenseBonus;
                            item.speed += HT4.speedBonus;
                            item.hp += HT4.hpBonus;
                            item.MP = HT4.MP;
                            item.hitRange = HT4.hitRange;
                            item.Moves.Add(HT4.newMove);
                            item.sprite = HT4.sprite;
                        }
                        else if (examItem.itemName == "lightning root" && item.reachedStormTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = ST4.name;
                            item.elementType = ST4.elementType;
                            item.levelTier = ST4.levelTier;
                            item.attack += ST4.attackBonus;
                            item.defense += ST4.defenseBonus;
                            item.speed += ST4.speedBonus;
                            item.hp += ST4.hpBonus;
                            item.MP = ST4.MP;
                            item.hitRange = ST4.hitRange;
                            item.Moves.Add(ST4.newMove);
                            item.sprite = ST4.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "charcoal" && item.levelTier == 4) //can go to F4, P4
                    {
                        if (examItem.itemName == "inferno root" && item.reachedFireTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT4.name;
                            item.elementType = FT4.elementType;
                            item.levelTier = FT4.levelTier;
                            item.attack += FT4.attackBonus;
                            item.defense += FT4.defenseBonus;
                            item.speed += FT4.speedBonus;
                            item.hp += FT4.hpBonus;
                            item.MP = FT4.MP;
                            item.hitRange = FT4.hitRange;
                            item.Moves.Add(FT4.newMove);
                            item.sprite = FT4.sprite;
                        }
                        else if (examItem.itemName == "forest root" && item.reachedPlantTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT4.name;
                            item.elementType = PT4.elementType;
                            item.levelTier = PT4.levelTier;
                            item.attack += PT4.attackBonus;
                            item.defense += PT4.defenseBonus;
                            item.speed += PT4.speedBonus;
                            item.hp += PT4.hpBonus;
                            item.MP = PT4.MP;
                            item.hitRange = PT4.hitRange;
                            item.Moves.Add(PT4.newMove);
                            item.sprite = PT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = PT4.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "moss" && item.levelTier == 4) //can go to P4, E4
                    {
                        if (examItem.itemName == "mount root" && item.reachedEarthTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET4.name;
                            item.elementType = ET4.elementType;
                            item.levelTier = ET4.levelTier;
                            item.attack += ET4.attackBonus;
                            item.defense += ET4.defenseBonus;
                            item.speed += ET4.speedBonus;
                            item.hp += ET4.hpBonus;
                            item.MP = ET4.MP;
                            item.hitRange = ET4.hitRange;
                            item.Moves.Add(ET4.newMove);
                            item.sprite = ET4.sprite;
                        }
                        else if (examItem.itemName == "forest root" && item.reachedPlantTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = PT4.name;
                            item.elementType = PT4.elementType;
                            item.levelTier = PT4.levelTier;
                            item.attack += PT4.attackBonus;
                            item.defense += PT4.defenseBonus;
                            item.speed += PT4.speedBonus;
                            item.hp += PT4.hpBonus;
                            item.MP = PT4.MP;
                            item.hitRange = PT4.hitRange;
                            item.Moves.Add(PT4.newMove);
                            item.sprite = PT4.sprite;
                            item.poisonTwo = true;
                            item.poisonChance = PT4.poisonChance;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "dust" && item.levelTier == 4) //can go to A4, E4
                    {
                        if (examItem.itemName == "mount root" && item.reachedEarthTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = ET4.name;
                            item.elementType = ET4.elementType;
                            item.levelTier = ET4.levelTier;
                            item.attack += ET4.attackBonus;
                            item.defense += ET4.defenseBonus;
                            item.speed += ET4.speedBonus;
                            item.hp += ET4.hpBonus;
                            item.MP = ET4.MP;
                            item.hitRange = ET4.hitRange;
                            item.Moves.Add(ET4.newMove);
                            item.sprite = ET4.sprite;
                        }
                        else if (examItem.itemName == "atmos root" && item.reachedAirTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT4.name;
                            item.elementType = AT4.elementType;
                            item.levelTier = AT4.levelTier;
                            item.attack += AT4.attackBonus;
                            item.defense += AT4.defenseBonus;
                            item.speed += AT4.speedBonus;
                            item.hp += AT4.hpBonus;
                            item.MP = AT4.MP;
                            item.hitRange = AT4.hitRange;
                            item.Moves.Add(AT4.newMove);
                            item.sprite = AT4.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "storm" && item.levelTier == 4) //can go to A4, W4
                    {
                        if (examItem.itemName == "ocean root" && item.reachedWaterTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT4.name;
                            item.elementType = WT4.elementType;
                            item.levelTier = WT4.levelTier;
                            item.attack += WT4.attackBonus;
                            item.defense += WT4.defenseBonus;
                            item.speed += WT4.speedBonus;
                            item.hp += WT4.hpBonus;
                            item.MP = WT4.MP;
                            item.hitRange = WT4.hitRange;
                            item.Moves.Add(WT4.newMove);
                            item.sprite = WT4.sprite;
                        }
                        else if (examItem.itemName == "atmos root" && item.reachedAirTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = AT4.name;
                            item.elementType = AT4.elementType;
                            item.levelTier = AT4.levelTier;
                            item.attack += AT4.attackBonus;
                            item.defense += AT4.defenseBonus;
                            item.speed += AT4.speedBonus;
                            item.hp += AT4.hpBonus;
                            item.MP = AT4.MP;
                            item.hitRange = AT4.hitRange;
                            item.Moves.Add(AT4.newMove);
                            item.sprite = AT4.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }

                    else if (item.elementType == "hydrotherm" && item.levelTier == 4) //can go to F4, W4
                    {
                        if (examItem.itemName == "ocean root" && item.reachedWaterTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = WT4.name;
                            item.elementType = WT4.elementType;
                            item.levelTier = WT4.levelTier;
                            item.attack += WT4.attackBonus;
                            item.defense += WT4.defenseBonus;
                            item.speed += WT4.speedBonus;
                            item.hp += WT4.hpBonus;
                            item.MP = WT4.MP;
                            item.hitRange = WT4.hitRange;
                            item.Moves.Add(WT4.newMove);
                            item.sprite = WT4.sprite;
                        }
                        else if (examItem.itemName == "inferno root" && item.reachedFireTier4 == false)
                        {
                            meebaEvolved = true;
                            item.name = FT4.name;
                            item.elementType = FT4.elementType;
                            item.levelTier = FT4.levelTier;
                            item.attack += FT4.attackBonus;
                            item.defense += FT4.defenseBonus;
                            item.speed += FT4.speedBonus;
                            item.hp += FT4.hpBonus;
                            item.MP = FT4.MP;
                            item.hitRange = FT4.hitRange;
                            item.Moves.Add(FT4.newMove);
                            item.sprite = FT4.sprite;
                        }
                        else
                            meebaEvolved = false;
                    }
                }
            }
        }

        public void EvolutionSprites()
        {
            ThisBattleMeebas.Clear();
            ThisBattleMeebas.Add(meeba);
            ThisBattleMeebas.Add(meeba2);
            foreach (var item in ThisBattleMeebas)
            {
                if (item.name == meeba.name && currentDNAMeeba.name == meeba.name
                    || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name)
                {
                    if (item.levelTier == 1)
                    {
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "ACTINOPTERYGII".ToLower()
                            || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "ACTINOPTERYGII".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"                       ",
                     @"    \\    _,.-~ -~-._  ",
                     @"    /\\, '          @\ ",
                     @"-_ .-''         }    / ",
                     @"\''-_______-///,,,_-'  ",
                     @" \\//// \ }  \} \ }    ",
                     @"  \///   }       '     ",
                     @"   }/                  "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AMPHIBIA".ToLower()
                       || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AMPHIBIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"        _,.-----.,_    ",
                     @"    .-'            @ \ ",
                     @"  ,'      ///// ( ____.",
                     @" {    _\ \____/ /,.-'  ",
                     @"{\ },'  m/    \m       ",
                     @" {\ }                  ",
                     @"    {\}                ",
                     @"      {\>              "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AVES".ToLower()
                          || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AVES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"         <<-<-_    _   ",
                     @"        <<-<-/ m  {@_> ",
                     @"         <<<-}   //'   ",
                     @"          <__\,_//     ",
                     @"    .nn,~'<    _/      ",
                     @"   {^n}\  /___/        ",
                     @" {^n^}  {'             ",
                     @"{^n^}   '<m            "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "CHONDRICTHYES".ToLower()
                      || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "CHONDRICTHYES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"            .\\        ",
                     @"           ,;\:\\      ",
                     @"/       \\,,.-~ -~-._  ",
                     @"|    \\\ '  o   o  @ '.",
                     @"\. \\''  o   o }      /",
                     @" '\-____ __--_.,,\_-'' ",
                     @"      \\}    ////}     ",
                     @"       }     //}       ",
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "MAMMALIA".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "MAMMALIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"  .=>      ,/}._       ",
                    @" //  _,.-~'      @'.   ",
                    @"// .'          ,    ', ",
                    @"||/            ,~.,_._p",
                    @"| '. -     /  /        ",
                    @"|     \_-~'<,{         ",
                    @" \__/ /     \\         ",
                    @"   (__l->m   \>m       "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "REPTILIA".ToLower()
                                || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "REPTILIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"                  ___  ",
                     @"          _,.---~' @ \ ",
                     @"     _.-''       ____/ ",
                     @"   .'       / /~'      ",
                     @"  /  ,  \-~ '-_m       ",
                     @" /  /  z )             ",
                     @"|  {. (_>m             ",
                     @" \___________>         "
                },
                };
                        }
                    }
                    else if (item.levelTier == 2)
                    {
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "ACTINOPTERYGII".ToLower()
                               || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "ACTINOPTERYGII".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"                       ",
                    @"     ,//////'.,        ",
                    @"   //-'        @ ______",
                    @"  //-       < , -w-wvw'",
                    @"<//-    <,.-''         ",
                    @"|\-   //               ",
                    @" \\_  \.,___      ,    ",
                    @"   \\_______>____//>   "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AMPHIBIA".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AMPHIBIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"                 ,_    ",
                     @"     _,.-~~-~~-~'  @ \ ",
                     @"  {/}           ( ____.",
                     @" {/}  _. \____/ /,.-'  ",
                     @"{\},-'  \/    \_m      ",
                     @" {\}   m'              ",
                     @"   {\}                 ",
                     @"     {\{\{\{\>         "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AVES".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AVES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"       <<-<-/          ",
                     @"    <<-<-<-}   \\\     ",
                     @"  \   <-<<-}  \{@_>    ",
                     @"  \\\    <<__\,//      ",
                     @"    \\\,~'<    /       ",
                     @"      \\  /___/        ",
                     @"        /'             ",
                     @"       _\<m            "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "CHONDRICTHYES".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "CHONDRICTHYES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"              \        ",
                    @",         _,.-|\^-.,   ",
                    @"|\    ,^'           @\ ",
                    @"} \,.'          {{{,.-'",
                    @" } ',-.,_  -___  .'    ",
                    @";  /     \/   | /      ",
                    @"| /           |/       ",
                    @"|/                     "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "MAMMALIA".ToLower()
                             || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "MAMMALIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"     ______. _.---_    ",
                    @"  .-'       '  <   @'. ",
                    @" /           . ,      o",
                    @"/ /   ;    '  \,~._-,.'",
                    @"|/\   \    |  /        ",
                    @"|| \  |_.~'\ |         ",
                    @"|| / /'     \\         ",
                    @"\\ \_lm      \lm       "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "REPTILIA".ToLower()
                           || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "REPTILIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @" _                 _-, ",
                    @"/                ,' @ \",
                    @"|         ,--~~'' _.-~'",
                    @"\\     ,-',.----}\=m   ",
                    @" \\===/._/__~-~-}      ",
                    @"      // }__~-~}       ",
                    @"     m)  }_-~}'        ",
                    @"         }_}'          "
                },
                };
                        }
                    }
                    else if (item.levelTier == 3)
                    {
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "ACTINOPTERYGII".ToLower()
                               || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "ACTINOPTERYGII".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"                       ",
                    @"     \\\\\\\'.,~~.,    ",
                    @"   \\'             '@, ",
                    @"  \'   ,_,.- '  _,.~-.'",
                    @" \' ///     {  <.,___, ",
                    @"|- //        {______/  ",
                    @" \_\.                  ",
                    @"  \______________>     "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AMPHIBIA".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AMPHIBIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"            ___        ",
                     @"     _,- ''   { ''@-._,",
                     @"  , '         . _-w-wv'",
                     @" /    _{  /__  ),.~''  ",
                     @"|\ }/' \_m   \_m       ",
                     @" \{\                   ",
                     @"  \{                   ",
                     @"    \>                 "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AVES".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AVES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"                 _     ",
                     @"               ( @\__  ",
                     @"         __    |.-www' ",
                     @"      <-<<-<<\/ /      ",
                     @"   <-<-<-<<   \ |      ",
                     @" <<-<-<-<</____/       ",
                     @" <-<  |/'              ",
                     @"      \\<m             "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "CHONDRICTHYES".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "CHONDRICTHYES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"            ,~~~,      ",
                    @"\          __) (__.,   ",
                    @"\\     ^-'          @\ ",
                    @" } \,-' ,________{{  _}",
                    @" } ',-.,_  -___  .--'  ",
                    @" / /  /  \/  /| /      ",
                    @"| /      '  ' |/       ",
                    @"|/            '        "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "MAMMALIA".ToLower()
                             || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "MAMMALIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"           _--,.-~^'@. ",
                    @"      _ - '    -   ,_,}",
                    @"  ,~'       \   };'    ",
                    @" /          .{  }      ",
                    @"/  \      ,.'| /'      ",
                    @" \  },.~'     \ |      ",
                    @" / /           \\      ",
                    @" m'             w      "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "REPTILIA".ToLower()
                           || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "REPTILIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"             ^\  ,_    ",
                    @"    ^^^^^^^^^^^^'  @'\ ",
                    @"  ^^    ^^^^^^    ____}",
                    @" ^^   _{  /___{ /'     ",
                    @"^\^}/' \_m    \_m      ",
                    @" ^{\                   ",
                    @"   ^{\                 ",
                    @"     ^{\>              "
                },
                };
                        }
                    }
                    else if (item.levelTier == 4)
                    {
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "ACTINOPTERYGII".ToLower()
                               || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "ACTINOPTERYGII".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"        ,-~.,_     ~,  ",
                    @"      \'      ', //  \ ",
                    @"\\  \'   \\\    ';_   ;",
                    @"\\\\      \\   @/>'   *",
                    @" \\          //>       ",
                    @"   ',       />       ^ ",
                    @"     ',     \_^_^_^_/| ",
                    @"       '.,___________/ "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AMPHIBIA".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AMPHIBIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"          _-~~~.,      ",
                     @"      ,-' o  ~  ~(@-,  ",
                     @"    .' ~  ~  o   ,___) ",
                     @"  ,' o  o           ;  ",
                     @" .;   ~   o   /,- ,'   ",
                     @"( \ ) o      /   ,'    ",
                     @"{ ,_}        ({  }     ",
                     @" \__m-____,-' {__m     "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "AVES".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "AVES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                     @"           _ _         ",
                     @"      \ \-\ \ \\       ",
                     @"      \-\-\-\-\        ",
                     @"      <<<<\<\<\        ",
                     @"        <<<\<\<\       ",
                     @"   <<<< ~'< < \ '-._   ",
                     @"    <<<\\_       -,-@_>",
                     @"        m '-.,__/      "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "CHONDRICTHYES".ToLower()
                              || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "CHONDRICTHYES".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"             |\       ",
                    @"|\         __) \__.,   ",
                    @"\ \    .-'          @-_",
                    @" } \,-',________}} ___/",
                    @" }  >-.,_______  .--'  ",
                    @" } /          | /      ",
                    @"/ /           |/       ",
                    @"|/            '        "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "MAMMALIA".ToLower()
                             || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "MAMMALIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"     _.--._.---.       ",
                    @"   .'           'q,    ",
                    @"  /                \^  ",
                    @" /              \.  @\^",
                    @"{'   )       ) _/ \___/",
                    @"  \  }'~-.--' \ }      ",
                    @"  / /          ||      ",
                    @"  m'            m      "
                },
                };
                        }
                        if (item.name == meeba.name && currentDNAMeeba.name == meeba.name && playerStats.vertExpertise.ToLower() == "REPTILIA".ToLower()
                           || item.name == meeba2.name && currentDNAMeeba.name == meeba2.name && playerStats.vertExpertise2.ToLower() == "REPTILIA".ToLower())
                        {
                            item.sprite = new string[1, 8]
                {
                {
                    @"                 ___   ",
                    @"    ^^^^^^^^^^^^' @ '-,",
                    @"  ^^^^^^^^^^^^^   wVwvw",
                    @" ^^^^^_{  /__{  /~~---'",
                    @"^\^}/' \__m  \__m      ",
                    @" ^{\                   ",
                    @"   ^{\                 ",
                    @"     ^{\>              "
                },
                };
                        }
                    }
                }
            }
        }

        public void UpdateEXP()
        {
            foreach (KeyValuePair<int, int> level in Levels) //updates player level
            {
                if (playerStats.playerCurrentExp >= level.Key)
                {
                    playerStats.playerLevel = level.Value;
                }
            }
        }

        public void battle()
        {
            animFade(); //Intro fading animation
            Console.BackgroundColor = ConsoleColor.Black;
            Console.ForegroundColor = ConsoleColor.Gray;
            Console.Clear();

            EnemyChoiceBattle(); //Chooses 3 enemies from list of enemies in the current area

            opponentOne.ID = 1;
            opponentTwo.ID = 2;
            opponentThree.ID = 3;

            //Chooses a random adjective from a list to add to the enemy's name
            randomMember1 = random.Next(enemyAdjectives.Length);
            randomMember2 = random.Next(enemyAdjectives.Length);
            randomMember3 = random.Next(enemyAdjectives.Length);

            //Sets enemies as active or inactive depending on how many enemies you are facing in the current battle
            int numberOfOpponents = random.Next(1, 4);
            if (numberOfOpponents == 1 || miniBossBattle == true)
            {
                opponentOne.active = true;
                opponentTwo.active = false;
                opponentTwo.HP = 0;
                opponentThree.active = false;
                opponentThree.HP = 0;
            }
            else if (numberOfOpponents == 2)
            {
                opponentOne.active = true;
                opponentTwo.active = true;
                opponentThree.active = false;
                opponentThree.HP = 0;
            }
            else if (numberOfOpponents == 3)
            {
                opponentOne.active = true;
                opponentTwo.active = true;
                opponentThree.active = true;
            }
            if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton cave")
            {
                opponentThree.active = false;
                opponentThree.HP = 0;
            }

            VSScreen(); //Vs Screen

            ThisBattleMeebas.Clear();
            if (storyCounter >= 2)
            {
                ThisBattleMeebas.Add(meeba);
                ThisBattleMeebas.Add(meeba2);
            }

            ColourResetGray(); //resets colour to gray from previous battle

            currentState = BattleState.Options;  //Resets battlestate           

            playerStats.hasTakenTurn = false;
            opponentOne.hasTakenTurn = false;
            opponentTwo.hasTakenTurn = false;
            opponentThree.hasTakenTurn = false;
            meeba.hasTakenTurn = false;
            meeba.hasTakenTurn = false;

            //stat change variables
            playerStats.tempDefenseStatChange = playerStats.playerMaxDefense; //semi-permanent stat increases, reset at start of each battle
            meeba.tempDefenseStatChange = meeba.defense;
            meeba2.tempDefenseStatChange = meeba2.defense;
            opponentOne.tempDefenseStatChange = opponentOne.defense;
            opponentTwo.tempDefenseStatChange = opponentTwo.defense;
            opponentThree.tempDefenseStatChange = opponentThree.defense;

            playerStats.tempAttack = playerStats.playerMaxStrength;
            meeba.tempAttack = meeba.attack;
            meeba2.tempAttack = meeba2.attack;
            opponentOne.tempAttack = opponentOne.strength;
            opponentTwo.tempAttack = opponentTwo.strength;
            opponentThree.tempAttack = opponentThree.strength;

            playerStats.tempSpeed = playerStats.playerMaxSpeed;
            meeba.tempSpeed = meeba.speed;
            meeba2.tempSpeed = meeba2.speed;
            opponentOne.tempSpeedStatChange = opponentOne.speed;
            opponentTwo.tempSpeedStatChange = opponentTwo.speed;
            opponentThree.tempSpeedStatChange = opponentThree.speed;

            playerStats.tempAccuracy = playerStats.playerAccuracy;
            meeba.tempAccuracy = meeba.currentMove.accuracy;
            meeba2.tempAccuracy = meeba2.currentMove.accuracy;
            opponentOne.tempAccuracy = opponentOne.accuracy;
            opponentTwo.tempAccuracy = opponentTwo.accuracy;
            opponentThree.tempAccuracy = opponentThree.accuracy;

            playerStats.tempDefense = playerStats.tempDefenseStatChange; //defend mode in battle, rather than stat increase, reset each options loop
            meeba.tempDefense = meeba.tempDefenseStatChange;
            meeba2.tempDefense = meeba2.tempDefenseStatChange;
            opponentOne.tempDefense = opponentOne.tempDefenseStatChange;
            opponentTwo.tempDefense = opponentTwo.tempDefenseStatChange;
            opponentThree.tempDefense = opponentThree.tempDefenseStatChange;

            opponentOne.ranAway = false;
            opponentTwo.ranAway = false;
            opponentThree.ranAway = false;

            meeba.CycloneCounter = 0;
            meeba2.CycloneCounter = 0;
            opponentOne.CycloneCounter = 0;
            opponentTwo.CycloneCounter = 0;
            opponentThree.CycloneCounter = 0;
            meeba.DustDevilCounter = 0;
            meeba2.DustDevilCounter = 0;
            opponentOne.DustDevilCounter = 0;
            opponentTwo.DustDevilCounter = 0;
            opponentThree.DustDevilCounter = 0;
            meeba.SnowStormCounter = 0;
            meeba2.SnowStormCounter = 0;
            opponentOne.SnowStormCounter = 0;
            opponentTwo.SnowStormCounter = 0;
            opponentThree.SnowStormCounter = 0;
            meeba.PyroclasticFlowCounter = 0;
            meeba2.PyroclasticFlowCounter = 0;
            opponentOne.PyroclasticFlowCounter = 0;
            opponentTwo.PyroclasticFlowCounter = 0;
            opponentThree.PyroclasticFlowCounter = 0;

            PlayAnimation();

            do //Main battle loop
            {
                Dictionary<string, double> battleSpeedsTemp = new Dictionary<string, double>(); //Battle speeds
                battleSpeedsTemp.Add("Player", playerStats.tempSpeed); //Set in main loop incase of stat changes mid-battle
                battleSpeedsTemp.Add("Opponent1", opponentOne.tempSpeedStatChange);
                battleSpeedsTemp.Add("Opponent2", opponentTwo.tempSpeedStatChange);
                battleSpeedsTemp.Add("Opponent3", opponentThree.tempSpeedStatChange);
                if (storyCounter >= 2) //fix all 
                {
                    battleSpeedsTemp.Add("Meeba1", meeba.tempSpeed);
                    battleSpeedsTemp.Add("Meeba2", meeba2.tempSpeed);
                }

                List<string> battleSpeeds = new List<string> { }; //Sorts speeds by descending and adds to a list
                foreach (var speeds in battleSpeedsTemp.OrderByDescending(key => key.Value))
                    battleSpeeds.Add(speeds.Key);

                Console.Clear();
                AllHPBars(); //assigns correct hp bar status to hp bar string for each opponent and ally
                AllMPBars();
                BattleSpriteRender(); //draws opponent, hp bars, and ally sprites
                Thread.Sleep(400);
                
                //meeba damage - updates based on current stats
                damageCalcAllyAttacking = 1 + Math.Round((((tempAllyAttack / tempOppDefense) * tempAllyMoveBasePower * tempAllyItemBonus * tempAllyTypeAdv * tempAllySTAB) / 100) * tempAllyHit); //how much damage opponent takes from ally
                damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit); //how much damage ally takes from opponent
                                                                                                                                                                                            //player damage
                damageCalcPlayerAttacking = 1 + Math.Round((((playerStats.tempAttack / (tempOppDefense/4)) * (playerStats.playerLevel / 2) * tempPlayerTypeAdv * tempAllyItemBonus) / 100) * tempAllyHit);

                if (currentState == BattleState.Exit)
                    break;

                switch (currentState) //Main switch-case loop
                {
                    case BattleState.Options:

                        resetStats(); //checks who is active, and resets defensive and targets
                        if (playerStats.isAsleep != true)
                            PlayerChoice(); //Player choice is made
                        if (resetMenu == true)
                        {
                            resetMenu = false;
                            break;
                        }
                        Console.Clear();
                        BattleSpriteRender();
                        if (storyCounter >= 2)
                        {
                            for (int j = 0; j < 2; j++) //Meeba choices are made
                            {
                                if (j == 0)
                                {
                                    meeba.isCurrent = true;
                                    meeba2.isCurrent = false;
                                }
                                else if (j == 1)
                                {
                                    meeba.isCurrent = false;
                                    meeba2.isCurrent = true;
                                }
                                MeebaChoice();
                                if (resetMenu == true)
                                {
                                    resetMenu = false;
                                    break;

                                }
                                Console.Clear();
                                BattleSpriteRender();
                            }
                        }
                        if (resetMenu == true)
                        {
                            resetMenu = false;
                            break;

                        }
                        EnemyAIChoice(); //Enemy choices are made
                        StatusChangeChecks(); //checks for poison, stun, sleep, status protect, damage protect, and cyclone, dust devil counters
                        PyroclasticFlowCheck(); //Checks Pyroclastic Flow Counter and attacks if necessary
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        break;

                    case BattleState.SpeedComparison:
                        ColourResetGray(); //sets all to gray
                        if (playerStats.playerCurrentHP <= 0)
                        {
                            currentState = BattleState.Lose;
                            break;
                        }
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                        {
                            currentState = BattleState.Win;
                            break;
                        }
                        if (playerStats.defensive == true && playerStats.hasTakenTurn != true)
                        {
                            if (playerStats.MoveChoice == 3)
                            {
                                currentState = BattleState.Defend;
                                playerStats.textColour = ConsoleColor.Yellow;
                            }
                            else if (playerStats.MoveChoice == 4)
                                currentState = BattleState.Run;
                            break;
                        }
                        if (meeba.defensive == true && meeba.hasTakenTurn != true && storyCounter >= 2)
                        {
                            currentState = BattleState.MeebaOneDefend;
                            meeba.textColour = ConsoleColor.Yellow;
                            break;
                        }
                        if (meeba2.defensive == true && meeba2.hasTakenTurn != true && storyCounter >= 2)
                        {
                            currentState = BattleState.MeebaTwoDefend;
                            meeba2.textColour = ConsoleColor.Yellow;
                            break;
                        }
                        if (opponentOne.defensive == true && opponentOne.hasTakenTurn != true)
                        {
                            if (opponentOne.choice == 2)
                            {
                                currentState = BattleState.EnemyOneDefend;
                                opponentOne.textColour = ConsoleColor.Yellow;
                            }
                            else if (opponentOne.choice == 3)
                                currentState = BattleState.EnemyOneRun;
                            break;
                        }
                        if (opponentTwo.defensive == true && opponentTwo.hasTakenTurn != true)
                        {
                            if (opponentTwo.choice == 2)
                            {
                                currentState = BattleState.EnemyTwoDefend;
                                opponentTwo.textColour = ConsoleColor.Yellow;
                            }
                            else if (opponentTwo.choice == 3)
                                currentState = BattleState.EnemyTwoRun;
                            break;
                        }
                        if (opponentThree.defensive == true && opponentThree.hasTakenTurn != true)
                        {
                            if (opponentThree.choice == 2)
                            {
                                currentState = BattleState.EnemyThreeDefend;
                                opponentThree.textColour = ConsoleColor.Yellow;
                            }

                            else if (opponentThree.choice == 3)
                                currentState = BattleState.EnemyThreeRun;
                            break;
                        }
                        for (int i = 0; i < 7; i++)
                        {
                            if (i == 6)
                            {
                                currentState = BattleState.Options;
                                break;
                            }
                            if (i == 4 && storyCounter < 2)
                            {
                                currentState = BattleState.Options;
                                break;
                            }
                            else if (battleSpeeds[i] == "Player" && playerStats.hasTakenTurn == false && playerStats.playerCurrentHP > 0)
                            {
                                currentState = BattleState.PlayerMove;
                                break;
                            }
                            else if (battleSpeeds[i] == "Opponent1" && opponentOne.hasTakenTurn == false && opponentOne.HP > 0)
                            {
                                currentState = BattleState.EnemyOneMove;
                                break;
                            }
                            else if (battleSpeeds[i] == "Opponent2" && opponentTwo.hasTakenTurn == false && opponentTwo.HP > 0)
                            {
                                currentState = BattleState.EnemyTwoMove;
                                break;
                            }
                            else if (battleSpeeds[i] == "Opponent3" && opponentThree.hasTakenTurn == false && opponentThree.HP > 0)
                            {
                                currentState = BattleState.EnemyThreeMove;
                                break;
                            }
                            else if (battleSpeeds[i] == "Meeba1" && meeba.hasTakenTurn == false && meeba.currentHp > 0)
                            {
                                currentState = BattleState.MeebaOneMove;
                                break;
                            }
                            else if (battleSpeeds[i] == "Meeba2" && meeba2.hasTakenTurn == false && meeba2.currentHp > 0)
                            {
                                currentState = BattleState.MeebaTwoMove;
                                break;
                            }
                            else if (playerStats.hasTakenTurn == true && opponentOne.hasTakenTurn == true && opponentTwo.hasTakenTurn == true && opponentThree.hasTakenTurn == true && meeba.hasTakenTurn == true && meeba2.hasTakenTurn == true)
                            {
                                currentState = BattleState.Options;
                                break;
                            }
                        }
                        break;

                    case BattleState.Run:
                        playerRun();
                        break;

                    case BattleState.Defend:
                        playerDefend();
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyOneMove:
                        enemyMove();
                        break;

                    case BattleState.EnemyOneAttack:
                        if (opponentOne.choice == 1)
                            EnemyAttack();
                        else if (opponentOne.choice == 4)
                        {
                            if (opponentOne.currentMove.attackType == "Offensive" || opponentOne.currentMove.attackType == "OffensiveAll"
                                || opponentOne.currentMove.attackType == "OffensiveAndDefensive" || opponentOne.currentMove.attackType == "OffensiveAndDefensiveAll")
                                EnemyOffensiveAttack();
                            if (opponentOne.currentMove.attackType == "Defensive" || opponentOne.currentMove.attackType == "DefensiveAll"
                                || opponentOne.currentMove.attackType == "OffensiveAndDefensive" || opponentOne.currentMove.attackType == "OffensiveAndDefensiveAll")
                                EnemyDefensiveAttack();
                        }
                        opponentOne.hasTakenTurn = true;
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyOneDefend:
                        enemyDefend();
                        currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyOneRun:
                        enemyRun();
                        break;

                    case BattleState.EnemyTwoMove:
                        enemyMove();
                        break;

                    case BattleState.EnemyTwoAttack:
                        if (opponentTwo.choice == 1)
                            EnemyAttack();
                        else if (opponentTwo.choice == 4)
                        {
                            if (opponentTwo.currentMove.attackType == "Offensive" || opponentTwo.currentMove.attackType == "OffensiveAll"
                                || opponentTwo.currentMove.attackType == "OffensiveAndDefensive" || opponentTwo.currentMove.attackType == "OffensiveAndDefensiveAll")
                                EnemyOffensiveAttack();
                            if (opponentTwo.currentMove.attackType == "Defensive" || opponentTwo.currentMove.attackType == "DefensiveAll"
                                || opponentTwo.currentMove.attackType == "OffensiveAndDefensive" || opponentTwo.currentMove.attackType == "OffensiveAndDefensiveAll")
                                EnemyDefensiveAttack();
                        }
                        opponentTwo.hasTakenTurn = true;
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyTwoDefend:
                        enemyDefend();
                        currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyTwoRun:
                        enemyRun();
                        break;

                    case BattleState.EnemyThreeMove:
                        enemyMove();
                        break;

                    case BattleState.EnemyThreeAttack:
                        if (opponentThree.choice == 1)
                            EnemyAttack();
                        else if (opponentThree.choice == 4)
                        {
                            if (opponentThree.currentMove.attackType == "Offensive" || opponentThree.currentMove.attackType == "OffensiveAll"
                                || opponentThree.currentMove.attackType == "OffensiveAndDefensive" || opponentThree.currentMove.attackType == "OffensiveAndDefensiveAll")
                                EnemyOffensiveAttack();
                            if (opponentThree.currentMove.attackType == "Defensive" || opponentThree.currentMove.attackType == "DefensiveAll"
                                || opponentThree.currentMove.attackType == "OffensiveAndDefensive" || opponentThree.currentMove.attackType == "OffensiveAndDefensiveAll")
                                EnemyDefensiveAttack();
                        }
                        opponentThree.hasTakenTurn = true;
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyThreeDefend:
                        enemyDefend();
                        currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.EnemyThreeRun:
                        enemyRun();
                        break;

                    case BattleState.PlayerMove:
                        playerStats.textColour = ConsoleColor.Yellow;
                        if (playerStats.MoveChoice == 1)
                        {
                            currentState = BattleState.PlayerAttack;
                            if (opponentOne.playerTarget == true)
                                opponentOne.textColour = ConsoleColor.Red;
                            if (opponentTwo.playerTarget == true)
                                opponentTwo.textColour = ConsoleColor.Red;
                            if (opponentThree.playerTarget == true)
                                opponentThree.textColour = ConsoleColor.Red;
                            if (meeba.playerTarget == true)
                                meeba.textColour = ConsoleColor.Green;
                            if (meeba2.playerTarget == true)
                                meeba2.textColour = ConsoleColor.Green;
                            if (playerStats.playerTarget == true)
                                playerStats.textColour = ConsoleColor.Green;
                        }
                        else if (playerStats.MoveChoice == 2)
                        {
                            currentState = BattleState.PlayerItem;
                            if (meeba.playerTarget == true)
                                meeba.textColour = ConsoleColor.Green;
                            if (meeba2.playerTarget == true)
                                meeba2.textColour = ConsoleColor.Green;
                            if (playerStats.playerTarget == true)
                                playerStats.textColour = ConsoleColor.Green;
                        }
                        break;

                    case BattleState.PlayerAttack:
                        playerAttack();
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.PlayerItem: //Add all item types to this
                        playerItem();
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP == 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.MeebaOneMove:
                        meeba.textColour = ConsoleColor.Yellow;
                        if (meeba.battleChoice == 1)
                        {
                            currentState = BattleState.MeebaOneSpecial;
                            if (opponentOne.meeba1Target == true && meeba.currentMove.name != "Pyroclastic Flow")
                                opponentOne.textColour = ConsoleColor.Red;
                            if (opponentTwo.meeba1Target == true && meeba.currentMove.name != "Pyroclastic Flow")
                                opponentTwo.textColour = ConsoleColor.Red;
                            if (opponentThree.meeba1Target == true && meeba.currentMove.name != "Pyroclastic Flow")
                                opponentThree.textColour = ConsoleColor.Red;
                            if (meeba.meeba1Target == true)
                                meeba.textColour = ConsoleColor.Green;
                            if (meeba2.meeba1Target == true)
                                meeba2.textColour = ConsoleColor.Green;
                            if (playerStats.meeba1Target == true)
                                playerStats.textColour = ConsoleColor.Green;
                        }
                        else if (meeba.battleChoice == 2)
                            currentState = BattleState.MeebaOneDefend;
                        break;

                    case BattleState.MeebaOneSpecial:
                        meeba.hasTakenTurn = true;
                        if (meeba.currentMove.attackType == "Offensive") //Attacking enemies
                        {
                            MeebaOffensiveAttack();
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                        }

                        else if (meeba.currentMove.attackType == "OffensiveAll")
                        {
                            foreach (var item in ThisBattleEnemies)
                            {
                                MeebaOffensiveAttack();
                                item.meeba1Target = false;
                            }
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                        }
                        else if (meeba.currentMove.attackType == "Defensive" || meeba.currentMove.attackType == "DefensiveAll")
                        {
                            if (playerStats.meeba1Target == true) //if meeba has targeted player
                                meebaDefensiveAttackPlayerTarget();
                            if (meeba.meeba1Target == true || meeba2.meeba1Target == true) //if meeba has targeted self or other meeba
                                meebaDefensiveAttack();
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                            break;
                        }
                        else if (meeba.currentMove.attackType == "OffensiveAndDefensive" || meeba.currentMove.attackType == "OffensiveAndDefensiveAll")
                        {
                            MeebaOffensiveAttack();
                            if (playerStats.meeba1Target == true) //if meeba has targeted player
                                meebaDefensiveAttackPlayerTarget();
                            if (meeba.meeba1Target == true || meeba2.meeba1Target == true) //if meeba has targeted self or other meeba
                                meebaDefensiveAttack();
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                            break;
                        }
                        else
                            currentState = BattleState.SpeedComparison;

                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.MeebaOneDefend:
                        MeebaDefend();
                        currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.MeebaTwoMove:
                        meeba2.textColour = ConsoleColor.Yellow;
                        if (meeba2.battleChoice == 1)
                        {
                            currentState = BattleState.MeebaTwoSpecial;
                            if (opponentOne.meeba2Target == true && meeba2.currentMove.name != "Pyroclastic Flow")
                                opponentOne.textColour = ConsoleColor.Red;
                            if (opponentTwo.meeba2Target == true && meeba2.currentMove.name != "Pyroclastic Flow")
                                opponentTwo.textColour = ConsoleColor.Red;
                            if (opponentThree.meeba2Target == true && meeba2.currentMove.name != "Pyroclastic Flow")
                                opponentThree.textColour = ConsoleColor.Red;
                            if (meeba.meeba2Target == true)
                                meeba.textColour = ConsoleColor.Green;
                            if (meeba2.meeba2Target == true)
                                meeba2.textColour = ConsoleColor.Green;
                            if (playerStats.meeba2Target == true)
                                playerStats.textColour = ConsoleColor.Green;
                        }
                        else if (meeba2.battleChoice == 2)
                            currentState = BattleState.MeebaTwoDefend;
                        break;

                    case BattleState.MeebaTwoSpecial:
                        meeba2.textColour = ConsoleColor.Gray;
                        meeba2.hasTakenTurn = true;
                        if (meeba2.currentMove.attackType == "Offensive") //Attacking enemies
                        {
                            MeebaOffensiveAttack();
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;

                        }
                        else if (meeba2.currentMove.attackType == "OffensiveAll")
                        {
                            foreach (var item in ThisBattleEnemies)
                            {
                                MeebaOffensiveAttack();
                                item.meeba2Target = false;
                            }
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                        }
                        else if (meeba2.currentMove.attackType == "Defensive" || meeba2.currentMove.attackType == "DefensiveAll")
                        {
                            if (playerStats.meeba2Target == true) //if meeba has targeted player
                                meebaDefensiveAttackPlayerTarget();
                            if (meeba.meeba2Target == true || meeba2.meeba2Target == true) //if meeba has targeted self or other meeba
                                meebaDefensiveAttack();
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                            break;
                        }
                        else if (meeba2.currentMove.attackType == "OffensiveAndDefensive" || meeba2.currentMove.attackType == "OffensiveAndDefensiveAll")
                        {
                            MeebaOffensiveAttack();
                            if (playerStats.meeba2Target == true) //if meeba has targeted player
                                meebaDefensiveAttackPlayerTarget();
                            if (meeba.meeba2Target == true || meeba2.meeba2Target == true) //if meeba has targeted self or other meeba
                                meebaDefensiveAttack();
                            if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                currentState = BattleState.Win;
                            else if (playerStats.playerCurrentHP <= 0)
                                currentState = BattleState.Lose;
                            else
                                currentState = BattleState.SpeedComparison;
                            break;
                        }
                        else
                            currentState = BattleState.SpeedComparison;
                        if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                            currentState = BattleState.Win;
                        else if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        else
                            currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.MeebaTwoDefend:
                        MeebaDefend();
                        currentState = BattleState.SpeedComparison;
                        break;

                    case BattleState.Win:
                        Console.ForegroundColor = ConsoleColor.Gray;
                        Console.WriteLine("You won!");
                        Thread.Sleep(1000);
                        if (miniBossBattle == true)
                        {
                            miniBossBattle = false;
                            miniBossOneDefeat = true;
                            WorldMapCells[3][31].lookArrayNumber = 1;
                            WorldMapCells[3][34].lookArrayNumber = 1;
                        }
                        currentState = BattleState.Summary;
                        break;

                    case BattleState.Lose:
                        Console.ForegroundColor = ConsoleColor.Gray;
                        Console.WriteLine("You ran out of HP! \nYou escape from the battle quickly and make your way back to a safe place.");
                        Thread.Sleep(2000);
                        Console.Clear();
                        playerStats.playerCurrentExp -= (playerStats.playerCurrentExp * playerStats.playerCurrentExp);
                        TurnOffTorch();
                        if (CurrentMap == 0 || CurrentMap == 1 || CurrentMap == 2 || CurrentMap == 3 || CurrentMap == 4)
                        {
                            CurrentMap = 0; //Rifton
                            CurrentLocation = 15;
                        }
                        else if (CurrentMap == 5 || CurrentMap == 6 || CurrentMap == 7 || CurrentMap == 8 || CurrentMap == 9 || CurrentMap == 10 || CurrentMap == 11 || CurrentMap == 12 || CurrentMap == 13 || CurrentMap == 14 || CurrentMap == 15 || CurrentMap == 17 || CurrentMap == 18 || CurrentMap == 20 || CurrentMap == 21 || CurrentMap == 23 || CurrentMap == 24 || CurrentMap == 26 || CurrentMap == 27)
                        {
                            CurrentMap = 5; //Karstbay
                            CurrentLocation = 64;
                        }
                        else if (CurrentMap == 16 || CurrentMap == 29 || CurrentMap == 30 || CurrentMap == 31 || CurrentMap == 44 || CurrentMap == 45 || CurrentMap == 46)
                        {
                            CurrentMap = 16; //Laharva
                            CurrentLocation = 87;
                        }
                        else if (CurrentMap == 19 || CurrentMap == 32 || CurrentMap == 33 || CurrentMap == 34 || CurrentMap == 47 || CurrentMap == 48 || CurrentMap == 49)
                        {
                            CurrentMap = 19; //Arbelle
                            CurrentLocation = 45;
                        }
                        else if (CurrentMap == 22 || CurrentMap == 35 || CurrentMap == 36 || CurrentMap == 37 || CurrentMap == 50 || CurrentMap == 51 || CurrentMap == 52)
                        {
                            CurrentMap = 22; //Graben
                            CurrentLocation = 43;
                        }
                        else if (CurrentMap == 25 || CurrentMap == 38 || CurrentMap == 39 || CurrentMap == 40 || CurrentMap == 53 || CurrentMap == 54 || CurrentMap == 55)
                        {
                            CurrentMap = 25; //Mesetra
                            CurrentLocation = 44;
                        }
                        else if (CurrentMap == 28 || CurrentMap == 41 || CurrentMap == 42 || CurrentMap == 43 || CurrentMap == 56 || CurrentMap == 57 || CurrentMap == 58)
                        {
                            CurrentMap = 28; //Corallos
                            CurrentLocation = 64;
                        }
                        else if (CurrentMap == 59 || CurrentMap == 60 || CurrentMap == 61 || CurrentMap == 62 || CurrentMap == 63 || CurrentMap == 64 || CurrentMap == 65 || CurrentMap == 66)
                        {
                            CurrentMap = 59; //Corallos
                            CurrentLocation = 40; //CHANGE
                        }
                        fullHeal();
                        currentState = BattleState.Exit;
                        break;

                    case BattleState.Summary:
                        Console.ForegroundColor = ConsoleColor.Gray;
                        int money = 0;
                        double newExp = playerStats.playerCurrentExp;
                        foreach (var item in ThisBattleEnemies)
                        {
                            if (item.active == true && item.ranAway != true)
                            {
                                money += item.money;
                                newExp += item.exp; //Level up/Exp
                            }
                        }
                        Console.WriteLine(playerStats.name + " earned " + money + " Ayu from monster research for the lab.");
                        Thread.Sleep(1500);
                        playerStats.playerMoney += money;
                        int newlevel = 0;
                        foreach (KeyValuePair<int, int> level in Levels)
                        {
                            if (newExp >= level.Key)
                                newlevel = level.Value;
                        }
                        double allEXP = 0;
                        foreach (var item in ThisBattleEnemies)
                        {
                            if (item.active == true && item.ranAway != true)
                                allEXP += item.exp;
                        }
                        Console.WriteLine("You gained {0} Exp!", allEXP);
                        if (newlevel != playerStats.playerLevel)
                        {
                            Console.WriteLine("You gained a level!");
                            Thread.Sleep(1500);
                            playerStats.playerLevel = newlevel;
                        }
                        playerStats.playerCurrentExp = playerStats.playerCurrentExp + allEXP;
                        FoundItems(); //collect dropped items
                        Thread.Sleep(2000);
                        Console.Clear();
                        currentState = BattleState.Exit;
                        break;

                    case BattleState.Exit:
                        break;
                }
            } while (currentState != BattleState.Exit);
            ThisBattleEnemies.Clear();

            Console.BackgroundColor = backgroundColour;
            Console.ForegroundColor = foregroundColour;
            Console.Clear();
        }

        public void EnemyChoiceBattle()
        {
            if (miniBossBattle == true)
            {
                opponentOne = new Charcoal1b();
                ThisBattleEnemies.Add(opponentOne);
                opponentOne.name = "Bryofighter";
            }
            else
            {
                List<Enemy> AllEnemies1 = new List<Enemy>() //update with all enemies
                {
                    new Fire1a(), new Fire1b(), new Fire2a(), new Fire2b(), new Fire3a(), new Fire3b(), new Fire4a(), new Fire4b(),
                    new Plant1a(), new Plant1b(), new Plant2a(), new Plant2b(), new Plant3a(), new Plant3b(), new Plant4a(), new Plant4b(),
                    new Earth1a(), new Earth1b(), new Earth2a(), new Earth2b(), new Earth3a(), new Earth3b(), new Earth4a(), new Earth4b(),
                    new Air1a(), new Air1b(), new Air2a(), new Air2b(), new Air3a(), new Air3b(), new Air4a(), new Air4b(),
                    new Water1a(), new Water1b(), new Water2a(), new Water2b(), new Water3a(), new Water3b(), new Water4a(), new Water4b(),
                    new Charcoal1a(), new Charcoal1b(), new Charcoal2(), new Charcoal3(), new Charcoal4(),
                    new Moss1a(), new Moss1b(), new Moss2(), new Moss3(), new Moss4(),
                    new Dust1a(), new Dust1b(), new Dust2(), new Dust3(), new Dust4(),
                    new Storm1a(), new Storm1b(), new Storm2(), new Storm3(), new Storm4(),
                    new Hydrotherm1a(), new Hydrotherm1b(), new Hydrotherm2(), new Hydrotherm3(), new Hydrotherm4()
                };
                List<Enemy> CurrentEnemies1 = new List<Enemy>() { };
                foreach (var Enemy1 in AllEnemies1)
                {
                    if (Enemy1.area.Contains(WorldMapCells[CurrentMap][CurrentLocation].mapName))
                        CurrentEnemies1.Add(Enemy1);
                };
                int n = random.Next(0, CurrentEnemies1.Count());
                opponentOne = CurrentEnemies1[n];
                int name1 = random.Next(0, opponentOne.names.Count());
                opponentOne.name = opponentOne.names[name1];

                if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton cave")
                {
                    opponentOne.strength *= 0.5;
                    opponentOne.defense *= 0.5;
                    opponentOne.speed *= 0.5;
                    opponentOne.HP *= 0.5;
                    opponentOne.MaxHP = opponentOne.HP;
                    opponentOne.MP *= 0.5;
                    opponentOne.MaxMP = opponentOne.MP;
                }
                ThisBattleEnemies.Add(opponentOne);

                List<Enemy> AllEnemies2 = new List<Enemy>() //update with all enemies
                {
                   new Fire1a(), new Fire1b(), new Fire2a(), new Fire2b(), new Fire3a(), new Fire3b(), new Fire4a(), new Fire4b(),
                    new Plant1a(), new Plant1b(), new Plant2a(), new Plant2b(), new Plant3a(), new Plant3b(), new Plant4a(), new Plant4b(),
                    new Earth1a(), new Earth1b(), new Earth2a(), new Earth2b(), new Earth3a(), new Earth3b(), new Earth4a(), new Earth4b(),
                    new Air1a(), new Air1b(), new Air2a(), new Air2b(), new Air3a(), new Air3b(), new Air4a(), new Air4b(),
                    new Water1a(), new Water1b(), new Water2a(), new Water2b(), new Water3a(), new Water3b(), new Water4a(), new Water4b(),
                    new Charcoal1a(), new Charcoal1b(), new Charcoal2(), new Charcoal3(), new Charcoal4(),
                    new Moss1a(), new Moss1b(), new Moss2(), new Moss3(), new Moss4(),
                    new Dust1a(), new Dust1b(), new Dust2(), new Dust3(), new Dust4(),
                    new Storm1a(), new Storm1b(), new Storm2(), new Storm3(), new Storm4(),
                    new Hydrotherm1a(), new Hydrotherm1b(), new Hydrotherm2(), new Hydrotherm3(), new Hydrotherm4()
                };
                List<Enemy> CurrentEnemies2 = new List<Enemy>() { };
                foreach (var Enemy2 in AllEnemies2)
                {
                    if (Enemy2.area.Contains(WorldMapCells[CurrentMap][CurrentLocation].mapName))
                        CurrentEnemies2.Add(Enemy2);
                };
                int o = random.Next(0, CurrentEnemies2.Count());
                opponentTwo = CurrentEnemies2[o];
                int name2 = random.Next(0, opponentTwo.names.Count());
                opponentTwo.name = opponentTwo.names[name2];
                if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton cave")
                {
                    opponentTwo.strength *= 0.5;
                    opponentTwo.defense *= 0.5;
                    opponentTwo.speed *= 0.5;
                    opponentTwo.HP *= 0.5;
                    opponentTwo.MaxHP = opponentTwo.HP;
                    opponentTwo.MP *= 0.5;
                    opponentTwo.MaxMP = opponentTwo.MP;
                }
                ThisBattleEnemies.Add(opponentTwo);

                List<Enemy> AllEnemies3 = new List<Enemy>() //update with all enemies
                {
                   new Fire1a(), new Fire1b(), new Fire2a(), new Fire2b(), new Fire3a(), new Fire3b(), new Fire4a(), new Fire4b(),
                    new Plant1a(), new Plant1b(), new Plant2a(), new Plant2b(), new Plant3a(), new Plant3b(), new Plant4a(), new Plant4b(),
                    new Earth1a(), new Earth1b(), new Earth2a(), new Earth2b(), new Earth3a(), new Earth3b(), new Earth4a(), new Earth4b(),
                    new Air1a(), new Air1b(), new Air2a(), new Air2b(), new Air3a(), new Air3b(), new Air4a(), new Air4b(),
                    new Water1a(), new Water1b(), new Water2a(), new Water2b(), new Water3a(), new Water3b(), new Water4a(), new Water4b(),
                    new Charcoal1a(), new Charcoal1b(), new Charcoal2(), new Charcoal3(), new Charcoal4(),
                    new Moss1a(), new Moss1b(), new Moss2(), new Moss3(), new Moss4(),
                    new Dust1a(), new Dust1b(), new Dust2(), new Dust3(), new Dust4(),
                    new Storm1a(), new Storm1b(), new Storm2(), new Storm3(), new Storm4(),
                    new Hydrotherm1a(), new Hydrotherm1b(), new Hydrotherm2(), new Hydrotherm3(), new Hydrotherm4()
                };
                List<Enemy> CurrentEnemies3 = new List<Enemy>() { };
                foreach (var Enemy3 in AllEnemies3)
                {
                    if (Enemy3.area.Contains(WorldMapCells[CurrentMap][CurrentLocation].mapName))
                        CurrentEnemies3.Add(Enemy3);
                };
                int p = random.Next(0, CurrentEnemies3.Count());
                opponentThree = CurrentEnemies3[p];
                int name3 = random.Next(0, opponentThree.names.Count());
                opponentThree.name = opponentThree.names[name3];
                if (WorldMapCells[CurrentMap][CurrentLocation].mapName == "rifton cave")
                {
                    opponentThree.strength *= 0.5;
                    opponentThree.defense *= 0.5;
                    opponentThree.speed *= 0.5;
                    opponentThree.HP *= 0.5;
                    opponentThree.MaxHP = opponentThree.HP;
                    opponentThree.MP *= 0.5;
                    opponentThree.MaxMP = opponentThree.MP;
                }
                ThisBattleEnemies.Add(opponentThree);
            }
            
        }

        public void VSScreen()
        {
            int width = Console.WindowWidth;
            int oppOneNameLength = opponentOne.name.Length + enemyAdjectives[randomMember1].Length + 2;
            int oppTwoNameLength = opponentTwo.name.Length + enemyAdjectives[randomMember2].Length + 2;
            if (opponentTwo.active == false)
                oppTwoNameLength = 0;
            int oppThreeNameLength = opponentThree.name.Length + enemyAdjectives[randomMember3].Length + 2;
            if (opponentThree.active == false)
                oppThreeNameLength = 0;
            int meeba1NameLength = meeba.name.Length + 2;
            if (meeba.gotMeeba == false || meeba.currentHp <= 0 || storyCounter < 2)
                meeba1NameLength = 0;
            int meeba2NameLength = meeba2.name.Length + 2;
            if (meeba2.gotMeeba == false || meeba2.currentHp <= 0 || storyCounter < 2)
                meeba2NameLength = 0;
            int playerNameLength = playerStats.name.Length + 2;
            int hashRowStartPos = (width - 70) / 2;
            int oppStartPos = (width - (oppOneNameLength + oppTwoNameLength + oppThreeNameLength)) / 2;
            int playerStartPos = 1 + (width - (playerNameLength + meeba1NameLength + meeba2NameLength)) / 2;
            int VSStartPos = (width - 3) / 2;
            Console.SetCursorPosition(hashRowStartPos, 1);
            Console.WriteLine("######################################################################");
            Thread.Sleep(600);
            Console.SetCursorPosition(oppStartPos, 3);
            Console.Write(enemyAdjectives[randomMember1] + " " + opponentOne.name);
            if (opponentTwo.active == true)
                Console.Write(" + " + enemyAdjectives[randomMember2] + " " + opponentTwo.name);
            if (opponentThree.active == true)
                Console.Write(" + " + enemyAdjectives[randomMember3] + " " + opponentThree.name);
            Thread.Sleep(150);
            Console.SetCursorPosition(VSStartPos, 4);
            Console.WriteLine("VS.");
            Thread.Sleep(150);
            Console.SetCursorPosition(playerStartPos, 5);
            Console.Write(playerStats.name);
            if (meeba.gotMeeba == true && meeba.currentHp > 0 && storyCounter >= 2)
                Console.Write(" + " + meeba.name);
            if (meeba2.gotMeeba == true && meeba2.currentHp > 0 && storyCounter >= 2)
                Console.Write(" + " + meeba2.name);
            Thread.Sleep(150);
            Console.SetCursorPosition(hashRowStartPos, 7);
            Console.WriteLine("######################################################################");
            Thread.Sleep(2500);
            Console.Clear();
        }

        public void BattleSpriteRender()
        {
            int width = Console.WindowWidth;
            //Enemy sprites
            for (int i = 0; i < 8; i++)
            {
                if (opponentOne.active == true && opponentOne.HP > 0)
                {
                    Console.ForegroundColor = opponentOne.textColour;
                    Console.Write(opponentOne.animation[0, i] + "     ");
                }
                else
                    Console.Write("                            ");
                if (opponentTwo.active == true && opponentTwo.HP > 0)
                {
                    Console.ForegroundColor = opponentTwo.textColour;
                    Console.Write(opponentTwo.animation[0, i] + "     ");
                }
                else
                    Console.Write("                            ");
                if (opponentThree.active == true && opponentThree.HP > 0)
                {
                    Console.ForegroundColor = opponentThree.textColour;
                    Console.Write(opponentThree.animation[0, i]);
                    Console.Write(new string(' ', (width - 79)));
                }
                else
                    Console.Write(new string(' ', (width - 56)));
            }

            //Enemy HP bars
            Console.ForegroundColor = ConsoleColor.Gray;
            if (opponentOne.active == true && opponentOne.HP > 0)
                Console.Write(Environment.NewLine + opponentOne.HPBar);
            else
                Console.Write(Environment.NewLine + "  " + "                     ");
            if (opponentTwo.active == true && opponentTwo.HP > 0)
                Console.Write("     " + opponentTwo.HPBar);
            else
                Console.Write("       " + "                     ");
            if (opponentThree.active == true && opponentThree.HP > 0)
            {
                Console.Write("     " + opponentThree.HPBar);
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }
            else
            {
                Console.Write("       " + "                     ");
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }

            //Enemy MP bars
            if (opponentOne.active == true && opponentOne.HP > 0)
                Console.Write(opponentOne.MPBar);
            else
                Console.Write("  " + "                     ");
            if (opponentTwo.active == true && opponentTwo.HP > 0)
                Console.Write("     " + opponentTwo.MPBar);
            else
                Console.Write("       " + "                     ");
            if (opponentThree.active == true && opponentThree.HP > 0)
            {
                Console.Write("     " + opponentThree.MPBar);
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }
            else
            {
                Console.Write("       " + "                     ");
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }

            //Player HP bar
            Console.CursorTop += 1;
            if (playerStats.playerCurrentHP > 0)
                Console.Write(Environment.NewLine + playerStats.HPBar);
            else
                Console.Write(Environment.NewLine + "  " + "                     ");

            //Meeba HP bars
            if (meeba.currentHp > 0 && meeba.gotMeeba == true && storyCounter >= 2)
                Console.Write("     " + meeba.HPBar);
            else
                Console.Write("       " + "                     ");
            if (meeba2.currentHp > 0 && meeba2.gotMeeba == true && storyCounter >= 2)
            {
                Console.Write("     " + meeba2.HPBar);
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }
            else
            {
                Console.Write("       " + "                     ");
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }

            //Player MP bar
            if (playerStats.playerCurrentHP > 0)
                Console.Write("MP|                    ");
            else
                Console.Write("                       ");

            //Meeba MP bars
            if (meeba.currentHp > 0 && meeba.gotMeeba == true && storyCounter >= 2)
                Console.Write("     " + meeba.MPBar);
            else
                Console.Write("       " + "                     ");
            if (meeba2.currentHp > 0 && meeba2.gotMeeba == true && storyCounter >= 2)
            {
                Console.Write("     " + meeba2.MPBar);
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }
            else
            {
                Console.Write("       " + "                     ");
                Console.Write(new string(' ', (width - 80)));
                Console.Write(Environment.NewLine);
            }

            //Player and meeba sprites
            for (int i = 0; i < 8; i++)
            {
                if (playerStats.playerCurrentHP > 0)
                {
                    Console.ForegroundColor = playerStats.textColour;
                    Console.Write(playerStats.sprite[0, i] + "     ");
                }
                else
                    Console.Write("                            ");
                if (meeba.currentHp > 0 && meeba.gotMeeba == true && storyCounter >= 2)
                {
                    Console.ForegroundColor = meeba.textColour;
                    Console.Write(meeba.sprite[0, i] + "     ");
                }
                else
                    Console.Write("                            ");
                if (meeba2.currentHp > 0 && meeba2.gotMeeba == true && storyCounter >= 2)
                {
                    Console.ForegroundColor = meeba2.textColour;
                    Console.Write(meeba2.sprite[0, i]);
                    Console.Write(new string(' ', (width - 79)));
                }
                else
                {
                    Console.Write("                       ");
                    Console.Write(new string(' ', (width - 79)));
                }
            }
            Console.CursorTop += 1;
        }

        public void ColourResetGray()
        {
            opponentOne.textColour = ConsoleColor.Gray;  //Resets colours from previous battle
            opponentTwo.textColour = ConsoleColor.Gray;
            opponentThree.textColour = ConsoleColor.Gray;
            playerStats.textColour = ConsoleColor.Gray;
            meeba.textColour = ConsoleColor.Gray;
            meeba2.textColour = ConsoleColor.Gray;
        }

        public void AllHPBars()
        {
            double opp1HPInterval = opponentOne.MaxHP / 20; //Opponent1
            if (opponentOne.HP <= 0)
                opponentOne.HPBar = "                     ";
            else
            {
                opponentOne.HPBar = "HP|                    ";
                for (int i = 1; i < 21; i++) //20 intervals, one '/' for each
                {
                    if (opponentOne.HP <= (opp1HPInterval * i) && opponentOne.HP > (opp1HPInterval * (i - 1)))
                    {
                        opponentOne.HPBar = "HP|";
                        string slashes = new string('/', i); //prints one '/' for each HP interval the HP passes
                        opponentOne.HPBar += slashes;
                        string spaces = new string(' ', 20 - i); //fills the rest with spaces so it is the correct length
                        opponentOne.HPBar += spaces;
                    }
                }
            }

            double opp2HPInterval = opponentTwo.MaxHP / 20; //Opponent2
            if (opponentTwo.HP <= 0)
                opponentTwo.HPBar = "                     ";
            else
            {
                opponentTwo.HPBar = "HP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (opponentTwo.HP <= (opp2HPInterval * i) && opponentTwo.HP > (opp2HPInterval * (i - 1)))
                    {
                        opponentTwo.HPBar = "HP|";
                        string slashes = new string('/', i);
                        opponentTwo.HPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        opponentTwo.HPBar += spaces;
                    }
                }
            }

            double opp3HPInterval = opponentThree.MaxHP / 20; //Opponent3
            if (opponentThree.HP <= 0)
                opponentThree.HPBar = "                     ";
            else
            {
                opponentThree.HPBar = "HP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (opponentThree.HP <= (opp3HPInterval * i) && opponentThree.HP > (opp3HPInterval * (i - 1)))
                    {
                        opponentThree.HPBar = "HP|";
                        string slashes = new string('/', i);
                        opponentThree.HPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        opponentThree.HPBar += spaces;
                    }
                }
            }

            double PlayerHPInterval = playerStats.playerMaxHP / 20; //Player
            if (playerStats.playerCurrentHP <= 0)
                playerStats.HPBar = "                     ";
            else
            {
                playerStats.HPBar = "HP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (playerStats.playerCurrentHP <= (PlayerHPInterval * i) && playerStats.playerCurrentHP > (PlayerHPInterval * (i - 1)))
                    {
                        playerStats.HPBar = "HP|";
                        string slashes = new string('/', i);
                        playerStats.HPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        playerStats.HPBar += spaces;
                    }
                }
            }

            double meeba1HPInterval = meeba.hp / 20; //Meeba1
            if (meeba.currentHp <= 0)
                meeba.HPBar = "                     ";
            else
            {
                meeba.HPBar = "HP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (meeba.currentHp <= (meeba1HPInterval * i) && meeba.currentHp > (meeba1HPInterval * (i - 1)))
                    {
                        meeba.HPBar = "HP|";
                        string slashes = new string('/', i);
                        meeba.HPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        meeba.HPBar += spaces;
                    }
                }
            }

            double meeba2HPInterval = meeba2.hp / 20; //Meeba2
            if (meeba2.currentHp <= 0)
                meeba2.HPBar = "                     ";
            else
            {
                meeba2.HPBar = "HP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (meeba2.currentHp <= (meeba2HPInterval * i) && meeba2.currentHp > (meeba2HPInterval * (i - 1)))
                    {
                        meeba2.HPBar = "HP|";
                        string slashes = new string('/', i);
                        meeba2.HPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        meeba2.HPBar += spaces;
                    }
                }
            }
        }

        public void AllMPBars()
        {
            double opp1MPInterval = opponentOne.MaxMP / 20; //Opponent1
            if (opponentOne.MP <= 0)
                opponentOne.MPBar = "                     ";
            else
            {
                opponentOne.MPBar = "MP|                    ";
                for (int i = 1; i < 21; i++) //20 intervals, one '/' for each
                {
                    if (opponentOne.MP <= (opp1MPInterval * i) && opponentOne.MP > (opp1MPInterval * (i - 1)))
                    {
                        opponentOne.MPBar = "MP|";
                        string slashes = new string('*', i); //prints one '/' for each MP interval the MP passes
                        opponentOne.MPBar += slashes;
                        string spaces = new string(' ', 20 - i); //fills the rest with spaces so it is the correct length
                        opponentOne.MPBar += spaces;
                    }
                }
            }

            double opp2MPInterval = opponentTwo.MaxMP / 20; //Opponent2
            if (opponentTwo.MP <= 0)
                opponentTwo.MPBar = "                     ";
            else
            {
                opponentTwo.MPBar = "MP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (opponentTwo.MP <= (opp2MPInterval * i) && opponentTwo.MP > (opp2MPInterval * (i - 1)))
                    {
                        opponentTwo.MPBar = "MP|";
                        string slashes = new string('*', i);
                        opponentTwo.MPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        opponentTwo.MPBar += spaces;
                    }
                }
            }

            double opp3MPInterval = opponentThree.MaxMP / 20; //Opponent3
            if (opponentThree.MP <= 0)
                opponentThree.MPBar = "                     ";
            else
            {
                opponentThree.MPBar = "MP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (opponentThree.MP <= (opp3MPInterval * i) && opponentThree.MP > (opp3MPInterval * (i - 1)))
                    {
                        opponentThree.MPBar = "MP|";
                        string slashes = new string('*', i);
                        opponentThree.MPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        opponentThree.MPBar += spaces;
                    }
                }
            }

            double meeba1MPInterval = meeba.MP / 20; //Meeba1
            if (meeba.currentMP <= 0)
                meeba.MPBar = "                     ";
            else
            {
                meeba.MPBar = "MP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (meeba.currentMP <= (meeba1MPInterval * i) && meeba.currentMP > (meeba1MPInterval * (i - 1)))
                    {
                        meeba.MPBar = "MP|";
                        string slashes = new string('*', i);
                        meeba.MPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        meeba.MPBar += spaces;
                    }
                }
            }

            double meeba2MPInterval = meeba2.MP / 20; //Meeba2
            if (meeba2.currentMP <= 0)
                meeba2.MPBar = "                     ";
            else
            {
                meeba2.MPBar = "MP|                    ";
                for (int i = 1; i < 21; i++)
                {
                    if (meeba2.currentMP <= (meeba2MPInterval * i) && meeba2.currentMP > (meeba2MPInterval * (i - 1)))
                    {
                        meeba2.MPBar = "MP|";
                        string slashes = new string('*', i);
                        meeba2.MPBar += slashes;
                        string spaces = new string(' ', 20 - i);
                        meeba2.MPBar += spaces;
                    }
                }
            }
        }

        public void resetStats()
        {
            playerStats.opponent1Target = false;
            playerStats.opponent2Target = false;
            playerStats.opponent3Target = false;
            playerStats.meeba1Target = false;
            playerStats.meeba2Target = false;
            playerStats.playerTarget = false;

            meeba.opponent1Target = false;
            meeba.opponent2Target = false;
            meeba.opponent3Target = false;
            meeba.meeba1Target = false;
            meeba.meeba2Target = false;
            meeba.playerTarget = false;

            meeba2.opponent1Target = false;
            meeba2.opponent2Target = false;
            meeba2.opponent3Target = false;
            meeba2.meeba1Target = false;
            meeba2.meeba2Target = false;
            meeba2.playerTarget = false;

            opponentOne.opponent1Target = false;
            opponentOne.opponent2Target = false;
            opponentOne.opponent3Target = false;
            opponentOne.playerTarget = false;
            opponentOne.meeba1Target = false;
            opponentOne.meeba2Target = false;

            opponentTwo.opponent1Target = false;
            opponentTwo.opponent2Target = false;
            opponentTwo.opponent3Target = false;
            opponentTwo.playerTarget = false;
            opponentTwo.meeba1Target = false;
            opponentTwo.meeba2Target = false;

            opponentThree.opponent1Target = false;
            opponentThree.opponent2Target = false;
            opponentThree.opponent3Target = false;
            opponentThree.playerTarget = false;
            opponentThree.meeba1Target = false;
            opponentThree.meeba2Target = false;

            if (playerStats.playerCurrentHP > 0)
                playerStats.hasTakenTurn = false;
            else
                currentState = BattleState.Lose;
            if (meeba.currentHp > 0 && meeba.gotMeeba == true)
                meeba.hasTakenTurn = false;
            else
                meeba.hasTakenTurn = true;
            if (meeba2.currentHp > 0 && meeba2.gotMeeba == true)
                meeba2.hasTakenTurn = false;
            else
                meeba2.hasTakenTurn = true;
            if (opponentOne.HP > 0 && opponentOne.active == true)
                opponentOne.hasTakenTurn = false;
            else
                opponentOne.hasTakenTurn = true;
            if (opponentTwo.HP > 0 && opponentTwo.active == true)
                opponentTwo.hasTakenTurn = false;
            else
                opponentTwo.hasTakenTurn = true;
            if (opponentThree.HP > 0 && opponentThree.active == true)
                opponentThree.hasTakenTurn = false;
            else
                opponentThree.hasTakenTurn = true;

            //reset defensive moves
            playerStats.tempDefense = playerStats.tempDefenseStatChange; //defend mode in battle, rather than stat increase, reset each options loop
            meeba.tempDefense = meeba.tempDefenseStatChange;
            meeba2.tempDefense = meeba2.tempDefenseStatChange;
            opponentOne.tempDefense = opponentOne.tempDefenseStatChange;
            opponentTwo.tempDefense = opponentTwo.tempDefenseStatChange;
            opponentThree.tempDefense = opponentThree.tempDefenseStatChange;

            //reset defensive
            playerStats.defensive = false;
            meeba.defensive = false;
            meeba2.defensive = false;
            opponentOne.defensive = false;
            opponentTwo.defensive = false;
            opponentThree.defensive = false;
        }

        public void StatusChangeChecks()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var item in ThisBattleEnemies) //if poisonone && poisontwo are true, it only does poisontwo damage
            {
                if (item.isPoisoned == true && item.HP > 0)
                {
                    item.poisonTracker += 1;
                    item.HP -= Math.Round(item.MaxHP / 10);
                    if (item.isPoisoned == true)
                        Console.WriteLine(item.name + " took " + Math.Round(item.MaxHP / 12) + " poison damage");
                    else if (item.isPoisonedTwo == true)
                        Console.WriteLine(item.name + " took " + Math.Round(item.MaxHP / 6) + " poison damage");
                    Thread.Sleep(1000);
                    if (item.poisonTracker == 3)
                    {
                        Console.WriteLine(item.name + " shook off the poison");
                        Thread.Sleep(1000);
                        item.isPoisoned = false;
                    }
                }
            }
            foreach (var meebaItem in ThisBattleMeebas) //if poisonone && poisontwo are true, it only does poisontwo damage
            {
                if (meebaItem.isPoisoned == true && meebaItem.currentHp > 0)
                {
                    meebaItem.poisonTracker += 1;
                    meebaItem.currentHp -= Math.Round(meebaItem.hp / 10);
                    if (meebaItem.isPoisoned == true)
                        Console.WriteLine(meebaItem.name + " took " + Math.Round(meebaItem.hp / 12) + " poison damage");
                    else if (meebaItem.isPoisonedTwo == true)
                        Console.WriteLine(meebaItem.name + " took " + Math.Round(meebaItem.hp / 6) + " poison damage");
                    Thread.Sleep(1000);
                    if (meebaItem.poisonTracker == 3)
                    {
                        Console.WriteLine(meebaItem.name + " shook off the poison");
                        Thread.Sleep(1000);
                        meebaItem.isPoisoned = false;
                    }
                }
            }
            if (playerStats.isPoisoned == true && playerStats.playerCurrentHP > 0)
            {
                playerStats.poisonTracker += 1;
                playerStats.playerCurrentHP -= Math.Round(playerStats.playerMaxHP / 10);
                if (playerStats.isPoisoned == true)
                    Console.WriteLine(playerStats.name + " took " + Math.Round(playerStats.playerMaxHP / 12) + " poison damage");
                else if (playerStats.isPoisonedTwo == true)
                    Console.WriteLine(playerStats.name + " took " + Math.Round(playerStats.playerMaxHP / 6) + " poison damage");
                Thread.Sleep(1000);
                if (playerStats.poisonTracker == 3)
                {
                    Console.WriteLine(playerStats.name + " shook off the poison");
                    Thread.Sleep(1000);
                    playerStats.isPoisoned = false;
                }
            }
            //Sleep Check
            foreach (var item in ThisBattleEnemies)
            {
                if (item.isAsleep == true && item.HP > 0 && item.active == true)
                {
                    int sleepCheck = random.Next(2);
                    if (sleepCheck == 0)
                    {
                        item.hasTakenTurn = true;
                        Console.WriteLine("Zzzzzz...   ...   ..." + item.name + " is asleep and cannot attack");
                        Thread.Sleep(1000);
                    }
                    else if (sleepCheck == 1)
                    {
                        Console.WriteLine(item.name + " woke up");
                        Thread.Sleep(1000);
                        item.isAsleep = false;
                    }
                }
            }
            if (playerStats.isAsleep == true && playerStats.playerCurrentHP > 0)
            {
                int sleepCheck = random.Next(2);
                if (sleepCheck == 0)
                {
                    playerStats.hasTakenTurn = true;
                    Console.WriteLine("Zzzzzz...   ...   ..." + playerStats.name + " is asleep and cannot attack");
                    Thread.Sleep(1000);
                }
                else if (sleepCheck == 1)
                {
                    Console.WriteLine(playerStats.name + " woke up");
                    Thread.Sleep(1000);
                    playerStats.isAsleep = false;
                }
            }
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.isAsleep == true && meebaItem.currentHp > 0)
                {
                    int sleepCheck = random.Next(2);
                    if (sleepCheck == 0)
                    {
                        meebaItem.hasTakenTurn = true;
                        Console.WriteLine("Zzzzzz...   ...   ..." + meebaItem.name + " is asleep and cannot attack");
                        Thread.Sleep(1000);
                    }
                    else if (sleepCheck == 1)
                    {
                        Console.WriteLine(meebaItem.name + " woke up");
                        Thread.Sleep(1000);
                        meebaItem.isAsleep = false;
                    }
                }
            }
            //Status protect check - add enemy ones too
            if (playerStats.StatusProtected == true)
            {
                if (playerStats.statusProtectCounterSS > 0)
                    playerStats.statusProtectCounterSS += 1;
                if (playerStats.statusProtectCounterSS == 3)
                {
                    playerStats.StatusProtected = false;
                    Console.WriteLine(playerStats.name + "'s status protection wore off");
                    Thread.Sleep(1000);
                }
                if (playerStats.statusProtectCounterRF > 0)
                    playerStats.statusProtectCounterRF += 1;
                if (playerStats.statusProtectCounterRF == 5)
                {
                    playerStats.StatusProtected = false;
                    Console.WriteLine(playerStats.name + "'s status protection wore off");
                    Thread.Sleep(1000);
                }
                if (playerStats.statusProtectCounterSW > 0)
                    playerStats.statusProtectCounterSW += 1;
                if (playerStats.statusProtectCounterSW == 4)
                {
                    playerStats.StatusProtected = false;
                    Console.WriteLine(playerStats.name + "'s status protection wore off");
                    Thread.Sleep(1000);
                }
            }
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.StatusProtected == true && meebaItem.currentHp > 0)
                {
                    if (meebaItem.statusProtectCounterSS > 0)
                        meebaItem.statusProtectCounterSS += 1;
                    if (meebaItem.statusProtectCounterSS == 3)
                    {
                        meebaItem.StatusProtected = false;
                        Console.WriteLine(meebaItem.name + "'s status protection wore off");
                        Thread.Sleep(1000);
                    }
                    if (meebaItem.statusProtectCounterRF > 0)
                        meebaItem.statusProtectCounterRF += 1;
                    if (meebaItem.statusProtectCounterRF == 5)
                    {
                        meebaItem.StatusProtected = false;
                        Console.WriteLine(meebaItem.name + "'s status protection wore off");
                        Thread.Sleep(1000);
                    }
                    if (meebaItem.statusProtectCounterSW > 0)
                        meebaItem.statusProtectCounterSW += 1;
                    if (meebaItem.statusProtectCounterSW == 4)
                    {
                        meebaItem.StatusProtected = false;
                        Console.WriteLine(meebaItem.name + "'s status protection wore off");
                        Thread.Sleep(1000);
                    }
                }
            }
            foreach (var item in ThisBattleEnemies)
            {
                if (item.statusProtectCounterSS > 0)
                    item.statusProtectCounterSS += 1;
                if (item.statusProtectCounterSS == 3)
                {
                    item.StatusProtected = false;
                    Console.WriteLine(item.name + "'s status protection wore off");
                    Thread.Sleep(1000);
                }
                if (item.statusProtectCounterRF > 0)
                    item.statusProtectCounterRF += 1;
                if (item.statusProtectCounterRF == 5)
                {
                    item.StatusProtected = false;
                    Console.WriteLine(item.name + "'s status protection wore off");
                    Thread.Sleep(1000);
                }
                if (item.statusProtectCounterSW > 0)
                    item.statusProtectCounterSW += 1;
                if (item.statusProtectCounterSW == 4)
                {
                    item.StatusProtected = false;
                    Console.WriteLine(item.name + "'s status protection wore off");
                    Thread.Sleep(1000);
                }
            }
            //Damage protect check
            if (playerStats.DamageProtected == true)
            {
                playerStats.damageProtectCounter += 1;
                if (playerStats.damageProtectCounter == 2)
                {
                    playerStats.DamageProtected = false;
                    Console.WriteLine(playerStats.name + "'s damage protection wore off");
                    Thread.Sleep(1000);
                }
            }
            foreach (var item in ThisBattleMeebas)
            {
                if (item.DamageProtected == true)
                {
                    item.damageProtectCounter += 1;
                    if (item.damageProtectCounter == 2)
                    {
                        item.DamageProtected = false;
                        Console.WriteLine(item.name + "'s damage protection wore off");
                        Thread.Sleep(1000);
                    }
                }
            }
            foreach (var item in ThisBattleEnemies)
            {
                if (item.DamageProtected == true)
                {
                    item.damageProtectCounter += 1;
                    if (item.damageProtectCounter == 2)
                    {
                        item.DamageProtected = false;
                        Console.WriteLine(item.name + "'s damage protection wore off");
                        Thread.Sleep(1000);
                    }
                }
            }
            foreach (var item in ThisBattleMeebas)
            {
                if (item.CycloneCounter > 0)
                    item.CycloneCounter += 1; //before = 0, choose move = 1, move 1 = 2
                if (item.DustDevilCounter > 0)
                    item.DustDevilCounter += 1;
                if (item.SnowStormCounter > 0)
                    item.SnowStormCounter += 1;

                if (item.CycloneCounter == 3 || item.CycloneCounter == 4)
                {
                    playerStats.tempSpeed *= 1.3;
                    meeba.tempSpeed *= 1.3;
                    meeba2.tempSpeed *= 1.3;
                    playerStats.tempDefenseStatChange *= 1.3;
                    meeba.tempDefenseStatChange *= 1.3;
                    meeba2.tempDefenseStatChange *= 1.3;
                    Console.WriteLine("The cyclone raised speed and defense of allies");
                    Thread.Sleep(1200);
                    if (item.CycloneCounter == 4)
                        item.CycloneCounter = 0;
                }
                if (item.DustDevilCounter == 3 || item.DustDevilCounter == 4)
                {
                    playerStats.tempDefenseStatChange *= 1.3;
                    meeba.tempDefenseStatChange *= 1.3;
                    meeba2.tempDefenseStatChange *= 1.3;
                    opponentOne.tempSpeedStatChange *= 0.8;
                    opponentTwo.tempSpeedStatChange *= 0.8;
                    opponentThree.tempSpeedStatChange *= 0.8;
                    Console.WriteLine("The dust devil raised defense of all allies, and reduced speed of all opponents");
                    Thread.Sleep(1200);
                    if (item.DustDevilCounter == 4)
                        item.DustDevilCounter = 0;
                }
                if (item.SnowStormCounter == 3 || item.SnowStormCounter == 4)
                {
                    playerStats.playerCurrentHP += Math.Round(playerStats.playerMaxHP * 0.1);
                    if (playerStats.playerCurrentHP > playerStats.playerMaxHP)
                        playerStats.playerCurrentHP = playerStats.playerMaxHP;
                    meeba.currentHp += Math.Round(meeba.hp * 0.1);
                    if (meeba.currentHp > meeba.hp)
                        meeba.currentHp = meeba.hp;
                    meeba2.currentHp += Math.Round(meeba2.hp * 0.1);
                    if (meeba2.currentHp > meeba2.hp)
                        meeba2.currentHp = meeba2.hp;
                    Console.WriteLine("The snowstorm healed all allies a little");
                    Thread.Sleep(1200);
                    if (item.SnowStormCounter == 4)
                        item.SnowStormCounter = 0;
                }
            }
            foreach (var item in ThisBattleEnemies)
            {
                if (item.CycloneCounter > 0)
                    item.CycloneCounter += 1;
                if (item.DustDevilCounter > 0)
                    item.DustDevilCounter += 1;
                if (item.SnowStormCounter > 0)
                    item.SnowStormCounter += 1;

                if (item.CycloneCounter == 3 || item.CycloneCounter == 4)
                {
                    opponentOne.tempSpeedStatChange *= 1.3;
                    opponentTwo.tempSpeedStatChange *= 1.3;
                    opponentThree.tempSpeedStatChange *= 1.3;
                    opponentOne.tempDefenseStatChange *= 1.3;
                    opponentTwo.tempDefenseStatChange *= 1.3;
                    opponentThree.tempDefenseStatChange *= 1.3;
                    Console.WriteLine("The cyclone raised speed and defense of opponents");
                    Thread.Sleep(1200);
                    if (item.CycloneCounter == 4)
                        item.CycloneCounter = 0;
                }
                if (item.DustDevilCounter == 3 || item.DustDevilCounter == 4)
                {
                    opponentOne.tempDefenseStatChange *= 1.3;
                    opponentTwo.tempDefenseStatChange *= 1.3;
                    opponentThree.tempDefenseStatChange *= 1.3;
                    playerStats.tempSpeed *= 0.8;
                    meeba.tempSpeed *= 0.8;
                    meeba2.tempSpeed *= 0.8;
                    Console.WriteLine("The dust devil raised defense of all opponents, and reduced speed of all allies");
                    Thread.Sleep(1200);
                    if (item.DustDevilCounter == 4)
                        item.DustDevilCounter = 0;
                }
                if (item.SnowStormCounter == 3 || item.SnowStormCounter == 4)
                {
                    opponentOne.HP += Math.Round(opponentOne.MaxHP * 0.1);
                    if (opponentOne.HP > opponentOne.MaxHP)
                        opponentOne.HP = opponentOne.MaxHP;
                    opponentTwo.HP += Math.Round(opponentTwo.MaxHP * 0.1);
                    if (opponentTwo.HP > opponentTwo.MaxHP)
                        opponentTwo.HP = opponentTwo.MaxHP;
                    opponentThree.HP += Math.Round(opponentThree.MaxHP * 0.1);
                    if (opponentThree.HP > opponentThree.MaxHP)
                        opponentThree.HP = opponentThree.MaxHP;
                    Console.WriteLine("The snowstorm healed all opponents a little");
                    Thread.Sleep(1200);
                    if (item.SnowStormCounter == 4)
                        item.SnowStormCounter = 0;
                }
            }
        }

        public void PyroclasticFlowCheck()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.PyroclasticFlowCounter == 2) //If move after pyroclastic flow was set
                {
                    foreach (var item1 in ThisBattleEnemies)
                    {
                        if (item1.active == true && item1.HP > 0)
                        {
                            Console.Clear();
                            AllHPBars();
                            AllMPBars();
                            BattleSpriteRender();
                            tempAllyAttack = meebaItem.tempAttack;
                            if (item1.defensive == true)
                                tempOppDefense = item1.tempDefense;
                            else if (item1.defensive == false)
                                tempOppDefense = item1.tempDefenseStatChange;
                            tempAllyMoveBasePower = 16;
                            TypeAdvantageAlly();
                            STABAlly(); //tempAllySTAB = fire in this case
                            tempAllyHit = random.Next(meebaItem.hitRange, 101);
                            damageCalcAllyAttacking = 1 + Math.Round((((tempAllyAttack / tempOppDefense) * tempAllyMoveBasePower * tempAllyItemBonus * tempAllyTypeAdv * tempAllySTAB) / 100) * tempAllyHit);
                            item1.HP -= damageCalcAllyAttacking;
                            if (item1.HP < 0)
                                item1.HP = 0;
                            Console.WriteLine("{0} attacked {1} with Pyroclastic Flow", meebaItem.name, item1.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(item1.name + " took {0} damage", damageCalcAllyAttacking);
                            Thread.Sleep(1000);
                            Console.WriteLine(item1.name + " has {0} HP", item1.HP);
                            Thread.Sleep(1000);
                            if ((item1.HP - damageCalcAllyAttacking) <= 0)
                            {
                                Console.WriteLine("{0} defeated {1}", meebaItem.name, item1.name);
                                Thread.Sleep(1000);
                            }
                        }
                    }
                    meebaItem.PyroclasticFlowCounter = 0;
                }
            }
            //foreachenemy
            foreach (var Item in ThisBattleEnemies)
            {
                if (Item.PyroclasticFlowCounter == 2) //If move after pyroclastic flow was set
                {
                    if (playerStats.playerCurrentHP > 0)
                    {
                        Console.Clear();
                        AllHPBars();
                        AllMPBars();
                        BattleSpriteRender();
                        tempOppAttack = Item.tempAttack;
                        if (playerStats.defensive == true)
                            tempAllyDefense = playerStats.tempDefense;
                        else if (playerStats.defensive == false)
                            tempAllyDefense = playerStats.tempDefenseStatChange;
                        tempOppMoveBasePower = 16;
                        TypeAdvantageOppPlayer();
                        STABOpp();
                        tempOppHit = random.Next(Item.hit, 101);
                        damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                        playerStats.playerCurrentHP -= damageCalcOppAttacking;
                        if (playerStats.playerCurrentHP < 0)
                            playerStats.playerCurrentHP = 0;
                        Console.WriteLine("{0} attacked {1} with Pyroclastic Flow", Item.name, playerStats.name);
                        Thread.Sleep(1000);
                        Console.WriteLine(playerStats.name + " took {0} damage", damageCalcOppAttacking);
                        Thread.Sleep(1000);
                        Console.WriteLine(playerStats.name + " has {0} HP", playerStats.playerCurrentHP);
                        Thread.Sleep(1000);
                        if ((playerStats.playerCurrentHP - damageCalcOppAttacking) <= 0)
                        {
                            Console.WriteLine("{0} defeated {1}", Item.name, playerStats.name);
                            Thread.Sleep(1000);
                            currentState = BattleState.Lose;
                            break;
                        }
                    }
                    foreach (var meebaItem in ThisBattleMeebas)
                    {
                        if (meebaItem.currentHp > 0)
                        {
                            Console.Clear();
                            AllHPBars();
                            AllMPBars();
                            BattleSpriteRender();
                            tempOppAttack = Item.tempAttack;
                            if (meebaItem.defensive == true)
                                tempAllyDefense = meebaItem.tempDefense;
                            else if (meebaItem.defensive == false)
                                tempAllyDefense = meebaItem.tempDefenseStatChange;
                            tempOppMoveBasePower = 16;
                            currentMeeba = meebaItem.name;
                            TypeAdvantageOpp();
                            STABOpp();
                            tempOppHit = random.Next(Item.hit, 101);
                            damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                            meebaItem.currentHp -= damageCalcOppAttacking;
                            if (meebaItem.currentHp < 0)
                                meebaItem.currentHp = 0;
                            Console.WriteLine("{0} attacked {1} with Pyroclastic Flow", Item.name, meebaItem.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(meebaItem.name + " took {0} damage", damageCalcOppAttacking);
                            Thread.Sleep(1000);
                            Console.WriteLine(meebaItem.name + " has {0} HP", meebaItem.currentHp);
                            Thread.Sleep(1000);
                            if ((meebaItem.currentHp - damageCalcOppAttacking) <= 0)
                            {
                                Console.WriteLine("{0} defeated {1}", Item.name, meebaItem.name);
                                Thread.Sleep(1000);
                            }
                        }
                    }
                    Item.PyroclasticFlowCounter = 0;
                }
            }
        }

        public void PlayerChoice()
        {
            if (playerStats.isStunned == true && playerStats.playerCurrentHP > 0)
            {
                int stunCheck = random.Next(2);
                if (stunCheck == 0)
                {
                    playerStats.hasTakenTurn = true;
                    Console.WriteLine(playerStats.name + " is in a daze and cannot attack");
                    Thread.Sleep(1000);
                    playerStats.isStunned = false;
                    currentState = BattleState.SpeedComparison;
                }
            }
            else
            {
                Console.ForegroundColor = ConsoleColor.Gray;
                Console.WriteLine("What will " + playerStats.name + " do?:\n1: Attack \n2: Item \n3: Defend \n4: Run\nPlease enter an option number");
                Console.Write("> ");
                string input = Console.ReadLine().ToLower().Trim();
                if (input.Length > 80) //makes input max of 80 chars
                {
                    double textlength = input.Length;
                    for (int i = 80; i <= textlength; i += 80)
                    {
                        MainMenu.DecrementCursorTop(1);
                        Console.Write(new string(' ', Console.WindowWidth));
                        MainMenu.DecrementCursorTop(1);
                    }
                    input = input.Remove(80);
                }
                do
                {
                    if (string.IsNullOrEmpty(input) || input != "1" && input != "2" && input != "3" && input != "4")
                    {
                        MainMenu.DecrementCursorTop(1);
                        Console.Write(new string(' ', Console.WindowWidth));
                        MainMenu.DecrementCursorTop(7);
                        Console.WriteLine("What will " + playerStats.name + " do?:\n1: Attack \n2: Item \n3: Defend \n4: Run\nPlease enter an option number");
                        Console.Write("> ");
                        input = Console.ReadLine().ToLower().Trim();
                        if (input.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = input.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            input = input.Remove(80);
                        }
                    }

                    if (input == "1") //attack
                    {
                        playerStats.defensive = false;
                        playerStats.MoveChoice = 1;
                        bool validAttackChoice = false;
                        if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                        {
                            opponentOne.playerTarget = true;
                            validAttackChoice = true;
                            Console.WriteLine(playerStats.name + " will attack " + opponentOne.name);
                            Thread.Sleep(1000);
                            resetMenu = false;
                        }
                        else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                            Console.WriteLine("Which enemy will you attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                        else
                            Console.WriteLine("Which enemy will you attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                        if (validAttackChoice != true)
                        {
                            Console.Write("> ");
                            string playerAttackInput = Console.ReadLine().ToLower().Trim();
                            if (playerAttackInput.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = playerAttackInput.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    MainMenu.DecrementCursorTop(1);
                                }
                                playerAttackInput = playerAttackInput.Remove(80);
                            }
                            if (playerAttackInput == "back" || playerAttackInput == "exit" || playerAttackInput == "cancel")
                            {
                                resetMenu = true;
                                currentState = BattleState.Options;
                                break;
                            }
                            do
                            {
                                if (string.IsNullOrEmpty(playerAttackInput) || playerAttackInput != "1" && playerAttackInput != "2" && playerAttackInput != "3" || playerAttackInput == "1" && opponentOne.HP <= 0 || playerAttackInput == "2" && opponentTwo.HP <= 0 || playerAttackInput == "3" && opponentThree.HP <= 0)
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                        MainMenu.DecrementCursorTop(3);
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        MainMenu.DecrementCursorTop(4);
                                    else
                                        MainMenu.DecrementCursorTop(5);
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        opponentOne.playerTarget = true;
                                        validAttackChoice = true;
                                        Console.WriteLine(playerStats.name + " will attack " + opponentOne.name);
                                        resetMenu = false;
                                        Thread.Sleep(1000);
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will you attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will you attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                    Console.Write("> ");
                                    playerAttackInput = Console.ReadLine().ToLower().Trim();
                                    if (playerAttackInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = playerAttackInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            MainMenu.DecrementCursorTop(1);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            MainMenu.DecrementCursorTop(1);
                                        }
                                        playerAttackInput = playerAttackInput.Remove(80);
                                    }
                                }
                                else if (playerAttackInput == "1" && opponentOne.HP > 0 && opponentOne.active == true)
                                {
                                    opponentOne.playerTarget = true;
                                    validAttackChoice = true;
                                    Console.WriteLine(playerStats.name + " will attack " + opponentOne.name);
                                    Thread.Sleep(1000);
                                    resetMenu = false;
                                }
                                else if (playerAttackInput == "2" && opponentTwo.HP > 0 && opponentTwo.active == true)
                                {
                                    opponentTwo.playerTarget = true;
                                    validAttackChoice = true;
                                    Console.WriteLine(playerStats.name + " will attack " + opponentTwo.name);
                                    Thread.Sleep(1000);
                                    resetMenu = false;
                                }
                                else if (playerAttackInput == "3" && opponentThree.HP > 0 && opponentThree.active == true)
                                {
                                    opponentThree.playerTarget = true;
                                    validAttackChoice = true;
                                    Console.WriteLine(playerStats.name + " will attack " + opponentThree.name);
                                    Thread.Sleep(1000);
                                    resetMenu = false;
                                }
                                else
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                        MainMenu.DecrementCursorTop(3);
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        MainMenu.DecrementCursorTop(4);
                                    else
                                        MainMenu.DecrementCursorTop(5);
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        opponentOne.playerTarget = true;
                                        validAttackChoice = true;
                                        Console.WriteLine(playerStats.name + " will attack " + opponentOne.name);
                                        Thread.Sleep(1000);
                                        resetMenu = false;
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will you attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will you attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                    Console.Write("> ");
                                    playerAttackInput = Console.ReadLine().ToLower().Trim();
                                    if (playerAttackInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = playerAttackInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            MainMenu.DecrementCursorTop(1);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            MainMenu.DecrementCursorTop(1);
                                        }
                                        playerAttackInput = playerAttackInput.Remove(80);
                                    }
                                }
                            } while (validAttackChoice == false);
                        }
                        currentState = BattleState.SpeedComparison;
                    }
                    if (input == "2") //items
                    {
                        bool exit = false;
                        if (inventory.dictionary.Count == 0)
                        {
                            Console.WriteLine("You have no items to use!");
                            Thread.Sleep(1000);
                            currentState = BattleState.Options;
                        }
                        else
                        {
                            playerStats.defensive = false;
                            playerStats.MoveChoice = 2;
                            List<string> newInv = new List<string>();
                            List<int> newInvValues = new List<int>();

                            do //choose who to use item on
                            {
                                resetMenu = false;
                                newInv.Clear();
                                newInvValues.Clear();
                                Console.WriteLine("What item would you like to use? Type 'back' to return.");
                                foreach (KeyValuePair<string, int> item in inventory.dictionary) //creates dictionary in order to reference index of item
                                {
                                    if (item.Value != 0)
                                    {
                                        newInv.Add(item.Key);
                                        newInvValues.Add(item.Value);
                                    }

                                }
                                for (int i = 0; i < newInv.Count; i++)
                                {
                                    if (newInvValues[i] != 0)
                                        Console.WriteLine("{0}: {1} ({2})", (i + 1), UppercaseFirst(newInv[i]), newInvValues[i]);
                                }
                                Console.Write("> ");
                                playerStats.itemUserInput = Console.ReadLine().ToLower().Trim();
                                if (playerStats.itemUserInput.Length > 80) //makes input max of 80 chars
                                {
                                    double textlength = playerStats.itemUserInput.Length;
                                    for (int i = 80; i <= textlength; i += 80)
                                    {
                                        MainMenu.DecrementCursorTop(1);
                                        Console.Write(new string(' ', Console.WindowWidth));
                                        MainMenu.DecrementCursorTop(1);
                                    }
                                    playerStats.itemUserInput = playerStats.itemUserInput.Remove(80);
                                }
                                //if not valid input:
                                if (string.IsNullOrEmpty(playerStats.itemUserInput) || playerStats.itemUserInput != "1" && playerStats.itemUserInput != "2" && playerStats.itemUserInput != "3" && playerStats.itemUserInput != "4" && playerStats.itemUserInput != "5" && playerStats.itemUserInput != "6" && playerStats.itemUserInput != "7" && playerStats.itemUserInput != "8" && playerStats.itemUserInput != "9" && playerStats.itemUserInput != "10" && playerStats.itemUserInput != "11" && playerStats.itemUserInput != "12" && playerStats.itemUserInput != "13" && playerStats.itemUserInput != "14" && playerStats.itemUserInput != "15" && playerStats.itemUserInput != "16" && playerStats.itemUserInput != "17" && playerStats.itemUserInput != "18" && playerStats.itemUserInput != "19" && playerStats.itemUserInput != "20" || Convert.ToInt32(playerStats.itemUserInput) > inventory.dictionary.Count)
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    for (int i = 1; i < (inventory.dictionary.Count + 1); i++)
                                    {
                                        if (inventory.dictionary.Count == i)
                                           MainMenu.DecrementCursorTop(i + 2);
                                    }
                                    useableItem = false;
                                }
                                else //valid input
                                {
                                    int itemChoiceBattleInt = Convert.ToInt32(playerStats.itemUserInput);
                                    for (int i = 1; i < (inventory.dictionary.Count + 1); i++)
                                    {
                                        if (itemChoiceBattleInt == i)
                                        {
                                            itemChoice = newInv[itemChoiceBattleInt - 1];
                                            referenceCurrentItem();
                                            if (examItem.itemType == "null" || examItem.itemType != "healthgain" && examItem.itemType != "battleOffensive" && examItem.itemType != "mpgain" && examItem.itemType != "antidote" && examItem.itemType != "awakening") //OR OTHER ONES THAT ARE USEABLE
                                            {
                                                MainMenu.DecrementCursorTop(1);
                                                Console.Write(new string(' ', Console.WindowWidth));
                                                MainMenu.DecrementCursorTop(1);
                                                Console.WriteLine("You can't use this right now");
                                                Thread.Sleep(1000);
                                                useableItem = false;
                                                MainMenu.DecrementCursorTop(1);
                                                Console.Write(new string(' ', Console.WindowWidth));
                                                for (int l = 1; l < (inventory.dictionary.Count + 1); l++)
                                                {
                                                    if (inventory.dictionary.Count == l)
                                                       MainMenu.DecrementCursorTop(l + 2);
                                                }
                                            }
                                            else
                                            {
                                                useableItem = true;
                                                Console.WriteLine(playerStats.name + " will use the " + examItem.itemName);
                                                Thread.Sleep(1000);
                                                resetMenu = false;
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (useableItem == true)
                                    break;
                                if (playerStats.itemUserInput == "back" || playerStats.itemUserInput == "exit" || playerStats.itemUserInput == "cancel")
                                {
                                    resetMenu = true;
                                    currentState = BattleState.Options;
                                    exit = true;
                                    break;
                                }
                            } while (useableItem == false && exit == false);
                        }
                        //Choose target for item
                        do
                        {
                            playerStats.itemTarget = false;
                            if (storyCounter >= 2)
                                Console.WriteLine("Who will you use the " + examItem.itemName + " on?");

                            if (examItem.opponentTargetBattle == true)
                            {
                                if (examItem.itemType == "battleOffensive")
                                {
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        opponentOne.playerTarget = true;
                                        playerStats.itemTarget = true;
                                        Console.WriteLine(playerStats.name + " will target " + opponentOne.name);
                                        Thread.Sleep(1000);
                                        resetMenu = false;
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will you target? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will you target? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));

                                    if (playerStats.itemTarget != true)
                                    {
                                        Console.Write("> ");
                                        string targetItemInput = Console.ReadLine().ToLower().Trim();
                                        if (targetItemInput.Length > 80) //makes input max of 80 chars
                                        {
                                            double textlength = targetItemInput.Length;
                                            for (int i = 80; i <= textlength; i += 80)
                                            {
                                                MainMenu.DecrementCursorTop(1);
                                                Console.Write(new string(' ', Console.WindowWidth));
                                                MainMenu.DecrementCursorTop(1);
                                            }
                                            targetItemInput = targetItemInput.Remove(80);
                                        }
                                        if (targetItemInput == "back" || targetItemInput == "exit" || targetItemInput == "cancel")
                                        {
                                            resetMenu = true;
                                            currentState = BattleState.Options;
                                            exit = true;
                                            break;
                                        }
                                        do
                                        {
                                            if (string.IsNullOrEmpty(targetItemInput) || targetItemInput != "1" && targetItemInput != "2" && targetItemInput != "3" || targetItemInput == "1" && opponentOne.HP <= 0 || targetItemInput == "2" && opponentTwo.HP <= 0 || targetItemInput == "3" && opponentThree.HP <= 0)
                                            {
                                                MainMenu.DecrementCursorTop(1);
                                                Console.Write(new string(' ', Console.WindowWidth));
                                                if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                                    MainMenu.DecrementCursorTop(3);
                                                else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                                    MainMenu.DecrementCursorTop(4);
                                                else
                                                    MainMenu.DecrementCursorTop(5);
                                                if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                                {
                                                    opponentOne.playerTarget = true;
                                                    playerStats.itemTarget = true;
                                                    Console.WriteLine(playerStats.name + " will target " + opponentOne.name);
                                                    resetMenu = false;
                                                    Thread.Sleep(1000);
                                                }
                                                else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                                    Console.WriteLine("Which enemy will you target? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                                else
                                                    Console.WriteLine("Which enemy will you target? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                                Console.Write("> ");
                                                targetItemInput = Console.ReadLine().ToLower().Trim();
                                                if (targetItemInput.Length > 80) //makes input max of 80 chars
                                                {
                                                    double textlength = targetItemInput.Length;
                                                    for (int i = 80; i <= textlength; i += 80)
                                                    {
                                                        MainMenu.DecrementCursorTop(1);
                                                        Console.Write(new string(' ', Console.WindowWidth));
                                                        MainMenu.DecrementCursorTop(1);
                                                    }
                                                    targetItemInput = targetItemInput.Remove(80);
                                                }
                                            }
                                            else if (targetItemInput == "1" && opponentOne.HP > 0 && opponentOne.active == true)
                                            {
                                                opponentOne.playerTarget = true;
                                                playerStats.itemTarget = true;
                                                Console.WriteLine(playerStats.name + " will target " + opponentOne.name);
                                                Thread.Sleep(1000);
                                                resetMenu = false;
                                            }
                                            else if (targetItemInput == "2" && opponentTwo.HP > 0 && opponentTwo.active == true)
                                            {
                                                opponentTwo.playerTarget = true;
                                                playerStats.itemTarget = true;
                                                Console.WriteLine(playerStats.name + " will target " + opponentTwo.name);
                                                Thread.Sleep(1000);
                                                resetMenu = false;
                                            }
                                            else if (targetItemInput == "3" && opponentThree.HP > 0 && opponentThree.active == true)
                                            {
                                                opponentThree.playerTarget = true;
                                                playerStats.itemTarget = true;
                                                Console.WriteLine(playerStats.name + " will target " + opponentThree.name);
                                                Thread.Sleep(1000);
                                                resetMenu = false;
                                            }
                                            else
                                            {
                                                MainMenu.DecrementCursorTop(1);
                                                Console.Write(new string(' ', Console.WindowWidth));
                                                if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                                    MainMenu.DecrementCursorTop(3);
                                                else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                                    MainMenu.DecrementCursorTop(4);
                                                else
                                                    MainMenu.DecrementCursorTop(5);
                                                if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                                {
                                                    opponentOne.playerTarget = true;
                                                    playerStats.itemTarget = true;
                                                    Console.WriteLine(playerStats.name + " will target " + opponentOne.name);
                                                    Thread.Sleep(1000);
                                                    resetMenu = false;
                                                }
                                                else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                                    Console.WriteLine("Which enemy will you target? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                                else
                                                    Console.WriteLine("Which enemy will you target? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                                Console.Write("> ");
                                                targetItemInput = Console.ReadLine().ToLower().Trim();
                                                if (targetItemInput.Length > 80) //makes input max of 80 chars
                                                {
                                                    double textlength = targetItemInput.Length;
                                                    for (int i = 80; i <= textlength; i += 80)
                                                    {
                                                        MainMenu.DecrementCursorTop(1);
                                                        Console.Write(new string(' ', Console.WindowWidth));
                                                        MainMenu.DecrementCursorTop(1);
                                                    }
                                                    targetItemInput = targetItemInput.Remove(80);
                                                }
                                            }
                                        } while (playerStats.itemTarget == false);
                                    }
                                }
                            }

                            else if (examItem.allyTargetBattle == true)
                            {
                                if (storyCounter < 2)
                                {
                                    playerStats.playerTarget = true;
                                    playerStats.itemTarget = true;
                                    Console.WriteLine("You will target yourself");
                                    Thread.Sleep(1000);
                                }
                                else
                                {
                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                        Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba2.name);
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                        Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba.name);
                                    else
                                        Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba.name + " \n3: " + meeba2.name);
                                    Console.Write("> ");
                                    string itemAllyTarget = Console.ReadLine().ToLower().Trim();
                                    if (itemAllyTarget.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = itemAllyTarget.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            MainMenu.DecrementCursorTop(1);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            MainMenu.DecrementCursorTop(1);
                                        }
                                        itemAllyTarget = itemAllyTarget.Remove(80);
                                    }
                                    do
                                    {
                                        if (string.IsNullOrEmpty(itemAllyTarget) || itemAllyTarget != "1" && itemAllyTarget != "2" && itemAllyTarget != "3" || itemAllyTarget == "1" && playerStats.playerCurrentHP <= 0 || itemAllyTarget == "2" && meeba.currentHp <= 0 || itemAllyTarget == "3" && meeba2.currentHp <= 0)
                                        {
                                            MainMenu.DecrementCursorTop(1);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp <= 0)
                                                MainMenu.DecrementCursorTop(3);
                                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                                MainMenu.DecrementCursorTop(4);
                                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                                MainMenu.DecrementCursorTop(4);
                                            else
                                                MainMenu.DecrementCursorTop(5);

                                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                                Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba.name);
                                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                                Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba2.name);
                                            else
                                                Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba.name + " \n3: " + meeba2.name);
                                            Console.Write("> ");
                                            itemAllyTarget = Console.ReadLine().ToLower().Trim();
                                            if (itemAllyTarget.Length > 80) //makes input max of 80 chars
                                            {
                                                double textlength = itemAllyTarget.Length;
                                                for (int i = 80; i <= textlength; i += 80)
                                                {
                                                    MainMenu.DecrementCursorTop(1);
                                                    Console.Write(new string(' ', Console.WindowWidth));
                                                    MainMenu.DecrementCursorTop(1);
                                                }
                                                itemAllyTarget = itemAllyTarget.Remove(80);
                                            }
                                        }
                                        else if (itemAllyTarget == "1" && playerStats.playerCurrentHP > 0)
                                        {
                                            playerStats.playerTarget = true;
                                            playerStats.itemTarget = true;
                                            Console.WriteLine("You will target yourself");
                                            Thread.Sleep(1000);
                                        }
                                        else if (itemAllyTarget == "2" && meeba.currentHp > 0)
                                        {
                                            meeba.playerTarget = true;
                                            playerStats.itemTarget = true;
                                            Console.WriteLine("You will target " + meeba.name);
                                            Thread.Sleep(1000);
                                        }
                                        else if (itemAllyTarget == "2" && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                        {
                                            meeba2.playerTarget = true;
                                            playerStats.itemTarget = true;
                                            Console.WriteLine("You will target " + meeba2.name);
                                            Thread.Sleep(1000);
                                        }
                                        else if (itemAllyTarget == "3" && meeba2.currentHp > 0)
                                        {
                                            meeba2.playerTarget = true;
                                            playerStats.itemTarget = true;
                                            Console.WriteLine("You will target " + meeba2.name);
                                            Thread.Sleep(1000);
                                        }
                                        else
                                        {
                                            MainMenu.DecrementCursorTop(1);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp <= 0)
                                                MainMenu.DecrementCursorTop(3);
                                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                                MainMenu.DecrementCursorTop(4);
                                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                                MainMenu.DecrementCursorTop(4);
                                            else
                                                MainMenu.DecrementCursorTop(5);

                                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                                Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba.name);
                                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                                Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba2.name);
                                            else
                                                Console.WriteLine("Who will you target? \n1: " + playerStats.name + "\n2: " + meeba.name + " \n3: " + meeba2.name);
                                            Console.Write("> ");
                                            itemAllyTarget = Console.ReadLine().ToLower().Trim();
                                            if (itemAllyTarget.Length > 80) //makes input max of 80 chars
                                            {
                                                double textlength = itemAllyTarget.Length;
                                                for (int i = 80; i <= textlength; i += 80)
                                                {
                                                    MainMenu.DecrementCursorTop(1);
                                                    Console.Write(new string(' ', Console.WindowWidth));
                                                    MainMenu.DecrementCursorTop(1);
                                                }
                                                itemAllyTarget = itemAllyTarget.Remove(80);
                                            }
                                        }
                                    } while (playerStats.itemTarget == false);
                                }
                            }
                        } while (playerStats.itemTarget == false && exit == false);

                        if (resetMenu == true)
                            currentState = BattleState.Options;
                        else
                            currentState = BattleState.SpeedComparison;
                    }
                    if (input == "3") //defend
                    {
                        playerStats.defensive = true;
                        playerStats.MoveChoice = 3;
                        Console.WriteLine(playerStats.name + " will defend");
                        Thread.Sleep(1000);
                        currentState = BattleState.SpeedComparison;
                    }
                    if (input == "4") //run
                    {
                        playerStats.defensive = true;
                        playerStats.MoveChoice = 4;
                        Console.WriteLine(playerStats.name + " will attempt to run");
                        Thread.Sleep(1000);
                        currentState = BattleState.SpeedComparison;
                    }
                } while (string.IsNullOrEmpty(input) || input != "1" && input != "2" && input != "3" && input != "4");
                if (resetMenu == true)
                    currentState = BattleState.Options;
            }
        }

        public void MeebaChoice()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.isCurrent == true)
                {
                    if (meebaItem.gotMeeba == true && meebaItem.currentHp > 0 && meebaItem.isAsleep != true)
                    {
                        Console.WriteLine("What will " + meebaItem.name + " do?\n1: Attack \n2: Defend\nPlease enter an option number");
                        Console.Write("> ");
                        string meebaInput = Console.ReadLine().ToLower().Trim();
                        if (meebaInput.Length > 80) //makes input max of 80 chars
                        {
                            double textlength = meebaInput.Length;
                            for (int i = 80; i <= textlength; i += 80)
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(1);
                            }
                            meebaInput = meebaInput.Remove(80);
                        }
                        do
                        {
                            if (string.IsNullOrEmpty(meebaInput) || meebaInput != "1" && meebaInput != "2")
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                MainMenu.DecrementCursorTop(5);
                                Console.WriteLine("What will " + meebaItem.name + " do?\n1: Attack \n2: Defend\nPlease enter an option number");
                                Console.Write("> ");
                                meebaInput = Console.ReadLine().ToLower().Trim();
                                if (meebaInput.Length > 80) //makes input max of 80 chars
                                {
                                    double textlength = meebaInput.Length;
                                    for (int i = 80; i <= textlength; i += 80)
                                    {
                                        MainMenu.DecrementCursorTop(1);
                                        Console.Write(new string(' ', Console.WindowWidth));
                                        MainMenu.DecrementCursorTop(1);
                                    }
                                    meebaInput = meebaInput.Remove(80);
                                }
                            }

                            if (meebaInput == "1")
                            {
                                meebaItem.battleChoice = 1;
                                Console.WriteLine("What move will " + meebaItem.name + " use?");
                                for (int i = 0; i < meebaItem.Moves.Count; i++)
                                {
                                    Console.WriteLine((i + 1) + ": " + meebaItem.Moves[i]);
                                }
                                meebaItem.SpecialChoiceValid = false;
                                do
                                {
                                    meebaChooseMove(); //instanciates move based on user input from list of meeba moves
                                } while (meebaItem.SpecialChoiceValid == false && resetMenu == false);
                                if (resetMenu == true)
                                {
                                    currentState = BattleState.Options;
                                    break;
                                }
                                meebaItem.validAttackChoice = false;
                                meebaItem.validDefenseChoice = false;
                                meebaChooseTarget(); //chooses target based on user input
                            }
                            if (meebaInput == "2")
                            {
                                meebaItem.battleChoice = 2;
                                meebaItem.defensive = true;
                                Console.WriteLine(meebaItem.name + " will defend");
                                Thread.Sleep(1000);
                            }
                        } while (string.IsNullOrEmpty(meebaInput) || meebaInput != "1" && meebaInput != "2");
                    }
                }
            }
        }

        public void EnemyAIChoice()
        {
            foreach (var enemy in ThisBattleEnemies)
            {
                if (enemy.HP > 0 && enemy.active == true)
                {
                    int enemyRandom1 = random.Next(0, 7);
                    int enemyRandomTarget1 = random.Next(0, 3);
                    int enemyRandomTarget21 = random.Next(0, 2);
                    if (enemy.HP > Math.Round((enemy.MaxHP / 5)))
                    {
                        int enemyRandomAttack = random.Next(0, 4);
                        if (enemy.MP < Math.Round(enemy.MaxMP / 5) || enemyRandomAttack == 2 || enemyRandomAttack == 3)
                        {
                            enemy.choice = 1; //attack 
                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp > 0 && storyCounter >= 2) //if all allies alive
                            {
                                //Targetting
                                if (enemyRandomTarget1 == 0)
                                {
                                    if (enemy == opponentOne)
                                        playerStats.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        playerStats.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        playerStats.opponent3Target = true;
                                }
                                else if (enemyRandomTarget1 == 1)
                                {
                                    if (enemy == opponentOne)
                                        meeba.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        meeba.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        meeba.opponent3Target = true;
                                }
                                else if (enemyRandomTarget1 == 2)
                                {
                                    if (enemy == opponentOne)
                                        meeba2.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        meeba2.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        meeba2.opponent3Target = true;
                                }
                            }
                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0 && storyCounter >= 2)
                            {
                                if (enemyRandomTarget21 == 0)
                                {
                                    if (enemy == opponentOne)
                                        playerStats.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        playerStats.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        playerStats.opponent3Target = true;
                                }
                                else if (enemyRandomTarget21 == 1)
                                {
                                    if (enemy == opponentOne)
                                        meeba.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        meeba.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        meeba.opponent3Target = true;
                                }
                            }
                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0 && storyCounter >= 2)
                            {
                                if (enemyRandomTarget21 == 0)
                                {
                                    if (enemy == opponentOne)
                                        playerStats.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        playerStats.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        playerStats.opponent3Target = true;
                                }
                                else if (enemyRandomTarget21 == 1)
                                {
                                    if (enemy == opponentOne)
                                        meeba2.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        meeba2.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        meeba2.opponent3Target = true;
                                }
                            }
                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp <= 0 && storyCounter >= 2)
                            {
                                if (enemy == opponentOne)
                                    playerStats.opponent1Target = true;
                                else if (enemy == opponentTwo)
                                    playerStats.opponent2Target = true;
                                else if (enemy == opponentThree)
                                    playerStats.opponent3Target = true;
                            }
                            else
                            {
                                if (enemy == opponentOne)
                                    playerStats.opponent1Target = true;
                                else if (enemy == opponentTwo)
                                    playerStats.opponent2Target = true;
                                else if (enemy == opponentThree)
                                    playerStats.opponent3Target = true;
                            }
                        }
                        else if ((enemy.MP >= Math.Round((enemy.MaxMP / 5))))
                        {
                            enemy.choice = 4; //special 
                            if (enemy.active == true && enemy.HP > 0)
                            {
                                if (enemyRandomAttack == 0)
                                {
                                    currentEnemy = enemy; //var to say which attack is chosen so can do this in attack method
                                    enemy.MoveChoice = enemy.Moves[0];
                                    referenceCurrentEnemyMove();
                                }
                                else if (enemyRandomAttack == 1)
                                {
                                    currentEnemy = enemy;
                                    enemy.MoveChoice = enemy.Moves[1];
                                    referenceCurrentEnemyMove();
                                }
                                if (enemy.currentMove.attackType == "Offensive" || enemy.currentMove.attackType == "OffensiveAndDefensive" || enemy.currentMove.attackType == "OffensiveAndDefensiveAll")
                                {
                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp > 0 && storyCounter >= 2) //if all allies alive
                                    {
                                        //Targetting
                                        if (enemyRandomTarget1 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                playerStats.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                playerStats.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                playerStats.opponent3Target = true;
                                        }
                                        else if (enemyRandomTarget1 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                meeba.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                meeba.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                meeba.opponent3Target = true;
                                        }
                                        else if (enemyRandomTarget1 == 2)
                                        {
                                            if (enemy == opponentOne)
                                                meeba2.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                meeba2.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                meeba2.opponent3Target = true;
                                        }
                                    }
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0 && storyCounter >= 2)
                                    {
                                        if (enemyRandomTarget21 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                playerStats.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                playerStats.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                playerStats.opponent3Target = true;
                                        }
                                        else if (enemyRandomTarget21 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                meeba.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                meeba.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                meeba.opponent3Target = true;
                                        }
                                    }
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0 && storyCounter >= 2)
                                    {
                                        if (enemyRandomTarget21 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                playerStats.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                playerStats.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                playerStats.opponent3Target = true;
                                        }
                                        else if (enemyRandomTarget21 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                meeba2.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                meeba2.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                meeba2.opponent3Target = true;
                                        }
                                    }
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp <= 0 && storyCounter >= 2)
                                    {
                                        if (enemy == opponentOne)
                                            playerStats.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            playerStats.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            playerStats.opponent3Target = true;
                                    }
                                    else
                                    {
                                        if (enemy == opponentOne)
                                            playerStats.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            playerStats.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            playerStats.opponent3Target = true;
                                    }
                                }
                                if (enemy.currentMove.attackType == "OffensiveAll")
                                {
                                    if (playerStats.playerCurrentHP > 0)
                                    {
                                        if (enemy == opponentOne)
                                            playerStats.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            playerStats.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            playerStats.opponent3Target = true;
                                    }
                                    if (meeba.currentHp > 0 && storyCounter >= 2)
                                    {
                                        if (enemy == opponentOne)
                                            meeba.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            meeba.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            meeba.opponent3Target = true;
                                    }
                                    if (meeba2.currentHp > 0 && storyCounter >= 2)
                                    {
                                        if (enemy == opponentOne)
                                            meeba2.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            meeba2.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            meeba2.opponent3Target = true;
                                    }
                                    if (enemy.currentMove.name == "Pyroclastic Flow")
                                        enemy.PyroclasticFlowCounter = 1;
                                }
                                if (enemy.currentMove.attackType == "Defensive")
                                {
                                    int oppRandomTarget1 = random.Next(0, 3);
                                    int oppRandomTarget21 = random.Next(0, 2);
                                    if (opponentOne.HP > 0 && opponentTwo.HP > 0 && opponentThree.HP > 0) //if all allies alive
                                    {
                                        //Targetting
                                        if (oppRandomTarget1 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                opponentOne.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentOne.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentOne.opponent3Target = true;
                                        }
                                        else if (oppRandomTarget1 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                opponentTwo.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentTwo.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentTwo.opponent3Target = true;
                                        }
                                        else if (oppRandomTarget1 == 2)
                                        {
                                            if (enemy == opponentOne)
                                                opponentThree.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentThree.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentThree.opponent3Target = true;
                                        }
                                    }
                                    else if (opponentOne.HP > 0 && opponentTwo.HP > 0 && opponentThree.HP <= 0)
                                    {
                                        if (oppRandomTarget21 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                opponentOne.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentOne.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentOne.opponent3Target = true;
                                        }
                                        else if (oppRandomTarget21 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                opponentTwo.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentTwo.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentTwo.opponent3Target = true;
                                        }
                                    }
                                    else if (opponentOne.HP > 0 && opponentTwo.HP <= 0 && opponentThree.HP > 0)
                                    {
                                        if (oppRandomTarget21 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                opponentOne.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentOne.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentOne.opponent3Target = true;
                                        }
                                        else if (oppRandomTarget21 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                opponentThree.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentThree.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentThree.opponent3Target = true;
                                        }
                                    }
                                    else if (opponentOne.HP <= 0 && opponentTwo.HP > 0 && opponentThree.HP > 0)
                                    {
                                        if (enemyRandomTarget21 == 0)
                                        {
                                            if (enemy == opponentOne)
                                                opponentTwo.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentTwo.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentTwo.opponent3Target = true;
                                        }
                                        else if (enemyRandomTarget21 == 1)
                                        {
                                            if (enemy == opponentOne)
                                                opponentThree.opponent1Target = true;
                                            else if (enemy == opponentTwo)
                                                opponentThree.opponent2Target = true;
                                            else if (enemy == opponentThree)
                                                opponentThree.opponent3Target = true;
                                        }
                                    }
                                    else if (opponentOne.HP > 0 && opponentTwo.HP <= 0 && opponentThree.HP <= 0)
                                    {
                                        if (enemy == opponentOne)
                                            opponentOne.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            opponentOne.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            opponentOne.opponent3Target = true;
                                    }
                                    else if (opponentOne.HP <= 0 && opponentTwo.HP > 0 && opponentThree.HP <= 0)
                                    {
                                        if (enemy == opponentOne)
                                            opponentTwo.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            opponentTwo.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            opponentTwo.opponent3Target = true;
                                    }
                                    else if (opponentOne.HP <= 0 && opponentTwo.HP <= 0 && opponentThree.HP > 0)
                                    {
                                        if (enemy == opponentOne)
                                            opponentThree.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            opponentThree.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            opponentThree.opponent3Target = true;
                                    }
                                }
                                if (enemy.currentMove.attackType == "OffensiveAndDefensive")
                                {
                                    if (enemy == opponentOne)
                                        opponentOne.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        opponentTwo.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        opponentThree.opponent3Target = true;
                                }
                                if (enemy.currentMove.attackType == "DefensiveAll" || enemy.currentMove.attackType == "OffensiveAndDefensiveAll")
                                {
                                    if (opponentOne.HP > 0)
                                    {
                                        if (enemy == opponentOne)
                                            opponentOne.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            opponentOne.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            opponentOne.opponent3Target = true;
                                    }
                                    if (opponentTwo.HP > 0)
                                    {
                                        if (enemy == opponentOne)
                                            opponentTwo.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            opponentTwo.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            opponentTwo.opponent3Target = true;
                                    }
                                    if (opponentThree.HP > 0)
                                    {
                                        if (enemy == opponentOne)
                                            opponentThree.opponent1Target = true;
                                        else if (enemy == opponentTwo)
                                            opponentThree.opponent2Target = true;
                                        else if (enemy == opponentThree)
                                            opponentThree.opponent3Target = true;
                                    }
                                }
                            }
                        }
                    }

                    else if (enemy.HP <= Math.Round(enemy.MaxHP / 5))
                    {
                        if (enemyRandom1 == 0)
                        {
                            enemy.choice = 3; //run
                            enemy.defensive = true;
                        }
                        else if (enemyRandom1 == 1 || enemyRandom1 == 2)
                        {
                            enemy.choice = 2; //defend
                            enemy.defensive = true;
                        }
                        else
                        {
                            enemy.choice = 1; //attack 
                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp > 0 && storyCounter >= 2) //if all allies alive
                            {
                                if (enemyRandomTarget1 == 0)
                                {
                                    if (enemy == opponentOne)
                                        playerStats.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        playerStats.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        playerStats.opponent3Target = true;
                                }
                                else if (enemyRandomTarget1 == 1 && storyCounter >= 2)
                                {
                                    if (enemy == opponentOne)
                                        meeba.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        meeba.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        meeba.opponent3Target = true;
                                }
                                else if (enemyRandomTarget1 == 2 && storyCounter >= 2)
                                {
                                    if (enemy == opponentOne)
                                        meeba2.opponent1Target = true;
                                    else if (enemy == opponentTwo)
                                        meeba2.opponent2Target = true;
                                    else if (enemy == opponentThree)
                                        meeba2.opponent3Target = true;
                                }
                            }
                            else
                            {
                                if (enemy == opponentOne)
                                    playerStats.opponent1Target = true;
                                else if (enemy == opponentTwo)
                                    playerStats.opponent2Target = true;
                                else if (enemy == opponentThree)
                                    playerStats.opponent3Target = true;
                            }
                        }
                    }
                }
            }
        }

        public void referenceCurrentMeebaMove()
        {
            switch (meeba.MoveChoice)
            {
                case "Meeba Power":
                    meeba.currentMove = new MeebaPower();
                    break;
                case "Lava Bubble":
                    meeba.currentMove = new LavaBubble();
                    break;
                case "Phoenix Fire":
                    meeba.currentMove = new PhoenixFire();
                    break;
                case "Pyroclastic Flow":
                    meeba.currentMove = new PyroclasticFlow();
                    break;
                case "Inferno":
                    meeba.currentMove = new Inferno();
                    break;
                case "Poison Spores":
                    meeba.currentMove = new PoisonSpores();
                    break;
                case "Tangleweed":
                    meeba.currentMove = new Tangleweed();
                    break;
                case "Slumber Dust":
                    meeba.currentMove = new SlumberDust();
                    break;
                case "Thorn Grip":
                    meeba.currentMove = new ThornGrip();
                    break;
                case "Grainmail":
                    meeba.currentMove = new Grainmail();
                    break;
                case "Quake":
                    meeba.currentMove = new Quake();
                    break;
                case "Sand Shroud":
                    meeba.currentMove = new SandShroud();
                    break;
                case "Rock Fort":
                    meeba.currentMove = new RockFort();
                    break;
                case "Static Shock":
                    meeba.currentMove = new StaticShock();
                    break;
                case "Windstorm":
                    meeba.currentMove = new Windstorm();
                    break;
                case "Tailwind":
                    meeba.currentMove = new Tailwind();
                    break;
                case "Cyclone":
                    meeba.currentMove = new Cyclone();
                    break;
                case "Tide Pool":
                    meeba.currentMove = new TidePool();
                    break;
                case "Bubble Jet":
                    meeba.currentMove = new BubbleJet();
                    break;
                case "Deluge":
                    meeba.currentMove = new Deluge();
                    break;
                case "Monsoon":
                    meeba.currentMove = new Monsoon();
                    break;
                case "Bio Acid":
                    meeba.currentMove = new BioAcid();
                    break;
                case "Pyriscent Bullets":
                    meeba.currentMove = new PyriscentBullets();
                    break;
                case "Charcoal Smog":
                    meeba.currentMove = new CharcoalSmog();
                    break;
                case "Solar Flare":
                    meeba.currentMove = new SolarFlare();
                    break;
                case "Stonewort":
                    meeba.currentMove = new Stonewort();
                    break;
                case "Thicket Surge":
                    meeba.currentMove = new ThicketSurge();
                    break;
                case "Toxic Soil":
                    meeba.currentMove = new ToxicSoil();
                    break;
                case "Leaching Roots":
                    meeba.currentMove = new LeachingRoots();
                    break;
                case "Sandstorm":
                    meeba.currentMove = new Sandstorm();
                    break;
                case "Erode":
                    meeba.currentMove = new Erode();
                    break;
                case "Landslide":
                    meeba.currentMove = new Landslide();
                    break;
                case "Dust Devil":
                    meeba.currentMove = new DustDevil();
                    break;
                case "Hail":
                    meeba.currentMove = new Hail();
                    break;
                case "Snowstorm":
                    meeba.currentMove = new Snowstorm();
                    break;
                case "Curelonimbus":
                    meeba.currentMove = new Curelonimbus();
                    break;
                case "Cloud Burst":
                    meeba.currentMove = new CloudBurst();
                    break;
                case "Vaporise":
                    meeba.currentMove = new Vaporise();
                    break;
                case "Hot Spring":
                    meeba.currentMove = new HotSpring();
                    break;
                case "Geyser":
                    meeba.currentMove = new Geyser();
                    break;
                case "Hydrothermal Blast":
                    meeba.currentMove = new HydrothermalBlast();
                    break;
            }
        }

        public void referenceCurrentMeeba2Move()
        {
            switch (meeba2.MoveChoice)
            {
                case "Meeba Power":
                    meeba2.currentMove = new MeebaPower();
                    break;
                case "Lava Bubble":
                    meeba2.currentMove = new LavaBubble();
                    break;
                case "Phoenix Fire":
                    meeba2.currentMove = new PhoenixFire();
                    break;
                case "Pyroclastic Flow":
                    meeba2.currentMove = new PyroclasticFlow();
                    break;
                case "Inferno":
                    meeba2.currentMove = new Inferno();
                    break;
                case "Poison Spores":
                    meeba2.currentMove = new PoisonSpores();
                    break;
                case "Tangleweed":
                    meeba2.currentMove = new Tangleweed();
                    break;
                case "Slumber Dust":
                    meeba2.currentMove = new SlumberDust();
                    break;
                case "Thorn Grip":
                    meeba2.currentMove = new ThornGrip();
                    break;
                case "Grainmail":
                    meeba2.currentMove = new Grainmail();
                    break;
                case "Quake":
                    meeba2.currentMove = new Quake();
                    break;
                case "Sand Shroud":
                    meeba2.currentMove = new SandShroud();
                    break;
                case "Rock Fort":
                    meeba2.currentMove = new RockFort();
                    break;
                case "Static Shock":
                    meeba2.currentMove = new StaticShock();
                    break;
                case "Windstorm":
                    meeba2.currentMove = new Windstorm();
                    break;
                case "Tailwind":
                    meeba2.currentMove = new Tailwind();
                    break;
                case "Cyclone":
                    meeba2.currentMove = new Cyclone();
                    break;
                case "Tide Pool":
                    meeba2.currentMove = new TidePool();
                    break;
                case "Bubble Jet":
                    meeba2.currentMove = new BubbleJet();
                    break;
                case "Deluge":
                    meeba2.currentMove = new Deluge();
                    break;
                case "Monsoon":
                    meeba2.currentMove = new Monsoon();
                    break;
                case "Bio Acid":
                    meeba2.currentMove = new BioAcid();
                    break;
                case "Pyriscent Bullets":
                    meeba2.currentMove = new PyriscentBullets();
                    break;
                case "Charcoal Smog":
                    meeba2.currentMove = new CharcoalSmog();
                    break;
                case "Solar Flare":
                    meeba2.currentMove = new SolarFlare();
                    break;
                case "Stonewort":
                    meeba2.currentMove = new Stonewort();
                    break;
                case "Thicket Surge":
                    meeba2.currentMove = new ThicketSurge();
                    break;
                case "Toxic Soil":
                    meeba2.currentMove = new ToxicSoil();
                    break;
                case "Leaching Roots":
                    meeba2.currentMove = new LeachingRoots();
                    break;
                case "Sandstorm":
                    meeba2.currentMove = new Sandstorm();
                    break;
                case "Erode":
                    meeba2.currentMove = new Erode();
                    break;
                case "Landslide":
                    meeba2.currentMove = new Landslide();
                    break;
                case "Dust Devil":
                    meeba2.currentMove = new DustDevil();
                    break;
                case "Hail":
                    meeba2.currentMove = new Hail();
                    break;
                case "Snowstorm":
                    meeba2.currentMove = new Snowstorm();
                    break;
                case "Curelonimbus":
                    meeba2.currentMove = new Curelonimbus();
                    break;
                case "Cloud Burst":
                    meeba2.currentMove = new CloudBurst();
                    break;
                case "Vaporise":
                    meeba2.currentMove = new Vaporise();
                    break;
                case "Hot Spring":
                    meeba2.currentMove = new HotSpring();
                    break;
                case "Geyser":
                    meeba2.currentMove = new Geyser();
                    break;
                case "Hydrothermal Blast":
                    meeba2.currentMove = new HydrothermalBlast();
                    break;
            }
        }

        public void referenceCurrentEnemyMove()
        {
            foreach (var item in ThisBattleEnemies)
            {
                if (item.ID == 1 && currentEnemy == item || item.ID == 2 && currentEnemy == item || item.ID == 3 && currentEnemy == item)
                {
                    switch (item.MoveChoice)
                    {
                        case "Meeba Power":
                            item.currentMove = new MeebaPower();
                            break;
                        case "Lava Bubble":
                            item.currentMove = new LavaBubble();
                            break;
                        case "Phoenix Fire":
                            item.currentMove = new PhoenixFire();
                            break;
                        case "Pyroclastic Flow":
                            item.currentMove = new PyroclasticFlow();
                            break;
                        case "Inferno":
                            item.currentMove = new Inferno();
                            break;
                        case "Poison Spores":
                            item.currentMove = new PoisonSpores();
                            break;
                        case "Tangleweed":
                            item.currentMove = new Tangleweed();
                            break;
                        case "Slumber Dust":
                            item.currentMove = new SlumberDust();
                            break;
                        case "Thorn Grip":
                            item.currentMove = new ThornGrip();
                            break;
                        case "Grainmail":
                            item.currentMove = new Grainmail();
                            break;
                        case "Quake":
                            item.currentMove = new Quake();
                            break;
                        case "Sand Shroud":
                            item.currentMove = new SandShroud();
                            break;
                        case "Rock Fort":
                            item.currentMove = new RockFort();
                            break;
                        case "Static Shock":
                            item.currentMove = new StaticShock();
                            break;
                        case "Windstorm":
                            item.currentMove = new Windstorm();
                            break;
                        case "Tailwind":
                            item.currentMove = new Tailwind();
                            break;
                        case "Cyclone":
                            item.currentMove = new Cyclone();
                            break;
                        case "Tide Pool":
                            item.currentMove = new TidePool();
                            break;
                        case "Bubble Jet":
                            item.currentMove = new BubbleJet();
                            break;
                        case "Deluge":
                            item.currentMove = new Deluge();
                            break;
                        case "Monsoon":
                            item.currentMove = new Monsoon();
                            break;
                        case "Bio Acid":
                            item.currentMove = new BioAcid();
                            break;
                        case "Pyriscent Bullets":
                            item.currentMove = new PyriscentBullets();
                            break;
                        case "Charcoal Smog":
                            item.currentMove = new CharcoalSmog();
                            break;
                        case "Solar Flare":
                            item.currentMove = new SolarFlare();
                            break;
                        case "Stonewort":
                            item.currentMove = new Stonewort();
                            break;
                        case "Thicket Surge":
                            item.currentMove = new ThicketSurge();
                            break;
                        case "Toxic Soil":
                            item.currentMove = new ToxicSoil();
                            break;
                        case "Leaching Roots":
                            item.currentMove = new LeachingRoots();
                            break;
                        case "Sandstorm":
                            item.currentMove = new Sandstorm();
                            break;
                        case "Erode":
                            item.currentMove = new Erode();
                            break;
                        case "Landslide":
                            item.currentMove = new Landslide();
                            break;
                        case "Dust Devil":
                            item.currentMove = new DustDevil();
                            break;
                        case "Hail":
                            item.currentMove = new Hail();
                            break;
                        case "Snowstorm":
                            item.currentMove = new Snowstorm();
                            break;
                        case "Curelonimbus":
                            item.currentMove = new Curelonimbus();
                            break;
                        case "Cloud Burst":
                            item.currentMove = new CloudBurst();
                            break;
                        case "Vaporise":
                            item.currentMove = new Vaporise();
                            break;
                        case "Hot Spring":
                            item.currentMove = new HotSpring();
                            break;
                        case "Geyser":
                            item.currentMove = new Geyser();
                            break;
                        case "Hydrothermal Blast":
                            item.currentMove = new HydrothermalBlast();
                            break;
                    }
                }
            }
        }

        public void meebaChooseMove()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            resetMenu = false;

            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (resetMenu == true)
                    break;
                if (meebaItem.isCurrent == true)
                {
                    if (meebaItem.isStunned == true && meebaItem.currentHp > 0)
                    {
                        int stunCheck = random.Next(2);
                        if (stunCheck == 0)
                        {
                            meebaItem.hasTakenTurn = true;
                            Console.WriteLine(meebaItem.name + " is in a daze and cannot attack");
                            Thread.Sleep(1000);
                            meebaItem.isStunned = false;
                            currentState = BattleState.SpeedComparison;
                        }
                    }
                    else
                    {
                        do
                        {
                            Console.Write("> ");
                            meebaItem.SpecialChoice = Console.ReadLine().ToLower().Trim();
                            if (meebaItem.SpecialChoice.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = meebaItem.SpecialChoice.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    MainMenu.DecrementCursorTop(1);
                                }
                                meebaItem.SpecialChoice = meebaItem.SpecialChoice.Remove(80);
                            }
                            if (meebaItem.SpecialChoice == "back" || meebaItem.SpecialChoice == "exit" || meebaItem.SpecialChoice == "cancel")
                            {
                                resetMenu = true;
                                currentState = BattleState.Options;
                                break;
                            }
                            if (string.IsNullOrEmpty(meebaItem.SpecialChoice) || meebaItem.SpecialChoice != "1" && meebaItem.SpecialChoice != "2" && meebaItem.SpecialChoice != "3" && meebaItem.SpecialChoice != "4" && meebaItem.SpecialChoice != "5" && meebaItem.SpecialChoice != "6" && meebaItem.SpecialChoice != "7" && meebaItem.SpecialChoice != "8" && meebaItem.SpecialChoice != "9" && meebaItem.SpecialChoice != "10" && meebaItem.SpecialChoice != "11" && meebaItem.SpecialChoice != "12" && meebaItem.SpecialChoice != "13" || Convert.ToInt32(meebaItem.SpecialChoice) > meebaItem.Moves.Count)
                            {
                                MainMenu.DecrementCursorTop(1);
                                Console.Write(new string(' ', Console.WindowWidth));
                                for (int i = 1; i < (meebaItem.Moves.Count + 1); i++)
                                {
                                    if (meebaItem.Moves.Count == i)
                                       MainMenu.DecrementCursorTop(i + 2);
                                }
                                Console.WriteLine("What move will " + meebaItem.name + " use?");
                                for (int i = 0; i < meebaItem.Moves.Count; i++)
                                {
                                    Console.WriteLine((i + 1) + ": " + meebaItem.Moves[i]);
                                }
                            }
                            else
                            {
                                meebaItem.SpecialChoiceInt = Convert.ToInt32(meebaItem.SpecialChoice);
                                for (int i = 1; i < (meebaItem.Moves.Count + 1); i++)
                                {
                                    if (meebaItem.SpecialChoiceInt == i)
                                    {
                                        meebaItem.MoveChoice = meebaItem.Moves[meebaItem.SpecialChoiceInt - 1];
                                        if (meebaItem == meeba)
                                            referenceCurrentMeebaMove();
                                        else if (meebaItem == meeba2)
                                            referenceCurrentMeeba2Move();
                                        if (meebaItem.currentMove.name == "Pyroclastic Flow" && meebaItem.PyroclasticFlowCounter == 2)
                                        {
                                            Console.WriteLine(meebaItem.name + " cannot summon another lava flow yet");
                                            Thread.Sleep(1000);
                                            MainMenu.DecrementCursorTop(1);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            MainMenu.DecrementCursorTop(2);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            for (int j = 1; j < (meebaItem.Moves.Count + 1); j++)
                                            {
                                                if (meebaItem.Moves.Count == j)
                                                   MainMenu.DecrementCursorTop(j + 2);
                                            }
                                            Console.WriteLine("What move will " + meebaItem.name + " use?");
                                            for (int k = 0; k < meebaItem.Moves.Count; k++)
                                            {
                                                Console.WriteLine((k + 1) + ": " + meebaItem.Moves[k]);
                                            }
                                        }
                                        else if (meebaItem.currentMP >= meebaItem.currentMove.MP)
                                        {
                                            meebaItem.SpecialChoiceValid = true;
                                            Console.WriteLine(meebaItem.name + " will use " + meebaItem.currentMove.name);
                                            Thread.Sleep(1000);
                                            resetMenu = false;
                                        }
                                        else
                                        {
                                            Console.WriteLine(meebaItem.name + " does not have enough MP to use " + meebaItem.currentMove.name);
                                            Thread.Sleep(1000);
                                            MainMenu.DecrementCursorTop(1);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            MainMenu.DecrementCursorTop(2);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            for (int j = 1; j < (meebaItem.Moves.Count + 1); j++)
                                            {
                                                if (meebaItem.Moves.Count == j)
                                                   MainMenu.DecrementCursorTop(j + 2);
                                            }
                                            Console.WriteLine("What move will " + meebaItem.name + " use?");
                                            for (int k = 0; k < meebaItem.Moves.Count; k++)
                                            {
                                                Console.WriteLine((k + 1) + ": " + meebaItem.Moves[k]);
                                            }
                                        }

                                    }
                                }
                            }
                        } while (meebaItem.SpecialChoiceValid == false);
                        if (meebaItem.currentMove.name == "Deluge")
                            meebaItem.tempSpeed += 1000;
                    }
                }
            }
        }

        public void meebaChooseTarget()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.isCurrent == true)
                {
                    if (meebaItem.currentMove.attackType == "Offensive")
                    {
                        if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                        {
                            if (meebaItem.ID == 1)
                                opponentOne.meeba1Target = true;
                            else if (meebaItem.ID == 2)
                                opponentOne.meeba2Target = true;
                            meebaItem.validAttackChoice = true;
                            Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                            Thread.Sleep(1000);
                        }
                        else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                            Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                        else
                            Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                        if (meebaItem.validAttackChoice != true)
                        {
                            Console.Write("> ");
                            string meeba1AttackInput = Console.ReadLine().ToLower().Trim();
                            if (meeba1AttackInput.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = meeba1AttackInput.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    MainMenu.DecrementCursorTop(1);
                                }
                                meeba1AttackInput = meeba1AttackInput.Remove(80);
                            }
                            do
                            {
                                if (string.IsNullOrEmpty(meeba1AttackInput) || meeba1AttackInput != "1" && meeba1AttackInput != "2" && meeba1AttackInput != "3" || meeba1AttackInput == "1" && opponentOne.HP <= 0 || meeba1AttackInput == "2" && opponentTwo.HP <= 0 || meeba1AttackInput == "3" && opponentThree.HP <= 0)
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                        MainMenu.DecrementCursorTop(3);
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        MainMenu.DecrementCursorTop(4);
                                    else
                                        MainMenu.DecrementCursorTop(5);
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        if (meebaItem.ID == 1)
                                            opponentOne.meeba1Target = true;
                                        else if (meebaItem.ID == 2)
                                            opponentOne.meeba2Target = true;
                                        meebaItem.validAttackChoice = true;
                                        Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                                        Thread.Sleep(1000);
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                    Console.Write("> ");
                                    meeba1AttackInput = Console.ReadLine().ToLower().Trim();
                                    if (meeba1AttackInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = meeba1AttackInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            MainMenu.DecrementCursorTop(1);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            MainMenu.DecrementCursorTop(1);
                                        }
                                        meeba1AttackInput = meeba1AttackInput.Remove(80);
                                    }
                                }
                                else if (meeba1AttackInput == "1" && opponentOne.HP > 0 && opponentOne.active == true)
                                {
                                    if (meebaItem.ID == 1)
                                        opponentOne.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        opponentOne.meeba2Target = true;
                                    meebaItem.validAttackChoice = true;
                                    Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                                    Thread.Sleep(1000);
                                }
                                else if (meeba1AttackInput == "2" && opponentTwo.HP > 0 && opponentTwo.active == true)
                                {
                                    if (meebaItem == meeba)
                                        opponentTwo.meeba1Target = true;
                                    else if (meebaItem == meeba2)
                                        opponentTwo.meeba2Target = true;
                                    meebaItem.validAttackChoice = true;
                                    Console.WriteLine(meebaItem.name + " will attack " + opponentTwo.name);
                                    Thread.Sleep(1000);
                                }
                                else if (meeba1AttackInput == "3" && opponentThree.HP > 0 && opponentThree.active == true)
                                {
                                    if (meebaItem.ID == 1)
                                        opponentThree.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        opponentThree.meeba2Target = true;
                                    meebaItem.validAttackChoice = true;
                                    Console.WriteLine(meebaItem.name + " will attack " + opponentThree.name);
                                    Thread.Sleep(1000);
                                }
                                else
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                        MainMenu.DecrementCursorTop(3);
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        MainMenu.DecrementCursorTop(4);
                                    else
                                        MainMenu.DecrementCursorTop(5);
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        if (meebaItem.ID == 1)
                                            opponentOne.meeba1Target = true;
                                        else if (meebaItem.ID == 2)
                                            opponentOne.meeba2Target = true;
                                        meebaItem.validAttackChoice = true;
                                        Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                                        Thread.Sleep(1000);
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                    Console.Write("> ");
                                    meeba1AttackInput = Console.ReadLine().ToLower().Trim();
                                    if (meeba1AttackInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = meeba1AttackInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            MainMenu.DecrementCursorTop(1);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            MainMenu.DecrementCursorTop(1);
                                        }
                                        meeba1AttackInput = meeba1AttackInput.Remove(80);
                                    }
                                }
                            } while (meebaItem.validAttackChoice == false);
                        }
                    }
                    //If OffensiveAll
                    if (meebaItem.currentMove.attackType == "OffensiveAll")
                    {
                        Console.WriteLine(meebaItem.name + " will attack all opponents");
                        if (meebaItem.ID == 1)
                            opponentOne.meeba1Target = true;
                        else if (meebaItem.ID == 2)
                            opponentOne.meeba2Target = true;
                        if (meebaItem.ID == 1)
                            opponentTwo.meeba1Target = true;
                        else if (meebaItem.ID == 2)
                            opponentTwo.meeba2Target = true;
                        if (meebaItem.ID == 1)
                            opponentThree.meeba1Target = true;
                        else if (meebaItem.ID == 2)
                            opponentThree.meeba2Target = true;
                        if (meebaItem.currentMove.name == "Pyroclastic Flow")
                            meebaItem.PyroclasticFlowCounter = 1;
                        Thread.Sleep(1000);
                    }
                    //If Defensive - choose which ally, unless self
                    if (meebaItem.currentMove.attackType == "Defensive")
                    {
                        if (meebaItem.validDefenseChoice != true)
                        {
                            if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba2.name);
                            else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba.name);
                            else
                                Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba.name + " \n3: " + meeba2.name);
                            Console.Write("> ");
                            string meeba1DefenseInput = Console.ReadLine().ToLower().Trim();
                            if (meeba1DefenseInput.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = meeba1DefenseInput.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    MainMenu.DecrementCursorTop(1);
                                }
                                meeba1DefenseInput = meeba1DefenseInput.Remove(80);
                            }
                            do
                            {
                                if (string.IsNullOrEmpty(meeba1DefenseInput) || meeba1DefenseInput != "1" && meeba1DefenseInput != "2" && meeba1DefenseInput != "3" || meeba1DefenseInput == "1" && playerStats.playerCurrentHP <= 0 || meeba1DefenseInput == "2" && meeba.currentHp <= 0 || meeba1DefenseInput == "3" && meeba2.currentHp <= 0)
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp <= 0)
                                        MainMenu.DecrementCursorTop(3);
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                        MainMenu.DecrementCursorTop(4);
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                        MainMenu.DecrementCursorTop(4);
                                    else
                                        MainMenu.DecrementCursorTop(5);

                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                        Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba.name);
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                        Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba2.name);
                                    else
                                        Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba.name + " \n3: " + meeba2.name);
                                    Console.Write("> ");
                                    meeba1DefenseInput = Console.ReadLine().ToLower().Trim();
                                    if (meeba1DefenseInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = meeba1DefenseInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            MainMenu.DecrementCursorTop(1);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            MainMenu.DecrementCursorTop(1);
                                        }
                                        meeba1DefenseInput = meeba1DefenseInput.Remove(80);
                                    }
                                }
                                else if (meeba1DefenseInput == "1" && playerStats.playerCurrentHP > 0)
                                {
                                    if (meebaItem.ID == 1)
                                        playerStats.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        playerStats.meeba2Target = true;
                                    meebaItem.validDefenseChoice = true;
                                    Console.WriteLine(meebaItem.name + " will target " + playerStats.name);
                                    Thread.Sleep(1000);
                                }
                                else if (meeba1DefenseInput == "2" && meeba.currentHp > 0)
                                {
                                    if (meebaItem.ID == 1)
                                        meeba.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        meeba.meeba2Target = true;
                                    meebaItem.validDefenseChoice = true;
                                    Console.WriteLine(meebaItem.name + " will target " + meeba.name);
                                    Thread.Sleep(1000);
                                }
                                else if (meeba1DefenseInput == "3" && meeba2.currentHp > 0)
                                {
                                    if (meebaItem.ID == 1)
                                        meeba2.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        meeba2.meeba2Target = true;
                                    meebaItem.validDefenseChoice = true;
                                    Console.WriteLine(meebaItem.name + " will target " + meeba2.name);
                                    Thread.Sleep(1000);
                                }
                                else
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp <= 0)
                                        MainMenu.DecrementCursorTop(3);
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                        MainMenu.DecrementCursorTop(4);
                                    else if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                        MainMenu.DecrementCursorTop(4);
                                    else
                                        MainMenu.DecrementCursorTop(5);

                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp > 0 && meeba2.currentHp <= 0)
                                        Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba.name);
                                    if (playerStats.playerCurrentHP > 0 && meeba.currentHp <= 0 && meeba2.currentHp > 0)
                                        Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba2.name);
                                    else
                                        Console.WriteLine("Who will " + meebaItem.name + " target? \n1: " + playerStats.name + "\n2: " + meeba.name + " \n3: " + meeba2.name);
                                    Console.Write("> ");
                                    meeba1DefenseInput = Console.ReadLine().ToLower().Trim();
                                    if (meeba1DefenseInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = meeba1DefenseInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            MainMenu.DecrementCursorTop(1);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            MainMenu.DecrementCursorTop(1);
                                        }
                                        meeba1DefenseInput = meeba1DefenseInput.Remove(80);
                                    }
                                }
                            } while (meebaItem.validDefenseChoice == false);
                        }
                    }

                    //If DefensiveAll
                    if (meebaItem.currentMove.attackType == "DefensiveAll")
                    {
                        if (meebaItem.ID == 1)
                            playerStats.meeba1Target = true;
                        else if (meebaItem.ID == 2)
                            playerStats.meeba2Target = true;
                        if (meebaItem.ID == 1)
                            meeba.meeba1Target = true;
                        else if (meebaItem.ID == 2)
                            meeba.meeba2Target = true;
                        if (meebaItem.ID == 1)
                            meeba2.meeba1Target = true;
                        else if (meebaItem.ID == 2)
                            meeba2.meeba2Target = true;
                        if (meebaItem.currentMove.name == "Cyclone")
                            meebaItem.CycloneCounter = 1;
                    }
                    //If OffensiveAndDefensive - choose which ally, unless self, and which opponent
                    if (meebaItem.currentMove.attackType == "OffensiveAndDefensive" || meebaItem.currentMove.attackType == "OffensiveAndDefensiveAll")
                    {
                        if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                        {
                            if (meebaItem.ID == 1)
                                opponentOne.meeba1Target = true;
                            else if (meebaItem.ID == 2)
                                opponentOne.meeba2Target = true;
                            meebaItem.validAttackChoice = true;
                            Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                            Thread.Sleep(1000);
                        }
                        else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                            Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                        else
                            Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                        if (meebaItem.validAttackChoice != true)
                        {
                            Console.Write("> ");
                            string meeba1AttackInput = Console.ReadLine().ToLower().Trim();
                            if (meeba1AttackInput.Length > 80) //makes input max of 80 chars
                            {
                                double textlength = meeba1AttackInput.Length;
                                for (int i = 80; i <= textlength; i += 80)
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    MainMenu.DecrementCursorTop(1);
                                }
                                meeba1AttackInput = meeba1AttackInput.Remove(80);
                            }
                            do
                            {
                                if (string.IsNullOrEmpty(meeba1AttackInput) || meeba1AttackInput != "1" && meeba1AttackInput != "2" && meeba1AttackInput != "3" || meeba1AttackInput == "1" && opponentOne.HP <= 0 || meeba1AttackInput == "2" && opponentTwo.HP <= 0 || meeba1AttackInput == "3" && opponentThree.HP <= 0)
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                        MainMenu.DecrementCursorTop(3);
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        MainMenu.DecrementCursorTop(4);
                                    else
                                        MainMenu.DecrementCursorTop(5);
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        if (meebaItem.ID == 1)
                                            opponentOne.meeba1Target = true;
                                        else if (meebaItem.ID == 2)
                                            opponentOne.meeba2Target = true;
                                        meebaItem.validAttackChoice = true;
                                        Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                                        Thread.Sleep(1000);
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                    Console.Write("> ");
                                    meeba1AttackInput = Console.ReadLine().ToLower().Trim();
                                    if (meeba1AttackInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = meeba1AttackInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            MainMenu.DecrementCursorTop(1);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            MainMenu.DecrementCursorTop(1);
                                        }
                                        meeba1AttackInput = meeba1AttackInput.Remove(80);
                                    }
                                }
                                else if (meeba1AttackInput == "1" && opponentOne.HP > 0 && opponentOne.active == true)
                                {
                                    if (meebaItem.ID == 1)
                                        opponentOne.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        opponentOne.meeba2Target = true;
                                    meebaItem.validAttackChoice = true;
                                    Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                                    Thread.Sleep(1000);
                                }
                                else if (meeba1AttackInput == "2" && opponentTwo.HP > 0 && opponentTwo.active == true)
                                {
                                    if (meebaItem.ID == 1)
                                        opponentTwo.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        opponentTwo.meeba2Target = true;
                                    meebaItem.validAttackChoice = true;
                                    Console.WriteLine(meebaItem.name + " will attack " + opponentTwo.name);
                                    Thread.Sleep(1000);
                                }
                                else if (meeba1AttackInput == "3" && opponentThree.HP > 0 && opponentThree.active == true)
                                {
                                    if (meebaItem.ID == 1)
                                        opponentThree.meeba1Target = true;
                                    else if (meebaItem.ID == 2)
                                        opponentThree.meeba2Target = true;
                                    meebaItem.validAttackChoice = true;
                                    Console.WriteLine(meebaItem.name + " will attack " + opponentThree.name);
                                    Thread.Sleep(1000);
                                }
                                else
                                {
                                    MainMenu.DecrementCursorTop(1);
                                    Console.Write(new string(' ', Console.WindowWidth));
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                        MainMenu.DecrementCursorTop(3);
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        MainMenu.DecrementCursorTop(4);
                                    else
                                        MainMenu.DecrementCursorTop(5);
                                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                                    {
                                        if (meebaItem.ID == 1)
                                            opponentOne.meeba1Target = true;
                                        else if (meebaItem.ID == 2)
                                            opponentOne.meeba2Target = true;
                                        meebaItem.validAttackChoice = true;
                                        Console.WriteLine(meebaItem.name + " will attack " + opponentOne.name);
                                        Thread.Sleep(1000);
                                    }
                                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED"));
                                    else
                                        Console.WriteLine("Which enemy will " + meebaItem.name + " attack? \n1: " + (opponentOne.HP > 0 ? opponentOne.name : "DEFEATED") + "\n2: " + (opponentTwo.HP > 0 ? opponentTwo.name : "DEFEATED") + " \n3: " + (opponentThree.HP > 0 ? opponentThree.name : "DEFEATED"));
                                    Console.Write("> ");
                                    meeba1AttackInput = Console.ReadLine().ToLower().Trim();
                                    if (meeba1AttackInput.Length > 80) //makes input max of 80 chars
                                    {
                                        double textlength = meeba1AttackInput.Length;
                                        for (int i = 80; i <= textlength; i += 80)
                                        {
                                            MainMenu.DecrementCursorTop(1);
                                            Console.Write(new string(' ', Console.WindowWidth));
                                            MainMenu.DecrementCursorTop(1);
                                        }
                                        meeba1AttackInput = meeba1AttackInput.Remove(80);
                                    }
                                }
                            } while (meebaItem.validAttackChoice == false);
                        }

                        if (meebaItem.currentMove.attackType == "OffensiveAndDefensive")
                            if (meebaItem.ID == 1)
                                meebaItem.meeba1Target = true; //targets self for defensive
                            else if (meebaItem.ID == 2)
                                meebaItem.meeba2Target = true;
                            else if (meebaItem.currentMove.attackType == "OffensiveAndDefensiveAll")
                            {
                                if (meebaItem.ID == 1)
                                    playerStats.meeba1Target = true;
                                else if (meebaItem.ID == 2)
                                    playerStats.meeba2Target = true;
                                if (meebaItem.ID == 1)
                                    meeba.meeba1Target = true;
                                else if (meebaItem.ID == 2)
                                    meeba.meeba2Target = true;
                                if (meebaItem.ID == 1)
                                    meeba2.meeba1Target = true;
                                else if (meebaItem.ID == 2)
                                    meeba2.meeba2Target = true;
                                if (meebaItem.currentMove.name == "Dust Devil")
                                    meebaItem.DustDevilCounter = 1;
                                if (meebaItem.currentMove.name == "Snowstorm")
                                    meebaItem.SnowStormCounter = 1;
                            }
                    }
                }
            }
        }

        public void playerAttack()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            playerStats.hasTakenTurn = true;
            foreach (var item in ThisBattleEnemies)
            {
                if (item.playerTarget == true)
                {
                    if (item.HP == 0)
                    {
                        Console.WriteLine(playerStats.name + " tried to attack " + item.name);
                        Thread.Sleep(1000);
                        Console.WriteLine(item.name + " has already been defeated");
                        Thread.Sleep(1000);
                    }
                    else
                    {
                        int accurateHit = random.Next(100);
                        if (accurateHit <= playerStats.playerAccuracy)
                        {
                            TypeAdvantagePlayer();
                            if (item.defensive == true)
                                tempOppDefense = item.tempDefense;
                            else if (item.defensive == false)
                                tempOppDefense = item.tempDefenseStatChange;
                            tempAllyHit = random.Next(Convert.ToInt16(playerStats.playerMaxHit), 101);
                            damageCalcPlayerAttacking = 1 + Math.Round((((playerStats.tempAttack / (tempOppDefense/4)) * (playerStats.playerLevel / 2) * tempPlayerTypeAdv * tempAllyItemBonus) / 100) * tempAllyHit);
                            Console.WriteLine("You attacked " + item.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(item.name + " took {0} damage", damageCalcPlayerAttacking);
                            Thread.Sleep(1000);
                            if ((item.HP - damageCalcPlayerAttacking) > 0)
                                Console.WriteLine(item.name + " has {0} HP", (item.HP - damageCalcPlayerAttacking));
                            else
                                Console.WriteLine(item.name + " has 0 HP");
                            Thread.Sleep(1000);
                            if ((item.HP - damageCalcPlayerAttacking) <= 0)
                            {
                                Console.WriteLine("You defeated {0}", item.name);
                                Thread.Sleep(1000);
                            }

                            item.HP -= damageCalcPlayerAttacking;
                            if (item.HP < 0)
                                item.HP = 0;
                        }
                        else
                        {
                            Console.WriteLine(playerStats.name + "'s attack missed");
                            Thread.Sleep(1000);
                        }

                    }
                    if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                        currentState = BattleState.Win;
                    else if (playerStats.playerCurrentHP <= 0)
                        currentState = BattleState.Lose;
                    else
                        currentState = BattleState.SpeedComparison;
                    item.playerTarget = false;
                }
            }
        }

        public void playerDefend()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            playerStats.textColour = ConsoleColor.Yellow;
            playerStats.hasTakenTurn = true;
            Console.WriteLine("You are defending");
            Thread.Sleep(1000);
            playerStats.tempDefense *= 3;
        }

        public void playerItem()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            playerStats.hasTakenTurn = true;
            bool usedItem = false;
            do
            {
                if (itemChoice == examItem.itemName)
                {
                    if (examItem.allyTargetBattle == true)  //assign to tempallyitembonus if stat boost or something - CHANGE
                    {
                        //HP Gain
                        if (examItem.itemHPGain > 0)
                        {
                            if (playerStats.playerTarget == true)
                            {
                                Console.WriteLine("You used the {0}", examItem.itemName);
                                Thread.Sleep(1000);
                                if (playerStats.playerCurrentHP == playerStats.playerMaxHP)
                                {
                                    Console.WriteLine("You are already at maximum health");
                                    Thread.Sleep(1000);
                                }

                                else if (playerStats.playerCurrentHP < playerStats.playerMaxHP)
                                {
                                    double healthGainCalc = playerStats.playerMaxHP - playerStats.playerCurrentHP; //hp deficit
                                    Console.WriteLine("You restored {0} HP", healthGainCalc < examItem.itemHPGain ? healthGainCalc : examItem.itemHPGain);
                                    Thread.Sleep(1000);
                                    playerStats.playerCurrentHP += examItem.itemHPGain;
                                    if (playerStats.playerCurrentHP > playerStats.playerMaxHP)
                                        playerStats.playerCurrentHP = playerStats.playerMaxHP;
                                    Console.WriteLine("You have {0} HP", playerStats.playerCurrentHP);
                                    Thread.Sleep(1000);
                                }
                                inventory.dictionary[examItem.itemName] -= 1;
                                if (inventory.dictionary[examItem.itemName] == 0)
                                    inventory.dictionary.Remove(examItem.itemName);
                                usedItem = true;
                                playerStats.playerTarget = false;
                            }
                            else if (meeba.playerTarget == true || meeba2.playerTarget == true)
                            {
                                foreach (var meebaItem in ThisBattleMeebas)
                                {
                                    if (meebaItem.ID == 1 && meeba.playerTarget == true || meebaItem.ID == 2 && meeba2.playerTarget == true)
                                    {
                                        Console.WriteLine("You used the {0}", examItem.itemName);
                                        Thread.Sleep(1000);
                                        if (meebaItem.currentHp == meebaItem.hp)
                                        {
                                            Console.WriteLine(meebaItem.name + " is already at maximum health");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meebaItem.currentHp < meebaItem.hp)
                                        {
                                            double healthGainCalc = meebaItem.hp - meebaItem.currentHp; //hp deficit
                                            Console.WriteLine(meebaItem.name + " restored {0} HP", healthGainCalc < examItem.itemHPGain ? healthGainCalc : examItem.itemHPGain);
                                            Thread.Sleep(1000);
                                            meebaItem.currentHp += examItem.itemHPGain;
                                            if (meebaItem.currentHp > meebaItem.hp)
                                                meebaItem.currentHp = meebaItem.hp;
                                            Console.WriteLine(meebaItem.name + " has {0} HP", meebaItem.currentHp);
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                        usedItem = true;
                                        meebaItem.playerTarget = false;
                                    }
                                }
                            } //meeba target
                        } //hp gain
                        //mp gain
                        else if (examItem.itemMPGain > 0)
                        {
                            if (playerStats.playerTarget == true)
                            {
                                Console.WriteLine("You tried to use the {0}, but you have no MP to regain.", examItem.itemName);
                                Thread.Sleep(1000);
                                usedItem = true;
                                playerStats.playerTarget = false;
                            }
                            else if (meeba.playerTarget == true || meeba2.playerTarget == true)
                            {
                                foreach (var meebaItem in ThisBattleMeebas)
                                {
                                    if (meebaItem.ID == 1 && meeba.playerTarget == true || meebaItem.ID == 2 && meeba2.playerTarget == true)
                                    {
                                        Console.WriteLine("You used the {0}", examItem.itemName);
                                        Thread.Sleep(1000);
                                        if (meebaItem.currentMP == meebaItem.MP)
                                        {
                                            Console.WriteLine(meebaItem.name + " already has maximum MP");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meebaItem.currentMP < meebaItem.MP)
                                        {
                                            double MPGainCalc = meebaItem.MP - meebaItem.currentMP; //hp deficit
                                            Console.WriteLine(meebaItem.name + " restored {0} MP", MPGainCalc < examItem.itemMPGain ? MPGainCalc : examItem.itemMPGain);
                                            Thread.Sleep(1000);
                                            meebaItem.currentMP += examItem.itemMPGain;
                                            if (meebaItem.currentMP > meebaItem.MP)
                                                meebaItem.currentMP = meebaItem.MP;
                                            Console.WriteLine(meebaItem.name + " has {0} MP", meebaItem.currentMP);
                                            Thread.Sleep(1000);
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                        usedItem = true;
                                        meebaItem.playerTarget = false;
                                    }
                                }
                            } //meeba target
                        } //mp gain
                        //poison-antidote
                        else if (examItem.antidote == true)
                        {
                            if (playerStats.playerTarget == true)
                            {
                                Console.WriteLine("You used the {0}", examItem.itemName);
                                Thread.Sleep(1000);
                                if (playerStats.isPoisoned == false && playerStats.isPoisonedTwo == false)
                                {
                                    Console.WriteLine("But you do not need an antidote");
                                    Thread.Sleep(1000);
                                }

                                else if (playerStats.isPoisoned == true || playerStats.isPoisonedTwo == true)
                                {
                                    Console.WriteLine("You are no longer poisoned");
                                    Thread.Sleep(1000);
                                    playerStats.isPoisoned = false;
                                    playerStats.isPoisonedTwo = false;
                                }
                                inventory.dictionary[examItem.itemName] -= 1;
                                if (inventory.dictionary[examItem.itemName] == 0)
                                    inventory.dictionary.Remove(examItem.itemName);
                                usedItem = true;
                                playerStats.playerTarget = false;
                            }
                            else if (meeba.playerTarget == true || meeba2.playerTarget == true)
                            {
                                foreach (var meebaItem in ThisBattleMeebas)
                                {
                                    if (meebaItem.ID == 1 && meeba.playerTarget == true || meebaItem.ID == 2 && meeba2.playerTarget == true)
                                    {
                                        Console.WriteLine("You used the {0}", examItem.itemName);
                                        Thread.Sleep(1000);
                                        if (meebaItem.isPoisoned == false && meebaItem.isPoisonedTwo == false)
                                        {
                                            Console.WriteLine("But " + meebaItem.name + " does not need an antidote");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meebaItem.isPoisoned == true || meebaItem.isPoisonedTwo == true)
                                        {
                                            Console.WriteLine(meebaItem.name + " is no longer poisoned");
                                            Thread.Sleep(1000);
                                            meebaItem.isPoisoned = false;
                                            meebaItem.isPoisonedTwo = false;
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                        usedItem = true;
                                        meebaItem.playerTarget = false;
                                    }
                                }
                            } //meeba target
                        } //antidote
                        //awakening
                        else if (examItem.awaken == true)
                        {
                            if (playerStats.playerTarget == true)
                            {
                                Console.WriteLine("You used the {0}", examItem.itemName);
                                Thread.Sleep(1000);
                                if (playerStats.isAsleep)
                                {
                                    Console.WriteLine("But you do not need to be woken");
                                    Thread.Sleep(1000);
                                }
                                else if (playerStats.isAsleep == true)
                                {
                                    Console.WriteLine("You woke up");
                                    Thread.Sleep(1000);
                                    playerStats.isAsleep = false;
                                }
                                inventory.dictionary[examItem.itemName] -= 1;
                                if (inventory.dictionary[examItem.itemName] == 0)
                                    inventory.dictionary.Remove(examItem.itemName);
                                usedItem = true;
                                playerStats.playerTarget = false;
                            }
                            else if (meeba.playerTarget == true || meeba2.playerTarget == true)
                            {
                                foreach (var meebaItem in ThisBattleMeebas)
                                {
                                    if (meebaItem.ID == 1 && meeba.playerTarget == true || meebaItem.ID == 2 && meeba2.playerTarget == true)
                                    {
                                        Console.WriteLine("You used the {0}", examItem.itemName);
                                        Thread.Sleep(1000);
                                        if (meebaItem.isAsleep == false)
                                        {
                                            Console.WriteLine("But " + meebaItem.name + " does not need to be woken");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meebaItem.isAsleep == true)
                                        {
                                            Console.WriteLine(meebaItem.name + " woke up");
                                            Thread.Sleep(1000);
                                            meebaItem.isAsleep = false;
                                        }
                                        inventory.dictionary[examItem.itemName] -= 1;
                                        if (inventory.dictionary[examItem.itemName] == 0)
                                            inventory.dictionary.Remove(examItem.itemName);
                                        usedItem = true;
                                        meebaItem.playerTarget = false;
                                    }
                                }
                            } //meeba target
                        } //awakening
                        //Defensive
                    }
                    //Offensive
                    if (examItem.opponentTargetBattle == true)
                    {
                        foreach (var item in ThisBattleEnemies)
                        {
                            if (item.playerTarget == true)
                            {
                                if (item.HP == 0)
                                {
                                    Console.WriteLine(playerStats.name + " tried to attack " + item.name);
                                    Thread.Sleep(1000);
                                    Console.WriteLine(item.name + " has already been defeated");
                                    Thread.Sleep(1000);
                                }
                                else if (item.DamageProtected != true)
                                {
                                    int accurateHit = random.Next(100);
                                    if (accurateHit <= playerStats.playerAccuracy)
                                    {
                                        if (item.defensive == true)
                                            tempOppDefense = item.tempDefense;
                                        else if (item.defensive == false)
                                            tempOppDefense = item.tempDefenseStatChange;
                                        tempAllyHit = random.Next(Convert.ToInt16(playerStats.playerMaxHit), 101);
                                        damageCalcPlayerAttacking = 1 + Math.Round((((examItem.battleDamage / (tempOppDefense/4)) * (playerStats.playerLevel / 2)) / 100) * tempAllyHit);
                                        Console.WriteLine("You attacked {0} with the {1}", item.name, examItem.itemName);
                                        Thread.Sleep(1000);
                                        Console.WriteLine(item.name + " took {0} damage", damageCalcPlayerAttacking);
                                        Thread.Sleep(1000);
                                        if ((item.HP - damageCalcPlayerAttacking) > 0)
                                            Console.WriteLine(item.name + " has {0} HP", (item.HP - damageCalcPlayerAttacking));
                                        else
                                            Console.WriteLine(item.name + " has 0 HP");
                                        Thread.Sleep(1000);
                                        if ((item.HP - damageCalcPlayerAttacking) <= 0)
                                        {
                                            Console.WriteLine("You defeated {0}", item.name);
                                            Thread.Sleep(1000);
                                        }
                                        item.HP -= damageCalcPlayerAttacking;
                                        if (item.HP < 0)
                                            item.HP = 0;
                                    }
                                    else
                                    {
                                        Console.WriteLine("You missed");
                                        Thread.Sleep(1000);
                                    }
                                    inventory.dictionary[examItem.itemName] -= 1;
                                    if (inventory.dictionary[examItem.itemName] == 0)
                                        inventory.dictionary.Remove(examItem.itemName);
                                }
                                else
                                    Console.WriteLine(item.name + " is protected from damage");
                                if (opponentOne.HP == 0 && opponentTwo.HP == 0 && opponentThree.HP == 0 && playerStats.playerCurrentHP > 0)
                                    currentState = BattleState.Win;
                                else if (playerStats.playerCurrentHP <= 0)
                                    currentState = BattleState.Lose;
                                else
                                    currentState = BattleState.SpeedComparison;
                                usedItem = true;
                                item.playerTarget = false;
                            }
                        }
                    } //offensive
                    //status change
                    //if (meebaitem.StatusProtected == true)
                    //{
                    //    Console.WriteLine(meebaitem.name + "is protected from status changes");
                    //    Thread.Sleep(1000);
                    //}
                }
            } while (usedItem == false);
        }

        public void playerRun()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            playerStats.hasTakenTurn = true;
            playerStats.defensive = false;
            if (((opponentOne.speed + opponentTwo.speed + opponentThree.speed) / 3) >= playerStats.playerMaxSpeed)
            {
                if (random.Next(0, 3) == 0)
                {
                    Console.WriteLine("You failed to escape");
                    Thread.Sleep(1000);
                    currentState = BattleState.SpeedComparison;
                }
                else if (random.Next(0, 3) == 1 || random.Next(0, 3) == 2 || random.Next(0, 3) == 3)
                {
                    Console.WriteLine("You escaped the battle");
                    Thread.Sleep(1000);
                    Console.Clear();
                    currentState = BattleState.Exit;
                }
            }
            else
            {
                Console.WriteLine("You escaped the battle");
                Thread.Sleep(1000);
                Console.Clear();
                currentState = BattleState.Exit;
            }
        }

        public void MeebaDefend()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneDefend || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoDefend)
                {
                    meebaItem.textColour = ConsoleColor.Gray;
                    meebaItem.hasTakenTurn = true;
                    meebaItem.tempDefense *= 3;
                    Console.WriteLine("{0} is defending", meebaItem.name);
                    Thread.Sleep(1000);
                }
            }
        }

        public void MeebaOffensiveAttack()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneSpecial || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoSpecial)
                {
                    foreach (var item in ThisBattleEnemies)
                    {
                        if (meebaItem.ID == 1 && item.ID == 1 && item.meeba1Target == true
                            || meebaItem.ID == 1 && item.ID == 2 && item.meeba1Target == true
                            || meebaItem.ID == 1 && item.ID == 3 && item.meeba1Target == true
                            || meebaItem.ID == 2 && item.ID == 1 && item.meeba2Target == true
                            || meebaItem.ID == 2 && item.ID == 2 && item.meeba2Target == true
                            || meebaItem.ID == 2 && item.ID == 3 && item.meeba2Target == true)

                            if (item.HP == 0 && item.active == true && meebaItem.currentMove.name != "Pyroclastic Flow")
                            {
                                Console.WriteLine(meebaItem.name + " tried to attack " + item.name);
                                Thread.Sleep(1000);
                                Console.WriteLine(item.name + " has already been defeated");
                                Thread.Sleep(1000);
                            }
                            else if (item.active != false)
                            {
                                int accurateHit = random.Next(100);
                                if (accurateHit <= meebaItem.currentMove.accuracy)
                                {
                                    if (meebaItem.currentMove.BMP > 0)
                                    {
                                        if (meebaItem.PyroclasticFlowCounter == 1)
                                        {
                                            meebaItem.currentMP -= 13;
                                            if (meebaItem.currentMP < 0)
                                                meebaItem.currentMP = 0;
                                            Console.WriteLine(meebaItem.name + " summoned a lava flow");
                                            Thread.Sleep(1000);
                                            meebaItem.PyroclasticFlowCounter = 2;
                                        }
                                        else if (meebaItem.currentMove.name != "Pyroclastic Flow")
                                        {
                                            tempAllyAttack = meebaItem.tempAttack;
                                            if (item.defensive == true)
                                                tempOppDefense = item.tempDefense;
                                            else if (item.defensive == false)
                                                tempOppDefense = item.tempDefenseStatChange;
                                            tempAllyMoveBasePower = meebaItem.currentMove.BMP;
                                            TypeAdvantageAlly();
                                            STABAlly(); //tempAllySTAB =
                                            tempAllyHit = random.Next(meebaItem.hitRange, 101);
                                            damageCalcAllyAttacking = 1 + Math.Round((((tempAllyAttack / tempOppDefense) * tempAllyMoveBasePower * tempAllyItemBonus * tempAllyTypeAdv * tempAllySTAB) / 100) * tempAllyHit);
                                            meebaItem.currentMP -= meebaItem.currentMove.MP;
                                            if (meebaItem.currentMP < 0)
                                                meebaItem.currentMP = 0;
                                            Console.WriteLine("{0} attacked {1} with {2}", meebaItem.name, item.name, meebaItem.currentMove.name);
                                            Thread.Sleep(1000);
                                            Console.WriteLine(item.name + " took {0} damage", damageCalcAllyAttacking);
                                            Thread.Sleep(1000);
                                            if ((item.HP - damageCalcAllyAttacking) > 0)
                                                Console.WriteLine(item.name + " has {0} HP", (item.HP - damageCalcAllyAttacking));
                                            else
                                                Console.WriteLine(item.name + " has 0 HP");
                                            Thread.Sleep(1000);
                                            if ((item.HP - damageCalcAllyAttacking) <= 0)
                                            {
                                                Console.WriteLine(meebaItem.name + " defeated {0}", item.name);
                                                Thread.Sleep(1000);
                                            }
                                            item.HP -= damageCalcAllyAttacking;
                                            if (item.HP < 0)
                                                item.HP = 0;
                                            if (meebaItem.currentMove.name == "Deluge")
                                                meebaItem.tempSpeed -= 1000;
                                            if (meebaItem.currentMove.name == "Leaching Roots")
                                                meebaItem.LeachingRootsHP = 1 + Math.Round(damageCalcAllyAttacking * 0.4);
                                        }

                                        if (meebaItem.currentMove.name == "Pyriscent Bullets") //2 more attacks
                                        {
                                            tempAllyHit = random.Next(meebaItem.hitRange, 101);
                                            damageCalcAllyAttacking = 1 + Math.Round((((tempAllyAttack / tempOppDefense) * tempAllyMoveBasePower * tempAllyItemBonus * tempAllyTypeAdv * tempAllySTAB) / 100) * tempAllyHit);
                                            Console.WriteLine("{0} attacked {1} with {2}", meebaItem.name, item.name, meebaItem.currentMove.name);
                                            Thread.Sleep(1000);
                                            Console.WriteLine(item.name + " took {0} damage", damageCalcAllyAttacking);
                                            Thread.Sleep(1000);
                                            if ((item.HP - damageCalcAllyAttacking) > 0)
                                                Console.WriteLine(item.name + " has {0} HP", (item.HP - damageCalcAllyAttacking));
                                            else
                                                Console.WriteLine(item.name + " has 0 HP");
                                            Thread.Sleep(1000);
                                            if ((item.HP - damageCalcAllyAttacking) <= 0)
                                            {
                                                Console.WriteLine(meebaItem.name + " defeated {0}", item.name);
                                                Thread.Sleep(1000);
                                                break;
                                            }
                                            item.HP -= damageCalcAllyAttacking;
                                            if (item.HP < 0)
                                                item.HP = 0;

                                            tempAllyHit = random.Next(meebaItem.hitRange, 101);
                                            damageCalcAllyAttacking = 1 + Math.Round((((tempAllyAttack / tempOppDefense) * tempAllyMoveBasePower * tempAllyItemBonus * tempAllyTypeAdv * tempAllySTAB) / 100) * tempAllyHit);
                                            Console.WriteLine("{0} attacked {1} with {2}", meebaItem.name, item.name, meebaItem.currentMove.name);
                                            Thread.Sleep(1000);
                                            Console.WriteLine(item.name + " took {0} damage", damageCalcAllyAttacking);
                                            Thread.Sleep(1000);
                                            if ((item.HP - damageCalcAllyAttacking) > 0)
                                                Console.WriteLine(item.name + " has {0} HP", (item.HP - damageCalcAllyAttacking));
                                            else
                                                Console.WriteLine(item.name + " has 0 HP");
                                            Thread.Sleep(1000);
                                            if ((item.HP - damageCalcAllyAttacking) <= 0)
                                            {
                                                Console.WriteLine(meebaItem.name + " defeated {0}", item.name);
                                                Thread.Sleep(1000);
                                            }
                                            item.HP -= damageCalcAllyAttacking;
                                            if (item.HP < 0)
                                                item.HP = 0;
                                        }
                                    }
                                    //Opponent defense decrease
                                    if (meebaItem.currentMove.oppDefenseDecrease > 0)
                                    {
                                        if (item.StatusProtected == true)
                                        {
                                            Console.WriteLine(item.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (item.tempDefenseStatChange > (item.defense / 3))
                                        {
                                            Console.WriteLine(item.name + "'s defense decreased");
                                            Thread.Sleep(1000);
                                            item.tempDefenseStatChange *= meebaItem.currentMove.oppDefenseDecrease;
                                        }
                                        else
                                        {
                                            Console.WriteLine(item.name + "'s defense is at minimum capacity");
                                            Thread.Sleep(1000);
                                        }
                                    }
                                    //Opponent speed decrease
                                    if (meebaItem.currentMove.oppSpeedDecrease > 0)
                                    {
                                        if (item.StatusProtected == true)
                                        {
                                            Console.WriteLine(item.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (item.tempSpeedStatChange > (item.speed / 3))
                                        {
                                            Console.WriteLine(item.name + "'s speed decreased");
                                            Thread.Sleep(1000);
                                            item.tempSpeedStatChange *= meebaItem.currentMove.oppSpeedDecrease;
                                        }
                                        else
                                        {
                                            Console.WriteLine(item.name + "'s speed is at minimum capacity");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Posion Inflicted?
                                    if (meebaItem.currentMove.poisonChance > 0 && item.isPoisoned != true)
                                    {
                                        int poison = random.Next(100);
                                        if (item.StatusProtected == true)
                                        {
                                            Console.WriteLine(item.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (poison <= meebaItem.currentMove.poisonChance)
                                        {
                                            Console.WriteLine(meebaItem.name + " poisoned " + item.name);
                                            Thread.Sleep(1000);
                                            item.isPoisoned = true;
                                            item.poisonTracker = 0;
                                        }
                                        else
                                        {
                                            Console.WriteLine("The poison was ineffective");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Poison Passive Ability
                                    if (meebaItem.poisonChance > 0)
                                    {
                                        int poison = random.Next(100);
                                        if (item.StatusProtected == true)
                                        {
                                            Console.WriteLine(item.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (poison <= meebaItem.poisonChance)
                                        {
                                            Console.WriteLine(meebaItem.name + " poisoned " + item.name);
                                            Thread.Sleep(1000);
                                            if (meebaItem.poisonOne == true && meebaItem.poisonTwo != true)
                                                item.isPoisoned = true;
                                            else if (meebaItem.poisonTwo == true)
                                                item.isPoisonedTwo = true;
                                            item.poisonTracker = 0;
                                        }
                                        else
                                        {
                                            Console.WriteLine("The poison was ineffective");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Stun Inflicted?
                                    if (meebaItem.currentMove.stunChance > 0)
                                    {
                                        int stun = random.Next(100);
                                        if (item.StatusProtected == true)
                                        {
                                            Console.WriteLine(item.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (stun <= meebaItem.currentMove.stunChance)
                                        {
                                            Console.WriteLine(meebaItem.name + " stunned " + item.name + ", it may not attack");
                                            Thread.Sleep(1000);
                                            item.isStunned = true;
                                        }
                                    }
                                    //Sleep Inflicted?
                                    if (meebaItem.currentMove.sleepChance > 0)
                                    {
                                        int sleep = random.Next(100);
                                        if (item.StatusProtected == true)
                                        {
                                            Console.WriteLine(item.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (sleep <= meebaItem.currentMove.sleepChance)
                                        {
                                            Console.WriteLine(meebaItem.name + " lulled " + item.name + " to sleep");
                                            Thread.Sleep(1000);
                                            item.isAsleep = true;
                                        }
                                        else
                                        {
                                            Console.WriteLine(item.name + " stayed awake");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Life leech passive ability?
                                    if (meebaItem.lifeLeech == true && item.HP > 0 && meebaItem.currentMove.name != "Pyroclastic Flow")
                                    {
                                        int lifeleeach = random.Next(100);
                                        if (lifeleeach <= meebaItem.lifeLeechChance)
                                        {
                                            Console.WriteLine(meebaItem.name + " leeched some life from " + item.name);
                                            Thread.Sleep(1000);
                                            meebaItem.currentHp += Math.Round((meebaItem.hp / 100) * meebaItem.lifeLeechHeal);
                                            if (meebaItem.currentHp > meebaItem.hp)
                                                meebaItem.currentHp = meebaItem.hp;
                                        }
                                    }
                                }
                                else
                                {
                                    Console.WriteLine(meebaItem.name + "'s attack missed " + item.name);
                                    Thread.Sleep(1000);
                                }

                            }
                        if (meebaItem.ID == 1)
                            item.meeba1Target = false;
                        else if (meebaItem.ID == 2)
                            item.meeba2Target = false;
                    }
                }
            }
        }

        public void meebaDefensiveAttackPlayerTarget()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneSpecial || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoSpecial)
                {
                    int accurateHit = random.Next(100);
                    if (accurateHit <= meebaItem.currentMove.accuracy)
                    {
                        meebaItem.currentMP -= meebaItem.currentMove.MP;
                        if (meebaItem.currentMP < 0)
                            meebaItem.currentMP = 0;
                        Console.WriteLine("{0} targeted {1} with {2}", meebaItem.name, playerStats.name, meebaItem.currentMove.name);
                        Thread.Sleep(1000);

                        //Healing?
                        if (meebaItem.currentMove.healChance > 0)
                        {
                            int heal = random.Next(100);
                            if (heal <= meebaItem.currentMove.healChance)
                            {
                                double healHP = Math.Round((playerStats.playerMaxHP * meebaItem.currentMove.healAmount) / 100);
                                //prints heal amount or remaining hp if there is a remainder from the healhp
                                Console.WriteLine(meebaItem.name + " healed " + playerStats.name + " for {0} HP", healHP >= (playerStats.playerMaxHP - playerStats.playerCurrentHP) ? (playerStats.playerMaxHP - playerStats.playerCurrentHP) : healHP);
                                playerStats.playerCurrentHP += healHP;
                                if (playerStats.playerCurrentHP > playerStats.playerMaxHP) //cannot go above max hp
                                    playerStats.playerCurrentHP = playerStats.playerMaxHP;
                                Thread.Sleep(1000);
                            }
                            else
                            {
                                Console.WriteLine("No healing is needed for " + playerStats.name);
                                Thread.Sleep(1000);
                            }
                        }
                        //Stat Increase? - def
                        if (meebaItem.currentMove.defIncrease > 0)
                        {
                            if (playerStats.tempDefenseStatChange < (playerStats.playerMaxDefense * 3))
                            {
                                Console.WriteLine(playerStats.name + "'s defense increased");
                                Thread.Sleep(1000);
                                playerStats.tempDefenseStatChange *= meebaItem.currentMove.defIncrease;
                            }
                            else
                            {
                                Console.WriteLine(playerStats.name + "'s defense is at maximum capacity");
                                Thread.Sleep(1000);
                            }
                        }
                        //spd
                        if (meebaItem.currentMove.spdIncrease > 0)
                        {
                            if (playerStats.tempSpeed < (playerStats.playerMaxSpeed * 3))
                            {
                                Console.WriteLine(playerStats.name + "'s speed increased");
                                Thread.Sleep(1000);
                                playerStats.tempSpeed *= meebaItem.currentMove.spdIncrease;
                            }
                            else
                            {
                                Console.WriteLine(playerStats.name + "'s speed is at maximum capacity");
                                Thread.Sleep(1000);
                            }
                        }
                        //atk
                        if (meebaItem.currentMove.attackIncrease > 0)
                        {
                            if (playerStats.tempAttack < (playerStats.playerMaxStrength * 3))
                            {
                                Console.WriteLine(playerStats.name + "'s attack increased");
                                Thread.Sleep(1000);
                                playerStats.tempAttack *= meebaItem.currentMove.attackIncrease;
                            }
                            else
                            {
                                Console.WriteLine(playerStats.name + "'s attack is at maximum capacity");
                                Thread.Sleep(1000);
                            }
                        }
                        //Status protect
                        if (meebaItem.currentMove.statusProtection == true)
                        {
                            playerStats.StatusProtected = true;
                            if (meebaItem.currentMove.name == "Sand Shroud")
                                playerStats.statusProtectCounterSS = 1;
                            else if (meebaItem.currentMove.name == "Rock Fort")
                                playerStats.statusProtectCounterRF = 1;
                            else if (meebaItem.currentMove.name == "Stonewort")
                                playerStats.statusProtectCounterSW = 1;
                            Console.WriteLine(playerStats.name + " is protected from status changes");
                            Thread.Sleep(1000);
                        }
                        //Damage protect
                        if (meebaItem.currentMove.damageProtection == true)
                        {
                            playerStats.DamageProtected = true;
                            playerStats.damageProtectCounter = 1;
                            Console.WriteLine(playerStats.name + " is protected from damage");
                            Thread.Sleep(1000);
                        }
                    }
                    else
                    {
                        Console.WriteLine(meebaItem.name + "'s attack missed " + playerStats.name);
                        Thread.Sleep(1000);
                    }
                    if (meebaItem.ID == 1)
                        playerStats.meeba1Target = false;
                    else if (meebaItem.ID == 2)
                        playerStats.meeba2Target = false;
                }
            }
        }

        public void meebaDefensiveAttack()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var meebaItem in ThisBattleMeebas) //meeba1 attacking, meeba2 attacking
            {
                if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneSpecial || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoSpecial)
                {
                    foreach (var meebaItemTarget in ThisBattleMeebas) //meeba1 is target, meeba2 is target
                    {
                        if (meebaItem.ID == 1 && meebaItemTarget.ID == 1 && meebaItemTarget.meeba1Target == true
                            || meebaItem.ID == 1 && meebaItemTarget.ID == 2 && meebaItemTarget.meeba1Target == true
                            || meebaItem.ID == 2 && meebaItemTarget.ID == 1 && meebaItemTarget.meeba2Target == true
                            || meebaItem.ID == 2 && meebaItemTarget.ID == 2 && meebaItemTarget.meeba2Target == true)
                        {
                            int accurateHit = random.Next(100);
                            if (accurateHit <= meeba.currentMove.accuracy)
                            {
                                meebaItem.currentMP -= meebaItem.currentMove.MP;
                                if (meebaItem.currentMP < 0)
                                    meebaItem.currentMP = 0;
                                Console.WriteLine("{0} targeted {1} with {2}", meebaItem.name, meebaItemTarget.name, meebaItem.currentMove.name);
                                Thread.Sleep(1000);

                                //Healing?
                                if (meebaItem.currentMove.healChance > 0)
                                {
                                    int heal = random.Next(100);
                                    if (heal <= meebaItem.currentMove.healChance)
                                    {
                                        double healHP = 0;
                                        if (meebaItem.currentMove.name == "Leaching Roots")
                                            healHP = meebaItem.LeachingRootsHP;
                                        else
                                            healHP = Math.Round((meebaItemTarget.hp * meebaItemTarget.currentMove.healAmount) / 100);
                                        Console.WriteLine(meebaItem.name + " healed " + meebaItemTarget.name + " for {0} HP", healHP >= (meebaItemTarget.hp - meebaItemTarget.currentHp) ? (meebaItemTarget.hp - meebaItemTarget.currentHp) : healHP);
                                        meebaItemTarget.currentHp += healHP;
                                        if (meebaItemTarget.currentHp > meebaItemTarget.hp) //cannot go above max hp
                                            meebaItemTarget.currentHp = meebaItemTarget.hp;
                                        Thread.Sleep(1000);
                                    }
                                    else
                                    {
                                        Console.WriteLine("No healing is needed for " + meebaItemTarget.name);
                                        Thread.Sleep(1000);
                                    }
                                    if (meebaItem.ID == 1)
                                    {
                                        meebaItemTarget.meeba1Target = false; //No longer targeted by meeba1
                                        playerStats.meeba1Target = false;
                                    }
                                    if (meebaItem.ID == 2)
                                    {
                                        playerStats.meeba2Target = false; //No longer targeted by meeba2
                                        meebaItemTarget.meeba2Target = false;
                                    }
                                }
                                //Stat Increase? - def
                                if (meebaItem.currentMove.defIncrease > 0)
                                {
                                    if (meebaItemTarget.tempDefenseStatChange < (meebaItemTarget.defense * 3))
                                    {
                                        Console.WriteLine(meebaItemTarget.name + "'s defense increased");
                                        Thread.Sleep(1000);
                                        meebaItemTarget.tempDefenseStatChange *= meebaItem.currentMove.defIncrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(meebaItemTarget.name + "'s defense is at maximum capacity");
                                        Thread.Sleep(1000);
                                    }
                                    if (meebaItem.ID == 1)
                                    {
                                        meebaItemTarget.meeba1Target = false; //No longer targeted by meeba1
                                        playerStats.meeba1Target = false;
                                    }
                                    if (meebaItem.ID == 2)
                                    {
                                        playerStats.meeba2Target = false; //No longer targeted by meeba2
                                        meebaItemTarget.meeba2Target = false;
                                    }
                                }
                                //spd
                                if (meebaItem.currentMove.spdIncrease > 0)
                                {
                                    if (meebaItemTarget.tempSpeed < (meebaItemTarget.speed * 3))
                                    {
                                        Console.WriteLine(meebaItemTarget.name + "'s speed increased");
                                        Thread.Sleep(1000);
                                        meebaItemTarget.tempSpeed *= meebaItem.currentMove.spdIncrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(meebaItemTarget.name + "'s speed is at maximum capacity");
                                        Thread.Sleep(1000);
                                    }
                                    if (meebaItem.ID == 1)
                                    {
                                        meebaItemTarget.meeba1Target = false; //No longer targeted by meeba1
                                        playerStats.meeba1Target = false;
                                    }
                                    if (meebaItem.ID == 2)
                                    {
                                        playerStats.meeba2Target = false; //No longer targeted by meeba2
                                        meebaItemTarget.meeba2Target = false;
                                    }
                                }
                                //atk
                                if (meebaItem.currentMove.attackIncrease > 0)
                                {
                                    if (meebaItemTarget.tempAttack < (meebaItemTarget.attack * 3))
                                    {
                                        Console.WriteLine(meebaItemTarget.name + "'s attack increased");
                                        Thread.Sleep(1000);
                                        meebaItemTarget.tempAttack *= meebaItem.currentMove.attackIncrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(meebaItemTarget.name + "'s attack is at maximum capacity");
                                        Thread.Sleep(1000);
                                    }
                                    if (meebaItem.ID == 1)
                                    {
                                        meebaItemTarget.meeba1Target = false; //No longer targeted by meeba1
                                        playerStats.meeba1Target = false;
                                    }
                                    if (meebaItem.ID == 2)
                                    {
                                        playerStats.meeba2Target = false; //No longer targeted by meeba2
                                        meebaItemTarget.meeba2Target = false;
                                    }
                                }
                                //Status protect
                                if (meebaItem.currentMove.statusProtection == true)
                                {
                                    meebaItemTarget.StatusProtected = true;
                                    if (meebaItem.currentMove.name == "Sand Shroud")
                                        meebaItemTarget.statusProtectCounterSS = 1;
                                    else if (meebaItem.currentMove.name == "Rock Fort")
                                        meebaItemTarget.statusProtectCounterRF = 1;
                                    else if (meebaItem.currentMove.name == "Stonewort")
                                        meebaItemTarget.statusProtectCounterSW = 1;
                                    Console.WriteLine(meebaItemTarget.name + " is protected from status changes");
                                    Thread.Sleep(1000);
                                    if (meebaItem.ID == 1)
                                    {
                                        meebaItemTarget.meeba1Target = false; //No longer targeted by meeba1
                                        playerStats.meeba1Target = false;
                                    }
                                    if (meebaItem.ID == 2)
                                    {
                                        playerStats.meeba2Target = false; //No longer targeted by meeba2
                                        meebaItemTarget.meeba2Target = false;
                                    }
                                }
                                //Damage protect
                                if (meebaItem.currentMove.damageProtection == true)
                                {
                                    meebaItemTarget.DamageProtected = true;
                                    meebaItemTarget.damageProtectCounter = 1;
                                    Console.WriteLine(meebaItemTarget.name + " is protected from damage");
                                    Thread.Sleep(1000);
                                    if (meebaItem.ID == 1)
                                    {
                                        meebaItemTarget.meeba1Target = false; //No longer targeted by meeba1
                                        playerStats.meeba1Target = false;
                                    }
                                    if (meebaItem.ID == 2)
                                    {
                                        playerStats.meeba2Target = false; //No longer targeted by meeba2
                                        meebaItemTarget.meeba2Target = false;
                                    }
                                }
                            }
                            else
                            {
                                Console.WriteLine(meebaItem.name + "'s attack missed " + meebaItemTarget.name);
                                Thread.Sleep(1000);
                            }
                            if (meebaItem.ID == 1)
                                meebaItemTarget.meeba1Target = false;
                            else if (meebaItem.ID == 2)
                                meebaItemTarget.meeba2Target = false;
                        }
                    }
                }
            }
        }

        public void enemyMove()
        {
            foreach (var item in ThisBattleEnemies)
            {
                if (item.active == true && item.HP > 0)
                {
                    if (item.isStunned == true && item.HP > 0)
                    {
                        int stunCheck = random.Next(2);
                        if (stunCheck == 0)
                        {
                            item.hasTakenTurn = true;
                            Console.WriteLine(item.name + " is in a daze and cannot attack");
                            Thread.Sleep(1000);
                            item.isStunned = false;
                            currentState = BattleState.SpeedComparison;
                        }
                    }
                    if (item.choice == 1 && item.hasTakenTurn == false || item.choice == 4 && item.hasTakenTurn == false)
                    {
                        if (item.ID == 1 && currentState == BattleState.EnemyOneMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyOneAttack;
                        }
                        else if (item.ID == 2 && currentState == BattleState.EnemyTwoMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyTwoAttack;
                        }
                        else if (item.ID == 3 && currentState == BattleState.EnemyThreeMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyThreeAttack;
                        }
                        if (playerStats.opponent1Target == true && item.ID == 1 && currentState == BattleState.EnemyOneAttack)
                            playerStats.textColour = ConsoleColor.Red;
                        else if (playerStats.opponent2Target == true && item.ID == 2 && currentState == BattleState.EnemyTwoAttack)
                            playerStats.textColour = ConsoleColor.Red;
                        else if (playerStats.opponent3Target == true && item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                            playerStats.textColour = ConsoleColor.Red;

                        if (meeba.opponent1Target == true && item.ID == 1 && currentState == BattleState.EnemyOneAttack)
                            meeba.textColour = ConsoleColor.Red;
                        else if (meeba.opponent2Target == true && item.ID == 2 && currentState == BattleState.EnemyTwoAttack)
                            meeba.textColour = ConsoleColor.Red;
                        else if (meeba.opponent3Target == true && item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                            meeba.textColour = ConsoleColor.Red;

                        if (meeba2.opponent1Target == true && item.ID == 1 && currentState == BattleState.EnemyOneAttack)
                            meeba2.textColour = ConsoleColor.Red;
                        else if (meeba2.opponent2Target == true && item.ID == 2 && currentState == BattleState.EnemyTwoAttack)
                            meeba2.textColour = ConsoleColor.Red;
                        else if (meeba2.opponent3Target == true && item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                            meeba2.textColour = ConsoleColor.Red;

                        if (opponentOne.opponent1Target == true && item.ID == 1 && currentState == BattleState.EnemyOneAttack)
                            opponentOne.textColour = ConsoleColor.Green;
                        else if (opponentOne.opponent2Target == true && item.ID == 2 && currentState == BattleState.EnemyTwoAttack)
                            opponentOne.textColour = ConsoleColor.Green;
                        else if (opponentOne.opponent3Target == true && item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                            opponentOne.textColour = ConsoleColor.Green;
                        
                        if (opponentTwo.opponent1Target == true && item.ID == 1 && currentState == BattleState.EnemyOneAttack)
                            opponentTwo.textColour = ConsoleColor.Green;
                        else if (opponentTwo.opponent2Target == true && item.ID == 2 && currentState == BattleState.EnemyTwoAttack)
                            opponentTwo.textColour = ConsoleColor.Green;
                        else if (opponentTwo.opponent3Target == true && item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                            opponentTwo.textColour = ConsoleColor.Green;

                        if (opponentThree.opponent1Target == true && item.ID == 1 && currentState == BattleState.EnemyOneAttack)
                            opponentThree.textColour = ConsoleColor.Green;
                        else if (opponentThree.opponent2Target == true && item.ID == 2 && currentState == BattleState.EnemyTwoAttack)
                            opponentThree.textColour = ConsoleColor.Green;
                        else if (opponentThree.opponent3Target == true && item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                            opponentThree.textColour = ConsoleColor.Green;

                    }
                    else if (item.choice == 2 && item.hasTakenTurn == false)
                    {
                        if (item.ID == 1 && currentState == BattleState.EnemyOneMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyOneDefend;
                        }
                        else if (item.ID == 2 && currentState == BattleState.EnemyTwoMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyTwoDefend;
                        }
                        if (item.ID == 3 && currentState == BattleState.EnemyThreeMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyThreeDefend;
                        }
                    }

                    else if (item.choice == 3 && item.hasTakenTurn == false)
                    {
                        if (item.ID == 1 && currentState == BattleState.EnemyOneMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyOneRun;
                        }
                        else if (item.ID == 2 && currentState == BattleState.EnemyTwoMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyTwoRun;
                        }
                        if (item.ID == 3 && currentState == BattleState.EnemyThreeMove)
                        {
                            item.textColour = ConsoleColor.Yellow;
                            currentState = BattleState.EnemyThreeRun;
                        }
                    }
                }
            }
        }

        public void EnemyAttack()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var item in ThisBattleEnemies)
            {
                if (item.ID == 1 && currentState == BattleState.EnemyOneAttack || item.ID == 2 && currentState == BattleState.EnemyTwoAttack || item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                {
                    item.hasTakenTurn = true;
                    if (item.ID == 1 && currentState == BattleState.EnemyOneAttack && playerStats.opponent1Target == true
                        || item.ID == 2 && currentState == BattleState.EnemyTwoAttack && playerStats.opponent2Target == true
                        || item.ID == 3 && currentState == BattleState.EnemyThreeAttack && playerStats.opponent3Target == true)
                    {
                        if (playerStats.playerCurrentHP == 0)
                        {
                            Console.WriteLine(item.name + " tried to attack " + playerStats.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(playerStats.name + " has already been defeated");
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            int accurateHit = random.Next(100);
                            if (accurateHit <= item.accuracy)
                            {
                                if (playerStats.DamageProtected != true)
                                {
                                    if (playerStats.defensive == true)
                                        tempAllyDefense = playerStats.tempDefense;
                                    else if (playerStats.defensive == false)
                                        tempAllyDefense = playerStats.tempDefenseStatChange;
                                    tempOppAttack = item.tempAttack;
                                    tempOppMoveBasePower = item.currentMove.BMP;
                                    TypeAdvantageOppPlayer();
                                    STABOpp();
                                    tempOppHit = random.Next(item.hit, 101);
                                    damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                    Console.WriteLine(item.name + " attacked " + playerStats.name);
                                    Thread.Sleep(1000);
                                    Console.WriteLine("You took {0} damage", damageCalcOppAttacking);
                                    Thread.Sleep(1000);
                                    if ((playerStats.playerCurrentHP - damageCalcOppAttacking) > 0)
                                        Console.WriteLine(playerStats.name + " has {0} HP", (playerStats.playerCurrentHP - damageCalcOppAttacking));
                                    else
                                        Console.WriteLine(playerStats.name + " has 0 HP");
                                    Thread.Sleep(1000);
                                    if ((playerStats.playerCurrentHP - damageCalcOppAttacking) <= 0)
                                    {
                                        Console.WriteLine(item.name + " defeated " + playerStats.name);
                                        Thread.Sleep(1000);
                                    }
                                    playerStats.playerCurrentHP -= damageCalcOppAttacking;
                                    if (playerStats.playerCurrentHP < 0)
                                        playerStats.playerCurrentHP = 0;
                                }
                                else
                                    Console.WriteLine(playerStats.name + " is protected from damage");
                            }
                            else
                            {
                                Console.WriteLine(item.name + "'s attack missed");
                                Thread.Sleep(1000);
                            }

                        }
                        if (playerStats.playerCurrentHP <= 0)
                            currentState = BattleState.Lose;
                        if (item.ID == 1)
                            playerStats.opponent1Target = false;
                        else if (item.ID == 2)
                            playerStats.opponent2Target = false;
                        else if (item.ID == 3)
                            playerStats.opponent3Target = false;
                    }
                    else if (item.ID == 1 && currentState == BattleState.EnemyOneAttack && meeba.opponent1Target == true
                      || item.ID == 2 && currentState == BattleState.EnemyTwoAttack && meeba.opponent2Target == true
                      || item.ID == 3 && currentState == BattleState.EnemyThreeAttack && meeba.opponent3Target == true)
                    {
                        if (meeba.currentHp == 0)
                        {
                            Console.WriteLine(item.name + " tried to attack " + meeba.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(meeba.name + " has already been defeated");
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            int accurateHit = random.Next(100);
                            if (accurateHit <= item.accuracy)
                            {
                                if (meeba.DamageProtected != true)
                                {
                                    if (meeba.defensive == true)
                                        tempAllyDefense = meeba.tempDefense;
                                    else if (meeba.defensive == false)
                                        tempAllyDefense = meeba.tempDefenseStatChange;
                                    tempOppAttack = item.tempAttack;
                                    tempOppMoveBasePower = item.currentMove.BMP;
                                    currentMeeba = meeba.name;
                                    TypeAdvantageOpp();
                                    STABOpp();
                                    tempOppHit = random.Next(item.hit, 101);
                                    damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                    Console.WriteLine(item.name + " attacked " + meeba.name);
                                    Thread.Sleep(1000);
                                    Console.WriteLine(meeba.name + " took {0} damage", damageCalcOppAttacking);
                                    Thread.Sleep(1000);
                                    if ((meeba.currentHp - damageCalcOppAttacking) > 0)
                                        Console.WriteLine(meeba.name + " has {0} HP", (meeba.currentHp - damageCalcOppAttacking));
                                    else
                                        Console.WriteLine(meeba.name + " has 0 HP");
                                    Thread.Sleep(1000);
                                    if ((meeba.currentHp - damageCalcOppAttacking) <= 0)
                                    {
                                        Console.WriteLine(item.name + " defeated " + meeba.name);
                                        Thread.Sleep(1000);
                                    }
                                    meeba.currentHp -= damageCalcOppAttacking; //put in variables here
                                    if (meeba.currentHp < 0)
                                        meeba.currentHp = 0;
                                }
                                else
                                    Console.WriteLine(meeba.name + " is protected from damage");
                            }
                            else
                            {
                                Console.WriteLine(item.name + "'s attack missed");
                                Thread.Sleep(1000);
                            }
                        }
                        if (item.ID == 1)
                            meeba.opponent1Target = false;
                        else if (item.ID == 2)
                            meeba.opponent2Target = false;
                        else if (item.ID == 3)
                            meeba.opponent3Target = false;
                    }
                    else if (item.ID == 1 && currentState == BattleState.EnemyOneAttack && meeba2.opponent1Target == true
                      || item.ID == 2 && currentState == BattleState.EnemyTwoAttack && meeba2.opponent2Target == true
                      || item.ID == 3 && currentState == BattleState.EnemyThreeAttack && meeba2.opponent3Target == true)
                    {
                        if (meeba2.currentHp == 0)
                        {
                            Console.WriteLine(item.name + " tried to attack " + meeba2.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(meeba2.name + " has already been defeated");
                            Thread.Sleep(1000);
                        }
                        else
                        {
                            int accurateHit = random.Next(100);
                            if (accurateHit <= item.accuracy)
                            {
                                if (meeba2.DamageProtected != true)
                                {
                                    if (meeba2.defensive == true)
                                        tempAllyDefense = meeba2.tempDefense;
                                    else if (meeba2.defensive == false)
                                        tempAllyDefense = meeba2.tempDefenseStatChange;
                                    tempOppAttack = item.tempAttack;
                                    tempOppMoveBasePower = item.currentMove.BMP;
                                    currentMeeba = meeba2.name;
                                    TypeAdvantageOpp();
                                    STABOpp();
                                    tempOppHit = random.Next(item.hit, 101);
                                    damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                    Console.WriteLine(item.name + " attacked " + meeba2.name);
                                    Thread.Sleep(1000);
                                    Console.WriteLine(meeba2.name + " took {0} damage", damageCalcOppAttacking);
                                    Thread.Sleep(1000);
                                    if ((meeba2.currentHp - damageCalcOppAttacking) > 0)
                                        Console.WriteLine(meeba2.name + " has {0} HP", (meeba2.currentHp - damageCalcOppAttacking));
                                    else
                                        Console.WriteLine(meeba2.name + " has 0 HP");
                                    Thread.Sleep(1000);
                                    if ((meeba2.currentHp - damageCalcOppAttacking) <= 0)
                                    {
                                        Console.WriteLine(item.name + " defeated " + meeba2.name);
                                        Thread.Sleep(1000);
                                    }
                                    meeba2.currentHp -= damageCalcOppAttacking; //put in variables here
                                    if (meeba2.currentHp < 0)
                                        meeba2.currentHp = 0;
                                }
                                else
                                    Console.WriteLine(meeba2.name + " is protected from damage");
                            }
                            else
                            {
                                Console.WriteLine(item.name + "'s attack missed");
                                Thread.Sleep(1000);
                            }

                        }
                        if (item.ID == 1)
                            meeba2.opponent1Target = false;
                        else if (item.ID == 2)
                            meeba2.opponent2Target = false;
                        else if (item.ID == 3)
                            meeba2.opponent3Target = false;
                    }
                }
            }
        }

        public void EnemyOffensiveAttack()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var Item in ThisBattleEnemies)
            {
                if (Item.ID == 1 && currentState == BattleState.EnemyOneAttack || Item.ID == 2 && currentState == BattleState.EnemyTwoAttack || Item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                {
                    foreach (var meebaitem in ThisBattleMeebas)
                    {
                        if (meebaitem.ID == 1 && Item.ID == 1 && meeba.opponent1Target == true
                            || meebaitem.ID == 1 && Item.ID == 2 && meeba.opponent2Target == true
                            || meebaitem.ID == 1 && Item.ID == 3 && meeba.opponent3Target == true
                            || meebaitem.ID == 2 && Item.ID == 1 && meeba2.opponent1Target == true
                            || meebaitem.ID == 2 && Item.ID == 2 && meeba2.opponent2Target == true
                            || meebaitem.ID == 2 && Item.ID == 3 && meeba2.opponent2Target == true)

                            if (meebaitem.currentHp == 0 && Item.currentMove.name != "Pyroclastic Flow")
                            {
                                Console.WriteLine(Item.name + " tried to attack " + meebaitem.name);
                                Thread.Sleep(1000);
                                Console.WriteLine(meebaitem.name + " has already been defeated");
                                Thread.Sleep(1000);
                            }
                            else if (meebaitem.currentHp > 0)
                            {
                                int accurateHit = random.Next(100);
                                if (accurateHit <= Item.currentMove.accuracy)
                                {
                                    Console.WriteLine("{0} attacked {1} with {2}", Item.name, meebaitem.name, Item.currentMove.name);
                                    Thread.Sleep(1000);
                                    if (Item.currentMove.BMP > 0)
                                    {
                                        if (Item.PyroclasticFlowCounter == 1)
                                        {
                                            Item.MP -= 13;
                                            if (Item.MP < 0)
                                                Item.MP = 0;
                                            Console.WriteLine(Item.name + " summoned a lava flow");
                                            Thread.Sleep(1000);
                                            Item.PyroclasticFlowCounter = 2;
                                        }
                                        else if (Item.currentMove.name != "Pyroclastic Flow" && meebaitem.DamageProtected != true)
                                        {
                                            tempOppAttack = Item.tempAttack;
                                            if (meebaitem.defensive == true)
                                                tempAllyDefense = meebaitem.tempDefense;
                                            else if (meebaitem.defensive == false)
                                                tempAllyDefense = meebaitem.tempDefenseStatChange;
                                            tempOppMoveBasePower = Item.currentMove.BMP;
                                            currentMeeba = meebaitem.name;
                                            TypeAdvantageOpp();
                                            STABOpp();
                                            tempOppHit = random.Next(Item.hit, 101);
                                            damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                            Item.MP -= Item.currentMove.MP;
                                            if (Item.MP < 0)
                                                Item.MP = 0;
                                            Console.WriteLine(meebaitem.name + " took {0} damage", damageCalcOppAttacking);
                                            Thread.Sleep(1000);
                                            if ((meebaitem.currentHp - damageCalcOppAttacking) > 0)
                                                Console.WriteLine(meebaitem.name + " has {0} HP", (meebaitem.currentHp - damageCalcOppAttacking));
                                            else
                                                Console.WriteLine(meebaitem.name + " has 0 HP");
                                            Thread.Sleep(1000);
                                            if ((meebaitem.currentHp - damageCalcOppAttacking) <= 0)
                                            {
                                                Console.WriteLine(Item.name + " defeated {0}", meebaitem.name);
                                                Thread.Sleep(1000);
                                            }
                                            meebaitem.currentHp -= damageCalcOppAttacking;
                                            if (meebaitem.currentHp < 0)
                                                meebaitem.currentHp = 0;
                                            if (Item.currentMove.name == "Deluge")
                                                Item.tempSpeedStatChange -= 1000;
                                            if (Item.currentMove.name == "Leaching Roots")
                                                Item.LeachingRootsHP = 1 + Math.Round(damageCalcOppAttacking * 0.4);
                                            if (Item.currentMove.name == "Pyriscent Bullets") //2 more attacks
                                            {
                                                tempOppHit = random.Next(Item.hit, 101);
                                                damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                                Console.WriteLine("{0} attacked {1} with {2}", Item.name, meebaitem.name, Item.currentMove.name);
                                                Thread.Sleep(1000);
                                                Console.WriteLine(meebaitem.name + " took {0} damage", damageCalcOppAttacking);
                                                Thread.Sleep(1000);
                                                if ((meebaitem.currentHp - damageCalcOppAttacking) > 0)
                                                    Console.WriteLine(meebaitem.name + " has {0} HP", (meebaitem.currentHp - damageCalcOppAttacking));
                                                else
                                                    Console.WriteLine(meebaitem.name + " has 0 HP");
                                                Thread.Sleep(1000);
                                                if ((meebaitem.currentHp - damageCalcOppAttacking) <= 0)
                                                {
                                                    Console.WriteLine(Item.name + " defeated {0}", meebaitem.name);
                                                    Thread.Sleep(1000);
                                                    break;
                                                }
                                                meebaitem.currentHp -= damageCalcOppAttacking;
                                                if (meebaitem.currentHp < 0)
                                                    meebaitem.currentHp = 0;

                                                tempOppHit = random.Next(Item.hit, 101);
                                                damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                                Console.WriteLine("{0} attacked {1} with {2}", Item.name, meebaitem.name, Item.currentMove.name);
                                                Thread.Sleep(1000);
                                                Console.WriteLine(meebaitem.name + " took {0} damage", damageCalcOppAttacking);
                                                Thread.Sleep(1000);
                                                if ((meebaitem.currentHp - damageCalcOppAttacking) > 0)
                                                    Console.WriteLine(meebaitem.name + " has {0} HP", (meebaitem.currentHp - damageCalcOppAttacking));
                                                else
                                                    Console.WriteLine(meebaitem.name + " has 0 HP");
                                                Thread.Sleep(1000);
                                                if ((meebaitem.currentHp - damageCalcOppAttacking) <= 0)
                                                {
                                                    Console.WriteLine(Item.name + " defeated {0}", meebaitem.name);
                                                    Thread.Sleep(1000);
                                                }
                                                meebaitem.currentHp -= damageCalcOppAttacking;
                                                if (meebaitem.currentHp < 0)
                                                    meebaitem.currentHp = 0;
                                            }
                                        }
                                        else
                                            Console.WriteLine(meebaitem.name + " is protected from damage");
                                    }
                                    //Opponent defense decrease
                                    if (Item.currentMove.oppDefenseDecrease > 0)
                                    {
                                        if (meebaitem.StatusProtected == true)
                                        {
                                            Console.WriteLine(meebaitem.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meebaitem.tempDefenseStatChange > (meebaitem.defense / 3))
                                        {
                                            Console.WriteLine(meebaitem.name + "'s defense decreased");
                                            Thread.Sleep(1000);
                                            meebaitem.tempDefenseStatChange *= Item.currentMove.oppDefenseDecrease;
                                        }
                                        else
                                        {
                                            Console.WriteLine(meebaitem.name + "'s defense is at minimum capacity");
                                            Thread.Sleep(1000);
                                        }
                                    }
                                    //Opponent speed decrease
                                    if (Item.currentMove.oppSpeedDecrease > 0)
                                    {
                                        if (meebaitem.StatusProtected == true)
                                        {
                                            Console.WriteLine(meebaitem.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (meebaitem.tempSpeed > (meebaitem.speed / 3))
                                        {
                                            Console.WriteLine(meebaitem.name + "'s speed decreased");
                                            Thread.Sleep(1000);
                                            meebaitem.tempSpeed *= Item.currentMove.oppSpeedDecrease;
                                        }
                                        else
                                        {
                                            Console.WriteLine(meebaitem.name + "'s speed is at minimum capacity");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Posion Inflicted?
                                    if (Item.currentMove.poisonChance > 0 && meebaitem.isPoisoned != true)
                                    {
                                        int poison = random.Next(100);
                                        if (meebaitem.StatusProtected == true)
                                        {
                                            Console.WriteLine(meebaitem.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (poison <= Item.currentMove.poisonChance)
                                        {
                                            Console.WriteLine(Item.name + " poisoned " + meebaitem.name);
                                            Thread.Sleep(1000);
                                            meebaitem.isPoisoned = true;
                                            meebaitem.poisonTracker = 0;
                                        }
                                        else
                                        {
                                            Console.WriteLine("The poison was ineffective");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Poison Passive Ability
                                    if (Item.poisonChance > 0)
                                    {
                                        int poison = random.Next(100);
                                        if (meebaitem.StatusProtected == true)
                                        {
                                            Console.WriteLine(meebaitem.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (poison <= Item.poisonChance)
                                        {
                                            Console.WriteLine(Item.name + " poisoned " + meebaitem.name);
                                            Thread.Sleep(1000);
                                            if (Item.poisonOne == true && Item.poisonTwo != true)
                                                meebaitem.isPoisoned = true;
                                            else if (Item.poisonTwo == true)
                                                meebaitem.isPoisonedTwo = true;
                                            meebaitem.poisonTracker = 0;
                                        }
                                        else
                                        {
                                            Console.WriteLine("The poison was ineffective");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Stun Inflicted?
                                    if (Item.currentMove.stunChance > 0)
                                    {
                                        int stun = random.Next(100);
                                        if (meebaitem.StatusProtected == true)
                                        {
                                            Console.WriteLine(meebaitem.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (stun <= Item.currentMove.stunChance)
                                        {
                                            Console.WriteLine(Item.name + " stunned " + meebaitem.name + ", it may not attack");
                                            Thread.Sleep(1000);
                                            meebaitem.isStunned = true;
                                        }
                                    }
                                    //Sleep Inflicted?
                                    if (Item.currentMove.sleepChance > 0)
                                    {
                                        int sleep = random.Next(100);
                                        if (meebaitem.StatusProtected == true)
                                        {
                                            Console.WriteLine(meebaitem.name + "is protected from status changes");
                                            Thread.Sleep(1000);
                                        }
                                        else if (sleep <= Item.currentMove.sleepChance)
                                        {
                                            Console.WriteLine(Item.name + " lulled " + meebaitem.name + " to sleep");
                                            Thread.Sleep(1000);
                                            meebaitem.isAsleep = true;
                                        }
                                        else
                                        {
                                            Console.WriteLine(meebaitem.name + " stayed awake");
                                            Thread.Sleep(1000);
                                        }
                                    }

                                    //Life leech passive ability?
                                    if (Item.lifeLeech == true && meebaitem.currentHp > 0)
                                    {
                                        int lifeleeach = random.Next(100);
                                        if (lifeleeach <= Item.lifeLeechChance)
                                        {
                                            Console.WriteLine(Item.name + " leeched some life from " + meebaitem.name);
                                            Thread.Sleep(1000);
                                            Item.HP += Math.Round((Item.MaxHP / 100) * Item.lifeLeechHeal);
                                            if (Item.HP > Item.MaxHP)
                                                Item.HP = Item.MaxHP;
                                        }
                                    }
                                }
                                else
                                {
                                    Console.WriteLine(Item.name + "'s attack missed " + meebaitem.name);
                                    Thread.Sleep(1000);
                                }

                            }
                        if (Item.ID == 1)
                            meebaitem.opponent1Target = false;
                        else if (Item.ID == 2)
                            meebaitem.opponent2Target = false;
                        else if (Item.ID == 3)
                            meebaitem.opponent3Target = false;
                    }
                    if (Item.ID == 1 && playerStats.opponent1Target == true || Item.ID == 2 && playerStats.opponent2Target == true
                        || Item.ID == 3 && playerStats.opponent3Target == true)
                    {
                        if (playerStats.playerCurrentHP == 0 && Item.currentMove.name != "Pyroclastic Flow")
                        {
                            Console.WriteLine(Item.name + " tried to attack " + playerStats.name);
                            Thread.Sleep(1000);
                            Console.WriteLine(playerStats.name + " has already been defeated");
                            Thread.Sleep(1000);
                        }
                        else if (playerStats.playerCurrentHP > 0)
                        {
                            int accurateHit = random.Next(100);
                            if (accurateHit <= Item.currentMove.accuracy)
                            {
                                if (Item.currentMove.BMP > 0)
                                {
                                    if (Item.PyroclasticFlowCounter == 1)
                                    {
                                        Item.MP -= 13;
                                        if (Item.MP < 0)
                                            Item.MP = 0;
                                        Console.WriteLine(Item.name + " summoned a lava flow");
                                        Thread.Sleep(1000);
                                        Item.PyroclasticFlowCounter = 2;
                                    }
                                    else if (Item.currentMove.name != "Pyroclastic Flow" && playerStats.DamageProtected != true)
                                    {
                                        tempOppAttack = Item.tempAttack;
                                        tempAllyDefense = playerStats.playerMaxDefense;
                                        tempOppMoveBasePower = Item.currentMove.BMP;
                                        TypeAdvantageOppPlayer();
                                        STABOpp();
                                        tempOppHit = random.Next(Item.hit, 101);
                                        damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                        Item.MP -= Item.currentMove.MP;
                                        if (Item.MP < 0)
                                            Item.MP = 0;
                                        Console.WriteLine("{0} attacked {1} with {2}", Item.name, playerStats.name, Item.currentMove.name);
                                        Thread.Sleep(1000);
                                        Console.WriteLine(playerStats.name + " took {0} damage", damageCalcOppAttacking);
                                        Thread.Sleep(1000);
                                        if ((playerStats.playerCurrentHP - damageCalcOppAttacking) > 0)
                                            Console.WriteLine(playerStats.name + " has {0} HP", (playerStats.playerCurrentHP - damageCalcOppAttacking));
                                        else
                                            Console.WriteLine(playerStats.name + " has 0 HP");
                                        Thread.Sleep(1000);
                                        if ((playerStats.playerCurrentHP - damageCalcOppAttacking) <= 0)
                                        {
                                            Console.WriteLine(Item.name + " defeated {0}", playerStats.name);
                                            Thread.Sleep(1000);
                                        }
                                        playerStats.playerCurrentHP -= damageCalcOppAttacking;
                                        if (playerStats.playerCurrentHP < 0)
                                            playerStats.playerCurrentHP = 0;
                                        if (Item.currentMove.name == "Deluge")
                                            Item.tempSpeedStatChange -= 1000;
                                        if (Item.currentMove.name == "Leaching Roots")
                                            Item.LeachingRootsHP = 1 + Math.Round(damageCalcOppAttacking * 0.4);
                                        if (Item.currentMove.name == "Pyriscent Bullets") //2 more attacks
                                        {
                                            tempOppHit = random.Next(Item.hit, 101);
                                            damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                            Console.WriteLine("{0} attacked {1} with {2}", Item.name, playerStats.name, Item.currentMove.name);
                                            Thread.Sleep(1000);
                                            Console.WriteLine(playerStats.name + " took {0} damage", damageCalcOppAttacking);
                                            Thread.Sleep(1000);
                                            if ((playerStats.playerCurrentHP - damageCalcOppAttacking) > 0)
                                                Console.WriteLine(playerStats.name + " has {0} HP", (playerStats.playerCurrentHP - damageCalcOppAttacking));
                                            else
                                                Console.WriteLine(playerStats.name + " has 0 HP");
                                            Thread.Sleep(1000);
                                            if ((playerStats.playerCurrentHP - damageCalcOppAttacking) <= 0)
                                            {
                                                Console.WriteLine(Item.name + " defeated {0}", playerStats.name);
                                                Thread.Sleep(1000);
                                                break;
                                            }
                                            playerStats.playerCurrentHP -= damageCalcOppAttacking;
                                            if (playerStats.playerCurrentHP < 0)
                                                playerStats.playerCurrentHP = 0;

                                            tempOppHit = random.Next(Item.hit, 101);
                                            damageCalcOppAttacking = 1 + Math.Round((((tempOppAttack / tempAllyDefense) * tempOppMoveBasePower * tempOppItemBonus * tempOppTypeAdv * tempOppSTAB) / 100) * tempOppHit);
                                            Console.WriteLine("{0} attacked {1} with {2}", Item.name, playerStats.name, Item.currentMove.name);
                                            Thread.Sleep(1000);
                                            Console.WriteLine(playerStats.name + " took {0} damage", damageCalcOppAttacking);
                                            Thread.Sleep(1000);
                                            if ((playerStats.playerCurrentHP - damageCalcOppAttacking) > 0)
                                                Console.WriteLine(playerStats.name + " has {0} HP", (playerStats.playerCurrentHP - damageCalcOppAttacking));
                                            else
                                                Console.WriteLine(playerStats.name + " has 0 HP");
                                            Thread.Sleep(1000);
                                            if ((playerStats.playerCurrentHP - damageCalcOppAttacking) <= 0)
                                            {
                                                Console.WriteLine(Item.name + " defeated {0}", playerStats.name);
                                                Thread.Sleep(1000);
                                            }
                                            playerStats.playerCurrentHP -= damageCalcOppAttacking;
                                            if (playerStats.playerCurrentHP < 0)
                                                playerStats.playerCurrentHP = 0;
                                        }
                                    }
                                    else
                                        Console.WriteLine(playerStats.name + " is protected from damage");

                                }
                                //Player tep
                                if (Item.currentMove.oppDefenseDecrease > 0)
                                {
                                    if (playerStats.tempDefenseStatChange > (playerStats.playerMaxDefense / 3))
                                    {
                                        Console.WriteLine(playerStats.name + "'s defense decreased");
                                        Thread.Sleep(1000);
                                        playerStats.tempDefenseStatChange *= Item.currentMove.oppDefenseDecrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(playerStats.name + "'s defense is at minimum capacity");
                                        Thread.Sleep(1000);
                                    }
                                }
                                //Player speed decrease
                                if (Item.currentMove.oppSpeedDecrease > 0)
                                {
                                    if (playerStats.tempSpeed > (playerStats.playerMaxSpeed / 3))
                                    {
                                        Console.WriteLine(playerStats.name + "'s speed decreased");
                                        Thread.Sleep(1000);
                                        playerStats.tempSpeed *= Item.currentMove.oppSpeedDecrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(playerStats.name + "'s speed is at minimum capacity");
                                        Thread.Sleep(1000);
                                    }
                                }

                                //Posion Inflicted?
                                if (Item.currentMove.poisonChance > 0 && playerStats.isPoisoned != true)
                                {
                                    int poison = random.Next(100);
                                    if (poison <= Item.currentMove.poisonChance)
                                    {
                                        Console.WriteLine(Item.name + " poisoned " + playerStats.name);
                                        Thread.Sleep(1000);
                                        playerStats.isPoisoned = true;
                                        playerStats.poisonTracker = 0;
                                    }
                                    else
                                    {
                                        Console.WriteLine("The poison was ineffective");
                                        Thread.Sleep(1000);
                                    }
                                }
                                //Poison Passive Ability
                                if (Item.poisonChance > 0)
                                {
                                    int poison = random.Next(100);
                                    if (poison <= Item.poisonChance)
                                    {
                                        Console.WriteLine(Item.name + " poisoned " + playerStats.name);
                                        Thread.Sleep(1000);
                                        if (Item.poisonOne == true && Item.poisonTwo != true)
                                            playerStats.isPoisoned = true;
                                        else if (Item.poisonTwo == true)
                                            playerStats.isPoisonedTwo = true;
                                        playerStats.poisonTracker = 0;
                                    }
                                    else
                                    {
                                        Console.WriteLine("The poison was ineffective");
                                        Thread.Sleep(1000);
                                    }
                                }
                                //Stun Inflicted?
                                if (Item.currentMove.stunChance > 0)
                                {
                                    int stun = random.Next(100);
                                    if (stun <= Item.currentMove.stunChance)
                                    {
                                        Console.WriteLine(Item.name + " stunned " + playerStats.name + ", it may not attack");
                                        Thread.Sleep(1000);
                                        playerStats.isStunned = true;
                                    }
                                }
                                //Sleep Inflicted?
                                if (Item.currentMove.sleepChance > 0)
                                {
                                    int sleep = random.Next(100);
                                    if (sleep <= Item.currentMove.sleepChance)
                                    {
                                        Console.WriteLine(Item.name + " lulled " + playerStats.name + " to sleep");
                                        Thread.Sleep(1000);
                                        playerStats.isAsleep = true;
                                    }
                                    else
                                    {
                                        Console.WriteLine(playerStats.name + " stayed awake");
                                        Thread.Sleep(1000);
                                    }
                                }
                                //Life leech passive ability?
                                if (Item.lifeLeech == true && playerStats.playerCurrentHP > 0)
                                {
                                    int lifeleeach = random.Next(100);
                                    if (lifeleeach <= Item.lifeLeechChance)
                                    {
                                        Console.WriteLine(Item.name + " leeched some life from " + playerStats.name);
                                        Thread.Sleep(1000);
                                        Item.HP += Math.Round((Item.MaxHP / 100) * Item.lifeLeechHeal);
                                        if (Item.HP > Item.MaxHP)
                                            Item.HP = Item.MaxHP;
                                    }
                                }
                            }
                            else
                            {
                                Console.WriteLine(Item.name + "'s attack missed " + playerStats.name);
                                Thread.Sleep(1000);
                            }
                        }
                        if (Item.ID == 1)
                            playerStats.opponent1Target = false;
                        else if (Item.ID == 2)
                            playerStats.opponent2Target = false;
                        else if (Item.ID == 3)
                            playerStats.opponent3Target = false;
                    }
                }
            }
        }

        public void EnemyDefensiveAttack()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var Item in ThisBattleEnemies) //meeba1 attacking, meeba2 attacking
            {
                if (Item.ID == 1 && currentState == BattleState.EnemyOneAttack || Item.ID == 2 && currentState == BattleState.EnemyTwoAttack || Item.ID == 3 && currentState == BattleState.EnemyThreeAttack)
                {
                    foreach (var ItemTarget in ThisBattleEnemies) //meeba1 is target, meeba2 is target
                    {
                        if (Item.ID == 1 && ItemTarget.ID == 1 && ItemTarget.opponent1Target == true
                            || Item.ID == 1 && ItemTarget.ID == 2 && ItemTarget.opponent1Target == true
                            || Item.ID == 1 && ItemTarget.ID == 3 && ItemTarget.opponent1Target == true
                            || Item.ID == 2 && ItemTarget.ID == 1 && ItemTarget.opponent2Target == true
                            || Item.ID == 2 && ItemTarget.ID == 2 && ItemTarget.opponent2Target == true
                            || Item.ID == 2 && ItemTarget.ID == 3 && ItemTarget.opponent2Target == true
                            || Item.ID == 3 && ItemTarget.ID == 1 && ItemTarget.opponent3Target == true
                            || Item.ID == 3 && ItemTarget.ID == 2 && ItemTarget.opponent3Target == true
                            || Item.ID == 3 && ItemTarget.ID == 3 && ItemTarget.opponent3Target == true)
                        {
                            Console.WriteLine("{0} targeted {1} with {2}", Item.name, ItemTarget.name, Item.currentMove.name);
                            Thread.Sleep(1000);
                            int accurateHit = random.Next(100);
                            if (accurateHit <= Item.currentMove.accuracy)
                            {
                                Item.MP -= Item.currentMove.MP;
                                if (Item.MP < 0)
                                    Item.MP = 0;

                                //Healing?
                                if (Item.currentMove.healChance > 0)
                                {
                                    int heal = random.Next(100);
                                    if (heal <= Item.currentMove.healChance)
                                    {
                                        double healHP = 0;
                                        if (Item.currentMove.name == "Leaching Roots")
                                            healHP = Item.LeachingRootsHP;
                                        else
                                            healHP = Math.Round((ItemTarget.MaxHP * ItemTarget.currentMove.healAmount) / 100);
                                        Console.WriteLine(Item.name + " healed " + ItemTarget.name + " for {0} HP", healHP >= (ItemTarget.MaxHP - ItemTarget.HP) ? (ItemTarget.MaxHP - ItemTarget.HP) : healHP);
                                        ItemTarget.HP += healHP;
                                        if (ItemTarget.HP > ItemTarget.MaxHP) //cannot go above max hp
                                            ItemTarget.HP = ItemTarget.MaxHP;
                                        Thread.Sleep(1000);
                                    }
                                    else
                                    {
                                        Console.WriteLine("No healing is needed for " + ItemTarget.name);
                                        Thread.Sleep(1000);
                                    }
                                    if (Item.ID == 1)
                                        ItemTarget.opponent1Target = false; //No longer targeted by 
                                    if (Item.ID == 2)
                                        ItemTarget.opponent2Target = false;
                                    if (Item.ID == 3)
                                        ItemTarget.opponent3Target = false;
                                }
                                //Stat Increase? - def
                                if (Item.currentMove.defIncrease > 0)
                                {
                                    if (ItemTarget.tempDefenseStatChange < (ItemTarget.defense * 3))
                                    {
                                        Console.WriteLine(ItemTarget.name + "'s defense increased");
                                        Thread.Sleep(1000);
                                        ItemTarget.tempDefenseStatChange *= Item.currentMove.defIncrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(ItemTarget.name + "'s defense is at maximum capacity");
                                        Thread.Sleep(1000);
                                    }
                                    if (Item.ID == 1)
                                        ItemTarget.opponent1Target = false; //No longer targeted by 
                                    if (Item.ID == 2)
                                        ItemTarget.opponent2Target = false;
                                    if (Item.ID == 3)
                                        ItemTarget.opponent3Target = false;
                                }
                                //spd
                                if (Item.currentMove.spdIncrease > 0)
                                {
                                    if (ItemTarget.tempSpeedStatChange < (ItemTarget.speed * 3))
                                    {
                                        Console.WriteLine(ItemTarget.name + "'s speed increased");
                                        Thread.Sleep(1000);
                                        ItemTarget.tempSpeedStatChange *= Item.currentMove.spdIncrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(ItemTarget.name + "'s speed is at maximum capacity");
                                        Thread.Sleep(1000);
                                    }
                                    if (Item.ID == 1)
                                        ItemTarget.opponent1Target = false; //No longer targeted by 
                                    if (Item.ID == 2)
                                        ItemTarget.opponent2Target = false;
                                    if (Item.ID == 3)
                                        ItemTarget.opponent3Target = false;
                                }
                                //atk
                                if (Item.currentMove.attackIncrease > 0)
                                {
                                    if (ItemTarget.tempAttack < (ItemTarget.strength * 3))
                                    {
                                        Console.WriteLine(ItemTarget.name + "'s attack increased");
                                        Thread.Sleep(1000);
                                        ItemTarget.tempAttack *= Item.currentMove.attackIncrease;
                                    }
                                    else
                                    {
                                        Console.WriteLine(ItemTarget.name + "'s attack is at maximum capacity");
                                        Thread.Sleep(1000);
                                    }
                                    if (Item.ID == 1)
                                        ItemTarget.opponent1Target = false; //No longer targeted by 
                                    if (Item.ID == 2)
                                        ItemTarget.opponent2Target = false;
                                    if (Item.ID == 3)
                                        ItemTarget.opponent3Target = false;
                                }
                                //Status protect
                                if (Item.currentMove.statusProtection == true)
                                {
                                    ItemTarget.StatusProtected = true;
                                    if (Item.currentMove.name == "Sand Shroud")
                                        ItemTarget.statusProtectCounterSS = 1;
                                    else if (Item.currentMove.name == "Rock Fort")
                                        ItemTarget.statusProtectCounterRF = 1;
                                    else if (Item.currentMove.name == "Stonewort")
                                        ItemTarget.statusProtectCounterSW = 1;
                                    Console.WriteLine(ItemTarget.name + " is protected from status changes");
                                    Thread.Sleep(1000);
                                    if (Item.ID == 1)
                                        ItemTarget.opponent1Target = false; //No longer targeted by 
                                    if (Item.ID == 2)
                                        ItemTarget.opponent2Target = false;
                                    if (Item.ID == 3)
                                        ItemTarget.opponent3Target = false;
                                }
                                //Damage protect
                                if (Item.currentMove.damageProtection == true)
                                {
                                    ItemTarget.DamageProtected = true;
                                    ItemTarget.damageProtectCounter = 1;
                                    Console.WriteLine(ItemTarget.name + " is protected from damage");
                                    Thread.Sleep(1000);
                                    if (Item.ID == 1)
                                        ItemTarget.opponent1Target = false; //No longer targeted by 
                                    if (Item.ID == 2)
                                        ItemTarget.opponent2Target = false;
                                    if (Item.ID == 3)
                                        ItemTarget.opponent3Target = false;
                                }
                            }
                            else
                            {
                                Console.WriteLine(Item.name + "'s attack missed " + ItemTarget.name);
                                Thread.Sleep(1000);
                            }
                            if (Item.ID == 1)
                                ItemTarget.opponent1Target = false; //No longer targeted by 
                            if (Item.ID == 2)
                                ItemTarget.opponent2Target = false;
                            if (Item.ID == 3)
                                ItemTarget.opponent3Target = false;
                        }
                    }
                }
            }
        }

        public void enemyDefend()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var item in ThisBattleEnemies)
            {
                if (item.ID == 1 && currentState == BattleState.EnemyOneDefend || item.ID == 2 && currentState == BattleState.EnemyTwoDefend || item.ID == 3 && currentState == BattleState.EnemyThreeDefend)
                {
                    item.hasTakenTurn = true;
                    item.tempDefense *= 3;
                    Console.WriteLine(item.name + " is defending");
                    Thread.Sleep(1000);
                }
            }
        }

        public void enemyRun()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            foreach (var item in ThisBattleEnemies)
            {
                if (item.ID == 1 && currentState == BattleState.EnemyOneRun || item.ID == 2 && currentState == BattleState.EnemyTwoRun || item.ID == 3 && currentState == BattleState.EnemyThreeRun)
                {
                    item.hasTakenTurn = true;
                    item.defensive = false;
                    if (playerStats.playerMaxSpeed >= item.speed)
                    {
                        if (random.Next(0, 3) == 0)
                        {
                            Console.WriteLine(item.name + " tried and failed to escape from the battle");
                            Thread.Sleep(1000);
                            currentState = BattleState.SpeedComparison;
                        }
                        else if (random.Next(0, 3) == 1 || random.Next(0, 3) == 2 || random.Next(0, 3) == 3)
                        {
                            Console.WriteLine(item.name + " escaped from the battle");
                            item.HP = 0;
                            item.ranAway = true;
                            Thread.Sleep(1000);
                            Console.Clear();
                            currentState = BattleState.SpeedComparison;
                        }
                    }
                    else
                    {
                        Console.WriteLine(item.name + " escaped from the battle");
                        item.HP = 0;
                        item.ranAway = true;
                        Thread.Sleep(1000);
                        Console.Clear();
                        currentState = BattleState.SpeedComparison;
                    }
                }
            }
        }

        public void TypeAdvantagePlayer()
        {
            foreach (var item in ThisBattleEnemies)
            {
                if (playerStats.weaponElement.ToLower() == "Neutral".ToLower())
                    tempPlayerTypeAdv = 1;
                else if (playerStats.weaponElement.ToLower() == "Fire".ToLower())
                {
                    if (item.elementType == "Fire")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Plant" || item.elementType == "Air" || item.elementType == "Storm" || item.elementType == "Moss")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Dust" || item.elementType == "Water" || item.elementType == "Earth")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Plant".ToLower())
                {
                    if (item.elementType == "Plant")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Earth" || item.elementType == "Water" || item.elementType == "Hydrotherm" || item.elementType == "Dust")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Air" || item.elementType == "Fire" || item.elementType == "Storm")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Earth".ToLower())
                {
                    if (item.elementType == "Earth")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Fire" || item.elementType == "Air" || item.elementType == "Storm" || item.elementType == "Charcoal")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Plant" || item.elementType == "Water" || item.elementType == "Hydrotherm")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Air".ToLower())
                {
                    if (item.elementType == "Air")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Plant" || item.elementType == "Water" || item.elementType == "Hydrotherm" || item.elementType == "Moss")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Earth" || item.elementType == "Fire" || item.elementType == "Charcoal")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Water".ToLower())
                {
                    if (item.elementType == "Water")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Fire" || item.elementType == "Earth" || item.elementType == "Charcoal" || item.elementType == "Dust")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Air" || item.elementType == "Plant" || item.elementType == "Moss")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Charcoal".ToLower())
                {
                    if (item.elementType == "Charcoal")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Moss" || item.elementType == "Storm" || item.elementType == "Air")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Dust" || item.elementType == "Hydrotherm" || item.elementType == "Earth" || item.elementType == "Water")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Moss".ToLower())
                {
                    if (item.elementType == "Moss")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Dust" || item.elementType == "Hydrotherm" || item.elementType == "Water")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Charcoal" || item.elementType == "Storm" || item.elementType == "Fire" || item.elementType == "Air")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Dust".ToLower())
                {
                    if (item.elementType == "Dust")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Charcoal" || item.elementType == "Storm" || item.elementType == "Fire")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Hydrotherm" || item.elementType == "Moss" || item.elementType == "Water" || item.elementType == "Plant")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Storm".ToLower())
                {
                    if (item.elementType == "Storm")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Hydrotherm" || item.elementType == "Moss" || item.elementType == "Plant")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Dust" || item.elementType == "Charcoal" || item.elementType == "Fire" || item.elementType == "Earth")
                        tempPlayerTypeAdv = 0.75;
                }
                else if (playerStats.weaponElement.ToLower() == "Hydrotherm".ToLower())
                {
                    if (item.elementType == "Hydrotherm")
                        tempPlayerTypeAdv = 1;
                    else if (item.elementType == "Charcoal" || item.elementType == "Dust" || item.elementType == "Earth")
                        tempPlayerTypeAdv = 1.5;
                    else if (item.elementType == "Storm" || item.elementType == "Moss" || item.elementType == "Air" || item.elementType == "Plant")
                        tempPlayerTypeAdv = 0.75;
                }
            }
        }

        public void TypeAdvantageAlly()
        {
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneSpecial || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoSpecial
                    || meebaItem.ID == 1 && meebaItem.PyroclasticFlowCounter == 2 || meebaItem.ID == 2 && meebaItem.PyroclasticFlowCounter == 2)
                {
                    foreach (var item in ThisBattleEnemies)
                    {
                        if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneSpecial && item.meeba1Target == true && item.HP > 0
                            || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoSpecial && item.meeba2Target == true && item.HP > 0)
                        {
                            if (meeba.elementType == "Neutral")
                                tempAllyTypeAdv = 1;
                            else if (meeba.elementType == "Fire")
                            {
                                if (item.elementType == "Fire")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Plant" || item.elementType == "Air" || item.elementType == "Storm" || item.elementType == "Moss")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Dust" || item.elementType == "Water" || item.elementType == "Earth")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Plant")
                            {
                                if (item.elementType == "Plant")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Earth" || item.elementType == "Water" || item.elementType == "Hydrotherm" || item.elementType == "Dust")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Air" || item.elementType == "Fire" || item.elementType == "Storm")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Earth")
                            {
                                if (item.elementType == "Earth")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Fire" || item.elementType == "Air" || item.elementType == "Storm" || item.elementType == "Charcoal")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Plant" || item.elementType == "Water" || item.elementType == "Hydrotherm")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Air")
                            {
                                if (item.elementType == "Air")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Plant" || item.elementType == "Water" || item.elementType == "Hydrotherm" || item.elementType == "Moss")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Earth" || item.elementType == "Fire" || item.elementType == "Charcoal")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Water")
                            {
                                if (item.elementType == "Water")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Fire" || item.elementType == "Earth" || item.elementType == "Charcoal" || item.elementType == "Dust")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Air" || item.elementType == "Plant" || item.elementType == "Moss")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Charcoal")
                            {
                                if (item.elementType == "Charcoal")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Moss" || item.elementType == "Storm" || item.elementType == "Air")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Dust" || item.elementType == "Hydrotherm" || item.elementType == "Earth" || item.elementType == "Water")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Moss")
                            {
                                if (item.elementType == "Moss")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Dust" || item.elementType == "Hydrotherm" || item.elementType == "Water")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Charcoal" || item.elementType == "Storm" || item.elementType == "Fire" || item.elementType == "Air")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Dust")
                            {
                                if (item.elementType == "Dust")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Charcoal" || item.elementType == "Storm" || item.elementType == "Fire")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Hydrotherm" || item.elementType == "Moss" || item.elementType == "Water" || item.elementType == "Plant")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Storm")
                            {
                                if (item.elementType == "Storm")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Hydrotherm" || item.elementType == "Moss" || item.elementType == "Plant")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Dust" || item.elementType == "Charcoal" || item.elementType == "Fire" || item.elementType == "Earth")
                                    tempAllyTypeAdv = 0.75;
                            }
                            else if (meeba.elementType == "Hydrotherm")
                            {
                                if (item.elementType == "Hydrotherm")
                                    tempAllyTypeAdv = 1;
                                else if (item.elementType == "Charcoal" || item.elementType == "Dust" || item.elementType == "Earth")
                                    tempAllyTypeAdv = 1.5;
                                else if (item.elementType == "Storm" || item.elementType == "Moss" || item.elementType == "Air" || item.elementType == "Plant")
                                    tempAllyTypeAdv = 0.75;
                            }
                        }
                    }
                }
            }
        }

        public void TypeAdvantageOpp()
        {
            foreach (var item in ThisBattleEnemies)
            {
                if (item.ID == 1 && currentState == BattleState.EnemyOneAttack || item.ID == 2 && currentState == BattleState.EnemyTwoAttack || item.ID == 3 && currentState == BattleState.EnemyThreeAttack
                    || item.ID == 1 && item.PyroclasticFlowCounter == 2 || item.ID == 2 && item.PyroclasticFlowCounter == 2 || item.ID == 3 && item.PyroclasticFlowCounter == 2)
                {
                    foreach (var meebaItem in ThisBattleMeebas)
                    {
                        if (item.ID == 1 && currentState == BattleState.EnemyOneAttack && meebaItem.opponent1Target == true && meebaItem.hp > 0 && currentMeeba == meebaItem.name
                            || item.ID == 2 && currentState == BattleState.EnemyTwoAttack && meebaItem.opponent2Target == true && meebaItem.hp > 0 && currentMeeba == meebaItem.name
                            || item.ID == 3 && currentState == BattleState.EnemyThreeAttack && meebaItem.opponent3Target == true && meebaItem.hp > 0 && currentMeeba == meebaItem.name)
                        {
                            if (meebaItem.elementType == "Neutral")
                                tempOppTypeAdv = 1;
                            else if (item.elementType == "Fire")
                            {
                                if (meebaItem.elementType == "Fire")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Plant" || meebaItem.elementType == "Air" || meebaItem.elementType == "Storm" || meebaItem.elementType == "Moss")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Dust" || meebaItem.elementType == "Water" || meebaItem.elementType == "Earth")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Plant")
                            {
                                if (meebaItem.elementType == "Plant")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Earth" || meebaItem.elementType == "Water" || meebaItem.elementType == "Hydrotherm" || meebaItem.elementType == "Dust")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Air" || meebaItem.elementType == "Fire" || meebaItem.elementType == "Storm")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Earth")
                            {
                                if (meebaItem.elementType == "Earth")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Fire" || meebaItem.elementType == "Air" || meebaItem.elementType == "Storm" || meebaItem.elementType == "Charcoal")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Plant" || meebaItem.elementType == "Water" || meebaItem.elementType == "Hydrotherm")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Air")
                            {
                                if (meebaItem.elementType == "Air")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Plant" || meebaItem.elementType == "Water" || meebaItem.elementType == "Hydrotherm" || meebaItem.elementType == "Moss")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Earth" || meebaItem.elementType == "Fire" || meebaItem.elementType == "Charcoal")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Water")
                            {
                                if (meebaItem.elementType == "Water")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Fire" || meebaItem.elementType == "Earth" || meebaItem.elementType == "Charcoal" || meebaItem.elementType == "Dust")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Air" || meebaItem.elementType == "Plant" || meebaItem.elementType == "Moss")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Charcoal")
                            {
                                if (meebaItem.elementType == "Charcoal")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Moss" || meebaItem.elementType == "Storm" || meebaItem.elementType == "Air")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Dust" || meebaItem.elementType == "Hydrotherm" || meebaItem.elementType == "Earth" || meebaItem.elementType == "Water")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Moss")
                            {
                                if (meebaItem.elementType == "Moss")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Dust" || meebaItem.elementType == "Hydrotherm" || meebaItem.elementType == "Water")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Charcoal" || meebaItem.elementType == "Storm" || meebaItem.elementType == "Fire" || meebaItem.elementType == "Air")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Dust")
                            {
                                if (meebaItem.elementType == "Dust")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Charcoal" || meebaItem.elementType == "Storm" || meebaItem.elementType == "Fire")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Hydrotherm" || meebaItem.elementType == "Moss" || meebaItem.elementType == "Water" || meebaItem.elementType == "Plant")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Storm")
                            {
                                if (meebaItem.elementType == "Storm")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Hydrotherm" || meebaItem.elementType == "Moss" || meebaItem.elementType == "Plant")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Dust" || meebaItem.elementType == "Charcoal" || meebaItem.elementType == "Fire" || meebaItem.elementType == "Earth")
                                    tempOppTypeAdv = 0.75;
                            }
                            else if (item.elementType == "Hydrotherm")
                            {
                                if (meebaItem.elementType == "Hydrotherm")
                                    tempOppTypeAdv = 1;
                                else if (meebaItem.elementType == "Charcoal" || meebaItem.elementType == "Dust" || meebaItem.elementType == "Earth")
                                    tempOppTypeAdv = 1.5;
                                else if (meebaItem.elementType == "Storm" || meebaItem.elementType == "Moss" || meebaItem.elementType == "Air" || meebaItem.elementType == "Plant")
                                    tempOppTypeAdv = 0.75;
                            }
                        }
                    }
                }
            }
        }

        public void TypeAdvantageOppPlayer()
        {
            foreach (var item in ThisBattleEnemies)
            {
                if (item.ID == 1 && currentState == BattleState.EnemyOneAttack || item.ID == 2 && currentState == BattleState.EnemyTwoAttack || item.ID == 3 && currentState == BattleState.EnemyThreeAttack
                    || item.ID == 1 && item.PyroclasticFlowCounter == 2 || item.ID == 2 && item.PyroclasticFlowCounter == 2 || item.ID == 3 && item.PyroclasticFlowCounter == 2)
                {
                    if (playerStats.armourElement.ToLower() == "Neutral".ToLower())
                        tempOppTypeAdv = 1;
                    else if (item.elementType.ToLower() == "Fire".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Fire".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Plant".ToLower() || playerStats.armourElement.ToLower() == "Air".ToLower() || playerStats.armourElement.ToLower() == "Storm".ToLower() || playerStats.armourElement.ToLower() == "Moss".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Dust".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower() || playerStats.armourElement.ToLower() == "Earth".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType.ToLower() == "Plant".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Plant".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Earth".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower() || playerStats.armourElement.ToLower() == "Hydrotherm".ToLower() || playerStats.armourElement.ToLower() == "Dust".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Air".ToLower() || playerStats.armourElement.ToLower() == "Fire".ToLower() || playerStats.armourElement.ToLower() == "Storm".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType.ToLower() == "Earth".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Earth".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Fire".ToLower() || playerStats.armourElement.ToLower() == "Air".ToLower() || playerStats.armourElement.ToLower() == "Storm".ToLower() || playerStats.armourElement.ToLower() == "Charcoal".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Plant".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower() || playerStats.armourElement.ToLower() == "Hydrotherm".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Air".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Air".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Plant".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower() || playerStats.armourElement.ToLower() == "Hydrotherm".ToLower() || playerStats.armourElement.ToLower() == "Moss".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Earth".ToLower() || playerStats.armourElement.ToLower() == "Fire".ToLower() || playerStats.armourElement.ToLower() == "Charcoal".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Water".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Water".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Fire".ToLower() || playerStats.armourElement.ToLower() == "Earth".ToLower() || playerStats.armourElement.ToLower() == "Charcoal".ToLower() || playerStats.armourElement.ToLower() == "Dust".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Air".ToLower() || playerStats.armourElement.ToLower() == "Plant".ToLower() || playerStats.armourElement.ToLower() == "Moss".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Charcoal".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Charcoal".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Moss".ToLower() || playerStats.armourElement.ToLower() == "Storm".ToLower() || playerStats.armourElement.ToLower() == "Air".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Dust".ToLower() || playerStats.armourElement.ToLower() == "Hydrotherm".ToLower() || playerStats.armourElement.ToLower() == "Earth".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Moss".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Moss".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Dust".ToLower() || playerStats.armourElement.ToLower() == "Hydrotherm".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Charcoal".ToLower() || playerStats.armourElement.ToLower() == "Storm".ToLower() || playerStats.armourElement.ToLower() == "Fire".ToLower() || playerStats.armourElement.ToLower() == "Air".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Dust".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Dust".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Charcoal".ToLower() || playerStats.armourElement.ToLower() == "Storm".ToLower() || playerStats.armourElement.ToLower() == "Fire".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Hydrotherm".ToLower() || playerStats.armourElement.ToLower() == "Moss".ToLower() || playerStats.armourElement.ToLower() == "Water".ToLower() || playerStats.armourElement.ToLower() == "Plant".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Storm".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Storm".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Hydrotherm".ToLower() || playerStats.armourElement.ToLower() == "Moss".ToLower() || playerStats.armourElement.ToLower() == "Plant".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Dust".ToLower() || playerStats.armourElement.ToLower() == "Charcoal".ToLower() || playerStats.armourElement.ToLower() == "Fire".ToLower() || playerStats.armourElement.ToLower() == "Earth".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                    else if (item.elementType == "Hydrotherm".ToLower())
                    {
                        if (playerStats.armourElement.ToLower() == "Hydrotherm".ToLower())
                            tempOppTypeAdv = 1;
                        else if (playerStats.armourElement.ToLower() == "Charcoal".ToLower() || playerStats.armourElement.ToLower() == "Dust".ToLower() || playerStats.armourElement.ToLower() == "Earth".ToLower())
                            tempOppTypeAdv = 1.5;
                        else if (playerStats.armourElement.ToLower() == "Storm".ToLower() || playerStats.armourElement.ToLower() == "Moss".ToLower() || playerStats.armourElement.ToLower() == "Air".ToLower() || playerStats.armourElement.ToLower() == "Plant".ToLower())
                            tempOppTypeAdv = 0.75;
                    }
                }
            }
        }

        public void STABAlly() //tempAllySTAB
        {
            foreach (var meebaItem in ThisBattleMeebas)
            {
                if (meebaItem.PyroclasticFlowCounter == 2)
                    meebaItem.currentMove.moveType = "Fire";

                if (meebaItem.ID == 1 && currentState == BattleState.MeebaOneSpecial || meebaItem.ID == 2 && currentState == BattleState.MeebaTwoSpecial
                    || meebaItem.ID == 1 && meebaItem.PyroclasticFlowCounter == 2 || meebaItem.ID == 2 && meebaItem.PyroclasticFlowCounter == 2)
                {
                    if (meebaItem.elementType == "Neutral")
                        tempAllySTAB = 1;
                    if (meebaItem.elementType == "Fire")
                    {
                        if (meebaItem.currentMove.moveType == "Fire")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Charcoal" || meebaItem.currentMove.moveType == "Hydrotherm")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Plant" || meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Moss")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Air" || meebaItem.currentMove.moveType == "Earth" || meebaItem.currentMove.moveType == "Dust")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Water")
                    {
                        if (meebaItem.currentMove.moveType == "Water")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Hydrotherm")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Air" || meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Dust" || meebaItem.currentMove.moveType == "Charcoal")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Earth" || meebaItem.currentMove.moveType == "Plant" || meebaItem.currentMove.moveType == "Moss")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Plant")
                    {
                        if (meebaItem.currentMove.moveType == "Plant")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Charcoal" || meebaItem.currentMove.moveType == "Moss")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Earth" || meebaItem.currentMove.moveType == "Hydrotherm" || meebaItem.currentMove.moveType == "Dust")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Air" || meebaItem.currentMove.moveType == "Storm")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Earth")
                    {
                        if (meebaItem.currentMove.moveType == "Earth")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Moss" || meebaItem.currentMove.moveType == "Dust")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Air" || meebaItem.currentMove.moveType == "Plant" || meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Charcoal")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Hydrotherm")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Air")
                    {
                        if (meebaItem.currentMove.moveType == "Air")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Dust")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Earth" || meebaItem.currentMove.moveType == "Hydrotherm" || meebaItem.currentMove.moveType == "Moss")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Plant" || meebaItem.currentMove.moveType == "Charcoal")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Charcoal")
                    {
                        if (meebaItem.currentMove.moveType == "Charcoal")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Plant")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Hydrotherm" || meebaItem.currentMove.moveType == "Moss" || meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Earth")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Air" || meebaItem.currentMove.moveType == "Dust")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Moss")
                    {
                        if (meebaItem.currentMove.moveType == "Moss")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Plant" || meebaItem.currentMove.moveType == "Earth")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Charcoal" || meebaItem.currentMove.moveType == "Dust" || meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Air")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Hydrotherm" || meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Water")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Dust")
                    {
                        if (meebaItem.currentMove.moveType == "Dust")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Air" || meebaItem.currentMove.moveType == "Earth")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Moss" || meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Plant")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Hydrotherm" || meebaItem.currentMove.moveType == "Charcoal" || meebaItem.currentMove.moveType == "Fire")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Storm")
                    {
                        if (meebaItem.currentMove.moveType == "Storm")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Air")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Dust" || meebaItem.currentMove.moveType == "Hydrotherm" || meebaItem.currentMove.moveType == "Fire" || meebaItem.currentMove.moveType == "Earth")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Moss" || meebaItem.currentMove.moveType == "Charcoal" || meebaItem.currentMove.moveType == "Plant")
                            tempAllySTAB = 0.5;
                    }
                    else if (meebaItem.elementType == "Hydrotherm")
                    {
                        if (meebaItem.currentMove.moveType == "Hydrotherm")
                            tempAllySTAB = 2;
                        else if (meebaItem.currentMove.moveType == "Water" || meebaItem.currentMove.moveType == "Fire")
                            tempAllySTAB = 1.5;
                        else if (meebaItem.currentMove.moveType == "Storm" || meebaItem.currentMove.moveType == "Charcoal" || meebaItem.currentMove.moveType == "Plant" || meebaItem.currentMove.moveType == "Air")
                            tempAllySTAB = 1;
                        else if (meebaItem.currentMove.moveType == "Moss" || meebaItem.currentMove.moveType == "Dust" || meebaItem.currentMove.moveType == "Earth")
                            tempAllySTAB = 0.5;
                    }
                }
            }
        }

        public void STABOpp() //tempOppSTAB
        {
            foreach (var item in ThisBattleEnemies)
            {
                if (item.PyroclasticFlowCounter == 2)
                    item.currentMove.moveType = "Fire";

                if (item.ID == 1 && currentState == BattleState.EnemyOneAttack || item.ID == 2 && currentState == BattleState.EnemyTwoAttack || item.ID == 3 && currentState == BattleState.EnemyThreeAttack
                    || item.ID == 1 && item.PyroclasticFlowCounter == 2 || item.ID == 2 && item.PyroclasticFlowCounter == 2 || item.ID == 3 && item.PyroclasticFlowCounter == 2)
                {
                    if (item.elementType == "Neutral")
                        tempOppSTAB = 1;
                    if (item.elementType == "Fire")
                    {
                        if (item.currentMove.moveType == "Fire")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Charcoal" || item.currentMove.moveType == "Hydrotherm")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Water" || item.currentMove.moveType == "Plant" || item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Moss")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Air" || item.currentMove.moveType == "Earth" || item.currentMove.moveType == "Dust")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Water")
                    {
                        if (item.currentMove.moveType == "Water")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Hydrotherm")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Air" || item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Dust" || item.currentMove.moveType == "Charcoal")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Earth" || item.currentMove.moveType == "Plant" || item.currentMove.moveType == "Moss")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Plant")
                    {
                        if (item.currentMove.moveType == "Plant")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Charcoal" || item.currentMove.moveType == "Moss")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Earth" || item.currentMove.moveType == "Hydrotherm" || item.currentMove.moveType == "Dust")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Water" || item.currentMove.moveType == "Air" || item.currentMove.moveType == "Storm")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Earth")
                    {
                        if (item.currentMove.moveType == "Earth")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Moss" || item.currentMove.moveType == "Dust")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Air" || item.currentMove.moveType == "Plant" || item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Charcoal")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Water" || item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Hydrotherm")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Air")
                    {
                        if (item.currentMove.moveType == "Air")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Dust")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Water" || item.currentMove.moveType == "Earth" || item.currentMove.moveType == "Hydrotherm" || item.currentMove.moveType == "Moss")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Plant" || item.currentMove.moveType == "Charcoal")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Charcoal")
                    {
                        if (item.currentMove.moveType == "Charcoal")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Plant")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Hydrotherm" || item.currentMove.moveType == "Moss" || item.currentMove.moveType == "Water" || item.currentMove.moveType == "Earth")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Air" || item.currentMove.moveType == "Dust")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Moss")
                    {
                        if (item.currentMove.moveType == "Moss")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Plant" || item.currentMove.moveType == "Earth")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Charcoal" || item.currentMove.moveType == "Dust" || item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Air")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Hydrotherm" || item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Water")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Dust")
                    {
                        if (item.currentMove.moveType == "Dust")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Air" || item.currentMove.moveType == "Earth")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Moss" || item.currentMove.moveType == "Water" || item.currentMove.moveType == "Plant")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Hydrotherm" || item.currentMove.moveType == "Charcoal" || item.currentMove.moveType == "Fire")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Storm")
                    {
                        if (item.currentMove.moveType == "Storm")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Water" || item.currentMove.moveType == "Air")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Dust" || item.currentMove.moveType == "Hydrotherm" || item.currentMove.moveType == "Fire" || item.currentMove.moveType == "Earth")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Moss" || item.currentMove.moveType == "Charcoal" || item.currentMove.moveType == "Plant")
                            tempOppSTAB = 0.5;
                    }
                    else if (item.elementType == "Hydrotherm")
                    {
                        if (item.currentMove.moveType == "Hydrotherm")
                            tempOppSTAB = 2;
                        else if (item.currentMove.moveType == "Water" || item.currentMove.moveType == "Fire")
                            tempOppSTAB = 1.5;
                        else if (item.currentMove.moveType == "Storm" || item.currentMove.moveType == "Charcoal" || item.currentMove.moveType == "Plant" || item.currentMove.moveType == "Air")
                            tempOppSTAB = 1;
                        else if (item.currentMove.moveType == "Moss" || item.currentMove.moveType == "Dust" || item.currentMove.moveType == "Earth")
                            tempOppSTAB = 0.5;
                    }
                }
            }
        }

        public void FoundItems()
        {
            Console.ForegroundColor = ConsoleColor.Gray;
            //Found items
            int itemChance = random.Next(10);
            if (opponentOne.active == true && opponentOne.ranAway != true)
            {
                if (itemChance == 0 || itemChance == 1 || itemChance == 2)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentOne.itemDrop[0]), opponentOne.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentOne.itemDrop[0]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentOne.itemDrop[0]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentOne.itemDrop[0], out currentCount);
                        inventory.dictionary[opponentOne.itemDrop[0]] = currentCount + 1;
                    }

                }
                else if (itemChance == 4 || itemChance == 5)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentOne.itemDrop[1]), opponentOne.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentOne.itemDrop[1]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentOne.itemDrop[1]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentOne.itemDrop[1], out currentCount);
                        inventory.dictionary[opponentOne.itemDrop[1]] = currentCount + 1;
                    }

                }
                else if (itemChance == 6)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentOne.itemDrop[2]), opponentOne.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentOne.itemDrop[2]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentOne.itemDrop[2]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentOne.itemDrop[2], out currentCount);
                        inventory.dictionary[opponentOne.itemDrop[2]] = currentCount + 1;
                    }

                }
                else if (itemChance == 7 || itemChance == 8 || itemChance == 9 || itemChance == 3)
                {
                    Console.WriteLine("There were no items to be found from the " + opponentOne.name);
                }
                Thread.Sleep(1200);
            }
            int itemChance1 = random.Next(10);
            if (opponentTwo.active == true && opponentTwo.ranAway != true)
            {
                if (itemChance1 == 0 || itemChance1 == 1 || itemChance1 == 2 || itemChance1 == 3)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentTwo.itemDrop[0]), opponentTwo.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentTwo.itemDrop[0]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentTwo.itemDrop[0]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentTwo.itemDrop[0], out currentCount);
                        inventory.dictionary[opponentTwo.itemDrop[0]] = currentCount + 1;
                    }

                }
                else if (itemChance1 == 4 || itemChance1 == 5)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentTwo.itemDrop[1]), opponentTwo.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentTwo.itemDrop[1]))
                    {
                        Console.WriteLine("You have no space for the {0}", opponentTwo.itemDrop[1]);
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentTwo.itemDrop[1], out currentCount);
                        inventory.dictionary[opponentTwo.itemDrop[1]] = currentCount + 1;
                    }

                }
                else if (itemChance1 == 6)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentTwo.itemDrop[2]), opponentTwo.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentTwo.itemDrop[2]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentTwo.itemDrop[2]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentTwo.itemDrop[2], out currentCount);
                        inventory.dictionary[opponentTwo.itemDrop[2]] = currentCount + 1;
                    }

                }
                else if (itemChance1 == 7 || itemChance1 == 8 || itemChance1 == 9)
                {
                    Console.WriteLine("There were no items to be found from the " + opponentTwo.name);
                }
                Thread.Sleep(1200);
            }
            int itemChance2 = random.Next(10);
            if (opponentThree.active == true && opponentThree.ranAway != true)
            {
                if (itemChance2 == 0 || itemChance2 == 1 || itemChance2 == 2 || itemChance2 == 3)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentThree.itemDrop[0]), opponentThree.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentThree.itemDrop[0]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentThree.itemDrop[0]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentThree.itemDrop[0], out currentCount);
                        inventory.dictionary[opponentThree.itemDrop[0]] = currentCount + 1;
                    }
                }
                else if (itemChance2 == 4 || itemChance2 == 5)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentThree.itemDrop[1]), opponentThree.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentThree.itemDrop[1]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentThree.itemDrop[1]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentThree.itemDrop[1], out currentCount);
                        inventory.dictionary[opponentThree.itemDrop[1]] = currentCount + 1;
                    }
                }
                else if (itemChance2 == 6)
                {
                    Console.WriteLine("You found a {0} from the {1}", UppercaseFirst(opponentThree.itemDrop[2]), opponentThree.name);
                    if (inventory.dictionary.Keys.Count >= 20 && !inventory.dictionary.ContainsKey(opponentThree.itemDrop[2]))
                    {
                        Console.WriteLine("You have no space for the {0}", UppercaseFirst(opponentThree.itemDrop[2]));
                    }
                    else
                    {
                        inventory.dictionary.TryGetValue(opponentThree.itemDrop[2], out currentCount);
                        inventory.dictionary[opponentThree.itemDrop[2]] = currentCount + 1;
                    }
                }
                else if (itemChance2 == 7 || itemChance2 == 8 || itemChance2 == 9)
                {
                    Console.WriteLine("There were no items to be found from the " + opponentThree.name);
                }
                Thread.Sleep(1200);
            }
        }

        static void animFade() //Fades to white then back to black
        {
            Console.Clear();
            Console.BackgroundColor = ConsoleColor.DarkGray;
            Thread.Sleep(50);
            Console.Clear();
            Console.BackgroundColor = ConsoleColor.Gray;
            Thread.Sleep(50);
            Console.Clear();
            Console.BackgroundColor = ConsoleColor.White;
            Thread.Sleep(50);
            Console.Clear();
            Console.BackgroundColor = ConsoleColor.Gray;
            Thread.Sleep(50);
            Console.Clear();
            Console.BackgroundColor = ConsoleColor.DarkGray;
            Thread.Sleep(50);
            Console.Clear();
            Console.BackgroundColor = ConsoleColor.Black;
            Thread.Sleep(50);
            Console.Clear();
        }

        public void PlayAnimation()
        {
            for (int j = 0; j < 5; j++) //For each of first 5 frames (0,1,2,3,4)
            {
                for (int i = 0; i < 8; i++) //For each 8 lines of sprite
                {
                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                        Console.WriteLine(opponentOne.animation[j, i]);
                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                        Console.WriteLine(opponentOne.animation[j, i] + "     " + opponentTwo.animation[j, i]);
                    else
                        Console.WriteLine(opponentOne.animation[j, i] + "     " + opponentTwo.animation[j, i] + "     " + opponentThree.animation[j, i]);
                }
                Thread.Sleep(200);
                Console.Clear();
            }

            for (int j = 3; j > 0; j--) //For each of last 3 frames (3,2,1)
            {
                for (int i = 0; i < 8; i++)
                {
                    if (opponentOne.active == true && opponentTwo.active == false && opponentThree.active == false)
                        Console.WriteLine(opponentOne.animation[j, i]);
                    else if (opponentOne.active == true && opponentTwo.active == true && opponentThree.active == false)
                        Console.WriteLine(opponentOne.animation[j, i] + "     " + opponentTwo.animation[j, i]);
                    else
                        Console.WriteLine(opponentOne.animation[j, i] + "     " + opponentTwo.animation[j, i] + "     " + opponentThree.animation[j, i]);
                }
                Thread.Sleep(200);
                Console.Clear();
            }
        }

        static void BoatAnimation()
        {
            string[,] boatArray = new string[44, 6]
            {
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                {
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/<|\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\\____//\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
                 {
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\<|/\/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\__|___/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\____/\",
                    @"\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/",
                    @"/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\",
                },
            };



            for (int i = 0; i < 44; i++) //For each 6 lines of sprite
            {
                Console.WriteLine(boatArray[i, 0] + "\n" + boatArray[i, 1] + "\n" + boatArray[i, 2] + "\n" + boatArray[i, 3] + "\n" + boatArray[i, 4] + "\n" + boatArray[i, 5]);
                if (i < 43)
                {
                    Thread.Sleep(300);
                    Console.Clear();
                }
                else if (i == 43)
                {
                    Thread.Sleep(800);
                    Console.Clear();
                }
            }
            Thread.Sleep(1000);
            Console.Clear();
        }

        static ConsoleColor getRandomColor()
        {
            Random rand = new Random();
            {
                var consoleColors = Enum.GetValues(typeof(ConsoleColor));
                return (ConsoleColor)consoleColors.GetValue(rand.Next(consoleColors.Length));
            }
        }

        public void DiscoRoom()
        {
            while (!Console.KeyAvailable)
            {
                Console.Clear();
                Console.BackgroundColor = getRandomColor();
                Thread.Sleep(80);
            }
            if (Console.ReadKey(true).Key != ConsoleKey.Escape)
            {
                Console.BackgroundColor = ConsoleColor.Black;
                Console.Clear();
            }
        }

        public void summonCthulhu()
        {
            Console.ForegroundColor = foregroundColour;
            WriteLineText("Cthulhu was summoned... ");
            Console.ReadLine();
            WriteLineText("...");
            Console.ReadLine();
            WriteLineText("...");
            Console.ReadLine();
            WriteLineText("A mere adventurer like you cannot handle Cthulhu's might");
            Console.ReadLine();
            WriteLineText("");
        }

    }
}